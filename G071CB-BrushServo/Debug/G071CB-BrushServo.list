
G071CB-BrushServo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000980c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  080098c8  080098c8  000198c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b4c  08009b4c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08009b4c  08009b4c  00019b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b54  08009b54  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08009b54  08009b54  00019b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08009b60  08009b60  00019b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08009b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b94  20000060  08009bcc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bf4  08009bcc  00020bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a771  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043b6  00000000  00000000  0003a83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  0003ebf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd1  00000000  00000000  00040068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bdce  00000000  00000000  00041039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a259  00000000  00000000  0005ce07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ab5a5  00000000  00000000  00077060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fbc  00000000  00000000  00122608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  001275c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000060 	.word	0x20000060
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080098b0 	.word	0x080098b0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000064 	.word	0x20000064
 8000100:	080098b0 	.word	0x080098b0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cfrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0008      	movs	r0, r1
 80003f4:	4661      	mov	r1, ip
 80003f6:	e7ff      	b.n	80003f8 <__aeabi_cfcmpeq>

080003f8 <__aeabi_cfcmpeq>:
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fa:	f000 fc5d 	bl	8000cb8 <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d401      	bmi.n	8000406 <__aeabi_cfcmpeq+0xe>
 8000402:	2100      	movs	r1, #0
 8000404:	42c8      	cmn	r0, r1
 8000406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000408 <__aeabi_fcmpeq>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f000 fbe9 	bl	8000be0 <__eqsf2>
 800040e:	4240      	negs	r0, r0
 8000410:	3001      	adds	r0, #1
 8000412:	bd10      	pop	{r4, pc}

08000414 <__aeabi_fcmplt>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fc4f 	bl	8000cb8 <__lesf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fcmplt+0xe>
 800041e:	2000      	movs	r0, #0
 8000420:	bd10      	pop	{r4, pc}
 8000422:	2001      	movs	r0, #1
 8000424:	bd10      	pop	{r4, pc}
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_fcmple>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fc45 	bl	8000cb8 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	dd01      	ble.n	8000436 <__aeabi_fcmple+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmpgt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fbf5 	bl	8000c2c <__gesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dc01      	bgt.n	800044a <__aeabi_fcmpgt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpge>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fbeb 	bl	8000c2c <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	da01      	bge.n	800045e <__aeabi_fcmpge+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_uldivmod>:
 8000464:	2b00      	cmp	r3, #0
 8000466:	d111      	bne.n	800048c <__aeabi_uldivmod+0x28>
 8000468:	2a00      	cmp	r2, #0
 800046a:	d10f      	bne.n	800048c <__aeabi_uldivmod+0x28>
 800046c:	2900      	cmp	r1, #0
 800046e:	d100      	bne.n	8000472 <__aeabi_uldivmod+0xe>
 8000470:	2800      	cmp	r0, #0
 8000472:	d002      	beq.n	800047a <__aeabi_uldivmod+0x16>
 8000474:	2100      	movs	r1, #0
 8000476:	43c9      	mvns	r1, r1
 8000478:	0008      	movs	r0, r1
 800047a:	b407      	push	{r0, r1, r2}
 800047c:	4802      	ldr	r0, [pc, #8]	; (8000488 <__aeabi_uldivmod+0x24>)
 800047e:	a102      	add	r1, pc, #8	; (adr r1, 8000488 <__aeabi_uldivmod+0x24>)
 8000480:	1840      	adds	r0, r0, r1
 8000482:	9002      	str	r0, [sp, #8]
 8000484:	bd03      	pop	{r0, r1, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	ffffff65 	.word	0xffffff65
 800048c:	b403      	push	{r0, r1}
 800048e:	4668      	mov	r0, sp
 8000490:	b501      	push	{r0, lr}
 8000492:	9802      	ldr	r0, [sp, #8]
 8000494:	f000 f81e 	bl	80004d4 <__udivmoddi4>
 8000498:	9b01      	ldr	r3, [sp, #4]
 800049a:	469e      	mov	lr, r3
 800049c:	b002      	add	sp, #8
 800049e:	bc0c      	pop	{r2, r3}
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_f2uiz>:
 80004a4:	219e      	movs	r1, #158	; 0x9e
 80004a6:	b510      	push	{r4, lr}
 80004a8:	05c9      	lsls	r1, r1, #23
 80004aa:	1c04      	adds	r4, r0, #0
 80004ac:	f7ff ffd0 	bl	8000450 <__aeabi_fcmpge>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d103      	bne.n	80004bc <__aeabi_f2uiz+0x18>
 80004b4:	1c20      	adds	r0, r4, #0
 80004b6:	f000 ff31 	bl	800131c <__aeabi_f2iz>
 80004ba:	bd10      	pop	{r4, pc}
 80004bc:	219e      	movs	r1, #158	; 0x9e
 80004be:	1c20      	adds	r0, r4, #0
 80004c0:	05c9      	lsls	r1, r1, #23
 80004c2:	f000 fd8b 	bl	8000fdc <__aeabi_fsub>
 80004c6:	f000 ff29 	bl	800131c <__aeabi_f2iz>
 80004ca:	2380      	movs	r3, #128	; 0x80
 80004cc:	061b      	lsls	r3, r3, #24
 80004ce:	469c      	mov	ip, r3
 80004d0:	4460      	add	r0, ip
 80004d2:	e7f2      	b.n	80004ba <__aeabi_f2uiz+0x16>

080004d4 <__udivmoddi4>:
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	4657      	mov	r7, sl
 80004d8:	464e      	mov	r6, r9
 80004da:	4645      	mov	r5, r8
 80004dc:	46de      	mov	lr, fp
 80004de:	b5e0      	push	{r5, r6, r7, lr}
 80004e0:	0004      	movs	r4, r0
 80004e2:	000d      	movs	r5, r1
 80004e4:	4692      	mov	sl, r2
 80004e6:	4699      	mov	r9, r3
 80004e8:	b083      	sub	sp, #12
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d830      	bhi.n	8000550 <__udivmoddi4+0x7c>
 80004ee:	d02d      	beq.n	800054c <__udivmoddi4+0x78>
 80004f0:	4649      	mov	r1, r9
 80004f2:	4650      	mov	r0, sl
 80004f4:	f001 fb62 	bl	8001bbc <__clzdi2>
 80004f8:	0029      	movs	r1, r5
 80004fa:	0006      	movs	r6, r0
 80004fc:	0020      	movs	r0, r4
 80004fe:	f001 fb5d 	bl	8001bbc <__clzdi2>
 8000502:	1a33      	subs	r3, r6, r0
 8000504:	4698      	mov	r8, r3
 8000506:	3b20      	subs	r3, #32
 8000508:	d434      	bmi.n	8000574 <__udivmoddi4+0xa0>
 800050a:	469b      	mov	fp, r3
 800050c:	4653      	mov	r3, sl
 800050e:	465a      	mov	r2, fp
 8000510:	4093      	lsls	r3, r2
 8000512:	4642      	mov	r2, r8
 8000514:	001f      	movs	r7, r3
 8000516:	4653      	mov	r3, sl
 8000518:	4093      	lsls	r3, r2
 800051a:	001e      	movs	r6, r3
 800051c:	42af      	cmp	r7, r5
 800051e:	d83b      	bhi.n	8000598 <__udivmoddi4+0xc4>
 8000520:	42af      	cmp	r7, r5
 8000522:	d100      	bne.n	8000526 <__udivmoddi4+0x52>
 8000524:	e079      	b.n	800061a <__udivmoddi4+0x146>
 8000526:	465b      	mov	r3, fp
 8000528:	1ba4      	subs	r4, r4, r6
 800052a:	41bd      	sbcs	r5, r7
 800052c:	2b00      	cmp	r3, #0
 800052e:	da00      	bge.n	8000532 <__udivmoddi4+0x5e>
 8000530:	e076      	b.n	8000620 <__udivmoddi4+0x14c>
 8000532:	2200      	movs	r2, #0
 8000534:	2300      	movs	r3, #0
 8000536:	9200      	str	r2, [sp, #0]
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2301      	movs	r3, #1
 800053c:	465a      	mov	r2, fp
 800053e:	4093      	lsls	r3, r2
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	2301      	movs	r3, #1
 8000544:	4642      	mov	r2, r8
 8000546:	4093      	lsls	r3, r2
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	e029      	b.n	80005a0 <__udivmoddi4+0xcc>
 800054c:	4282      	cmp	r2, r0
 800054e:	d9cf      	bls.n	80004f0 <__udivmoddi4+0x1c>
 8000550:	2200      	movs	r2, #0
 8000552:	2300      	movs	r3, #0
 8000554:	9200      	str	r2, [sp, #0]
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <__udivmoddi4+0x8e>
 800055e:	601c      	str	r4, [r3, #0]
 8000560:	605d      	str	r5, [r3, #4]
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	b003      	add	sp, #12
 8000568:	bcf0      	pop	{r4, r5, r6, r7}
 800056a:	46bb      	mov	fp, r7
 800056c:	46b2      	mov	sl, r6
 800056e:	46a9      	mov	r9, r5
 8000570:	46a0      	mov	r8, r4
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000574:	4642      	mov	r2, r8
 8000576:	469b      	mov	fp, r3
 8000578:	2320      	movs	r3, #32
 800057a:	1a9b      	subs	r3, r3, r2
 800057c:	4652      	mov	r2, sl
 800057e:	40da      	lsrs	r2, r3
 8000580:	4641      	mov	r1, r8
 8000582:	0013      	movs	r3, r2
 8000584:	464a      	mov	r2, r9
 8000586:	408a      	lsls	r2, r1
 8000588:	0017      	movs	r7, r2
 800058a:	4642      	mov	r2, r8
 800058c:	431f      	orrs	r7, r3
 800058e:	4653      	mov	r3, sl
 8000590:	4093      	lsls	r3, r2
 8000592:	001e      	movs	r6, r3
 8000594:	42af      	cmp	r7, r5
 8000596:	d9c3      	bls.n	8000520 <__udivmoddi4+0x4c>
 8000598:	2200      	movs	r2, #0
 800059a:	2300      	movs	r3, #0
 800059c:	9200      	str	r2, [sp, #0]
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	4643      	mov	r3, r8
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0d8      	beq.n	8000558 <__udivmoddi4+0x84>
 80005a6:	07fb      	lsls	r3, r7, #31
 80005a8:	0872      	lsrs	r2, r6, #1
 80005aa:	431a      	orrs	r2, r3
 80005ac:	4646      	mov	r6, r8
 80005ae:	087b      	lsrs	r3, r7, #1
 80005b0:	e00e      	b.n	80005d0 <__udivmoddi4+0xfc>
 80005b2:	42ab      	cmp	r3, r5
 80005b4:	d101      	bne.n	80005ba <__udivmoddi4+0xe6>
 80005b6:	42a2      	cmp	r2, r4
 80005b8:	d80c      	bhi.n	80005d4 <__udivmoddi4+0x100>
 80005ba:	1aa4      	subs	r4, r4, r2
 80005bc:	419d      	sbcs	r5, r3
 80005be:	2001      	movs	r0, #1
 80005c0:	1924      	adds	r4, r4, r4
 80005c2:	416d      	adcs	r5, r5
 80005c4:	2100      	movs	r1, #0
 80005c6:	3e01      	subs	r6, #1
 80005c8:	1824      	adds	r4, r4, r0
 80005ca:	414d      	adcs	r5, r1
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d006      	beq.n	80005de <__udivmoddi4+0x10a>
 80005d0:	42ab      	cmp	r3, r5
 80005d2:	d9ee      	bls.n	80005b2 <__udivmoddi4+0xde>
 80005d4:	3e01      	subs	r6, #1
 80005d6:	1924      	adds	r4, r4, r4
 80005d8:	416d      	adcs	r5, r5
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d1f8      	bne.n	80005d0 <__udivmoddi4+0xfc>
 80005de:	9800      	ldr	r0, [sp, #0]
 80005e0:	9901      	ldr	r1, [sp, #4]
 80005e2:	465b      	mov	r3, fp
 80005e4:	1900      	adds	r0, r0, r4
 80005e6:	4169      	adcs	r1, r5
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	db24      	blt.n	8000636 <__udivmoddi4+0x162>
 80005ec:	002b      	movs	r3, r5
 80005ee:	465a      	mov	r2, fp
 80005f0:	4644      	mov	r4, r8
 80005f2:	40d3      	lsrs	r3, r2
 80005f4:	002a      	movs	r2, r5
 80005f6:	40e2      	lsrs	r2, r4
 80005f8:	001c      	movs	r4, r3
 80005fa:	465b      	mov	r3, fp
 80005fc:	0015      	movs	r5, r2
 80005fe:	2b00      	cmp	r3, #0
 8000600:	db2a      	blt.n	8000658 <__udivmoddi4+0x184>
 8000602:	0026      	movs	r6, r4
 8000604:	409e      	lsls	r6, r3
 8000606:	0033      	movs	r3, r6
 8000608:	0026      	movs	r6, r4
 800060a:	4647      	mov	r7, r8
 800060c:	40be      	lsls	r6, r7
 800060e:	0032      	movs	r2, r6
 8000610:	1a80      	subs	r0, r0, r2
 8000612:	4199      	sbcs	r1, r3
 8000614:	9000      	str	r0, [sp, #0]
 8000616:	9101      	str	r1, [sp, #4]
 8000618:	e79e      	b.n	8000558 <__udivmoddi4+0x84>
 800061a:	42a3      	cmp	r3, r4
 800061c:	d8bc      	bhi.n	8000598 <__udivmoddi4+0xc4>
 800061e:	e782      	b.n	8000526 <__udivmoddi4+0x52>
 8000620:	4642      	mov	r2, r8
 8000622:	2320      	movs	r3, #32
 8000624:	2100      	movs	r1, #0
 8000626:	1a9b      	subs	r3, r3, r2
 8000628:	2200      	movs	r2, #0
 800062a:	9100      	str	r1, [sp, #0]
 800062c:	9201      	str	r2, [sp, #4]
 800062e:	2201      	movs	r2, #1
 8000630:	40da      	lsrs	r2, r3
 8000632:	9201      	str	r2, [sp, #4]
 8000634:	e785      	b.n	8000542 <__udivmoddi4+0x6e>
 8000636:	4642      	mov	r2, r8
 8000638:	2320      	movs	r3, #32
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	002a      	movs	r2, r5
 800063e:	4646      	mov	r6, r8
 8000640:	409a      	lsls	r2, r3
 8000642:	0023      	movs	r3, r4
 8000644:	40f3      	lsrs	r3, r6
 8000646:	4644      	mov	r4, r8
 8000648:	4313      	orrs	r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	40e2      	lsrs	r2, r4
 800064e:	001c      	movs	r4, r3
 8000650:	465b      	mov	r3, fp
 8000652:	0015      	movs	r5, r2
 8000654:	2b00      	cmp	r3, #0
 8000656:	dad4      	bge.n	8000602 <__udivmoddi4+0x12e>
 8000658:	4642      	mov	r2, r8
 800065a:	002f      	movs	r7, r5
 800065c:	2320      	movs	r3, #32
 800065e:	0026      	movs	r6, r4
 8000660:	4097      	lsls	r7, r2
 8000662:	1a9b      	subs	r3, r3, r2
 8000664:	40de      	lsrs	r6, r3
 8000666:	003b      	movs	r3, r7
 8000668:	4333      	orrs	r3, r6
 800066a:	e7cd      	b.n	8000608 <__udivmoddi4+0x134>

0800066c <__aeabi_fadd>:
 800066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066e:	4647      	mov	r7, r8
 8000670:	46ce      	mov	lr, r9
 8000672:	024a      	lsls	r2, r1, #9
 8000674:	0243      	lsls	r3, r0, #9
 8000676:	0045      	lsls	r5, r0, #1
 8000678:	0fc4      	lsrs	r4, r0, #31
 800067a:	0a50      	lsrs	r0, r2, #9
 800067c:	4680      	mov	r8, r0
 800067e:	0048      	lsls	r0, r1, #1
 8000680:	0a5b      	lsrs	r3, r3, #9
 8000682:	0e00      	lsrs	r0, r0, #24
 8000684:	0992      	lsrs	r2, r2, #6
 8000686:	4694      	mov	ip, r2
 8000688:	b580      	push	{r7, lr}
 800068a:	001e      	movs	r6, r3
 800068c:	4681      	mov	r9, r0
 800068e:	0002      	movs	r2, r0
 8000690:	0e2d      	lsrs	r5, r5, #24
 8000692:	00df      	lsls	r7, r3, #3
 8000694:	0fc9      	lsrs	r1, r1, #31
 8000696:	428c      	cmp	r4, r1
 8000698:	d024      	beq.n	80006e4 <__aeabi_fadd+0x78>
 800069a:	1a28      	subs	r0, r5, r0
 800069c:	2800      	cmp	r0, #0
 800069e:	dd0e      	ble.n	80006be <__aeabi_fadd+0x52>
 80006a0:	2a00      	cmp	r2, #0
 80006a2:	d13e      	bne.n	8000722 <__aeabi_fadd+0xb6>
 80006a4:	4662      	mov	r2, ip
 80006a6:	2a00      	cmp	r2, #0
 80006a8:	d100      	bne.n	80006ac <__aeabi_fadd+0x40>
 80006aa:	e0fd      	b.n	80008a8 <__aeabi_fadd+0x23c>
 80006ac:	1e42      	subs	r2, r0, #1
 80006ae:	2801      	cmp	r0, #1
 80006b0:	d100      	bne.n	80006b4 <__aeabi_fadd+0x48>
 80006b2:	e137      	b.n	8000924 <__aeabi_fadd+0x2b8>
 80006b4:	28ff      	cmp	r0, #255	; 0xff
 80006b6:	d100      	bne.n	80006ba <__aeabi_fadd+0x4e>
 80006b8:	e0a9      	b.n	800080e <__aeabi_fadd+0x1a2>
 80006ba:	0010      	movs	r0, r2
 80006bc:	e039      	b.n	8000732 <__aeabi_fadd+0xc6>
 80006be:	2800      	cmp	r0, #0
 80006c0:	d063      	beq.n	800078a <__aeabi_fadd+0x11e>
 80006c2:	464b      	mov	r3, r9
 80006c4:	1b52      	subs	r2, r2, r5
 80006c6:	2d00      	cmp	r5, #0
 80006c8:	d000      	beq.n	80006cc <__aeabi_fadd+0x60>
 80006ca:	e0e0      	b.n	800088e <__aeabi_fadd+0x222>
 80006cc:	2f00      	cmp	r7, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_fadd+0x66>
 80006d0:	e0ce      	b.n	8000870 <__aeabi_fadd+0x204>
 80006d2:	1e53      	subs	r3, r2, #1
 80006d4:	2a01      	cmp	r2, #1
 80006d6:	d100      	bne.n	80006da <__aeabi_fadd+0x6e>
 80006d8:	e155      	b.n	8000986 <__aeabi_fadd+0x31a>
 80006da:	2aff      	cmp	r2, #255	; 0xff
 80006dc:	d100      	bne.n	80006e0 <__aeabi_fadd+0x74>
 80006de:	e094      	b.n	800080a <__aeabi_fadd+0x19e>
 80006e0:	001a      	movs	r2, r3
 80006e2:	e0d9      	b.n	8000898 <__aeabi_fadd+0x22c>
 80006e4:	1a2a      	subs	r2, r5, r0
 80006e6:	2a00      	cmp	r2, #0
 80006e8:	dc00      	bgt.n	80006ec <__aeabi_fadd+0x80>
 80006ea:	e099      	b.n	8000820 <__aeabi_fadd+0x1b4>
 80006ec:	2800      	cmp	r0, #0
 80006ee:	d062      	beq.n	80007b6 <__aeabi_fadd+0x14a>
 80006f0:	2dff      	cmp	r5, #255	; 0xff
 80006f2:	d100      	bne.n	80006f6 <__aeabi_fadd+0x8a>
 80006f4:	e08b      	b.n	800080e <__aeabi_fadd+0x1a2>
 80006f6:	2380      	movs	r3, #128	; 0x80
 80006f8:	4661      	mov	r1, ip
 80006fa:	04db      	lsls	r3, r3, #19
 80006fc:	4319      	orrs	r1, r3
 80006fe:	468c      	mov	ip, r1
 8000700:	2a1b      	cmp	r2, #27
 8000702:	dc00      	bgt.n	8000706 <__aeabi_fadd+0x9a>
 8000704:	e0d2      	b.n	80008ac <__aeabi_fadd+0x240>
 8000706:	2301      	movs	r3, #1
 8000708:	19db      	adds	r3, r3, r7
 800070a:	015a      	lsls	r2, r3, #5
 800070c:	d56a      	bpl.n	80007e4 <__aeabi_fadd+0x178>
 800070e:	3501      	adds	r5, #1
 8000710:	2dff      	cmp	r5, #255	; 0xff
 8000712:	d05b      	beq.n	80007cc <__aeabi_fadd+0x160>
 8000714:	2201      	movs	r2, #1
 8000716:	49a3      	ldr	r1, [pc, #652]	; (80009a4 <__aeabi_fadd+0x338>)
 8000718:	401a      	ands	r2, r3
 800071a:	085b      	lsrs	r3, r3, #1
 800071c:	400b      	ands	r3, r1
 800071e:	4313      	orrs	r3, r2
 8000720:	e01c      	b.n	800075c <__aeabi_fadd+0xf0>
 8000722:	2dff      	cmp	r5, #255	; 0xff
 8000724:	d100      	bne.n	8000728 <__aeabi_fadd+0xbc>
 8000726:	e072      	b.n	800080e <__aeabi_fadd+0x1a2>
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	4662      	mov	r2, ip
 800072c:	04db      	lsls	r3, r3, #19
 800072e:	431a      	orrs	r2, r3
 8000730:	4694      	mov	ip, r2
 8000732:	281b      	cmp	r0, #27
 8000734:	dc00      	bgt.n	8000738 <__aeabi_fadd+0xcc>
 8000736:	e090      	b.n	800085a <__aeabi_fadd+0x1ee>
 8000738:	2301      	movs	r3, #1
 800073a:	1afb      	subs	r3, r7, r3
 800073c:	015a      	lsls	r2, r3, #5
 800073e:	d551      	bpl.n	80007e4 <__aeabi_fadd+0x178>
 8000740:	019b      	lsls	r3, r3, #6
 8000742:	099e      	lsrs	r6, r3, #6
 8000744:	0030      	movs	r0, r6
 8000746:	f001 fa1b 	bl	8001b80 <__clzsi2>
 800074a:	0033      	movs	r3, r6
 800074c:	3805      	subs	r0, #5
 800074e:	4083      	lsls	r3, r0
 8000750:	4285      	cmp	r5, r0
 8000752:	dc00      	bgt.n	8000756 <__aeabi_fadd+0xea>
 8000754:	e075      	b.n	8000842 <__aeabi_fadd+0x1d6>
 8000756:	4a94      	ldr	r2, [pc, #592]	; (80009a8 <__aeabi_fadd+0x33c>)
 8000758:	1a2d      	subs	r5, r5, r0
 800075a:	4013      	ands	r3, r2
 800075c:	075a      	lsls	r2, r3, #29
 800075e:	d004      	beq.n	800076a <__aeabi_fadd+0xfe>
 8000760:	220f      	movs	r2, #15
 8000762:	401a      	ands	r2, r3
 8000764:	2a04      	cmp	r2, #4
 8000766:	d000      	beq.n	800076a <__aeabi_fadd+0xfe>
 8000768:	3304      	adds	r3, #4
 800076a:	015a      	lsls	r2, r3, #5
 800076c:	d53c      	bpl.n	80007e8 <__aeabi_fadd+0x17c>
 800076e:	1c68      	adds	r0, r5, #1
 8000770:	2dfe      	cmp	r5, #254	; 0xfe
 8000772:	d02b      	beq.n	80007cc <__aeabi_fadd+0x160>
 8000774:	019b      	lsls	r3, r3, #6
 8000776:	0a5e      	lsrs	r6, r3, #9
 8000778:	b2c0      	uxtb	r0, r0
 800077a:	05c0      	lsls	r0, r0, #23
 800077c:	4330      	orrs	r0, r6
 800077e:	07e4      	lsls	r4, r4, #31
 8000780:	4320      	orrs	r0, r4
 8000782:	bcc0      	pop	{r6, r7}
 8000784:	46b9      	mov	r9, r7
 8000786:	46b0      	mov	r8, r6
 8000788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800078a:	20fe      	movs	r0, #254	; 0xfe
 800078c:	1c6a      	adds	r2, r5, #1
 800078e:	4210      	tst	r0, r2
 8000790:	d172      	bne.n	8000878 <__aeabi_fadd+0x20c>
 8000792:	2d00      	cmp	r5, #0
 8000794:	d000      	beq.n	8000798 <__aeabi_fadd+0x12c>
 8000796:	e0ae      	b.n	80008f6 <__aeabi_fadd+0x28a>
 8000798:	2f00      	cmp	r7, #0
 800079a:	d100      	bne.n	800079e <__aeabi_fadd+0x132>
 800079c:	e0ec      	b.n	8000978 <__aeabi_fadd+0x30c>
 800079e:	4663      	mov	r3, ip
 80007a0:	2000      	movs	r0, #0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d0e9      	beq.n	800077a <__aeabi_fadd+0x10e>
 80007a6:	1afb      	subs	r3, r7, r3
 80007a8:	015a      	lsls	r2, r3, #5
 80007aa:	d400      	bmi.n	80007ae <__aeabi_fadd+0x142>
 80007ac:	e0f3      	b.n	8000996 <__aeabi_fadd+0x32a>
 80007ae:	4663      	mov	r3, ip
 80007b0:	000c      	movs	r4, r1
 80007b2:	1bdb      	subs	r3, r3, r7
 80007b4:	e7d2      	b.n	800075c <__aeabi_fadd+0xf0>
 80007b6:	4661      	mov	r1, ip
 80007b8:	2900      	cmp	r1, #0
 80007ba:	d05b      	beq.n	8000874 <__aeabi_fadd+0x208>
 80007bc:	1e51      	subs	r1, r2, #1
 80007be:	2a01      	cmp	r2, #1
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fadd+0x158>
 80007c2:	e0a7      	b.n	8000914 <__aeabi_fadd+0x2a8>
 80007c4:	2aff      	cmp	r2, #255	; 0xff
 80007c6:	d022      	beq.n	800080e <__aeabi_fadd+0x1a2>
 80007c8:	000a      	movs	r2, r1
 80007ca:	e799      	b.n	8000700 <__aeabi_fadd+0x94>
 80007cc:	20ff      	movs	r0, #255	; 0xff
 80007ce:	2600      	movs	r6, #0
 80007d0:	e7d3      	b.n	800077a <__aeabi_fadd+0x10e>
 80007d2:	21fe      	movs	r1, #254	; 0xfe
 80007d4:	1c6a      	adds	r2, r5, #1
 80007d6:	4211      	tst	r1, r2
 80007d8:	d073      	beq.n	80008c2 <__aeabi_fadd+0x256>
 80007da:	2aff      	cmp	r2, #255	; 0xff
 80007dc:	d0f6      	beq.n	80007cc <__aeabi_fadd+0x160>
 80007de:	0015      	movs	r5, r2
 80007e0:	4467      	add	r7, ip
 80007e2:	087b      	lsrs	r3, r7, #1
 80007e4:	075a      	lsls	r2, r3, #29
 80007e6:	d1bb      	bne.n	8000760 <__aeabi_fadd+0xf4>
 80007e8:	08db      	lsrs	r3, r3, #3
 80007ea:	2dff      	cmp	r5, #255	; 0xff
 80007ec:	d00f      	beq.n	800080e <__aeabi_fadd+0x1a2>
 80007ee:	025b      	lsls	r3, r3, #9
 80007f0:	0a5e      	lsrs	r6, r3, #9
 80007f2:	b2e8      	uxtb	r0, r5
 80007f4:	e7c1      	b.n	800077a <__aeabi_fadd+0x10e>
 80007f6:	4662      	mov	r2, ip
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d008      	beq.n	800080e <__aeabi_fadd+0x1a2>
 80007fc:	2280      	movs	r2, #128	; 0x80
 80007fe:	03d2      	lsls	r2, r2, #15
 8000800:	4213      	tst	r3, r2
 8000802:	d004      	beq.n	800080e <__aeabi_fadd+0x1a2>
 8000804:	4640      	mov	r0, r8
 8000806:	4210      	tst	r0, r2
 8000808:	d101      	bne.n	800080e <__aeabi_fadd+0x1a2>
 800080a:	000c      	movs	r4, r1
 800080c:	4643      	mov	r3, r8
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0dc      	beq.n	80007cc <__aeabi_fadd+0x160>
 8000812:	2680      	movs	r6, #128	; 0x80
 8000814:	03f6      	lsls	r6, r6, #15
 8000816:	431e      	orrs	r6, r3
 8000818:	0276      	lsls	r6, r6, #9
 800081a:	20ff      	movs	r0, #255	; 0xff
 800081c:	0a76      	lsrs	r6, r6, #9
 800081e:	e7ac      	b.n	800077a <__aeabi_fadd+0x10e>
 8000820:	2a00      	cmp	r2, #0
 8000822:	d0d6      	beq.n	80007d2 <__aeabi_fadd+0x166>
 8000824:	1b42      	subs	r2, r0, r5
 8000826:	2d00      	cmp	r5, #0
 8000828:	d05c      	beq.n	80008e4 <__aeabi_fadd+0x278>
 800082a:	28ff      	cmp	r0, #255	; 0xff
 800082c:	d0ee      	beq.n	800080c <__aeabi_fadd+0x1a0>
 800082e:	2380      	movs	r3, #128	; 0x80
 8000830:	04db      	lsls	r3, r3, #19
 8000832:	431f      	orrs	r7, r3
 8000834:	2a1b      	cmp	r2, #27
 8000836:	dc00      	bgt.n	800083a <__aeabi_fadd+0x1ce>
 8000838:	e082      	b.n	8000940 <__aeabi_fadd+0x2d4>
 800083a:	2301      	movs	r3, #1
 800083c:	464d      	mov	r5, r9
 800083e:	4463      	add	r3, ip
 8000840:	e763      	b.n	800070a <__aeabi_fadd+0x9e>
 8000842:	2220      	movs	r2, #32
 8000844:	1b40      	subs	r0, r0, r5
 8000846:	3001      	adds	r0, #1
 8000848:	1a12      	subs	r2, r2, r0
 800084a:	0019      	movs	r1, r3
 800084c:	4093      	lsls	r3, r2
 800084e:	40c1      	lsrs	r1, r0
 8000850:	1e5a      	subs	r2, r3, #1
 8000852:	4193      	sbcs	r3, r2
 8000854:	2500      	movs	r5, #0
 8000856:	430b      	orrs	r3, r1
 8000858:	e780      	b.n	800075c <__aeabi_fadd+0xf0>
 800085a:	2320      	movs	r3, #32
 800085c:	4661      	mov	r1, ip
 800085e:	1a1b      	subs	r3, r3, r0
 8000860:	4099      	lsls	r1, r3
 8000862:	4662      	mov	r2, ip
 8000864:	000b      	movs	r3, r1
 8000866:	40c2      	lsrs	r2, r0
 8000868:	1e59      	subs	r1, r3, #1
 800086a:	418b      	sbcs	r3, r1
 800086c:	4313      	orrs	r3, r2
 800086e:	e764      	b.n	800073a <__aeabi_fadd+0xce>
 8000870:	000c      	movs	r4, r1
 8000872:	4643      	mov	r3, r8
 8000874:	0015      	movs	r5, r2
 8000876:	e7b8      	b.n	80007ea <__aeabi_fadd+0x17e>
 8000878:	4663      	mov	r3, ip
 800087a:	1afe      	subs	r6, r7, r3
 800087c:	0173      	lsls	r3, r6, #5
 800087e:	d445      	bmi.n	800090c <__aeabi_fadd+0x2a0>
 8000880:	2e00      	cmp	r6, #0
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0x21a>
 8000884:	e75e      	b.n	8000744 <__aeabi_fadd+0xd8>
 8000886:	2400      	movs	r4, #0
 8000888:	2000      	movs	r0, #0
 800088a:	2600      	movs	r6, #0
 800088c:	e775      	b.n	800077a <__aeabi_fadd+0x10e>
 800088e:	2bff      	cmp	r3, #255	; 0xff
 8000890:	d0bb      	beq.n	800080a <__aeabi_fadd+0x19e>
 8000892:	2380      	movs	r3, #128	; 0x80
 8000894:	04db      	lsls	r3, r3, #19
 8000896:	431f      	orrs	r7, r3
 8000898:	2a1b      	cmp	r2, #27
 800089a:	dd47      	ble.n	800092c <__aeabi_fadd+0x2c0>
 800089c:	2301      	movs	r3, #1
 800089e:	4662      	mov	r2, ip
 80008a0:	000c      	movs	r4, r1
 80008a2:	464d      	mov	r5, r9
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	e749      	b.n	800073c <__aeabi_fadd+0xd0>
 80008a8:	0005      	movs	r5, r0
 80008aa:	e79e      	b.n	80007ea <__aeabi_fadd+0x17e>
 80008ac:	4661      	mov	r1, ip
 80008ae:	2320      	movs	r3, #32
 80008b0:	40d1      	lsrs	r1, r2
 80008b2:	1a9b      	subs	r3, r3, r2
 80008b4:	4662      	mov	r2, ip
 80008b6:	409a      	lsls	r2, r3
 80008b8:	0013      	movs	r3, r2
 80008ba:	1e5a      	subs	r2, r3, #1
 80008bc:	4193      	sbcs	r3, r2
 80008be:	430b      	orrs	r3, r1
 80008c0:	e722      	b.n	8000708 <__aeabi_fadd+0x9c>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d146      	bne.n	8000954 <__aeabi_fadd+0x2e8>
 80008c6:	2f00      	cmp	r7, #0
 80008c8:	d062      	beq.n	8000990 <__aeabi_fadd+0x324>
 80008ca:	4663      	mov	r3, ip
 80008cc:	2000      	movs	r0, #0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d100      	bne.n	80008d4 <__aeabi_fadd+0x268>
 80008d2:	e752      	b.n	800077a <__aeabi_fadd+0x10e>
 80008d4:	003b      	movs	r3, r7
 80008d6:	4463      	add	r3, ip
 80008d8:	015a      	lsls	r2, r3, #5
 80008da:	d583      	bpl.n	80007e4 <__aeabi_fadd+0x178>
 80008dc:	4a32      	ldr	r2, [pc, #200]	; (80009a8 <__aeabi_fadd+0x33c>)
 80008de:	3501      	adds	r5, #1
 80008e0:	4013      	ands	r3, r2
 80008e2:	e77f      	b.n	80007e4 <__aeabi_fadd+0x178>
 80008e4:	2f00      	cmp	r7, #0
 80008e6:	d0c4      	beq.n	8000872 <__aeabi_fadd+0x206>
 80008e8:	1e53      	subs	r3, r2, #1
 80008ea:	2a01      	cmp	r2, #1
 80008ec:	d012      	beq.n	8000914 <__aeabi_fadd+0x2a8>
 80008ee:	2aff      	cmp	r2, #255	; 0xff
 80008f0:	d08c      	beq.n	800080c <__aeabi_fadd+0x1a0>
 80008f2:	001a      	movs	r2, r3
 80008f4:	e79e      	b.n	8000834 <__aeabi_fadd+0x1c8>
 80008f6:	2f00      	cmp	r7, #0
 80008f8:	d000      	beq.n	80008fc <__aeabi_fadd+0x290>
 80008fa:	e77c      	b.n	80007f6 <__aeabi_fadd+0x18a>
 80008fc:	4663      	mov	r3, ip
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d183      	bne.n	800080a <__aeabi_fadd+0x19e>
 8000902:	2680      	movs	r6, #128	; 0x80
 8000904:	2400      	movs	r4, #0
 8000906:	20ff      	movs	r0, #255	; 0xff
 8000908:	03f6      	lsls	r6, r6, #15
 800090a:	e736      	b.n	800077a <__aeabi_fadd+0x10e>
 800090c:	4663      	mov	r3, ip
 800090e:	000c      	movs	r4, r1
 8000910:	1bde      	subs	r6, r3, r7
 8000912:	e717      	b.n	8000744 <__aeabi_fadd+0xd8>
 8000914:	003b      	movs	r3, r7
 8000916:	4463      	add	r3, ip
 8000918:	2501      	movs	r5, #1
 800091a:	015a      	lsls	r2, r3, #5
 800091c:	d400      	bmi.n	8000920 <__aeabi_fadd+0x2b4>
 800091e:	e761      	b.n	80007e4 <__aeabi_fadd+0x178>
 8000920:	2502      	movs	r5, #2
 8000922:	e6f7      	b.n	8000714 <__aeabi_fadd+0xa8>
 8000924:	4663      	mov	r3, ip
 8000926:	2501      	movs	r5, #1
 8000928:	1afb      	subs	r3, r7, r3
 800092a:	e707      	b.n	800073c <__aeabi_fadd+0xd0>
 800092c:	2320      	movs	r3, #32
 800092e:	1a9b      	subs	r3, r3, r2
 8000930:	0038      	movs	r0, r7
 8000932:	409f      	lsls	r7, r3
 8000934:	003b      	movs	r3, r7
 8000936:	40d0      	lsrs	r0, r2
 8000938:	1e5a      	subs	r2, r3, #1
 800093a:	4193      	sbcs	r3, r2
 800093c:	4303      	orrs	r3, r0
 800093e:	e7ae      	b.n	800089e <__aeabi_fadd+0x232>
 8000940:	2320      	movs	r3, #32
 8000942:	1a9b      	subs	r3, r3, r2
 8000944:	0039      	movs	r1, r7
 8000946:	409f      	lsls	r7, r3
 8000948:	003b      	movs	r3, r7
 800094a:	40d1      	lsrs	r1, r2
 800094c:	1e5a      	subs	r2, r3, #1
 800094e:	4193      	sbcs	r3, r2
 8000950:	430b      	orrs	r3, r1
 8000952:	e773      	b.n	800083c <__aeabi_fadd+0x1d0>
 8000954:	2f00      	cmp	r7, #0
 8000956:	d100      	bne.n	800095a <__aeabi_fadd+0x2ee>
 8000958:	e758      	b.n	800080c <__aeabi_fadd+0x1a0>
 800095a:	4662      	mov	r2, ip
 800095c:	2a00      	cmp	r2, #0
 800095e:	d100      	bne.n	8000962 <__aeabi_fadd+0x2f6>
 8000960:	e755      	b.n	800080e <__aeabi_fadd+0x1a2>
 8000962:	2280      	movs	r2, #128	; 0x80
 8000964:	03d2      	lsls	r2, r2, #15
 8000966:	4213      	tst	r3, r2
 8000968:	d100      	bne.n	800096c <__aeabi_fadd+0x300>
 800096a:	e750      	b.n	800080e <__aeabi_fadd+0x1a2>
 800096c:	4641      	mov	r1, r8
 800096e:	4211      	tst	r1, r2
 8000970:	d000      	beq.n	8000974 <__aeabi_fadd+0x308>
 8000972:	e74c      	b.n	800080e <__aeabi_fadd+0x1a2>
 8000974:	4643      	mov	r3, r8
 8000976:	e74a      	b.n	800080e <__aeabi_fadd+0x1a2>
 8000978:	4663      	mov	r3, ip
 800097a:	2b00      	cmp	r3, #0
 800097c:	d083      	beq.n	8000886 <__aeabi_fadd+0x21a>
 800097e:	000c      	movs	r4, r1
 8000980:	4646      	mov	r6, r8
 8000982:	2000      	movs	r0, #0
 8000984:	e6f9      	b.n	800077a <__aeabi_fadd+0x10e>
 8000986:	4663      	mov	r3, ip
 8000988:	000c      	movs	r4, r1
 800098a:	1bdb      	subs	r3, r3, r7
 800098c:	3501      	adds	r5, #1
 800098e:	e6d5      	b.n	800073c <__aeabi_fadd+0xd0>
 8000990:	4646      	mov	r6, r8
 8000992:	2000      	movs	r0, #0
 8000994:	e6f1      	b.n	800077a <__aeabi_fadd+0x10e>
 8000996:	2b00      	cmp	r3, #0
 8000998:	d000      	beq.n	800099c <__aeabi_fadd+0x330>
 800099a:	e723      	b.n	80007e4 <__aeabi_fadd+0x178>
 800099c:	2400      	movs	r4, #0
 800099e:	2600      	movs	r6, #0
 80009a0:	e6eb      	b.n	800077a <__aeabi_fadd+0x10e>
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	7dffffff 	.word	0x7dffffff
 80009a8:	fbffffff 	.word	0xfbffffff

080009ac <__aeabi_fdiv>:
 80009ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ae:	464f      	mov	r7, r9
 80009b0:	4646      	mov	r6, r8
 80009b2:	46d6      	mov	lr, sl
 80009b4:	0245      	lsls	r5, r0, #9
 80009b6:	b5c0      	push	{r6, r7, lr}
 80009b8:	0047      	lsls	r7, r0, #1
 80009ba:	1c0c      	adds	r4, r1, #0
 80009bc:	0a6d      	lsrs	r5, r5, #9
 80009be:	0e3f      	lsrs	r7, r7, #24
 80009c0:	0fc6      	lsrs	r6, r0, #31
 80009c2:	2f00      	cmp	r7, #0
 80009c4:	d100      	bne.n	80009c8 <__aeabi_fdiv+0x1c>
 80009c6:	e06f      	b.n	8000aa8 <__aeabi_fdiv+0xfc>
 80009c8:	2fff      	cmp	r7, #255	; 0xff
 80009ca:	d100      	bne.n	80009ce <__aeabi_fdiv+0x22>
 80009cc:	e074      	b.n	8000ab8 <__aeabi_fdiv+0x10c>
 80009ce:	2300      	movs	r3, #0
 80009d0:	2280      	movs	r2, #128	; 0x80
 80009d2:	4699      	mov	r9, r3
 80009d4:	469a      	mov	sl, r3
 80009d6:	00ed      	lsls	r5, r5, #3
 80009d8:	04d2      	lsls	r2, r2, #19
 80009da:	4315      	orrs	r5, r2
 80009dc:	3f7f      	subs	r7, #127	; 0x7f
 80009de:	0263      	lsls	r3, r4, #9
 80009e0:	0a5b      	lsrs	r3, r3, #9
 80009e2:	4698      	mov	r8, r3
 80009e4:	0063      	lsls	r3, r4, #1
 80009e6:	0e1b      	lsrs	r3, r3, #24
 80009e8:	0fe4      	lsrs	r4, r4, #31
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d04d      	beq.n	8000a8a <__aeabi_fdiv+0xde>
 80009ee:	2bff      	cmp	r3, #255	; 0xff
 80009f0:	d045      	beq.n	8000a7e <__aeabi_fdiv+0xd2>
 80009f2:	4642      	mov	r2, r8
 80009f4:	2180      	movs	r1, #128	; 0x80
 80009f6:	00d2      	lsls	r2, r2, #3
 80009f8:	04c9      	lsls	r1, r1, #19
 80009fa:	4311      	orrs	r1, r2
 80009fc:	4688      	mov	r8, r1
 80009fe:	2200      	movs	r2, #0
 8000a00:	3b7f      	subs	r3, #127	; 0x7f
 8000a02:	0031      	movs	r1, r6
 8000a04:	1aff      	subs	r7, r7, r3
 8000a06:	464b      	mov	r3, r9
 8000a08:	4061      	eors	r1, r4
 8000a0a:	b2c9      	uxtb	r1, r1
 8000a0c:	2b0f      	cmp	r3, #15
 8000a0e:	d900      	bls.n	8000a12 <__aeabi_fdiv+0x66>
 8000a10:	e0b8      	b.n	8000b84 <__aeabi_fdiv+0x1d8>
 8000a12:	4870      	ldr	r0, [pc, #448]	; (8000bd4 <__aeabi_fdiv+0x228>)
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	58c3      	ldr	r3, [r0, r3]
 8000a18:	469f      	mov	pc, r3
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	4698      	mov	r8, r3
 8000a1e:	0026      	movs	r6, r4
 8000a20:	4645      	mov	r5, r8
 8000a22:	4692      	mov	sl, r2
 8000a24:	4653      	mov	r3, sl
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d100      	bne.n	8000a2c <__aeabi_fdiv+0x80>
 8000a2a:	e08d      	b.n	8000b48 <__aeabi_fdiv+0x19c>
 8000a2c:	2b03      	cmp	r3, #3
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_fdiv+0x86>
 8000a30:	e0a1      	b.n	8000b76 <__aeabi_fdiv+0x1ca>
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d018      	beq.n	8000a68 <__aeabi_fdiv+0xbc>
 8000a36:	003b      	movs	r3, r7
 8000a38:	337f      	adds	r3, #127	; 0x7f
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	dd6d      	ble.n	8000b1a <__aeabi_fdiv+0x16e>
 8000a3e:	076a      	lsls	r2, r5, #29
 8000a40:	d004      	beq.n	8000a4c <__aeabi_fdiv+0xa0>
 8000a42:	220f      	movs	r2, #15
 8000a44:	402a      	ands	r2, r5
 8000a46:	2a04      	cmp	r2, #4
 8000a48:	d000      	beq.n	8000a4c <__aeabi_fdiv+0xa0>
 8000a4a:	3504      	adds	r5, #4
 8000a4c:	012a      	lsls	r2, r5, #4
 8000a4e:	d503      	bpl.n	8000a58 <__aeabi_fdiv+0xac>
 8000a50:	4b61      	ldr	r3, [pc, #388]	; (8000bd8 <__aeabi_fdiv+0x22c>)
 8000a52:	401d      	ands	r5, r3
 8000a54:	003b      	movs	r3, r7
 8000a56:	3380      	adds	r3, #128	; 0x80
 8000a58:	2bfe      	cmp	r3, #254	; 0xfe
 8000a5a:	dd00      	ble.n	8000a5e <__aeabi_fdiv+0xb2>
 8000a5c:	e074      	b.n	8000b48 <__aeabi_fdiv+0x19c>
 8000a5e:	01aa      	lsls	r2, r5, #6
 8000a60:	0a52      	lsrs	r2, r2, #9
 8000a62:	b2d8      	uxtb	r0, r3
 8000a64:	e002      	b.n	8000a6c <__aeabi_fdiv+0xc0>
 8000a66:	000e      	movs	r6, r1
 8000a68:	2000      	movs	r0, #0
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	05c0      	lsls	r0, r0, #23
 8000a6e:	07f6      	lsls	r6, r6, #31
 8000a70:	4310      	orrs	r0, r2
 8000a72:	4330      	orrs	r0, r6
 8000a74:	bce0      	pop	{r5, r6, r7}
 8000a76:	46ba      	mov	sl, r7
 8000a78:	46b1      	mov	r9, r6
 8000a7a:	46a8      	mov	r8, r5
 8000a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a7e:	4643      	mov	r3, r8
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d13f      	bne.n	8000b04 <__aeabi_fdiv+0x158>
 8000a84:	2202      	movs	r2, #2
 8000a86:	3fff      	subs	r7, #255	; 0xff
 8000a88:	e003      	b.n	8000a92 <__aeabi_fdiv+0xe6>
 8000a8a:	4643      	mov	r3, r8
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d12d      	bne.n	8000aec <__aeabi_fdiv+0x140>
 8000a90:	2201      	movs	r2, #1
 8000a92:	0031      	movs	r1, r6
 8000a94:	464b      	mov	r3, r9
 8000a96:	4061      	eors	r1, r4
 8000a98:	b2c9      	uxtb	r1, r1
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	d838      	bhi.n	8000b12 <__aeabi_fdiv+0x166>
 8000aa0:	484e      	ldr	r0, [pc, #312]	; (8000bdc <__aeabi_fdiv+0x230>)
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	58c3      	ldr	r3, [r0, r3]
 8000aa6:	469f      	mov	pc, r3
 8000aa8:	2d00      	cmp	r5, #0
 8000aaa:	d113      	bne.n	8000ad4 <__aeabi_fdiv+0x128>
 8000aac:	2304      	movs	r3, #4
 8000aae:	4699      	mov	r9, r3
 8000ab0:	3b03      	subs	r3, #3
 8000ab2:	2700      	movs	r7, #0
 8000ab4:	469a      	mov	sl, r3
 8000ab6:	e792      	b.n	80009de <__aeabi_fdiv+0x32>
 8000ab8:	2d00      	cmp	r5, #0
 8000aba:	d105      	bne.n	8000ac8 <__aeabi_fdiv+0x11c>
 8000abc:	2308      	movs	r3, #8
 8000abe:	4699      	mov	r9, r3
 8000ac0:	3b06      	subs	r3, #6
 8000ac2:	27ff      	movs	r7, #255	; 0xff
 8000ac4:	469a      	mov	sl, r3
 8000ac6:	e78a      	b.n	80009de <__aeabi_fdiv+0x32>
 8000ac8:	230c      	movs	r3, #12
 8000aca:	4699      	mov	r9, r3
 8000acc:	3b09      	subs	r3, #9
 8000ace:	27ff      	movs	r7, #255	; 0xff
 8000ad0:	469a      	mov	sl, r3
 8000ad2:	e784      	b.n	80009de <__aeabi_fdiv+0x32>
 8000ad4:	0028      	movs	r0, r5
 8000ad6:	f001 f853 	bl	8001b80 <__clzsi2>
 8000ada:	2776      	movs	r7, #118	; 0x76
 8000adc:	1f43      	subs	r3, r0, #5
 8000ade:	409d      	lsls	r5, r3
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	427f      	negs	r7, r7
 8000ae4:	4699      	mov	r9, r3
 8000ae6:	469a      	mov	sl, r3
 8000ae8:	1a3f      	subs	r7, r7, r0
 8000aea:	e778      	b.n	80009de <__aeabi_fdiv+0x32>
 8000aec:	4640      	mov	r0, r8
 8000aee:	f001 f847 	bl	8001b80 <__clzsi2>
 8000af2:	4642      	mov	r2, r8
 8000af4:	1f43      	subs	r3, r0, #5
 8000af6:	409a      	lsls	r2, r3
 8000af8:	2376      	movs	r3, #118	; 0x76
 8000afa:	425b      	negs	r3, r3
 8000afc:	4690      	mov	r8, r2
 8000afe:	1a1b      	subs	r3, r3, r0
 8000b00:	2200      	movs	r2, #0
 8000b02:	e77e      	b.n	8000a02 <__aeabi_fdiv+0x56>
 8000b04:	2303      	movs	r3, #3
 8000b06:	464a      	mov	r2, r9
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	4691      	mov	r9, r2
 8000b0c:	33fc      	adds	r3, #252	; 0xfc
 8000b0e:	2203      	movs	r2, #3
 8000b10:	e777      	b.n	8000a02 <__aeabi_fdiv+0x56>
 8000b12:	000e      	movs	r6, r1
 8000b14:	20ff      	movs	r0, #255	; 0xff
 8000b16:	2200      	movs	r2, #0
 8000b18:	e7a8      	b.n	8000a6c <__aeabi_fdiv+0xc0>
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	2b1b      	cmp	r3, #27
 8000b20:	dca2      	bgt.n	8000a68 <__aeabi_fdiv+0xbc>
 8000b22:	379e      	adds	r7, #158	; 0x9e
 8000b24:	002a      	movs	r2, r5
 8000b26:	40bd      	lsls	r5, r7
 8000b28:	40da      	lsrs	r2, r3
 8000b2a:	1e6b      	subs	r3, r5, #1
 8000b2c:	419d      	sbcs	r5, r3
 8000b2e:	4315      	orrs	r5, r2
 8000b30:	076a      	lsls	r2, r5, #29
 8000b32:	d004      	beq.n	8000b3e <__aeabi_fdiv+0x192>
 8000b34:	220f      	movs	r2, #15
 8000b36:	402a      	ands	r2, r5
 8000b38:	2a04      	cmp	r2, #4
 8000b3a:	d000      	beq.n	8000b3e <__aeabi_fdiv+0x192>
 8000b3c:	3504      	adds	r5, #4
 8000b3e:	016a      	lsls	r2, r5, #5
 8000b40:	d544      	bpl.n	8000bcc <__aeabi_fdiv+0x220>
 8000b42:	2001      	movs	r0, #1
 8000b44:	2200      	movs	r2, #0
 8000b46:	e791      	b.n	8000a6c <__aeabi_fdiv+0xc0>
 8000b48:	20ff      	movs	r0, #255	; 0xff
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	e78e      	b.n	8000a6c <__aeabi_fdiv+0xc0>
 8000b4e:	2280      	movs	r2, #128	; 0x80
 8000b50:	2600      	movs	r6, #0
 8000b52:	20ff      	movs	r0, #255	; 0xff
 8000b54:	03d2      	lsls	r2, r2, #15
 8000b56:	e789      	b.n	8000a6c <__aeabi_fdiv+0xc0>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	4698      	mov	r8, r3
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	03d2      	lsls	r2, r2, #15
 8000b60:	4215      	tst	r5, r2
 8000b62:	d008      	beq.n	8000b76 <__aeabi_fdiv+0x1ca>
 8000b64:	4643      	mov	r3, r8
 8000b66:	4213      	tst	r3, r2
 8000b68:	d105      	bne.n	8000b76 <__aeabi_fdiv+0x1ca>
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	0252      	lsls	r2, r2, #9
 8000b6e:	0026      	movs	r6, r4
 8000b70:	20ff      	movs	r0, #255	; 0xff
 8000b72:	0a52      	lsrs	r2, r2, #9
 8000b74:	e77a      	b.n	8000a6c <__aeabi_fdiv+0xc0>
 8000b76:	2280      	movs	r2, #128	; 0x80
 8000b78:	03d2      	lsls	r2, r2, #15
 8000b7a:	432a      	orrs	r2, r5
 8000b7c:	0252      	lsls	r2, r2, #9
 8000b7e:	20ff      	movs	r0, #255	; 0xff
 8000b80:	0a52      	lsrs	r2, r2, #9
 8000b82:	e773      	b.n	8000a6c <__aeabi_fdiv+0xc0>
 8000b84:	4642      	mov	r2, r8
 8000b86:	016b      	lsls	r3, r5, #5
 8000b88:	0155      	lsls	r5, r2, #5
 8000b8a:	42ab      	cmp	r3, r5
 8000b8c:	d21a      	bcs.n	8000bc4 <__aeabi_fdiv+0x218>
 8000b8e:	201b      	movs	r0, #27
 8000b90:	2200      	movs	r2, #0
 8000b92:	3f01      	subs	r7, #1
 8000b94:	2601      	movs	r6, #1
 8000b96:	001c      	movs	r4, r3
 8000b98:	0052      	lsls	r2, r2, #1
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	2c00      	cmp	r4, #0
 8000b9e:	db01      	blt.n	8000ba4 <__aeabi_fdiv+0x1f8>
 8000ba0:	429d      	cmp	r5, r3
 8000ba2:	d801      	bhi.n	8000ba8 <__aeabi_fdiv+0x1fc>
 8000ba4:	1b5b      	subs	r3, r3, r5
 8000ba6:	4332      	orrs	r2, r6
 8000ba8:	3801      	subs	r0, #1
 8000baa:	2800      	cmp	r0, #0
 8000bac:	d1f3      	bne.n	8000b96 <__aeabi_fdiv+0x1ea>
 8000bae:	1e58      	subs	r0, r3, #1
 8000bb0:	4183      	sbcs	r3, r0
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	001d      	movs	r5, r3
 8000bb6:	003b      	movs	r3, r7
 8000bb8:	337f      	adds	r3, #127	; 0x7f
 8000bba:	000e      	movs	r6, r1
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	dd00      	ble.n	8000bc2 <__aeabi_fdiv+0x216>
 8000bc0:	e73d      	b.n	8000a3e <__aeabi_fdiv+0x92>
 8000bc2:	e7aa      	b.n	8000b1a <__aeabi_fdiv+0x16e>
 8000bc4:	201a      	movs	r0, #26
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	1b5b      	subs	r3, r3, r5
 8000bca:	e7e3      	b.n	8000b94 <__aeabi_fdiv+0x1e8>
 8000bcc:	01aa      	lsls	r2, r5, #6
 8000bce:	2000      	movs	r0, #0
 8000bd0:	0a52      	lsrs	r2, r2, #9
 8000bd2:	e74b      	b.n	8000a6c <__aeabi_fdiv+0xc0>
 8000bd4:	080098c8 	.word	0x080098c8
 8000bd8:	f7ffffff 	.word	0xf7ffffff
 8000bdc:	08009908 	.word	0x08009908

08000be0 <__eqsf2>:
 8000be0:	b570      	push	{r4, r5, r6, lr}
 8000be2:	0042      	lsls	r2, r0, #1
 8000be4:	0245      	lsls	r5, r0, #9
 8000be6:	024e      	lsls	r6, r1, #9
 8000be8:	004c      	lsls	r4, r1, #1
 8000bea:	0fc3      	lsrs	r3, r0, #31
 8000bec:	0a6d      	lsrs	r5, r5, #9
 8000bee:	2001      	movs	r0, #1
 8000bf0:	0e12      	lsrs	r2, r2, #24
 8000bf2:	0a76      	lsrs	r6, r6, #9
 8000bf4:	0e24      	lsrs	r4, r4, #24
 8000bf6:	0fc9      	lsrs	r1, r1, #31
 8000bf8:	2aff      	cmp	r2, #255	; 0xff
 8000bfa:	d006      	beq.n	8000c0a <__eqsf2+0x2a>
 8000bfc:	2cff      	cmp	r4, #255	; 0xff
 8000bfe:	d003      	beq.n	8000c08 <__eqsf2+0x28>
 8000c00:	42a2      	cmp	r2, r4
 8000c02:	d101      	bne.n	8000c08 <__eqsf2+0x28>
 8000c04:	42b5      	cmp	r5, r6
 8000c06:	d006      	beq.n	8000c16 <__eqsf2+0x36>
 8000c08:	bd70      	pop	{r4, r5, r6, pc}
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d1fc      	bne.n	8000c08 <__eqsf2+0x28>
 8000c0e:	2cff      	cmp	r4, #255	; 0xff
 8000c10:	d1fa      	bne.n	8000c08 <__eqsf2+0x28>
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d1f8      	bne.n	8000c08 <__eqsf2+0x28>
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d006      	beq.n	8000c28 <__eqsf2+0x48>
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	d1f3      	bne.n	8000c08 <__eqsf2+0x28>
 8000c20:	0028      	movs	r0, r5
 8000c22:	1e43      	subs	r3, r0, #1
 8000c24:	4198      	sbcs	r0, r3
 8000c26:	e7ef      	b.n	8000c08 <__eqsf2+0x28>
 8000c28:	2000      	movs	r0, #0
 8000c2a:	e7ed      	b.n	8000c08 <__eqsf2+0x28>

08000c2c <__gesf2>:
 8000c2c:	b570      	push	{r4, r5, r6, lr}
 8000c2e:	0042      	lsls	r2, r0, #1
 8000c30:	0245      	lsls	r5, r0, #9
 8000c32:	024e      	lsls	r6, r1, #9
 8000c34:	004c      	lsls	r4, r1, #1
 8000c36:	0fc3      	lsrs	r3, r0, #31
 8000c38:	0a6d      	lsrs	r5, r5, #9
 8000c3a:	0e12      	lsrs	r2, r2, #24
 8000c3c:	0a76      	lsrs	r6, r6, #9
 8000c3e:	0e24      	lsrs	r4, r4, #24
 8000c40:	0fc8      	lsrs	r0, r1, #31
 8000c42:	2aff      	cmp	r2, #255	; 0xff
 8000c44:	d01b      	beq.n	8000c7e <__gesf2+0x52>
 8000c46:	2cff      	cmp	r4, #255	; 0xff
 8000c48:	d00e      	beq.n	8000c68 <__gesf2+0x3c>
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d11b      	bne.n	8000c86 <__gesf2+0x5a>
 8000c4e:	2c00      	cmp	r4, #0
 8000c50:	d101      	bne.n	8000c56 <__gesf2+0x2a>
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	d01c      	beq.n	8000c90 <__gesf2+0x64>
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d00c      	beq.n	8000c74 <__gesf2+0x48>
 8000c5a:	4283      	cmp	r3, r0
 8000c5c:	d01c      	beq.n	8000c98 <__gesf2+0x6c>
 8000c5e:	2102      	movs	r1, #2
 8000c60:	1e58      	subs	r0, r3, #1
 8000c62:	4008      	ands	r0, r1
 8000c64:	3801      	subs	r0, #1
 8000c66:	bd70      	pop	{r4, r5, r6, pc}
 8000c68:	2e00      	cmp	r6, #0
 8000c6a:	d122      	bne.n	8000cb2 <__gesf2+0x86>
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	d1f4      	bne.n	8000c5a <__gesf2+0x2e>
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d1f2      	bne.n	8000c5a <__gesf2+0x2e>
 8000c74:	2800      	cmp	r0, #0
 8000c76:	d1f6      	bne.n	8000c66 <__gesf2+0x3a>
 8000c78:	2001      	movs	r0, #1
 8000c7a:	4240      	negs	r0, r0
 8000c7c:	e7f3      	b.n	8000c66 <__gesf2+0x3a>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	d117      	bne.n	8000cb2 <__gesf2+0x86>
 8000c82:	2cff      	cmp	r4, #255	; 0xff
 8000c84:	d0f0      	beq.n	8000c68 <__gesf2+0x3c>
 8000c86:	2c00      	cmp	r4, #0
 8000c88:	d1e7      	bne.n	8000c5a <__gesf2+0x2e>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	d1e5      	bne.n	8000c5a <__gesf2+0x2e>
 8000c8e:	e7e6      	b.n	8000c5e <__gesf2+0x32>
 8000c90:	2000      	movs	r0, #0
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	d0e7      	beq.n	8000c66 <__gesf2+0x3a>
 8000c96:	e7e2      	b.n	8000c5e <__gesf2+0x32>
 8000c98:	42a2      	cmp	r2, r4
 8000c9a:	dc05      	bgt.n	8000ca8 <__gesf2+0x7c>
 8000c9c:	dbea      	blt.n	8000c74 <__gesf2+0x48>
 8000c9e:	42b5      	cmp	r5, r6
 8000ca0:	d802      	bhi.n	8000ca8 <__gesf2+0x7c>
 8000ca2:	d3e7      	bcc.n	8000c74 <__gesf2+0x48>
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	e7de      	b.n	8000c66 <__gesf2+0x3a>
 8000ca8:	4243      	negs	r3, r0
 8000caa:	4158      	adcs	r0, r3
 8000cac:	0040      	lsls	r0, r0, #1
 8000cae:	3801      	subs	r0, #1
 8000cb0:	e7d9      	b.n	8000c66 <__gesf2+0x3a>
 8000cb2:	2002      	movs	r0, #2
 8000cb4:	4240      	negs	r0, r0
 8000cb6:	e7d6      	b.n	8000c66 <__gesf2+0x3a>

08000cb8 <__lesf2>:
 8000cb8:	b570      	push	{r4, r5, r6, lr}
 8000cba:	0042      	lsls	r2, r0, #1
 8000cbc:	0245      	lsls	r5, r0, #9
 8000cbe:	024e      	lsls	r6, r1, #9
 8000cc0:	004c      	lsls	r4, r1, #1
 8000cc2:	0fc3      	lsrs	r3, r0, #31
 8000cc4:	0a6d      	lsrs	r5, r5, #9
 8000cc6:	0e12      	lsrs	r2, r2, #24
 8000cc8:	0a76      	lsrs	r6, r6, #9
 8000cca:	0e24      	lsrs	r4, r4, #24
 8000ccc:	0fc8      	lsrs	r0, r1, #31
 8000cce:	2aff      	cmp	r2, #255	; 0xff
 8000cd0:	d00b      	beq.n	8000cea <__lesf2+0x32>
 8000cd2:	2cff      	cmp	r4, #255	; 0xff
 8000cd4:	d00d      	beq.n	8000cf2 <__lesf2+0x3a>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d11f      	bne.n	8000d1a <__lesf2+0x62>
 8000cda:	2c00      	cmp	r4, #0
 8000cdc:	d116      	bne.n	8000d0c <__lesf2+0x54>
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d114      	bne.n	8000d0c <__lesf2+0x54>
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	2d00      	cmp	r5, #0
 8000ce6:	d010      	beq.n	8000d0a <__lesf2+0x52>
 8000ce8:	e009      	b.n	8000cfe <__lesf2+0x46>
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d10c      	bne.n	8000d08 <__lesf2+0x50>
 8000cee:	2cff      	cmp	r4, #255	; 0xff
 8000cf0:	d113      	bne.n	8000d1a <__lesf2+0x62>
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d108      	bne.n	8000d08 <__lesf2+0x50>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	d008      	beq.n	8000d0c <__lesf2+0x54>
 8000cfa:	4283      	cmp	r3, r0
 8000cfc:	d012      	beq.n	8000d24 <__lesf2+0x6c>
 8000cfe:	2102      	movs	r1, #2
 8000d00:	1e58      	subs	r0, r3, #1
 8000d02:	4008      	ands	r0, r1
 8000d04:	3801      	subs	r0, #1
 8000d06:	e000      	b.n	8000d0a <__lesf2+0x52>
 8000d08:	2002      	movs	r0, #2
 8000d0a:	bd70      	pop	{r4, r5, r6, pc}
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d1f4      	bne.n	8000cfa <__lesf2+0x42>
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d1fa      	bne.n	8000d0a <__lesf2+0x52>
 8000d14:	2001      	movs	r0, #1
 8000d16:	4240      	negs	r0, r0
 8000d18:	e7f7      	b.n	8000d0a <__lesf2+0x52>
 8000d1a:	2c00      	cmp	r4, #0
 8000d1c:	d1ed      	bne.n	8000cfa <__lesf2+0x42>
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d1eb      	bne.n	8000cfa <__lesf2+0x42>
 8000d22:	e7ec      	b.n	8000cfe <__lesf2+0x46>
 8000d24:	42a2      	cmp	r2, r4
 8000d26:	dc05      	bgt.n	8000d34 <__lesf2+0x7c>
 8000d28:	dbf2      	blt.n	8000d10 <__lesf2+0x58>
 8000d2a:	42b5      	cmp	r5, r6
 8000d2c:	d802      	bhi.n	8000d34 <__lesf2+0x7c>
 8000d2e:	d3ef      	bcc.n	8000d10 <__lesf2+0x58>
 8000d30:	2000      	movs	r0, #0
 8000d32:	e7ea      	b.n	8000d0a <__lesf2+0x52>
 8000d34:	4243      	negs	r3, r0
 8000d36:	4158      	adcs	r0, r3
 8000d38:	0040      	lsls	r0, r0, #1
 8000d3a:	3801      	subs	r0, #1
 8000d3c:	e7e5      	b.n	8000d0a <__lesf2+0x52>
 8000d3e:	46c0      	nop			; (mov r8, r8)

08000d40 <__aeabi_fmul>:
 8000d40:	0243      	lsls	r3, r0, #9
 8000d42:	0a5b      	lsrs	r3, r3, #9
 8000d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d46:	464f      	mov	r7, r9
 8000d48:	4646      	mov	r6, r8
 8000d4a:	4699      	mov	r9, r3
 8000d4c:	46d6      	mov	lr, sl
 8000d4e:	0fc3      	lsrs	r3, r0, #31
 8000d50:	0045      	lsls	r5, r0, #1
 8000d52:	4698      	mov	r8, r3
 8000d54:	b5c0      	push	{r6, r7, lr}
 8000d56:	464b      	mov	r3, r9
 8000d58:	1c0f      	adds	r7, r1, #0
 8000d5a:	0e2d      	lsrs	r5, r5, #24
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_fmul+0x20>
 8000d5e:	e0cb      	b.n	8000ef8 <__aeabi_fmul+0x1b8>
 8000d60:	2dff      	cmp	r5, #255	; 0xff
 8000d62:	d100      	bne.n	8000d66 <__aeabi_fmul+0x26>
 8000d64:	e0cf      	b.n	8000f06 <__aeabi_fmul+0x1c6>
 8000d66:	2280      	movs	r2, #128	; 0x80
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	04d2      	lsls	r2, r2, #19
 8000d6c:	431a      	orrs	r2, r3
 8000d6e:	2300      	movs	r3, #0
 8000d70:	4691      	mov	r9, r2
 8000d72:	2600      	movs	r6, #0
 8000d74:	469a      	mov	sl, r3
 8000d76:	3d7f      	subs	r5, #127	; 0x7f
 8000d78:	027c      	lsls	r4, r7, #9
 8000d7a:	007b      	lsls	r3, r7, #1
 8000d7c:	0a64      	lsrs	r4, r4, #9
 8000d7e:	0e1b      	lsrs	r3, r3, #24
 8000d80:	0fff      	lsrs	r7, r7, #31
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d100      	bne.n	8000d88 <__aeabi_fmul+0x48>
 8000d86:	e0a9      	b.n	8000edc <__aeabi_fmul+0x19c>
 8000d88:	2bff      	cmp	r3, #255	; 0xff
 8000d8a:	d011      	beq.n	8000db0 <__aeabi_fmul+0x70>
 8000d8c:	2280      	movs	r2, #128	; 0x80
 8000d8e:	00e4      	lsls	r4, r4, #3
 8000d90:	04d2      	lsls	r2, r2, #19
 8000d92:	4314      	orrs	r4, r2
 8000d94:	4642      	mov	r2, r8
 8000d96:	3b7f      	subs	r3, #127	; 0x7f
 8000d98:	195b      	adds	r3, r3, r5
 8000d9a:	407a      	eors	r2, r7
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	1c5d      	adds	r5, r3, #1
 8000da2:	2e0a      	cmp	r6, #10
 8000da4:	dd13      	ble.n	8000dce <__aeabi_fmul+0x8e>
 8000da6:	003a      	movs	r2, r7
 8000da8:	2e0b      	cmp	r6, #11
 8000daa:	d047      	beq.n	8000e3c <__aeabi_fmul+0xfc>
 8000dac:	4647      	mov	r7, r8
 8000dae:	e03f      	b.n	8000e30 <__aeabi_fmul+0xf0>
 8000db0:	002b      	movs	r3, r5
 8000db2:	33ff      	adds	r3, #255	; 0xff
 8000db4:	2c00      	cmp	r4, #0
 8000db6:	d11e      	bne.n	8000df6 <__aeabi_fmul+0xb6>
 8000db8:	2202      	movs	r2, #2
 8000dba:	4316      	orrs	r6, r2
 8000dbc:	4642      	mov	r2, r8
 8000dbe:	3501      	adds	r5, #1
 8000dc0:	407a      	eors	r2, r7
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	35ff      	adds	r5, #255	; 0xff
 8000dc6:	2e0a      	cmp	r6, #10
 8000dc8:	dd00      	ble.n	8000dcc <__aeabi_fmul+0x8c>
 8000dca:	e0e4      	b.n	8000f96 <__aeabi_fmul+0x256>
 8000dcc:	2002      	movs	r0, #2
 8000dce:	2e02      	cmp	r6, #2
 8000dd0:	dc1c      	bgt.n	8000e0c <__aeabi_fmul+0xcc>
 8000dd2:	3e01      	subs	r6, #1
 8000dd4:	2e01      	cmp	r6, #1
 8000dd6:	d842      	bhi.n	8000e5e <__aeabi_fmul+0x11e>
 8000dd8:	2802      	cmp	r0, #2
 8000dda:	d03d      	beq.n	8000e58 <__aeabi_fmul+0x118>
 8000ddc:	2801      	cmp	r0, #1
 8000dde:	d166      	bne.n	8000eae <__aeabi_fmul+0x16e>
 8000de0:	2000      	movs	r0, #0
 8000de2:	2100      	movs	r1, #0
 8000de4:	05c0      	lsls	r0, r0, #23
 8000de6:	4308      	orrs	r0, r1
 8000de8:	07d2      	lsls	r2, r2, #31
 8000dea:	4310      	orrs	r0, r2
 8000dec:	bce0      	pop	{r5, r6, r7}
 8000dee:	46ba      	mov	sl, r7
 8000df0:	46b1      	mov	r9, r6
 8000df2:	46a8      	mov	r8, r5
 8000df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df6:	2203      	movs	r2, #3
 8000df8:	4316      	orrs	r6, r2
 8000dfa:	4642      	mov	r2, r8
 8000dfc:	3501      	adds	r5, #1
 8000dfe:	407a      	eors	r2, r7
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	35ff      	adds	r5, #255	; 0xff
 8000e04:	2e0a      	cmp	r6, #10
 8000e06:	dd00      	ble.n	8000e0a <__aeabi_fmul+0xca>
 8000e08:	e0e4      	b.n	8000fd4 <__aeabi_fmul+0x294>
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	40b1      	lsls	r1, r6
 8000e10:	26a6      	movs	r6, #166	; 0xa6
 8000e12:	00f6      	lsls	r6, r6, #3
 8000e14:	4231      	tst	r1, r6
 8000e16:	d10a      	bne.n	8000e2e <__aeabi_fmul+0xee>
 8000e18:	2690      	movs	r6, #144	; 0x90
 8000e1a:	00b6      	lsls	r6, r6, #2
 8000e1c:	4231      	tst	r1, r6
 8000e1e:	d116      	bne.n	8000e4e <__aeabi_fmul+0x10e>
 8000e20:	3eb9      	subs	r6, #185	; 0xb9
 8000e22:	3eff      	subs	r6, #255	; 0xff
 8000e24:	420e      	tst	r6, r1
 8000e26:	d01a      	beq.n	8000e5e <__aeabi_fmul+0x11e>
 8000e28:	46a1      	mov	r9, r4
 8000e2a:	4682      	mov	sl, r0
 8000e2c:	e000      	b.n	8000e30 <__aeabi_fmul+0xf0>
 8000e2e:	0017      	movs	r7, r2
 8000e30:	4653      	mov	r3, sl
 8000e32:	003a      	movs	r2, r7
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d00f      	beq.n	8000e58 <__aeabi_fmul+0x118>
 8000e38:	464c      	mov	r4, r9
 8000e3a:	4650      	mov	r0, sl
 8000e3c:	2803      	cmp	r0, #3
 8000e3e:	d1cd      	bne.n	8000ddc <__aeabi_fmul+0x9c>
 8000e40:	2180      	movs	r1, #128	; 0x80
 8000e42:	03c9      	lsls	r1, r1, #15
 8000e44:	4321      	orrs	r1, r4
 8000e46:	0249      	lsls	r1, r1, #9
 8000e48:	20ff      	movs	r0, #255	; 0xff
 8000e4a:	0a49      	lsrs	r1, r1, #9
 8000e4c:	e7ca      	b.n	8000de4 <__aeabi_fmul+0xa4>
 8000e4e:	2180      	movs	r1, #128	; 0x80
 8000e50:	2200      	movs	r2, #0
 8000e52:	20ff      	movs	r0, #255	; 0xff
 8000e54:	03c9      	lsls	r1, r1, #15
 8000e56:	e7c5      	b.n	8000de4 <__aeabi_fmul+0xa4>
 8000e58:	20ff      	movs	r0, #255	; 0xff
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	e7c2      	b.n	8000de4 <__aeabi_fmul+0xa4>
 8000e5e:	0c20      	lsrs	r0, r4, #16
 8000e60:	4649      	mov	r1, r9
 8000e62:	0424      	lsls	r4, r4, #16
 8000e64:	0c24      	lsrs	r4, r4, #16
 8000e66:	0027      	movs	r7, r4
 8000e68:	0c0e      	lsrs	r6, r1, #16
 8000e6a:	0409      	lsls	r1, r1, #16
 8000e6c:	0c09      	lsrs	r1, r1, #16
 8000e6e:	4374      	muls	r4, r6
 8000e70:	434f      	muls	r7, r1
 8000e72:	4346      	muls	r6, r0
 8000e74:	4348      	muls	r0, r1
 8000e76:	0c39      	lsrs	r1, r7, #16
 8000e78:	1900      	adds	r0, r0, r4
 8000e7a:	1809      	adds	r1, r1, r0
 8000e7c:	428c      	cmp	r4, r1
 8000e7e:	d903      	bls.n	8000e88 <__aeabi_fmul+0x148>
 8000e80:	2080      	movs	r0, #128	; 0x80
 8000e82:	0240      	lsls	r0, r0, #9
 8000e84:	4684      	mov	ip, r0
 8000e86:	4466      	add	r6, ip
 8000e88:	043f      	lsls	r7, r7, #16
 8000e8a:	0408      	lsls	r0, r1, #16
 8000e8c:	0c3f      	lsrs	r7, r7, #16
 8000e8e:	19c0      	adds	r0, r0, r7
 8000e90:	0184      	lsls	r4, r0, #6
 8000e92:	1e67      	subs	r7, r4, #1
 8000e94:	41bc      	sbcs	r4, r7
 8000e96:	0c09      	lsrs	r1, r1, #16
 8000e98:	0e80      	lsrs	r0, r0, #26
 8000e9a:	1989      	adds	r1, r1, r6
 8000e9c:	4304      	orrs	r4, r0
 8000e9e:	0189      	lsls	r1, r1, #6
 8000ea0:	430c      	orrs	r4, r1
 8000ea2:	0109      	lsls	r1, r1, #4
 8000ea4:	d571      	bpl.n	8000f8a <__aeabi_fmul+0x24a>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	0861      	lsrs	r1, r4, #1
 8000eaa:	401c      	ands	r4, r3
 8000eac:	430c      	orrs	r4, r1
 8000eae:	002b      	movs	r3, r5
 8000eb0:	337f      	adds	r3, #127	; 0x7f
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	dd51      	ble.n	8000f5a <__aeabi_fmul+0x21a>
 8000eb6:	0761      	lsls	r1, r4, #29
 8000eb8:	d004      	beq.n	8000ec4 <__aeabi_fmul+0x184>
 8000eba:	210f      	movs	r1, #15
 8000ebc:	4021      	ands	r1, r4
 8000ebe:	2904      	cmp	r1, #4
 8000ec0:	d000      	beq.n	8000ec4 <__aeabi_fmul+0x184>
 8000ec2:	3404      	adds	r4, #4
 8000ec4:	0121      	lsls	r1, r4, #4
 8000ec6:	d503      	bpl.n	8000ed0 <__aeabi_fmul+0x190>
 8000ec8:	4b43      	ldr	r3, [pc, #268]	; (8000fd8 <__aeabi_fmul+0x298>)
 8000eca:	401c      	ands	r4, r3
 8000ecc:	002b      	movs	r3, r5
 8000ece:	3380      	adds	r3, #128	; 0x80
 8000ed0:	2bfe      	cmp	r3, #254	; 0xfe
 8000ed2:	dcc1      	bgt.n	8000e58 <__aeabi_fmul+0x118>
 8000ed4:	01a1      	lsls	r1, r4, #6
 8000ed6:	0a49      	lsrs	r1, r1, #9
 8000ed8:	b2d8      	uxtb	r0, r3
 8000eda:	e783      	b.n	8000de4 <__aeabi_fmul+0xa4>
 8000edc:	2c00      	cmp	r4, #0
 8000ede:	d12c      	bne.n	8000f3a <__aeabi_fmul+0x1fa>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	4642      	mov	r2, r8
 8000ee4:	431e      	orrs	r6, r3
 8000ee6:	002b      	movs	r3, r5
 8000ee8:	407a      	eors	r2, r7
 8000eea:	2001      	movs	r0, #1
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	1c5d      	adds	r5, r3, #1
 8000ef0:	2e0a      	cmp	r6, #10
 8000ef2:	dd00      	ble.n	8000ef6 <__aeabi_fmul+0x1b6>
 8000ef4:	e757      	b.n	8000da6 <__aeabi_fmul+0x66>
 8000ef6:	e76a      	b.n	8000dce <__aeabi_fmul+0x8e>
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d110      	bne.n	8000f1e <__aeabi_fmul+0x1de>
 8000efc:	2301      	movs	r3, #1
 8000efe:	2604      	movs	r6, #4
 8000f00:	2500      	movs	r5, #0
 8000f02:	469a      	mov	sl, r3
 8000f04:	e738      	b.n	8000d78 <__aeabi_fmul+0x38>
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d104      	bne.n	8000f14 <__aeabi_fmul+0x1d4>
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	2608      	movs	r6, #8
 8000f0e:	25ff      	movs	r5, #255	; 0xff
 8000f10:	469a      	mov	sl, r3
 8000f12:	e731      	b.n	8000d78 <__aeabi_fmul+0x38>
 8000f14:	2303      	movs	r3, #3
 8000f16:	260c      	movs	r6, #12
 8000f18:	25ff      	movs	r5, #255	; 0xff
 8000f1a:	469a      	mov	sl, r3
 8000f1c:	e72c      	b.n	8000d78 <__aeabi_fmul+0x38>
 8000f1e:	4648      	mov	r0, r9
 8000f20:	f000 fe2e 	bl	8001b80 <__clzsi2>
 8000f24:	464a      	mov	r2, r9
 8000f26:	1f43      	subs	r3, r0, #5
 8000f28:	2576      	movs	r5, #118	; 0x76
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	426d      	negs	r5, r5
 8000f30:	4691      	mov	r9, r2
 8000f32:	2600      	movs	r6, #0
 8000f34:	469a      	mov	sl, r3
 8000f36:	1a2d      	subs	r5, r5, r0
 8000f38:	e71e      	b.n	8000d78 <__aeabi_fmul+0x38>
 8000f3a:	0020      	movs	r0, r4
 8000f3c:	f000 fe20 	bl	8001b80 <__clzsi2>
 8000f40:	4642      	mov	r2, r8
 8000f42:	1f43      	subs	r3, r0, #5
 8000f44:	409c      	lsls	r4, r3
 8000f46:	1a2b      	subs	r3, r5, r0
 8000f48:	3b76      	subs	r3, #118	; 0x76
 8000f4a:	407a      	eors	r2, r7
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	1c5d      	adds	r5, r3, #1
 8000f52:	2e0a      	cmp	r6, #10
 8000f54:	dd00      	ble.n	8000f58 <__aeabi_fmul+0x218>
 8000f56:	e726      	b.n	8000da6 <__aeabi_fmul+0x66>
 8000f58:	e739      	b.n	8000dce <__aeabi_fmul+0x8e>
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	1acb      	subs	r3, r1, r3
 8000f5e:	2b1b      	cmp	r3, #27
 8000f60:	dd00      	ble.n	8000f64 <__aeabi_fmul+0x224>
 8000f62:	e73d      	b.n	8000de0 <__aeabi_fmul+0xa0>
 8000f64:	359e      	adds	r5, #158	; 0x9e
 8000f66:	0021      	movs	r1, r4
 8000f68:	40ac      	lsls	r4, r5
 8000f6a:	40d9      	lsrs	r1, r3
 8000f6c:	1e63      	subs	r3, r4, #1
 8000f6e:	419c      	sbcs	r4, r3
 8000f70:	4321      	orrs	r1, r4
 8000f72:	074b      	lsls	r3, r1, #29
 8000f74:	d004      	beq.n	8000f80 <__aeabi_fmul+0x240>
 8000f76:	230f      	movs	r3, #15
 8000f78:	400b      	ands	r3, r1
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	d000      	beq.n	8000f80 <__aeabi_fmul+0x240>
 8000f7e:	3104      	adds	r1, #4
 8000f80:	014b      	lsls	r3, r1, #5
 8000f82:	d504      	bpl.n	8000f8e <__aeabi_fmul+0x24e>
 8000f84:	2001      	movs	r0, #1
 8000f86:	2100      	movs	r1, #0
 8000f88:	e72c      	b.n	8000de4 <__aeabi_fmul+0xa4>
 8000f8a:	001d      	movs	r5, r3
 8000f8c:	e78f      	b.n	8000eae <__aeabi_fmul+0x16e>
 8000f8e:	0189      	lsls	r1, r1, #6
 8000f90:	2000      	movs	r0, #0
 8000f92:	0a49      	lsrs	r1, r1, #9
 8000f94:	e726      	b.n	8000de4 <__aeabi_fmul+0xa4>
 8000f96:	2302      	movs	r3, #2
 8000f98:	2e0f      	cmp	r6, #15
 8000f9a:	d10c      	bne.n	8000fb6 <__aeabi_fmul+0x276>
 8000f9c:	2180      	movs	r1, #128	; 0x80
 8000f9e:	464b      	mov	r3, r9
 8000fa0:	03c9      	lsls	r1, r1, #15
 8000fa2:	420b      	tst	r3, r1
 8000fa4:	d00d      	beq.n	8000fc2 <__aeabi_fmul+0x282>
 8000fa6:	420c      	tst	r4, r1
 8000fa8:	d10b      	bne.n	8000fc2 <__aeabi_fmul+0x282>
 8000faa:	4321      	orrs	r1, r4
 8000fac:	0249      	lsls	r1, r1, #9
 8000fae:	003a      	movs	r2, r7
 8000fb0:	20ff      	movs	r0, #255	; 0xff
 8000fb2:	0a49      	lsrs	r1, r1, #9
 8000fb4:	e716      	b.n	8000de4 <__aeabi_fmul+0xa4>
 8000fb6:	2e0b      	cmp	r6, #11
 8000fb8:	d000      	beq.n	8000fbc <__aeabi_fmul+0x27c>
 8000fba:	e6f7      	b.n	8000dac <__aeabi_fmul+0x6c>
 8000fbc:	46a1      	mov	r9, r4
 8000fbe:	469a      	mov	sl, r3
 8000fc0:	e736      	b.n	8000e30 <__aeabi_fmul+0xf0>
 8000fc2:	2180      	movs	r1, #128	; 0x80
 8000fc4:	464b      	mov	r3, r9
 8000fc6:	03c9      	lsls	r1, r1, #15
 8000fc8:	4319      	orrs	r1, r3
 8000fca:	0249      	lsls	r1, r1, #9
 8000fcc:	4642      	mov	r2, r8
 8000fce:	20ff      	movs	r0, #255	; 0xff
 8000fd0:	0a49      	lsrs	r1, r1, #9
 8000fd2:	e707      	b.n	8000de4 <__aeabi_fmul+0xa4>
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e7df      	b.n	8000f98 <__aeabi_fmul+0x258>
 8000fd8:	f7ffffff 	.word	0xf7ffffff

08000fdc <__aeabi_fsub>:
 8000fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fde:	46c6      	mov	lr, r8
 8000fe0:	0243      	lsls	r3, r0, #9
 8000fe2:	0a5b      	lsrs	r3, r3, #9
 8000fe4:	0045      	lsls	r5, r0, #1
 8000fe6:	00da      	lsls	r2, r3, #3
 8000fe8:	0fc4      	lsrs	r4, r0, #31
 8000fea:	0248      	lsls	r0, r1, #9
 8000fec:	004f      	lsls	r7, r1, #1
 8000fee:	4694      	mov	ip, r2
 8000ff0:	0a42      	lsrs	r2, r0, #9
 8000ff2:	001e      	movs	r6, r3
 8000ff4:	4690      	mov	r8, r2
 8000ff6:	b500      	push	{lr}
 8000ff8:	0e2d      	lsrs	r5, r5, #24
 8000ffa:	0e3f      	lsrs	r7, r7, #24
 8000ffc:	0fc9      	lsrs	r1, r1, #31
 8000ffe:	0980      	lsrs	r0, r0, #6
 8001000:	2fff      	cmp	r7, #255	; 0xff
 8001002:	d059      	beq.n	80010b8 <__aeabi_fsub+0xdc>
 8001004:	2201      	movs	r2, #1
 8001006:	4051      	eors	r1, r2
 8001008:	428c      	cmp	r4, r1
 800100a:	d039      	beq.n	8001080 <__aeabi_fsub+0xa4>
 800100c:	1bea      	subs	r2, r5, r7
 800100e:	2a00      	cmp	r2, #0
 8001010:	dd58      	ble.n	80010c4 <__aeabi_fsub+0xe8>
 8001012:	2f00      	cmp	r7, #0
 8001014:	d068      	beq.n	80010e8 <__aeabi_fsub+0x10c>
 8001016:	2dff      	cmp	r5, #255	; 0xff
 8001018:	d100      	bne.n	800101c <__aeabi_fsub+0x40>
 800101a:	e0d1      	b.n	80011c0 <__aeabi_fsub+0x1e4>
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	04db      	lsls	r3, r3, #19
 8001020:	4318      	orrs	r0, r3
 8001022:	2a1b      	cmp	r2, #27
 8001024:	dc00      	bgt.n	8001028 <__aeabi_fsub+0x4c>
 8001026:	e0e3      	b.n	80011f0 <__aeabi_fsub+0x214>
 8001028:	2301      	movs	r3, #1
 800102a:	4662      	mov	r2, ip
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	015a      	lsls	r2, r3, #5
 8001030:	d400      	bmi.n	8001034 <__aeabi_fsub+0x58>
 8001032:	e0ac      	b.n	800118e <__aeabi_fsub+0x1b2>
 8001034:	019b      	lsls	r3, r3, #6
 8001036:	099e      	lsrs	r6, r3, #6
 8001038:	0030      	movs	r0, r6
 800103a:	f000 fda1 	bl	8001b80 <__clzsi2>
 800103e:	0033      	movs	r3, r6
 8001040:	3805      	subs	r0, #5
 8001042:	4083      	lsls	r3, r0
 8001044:	4285      	cmp	r5, r0
 8001046:	dc00      	bgt.n	800104a <__aeabi_fsub+0x6e>
 8001048:	e0c6      	b.n	80011d8 <__aeabi_fsub+0x1fc>
 800104a:	4ab2      	ldr	r2, [pc, #712]	; (8001314 <__aeabi_fsub+0x338>)
 800104c:	1a2d      	subs	r5, r5, r0
 800104e:	4013      	ands	r3, r2
 8001050:	075a      	lsls	r2, r3, #29
 8001052:	d004      	beq.n	800105e <__aeabi_fsub+0x82>
 8001054:	220f      	movs	r2, #15
 8001056:	401a      	ands	r2, r3
 8001058:	2a04      	cmp	r2, #4
 800105a:	d000      	beq.n	800105e <__aeabi_fsub+0x82>
 800105c:	3304      	adds	r3, #4
 800105e:	015a      	lsls	r2, r3, #5
 8001060:	d400      	bmi.n	8001064 <__aeabi_fsub+0x88>
 8001062:	e097      	b.n	8001194 <__aeabi_fsub+0x1b8>
 8001064:	1c6a      	adds	r2, r5, #1
 8001066:	2dfe      	cmp	r5, #254	; 0xfe
 8001068:	d100      	bne.n	800106c <__aeabi_fsub+0x90>
 800106a:	e084      	b.n	8001176 <__aeabi_fsub+0x19a>
 800106c:	019b      	lsls	r3, r3, #6
 800106e:	0a5e      	lsrs	r6, r3, #9
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	05d0      	lsls	r0, r2, #23
 8001074:	4330      	orrs	r0, r6
 8001076:	07e4      	lsls	r4, r4, #31
 8001078:	4320      	orrs	r0, r4
 800107a:	bc80      	pop	{r7}
 800107c:	46b8      	mov	r8, r7
 800107e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001080:	1bea      	subs	r2, r5, r7
 8001082:	2a00      	cmp	r2, #0
 8001084:	dd41      	ble.n	800110a <__aeabi_fsub+0x12e>
 8001086:	2f00      	cmp	r7, #0
 8001088:	d06b      	beq.n	8001162 <__aeabi_fsub+0x186>
 800108a:	2dff      	cmp	r5, #255	; 0xff
 800108c:	d100      	bne.n	8001090 <__aeabi_fsub+0xb4>
 800108e:	e097      	b.n	80011c0 <__aeabi_fsub+0x1e4>
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	04db      	lsls	r3, r3, #19
 8001094:	4318      	orrs	r0, r3
 8001096:	2a1b      	cmp	r2, #27
 8001098:	dc00      	bgt.n	800109c <__aeabi_fsub+0xc0>
 800109a:	e0cc      	b.n	8001236 <__aeabi_fsub+0x25a>
 800109c:	2301      	movs	r3, #1
 800109e:	4463      	add	r3, ip
 80010a0:	015a      	lsls	r2, r3, #5
 80010a2:	d574      	bpl.n	800118e <__aeabi_fsub+0x1b2>
 80010a4:	3501      	adds	r5, #1
 80010a6:	2dff      	cmp	r5, #255	; 0xff
 80010a8:	d065      	beq.n	8001176 <__aeabi_fsub+0x19a>
 80010aa:	2201      	movs	r2, #1
 80010ac:	499a      	ldr	r1, [pc, #616]	; (8001318 <__aeabi_fsub+0x33c>)
 80010ae:	401a      	ands	r2, r3
 80010b0:	085b      	lsrs	r3, r3, #1
 80010b2:	400b      	ands	r3, r1
 80010b4:	4313      	orrs	r3, r2
 80010b6:	e7cb      	b.n	8001050 <__aeabi_fsub+0x74>
 80010b8:	2800      	cmp	r0, #0
 80010ba:	d01f      	beq.n	80010fc <__aeabi_fsub+0x120>
 80010bc:	428c      	cmp	r4, r1
 80010be:	d022      	beq.n	8001106 <__aeabi_fsub+0x12a>
 80010c0:	002a      	movs	r2, r5
 80010c2:	3aff      	subs	r2, #255	; 0xff
 80010c4:	2a00      	cmp	r2, #0
 80010c6:	d035      	beq.n	8001134 <__aeabi_fsub+0x158>
 80010c8:	1b7a      	subs	r2, r7, r5
 80010ca:	2d00      	cmp	r5, #0
 80010cc:	d000      	beq.n	80010d0 <__aeabi_fsub+0xf4>
 80010ce:	e099      	b.n	8001204 <__aeabi_fsub+0x228>
 80010d0:	4663      	mov	r3, ip
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d100      	bne.n	80010d8 <__aeabi_fsub+0xfc>
 80010d6:	e0dd      	b.n	8001294 <__aeabi_fsub+0x2b8>
 80010d8:	1e53      	subs	r3, r2, #1
 80010da:	2a01      	cmp	r2, #1
 80010dc:	d100      	bne.n	80010e0 <__aeabi_fsub+0x104>
 80010de:	e105      	b.n	80012ec <__aeabi_fsub+0x310>
 80010e0:	2aff      	cmp	r2, #255	; 0xff
 80010e2:	d06b      	beq.n	80011bc <__aeabi_fsub+0x1e0>
 80010e4:	001a      	movs	r2, r3
 80010e6:	e094      	b.n	8001212 <__aeabi_fsub+0x236>
 80010e8:	2800      	cmp	r0, #0
 80010ea:	d073      	beq.n	80011d4 <__aeabi_fsub+0x1f8>
 80010ec:	1e51      	subs	r1, r2, #1
 80010ee:	2a01      	cmp	r2, #1
 80010f0:	d100      	bne.n	80010f4 <__aeabi_fsub+0x118>
 80010f2:	e0df      	b.n	80012b4 <__aeabi_fsub+0x2d8>
 80010f4:	2aff      	cmp	r2, #255	; 0xff
 80010f6:	d063      	beq.n	80011c0 <__aeabi_fsub+0x1e4>
 80010f8:	000a      	movs	r2, r1
 80010fa:	e792      	b.n	8001022 <__aeabi_fsub+0x46>
 80010fc:	2201      	movs	r2, #1
 80010fe:	4051      	eors	r1, r2
 8001100:	42a1      	cmp	r1, r4
 8001102:	d000      	beq.n	8001106 <__aeabi_fsub+0x12a>
 8001104:	e782      	b.n	800100c <__aeabi_fsub+0x30>
 8001106:	002a      	movs	r2, r5
 8001108:	3aff      	subs	r2, #255	; 0xff
 800110a:	2a00      	cmp	r2, #0
 800110c:	d036      	beq.n	800117c <__aeabi_fsub+0x1a0>
 800110e:	1b7a      	subs	r2, r7, r5
 8001110:	2d00      	cmp	r5, #0
 8001112:	d100      	bne.n	8001116 <__aeabi_fsub+0x13a>
 8001114:	e0aa      	b.n	800126c <__aeabi_fsub+0x290>
 8001116:	2fff      	cmp	r7, #255	; 0xff
 8001118:	d100      	bne.n	800111c <__aeabi_fsub+0x140>
 800111a:	e0da      	b.n	80012d2 <__aeabi_fsub+0x2f6>
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	4661      	mov	r1, ip
 8001120:	04db      	lsls	r3, r3, #19
 8001122:	4319      	orrs	r1, r3
 8001124:	468c      	mov	ip, r1
 8001126:	2a1b      	cmp	r2, #27
 8001128:	dc00      	bgt.n	800112c <__aeabi_fsub+0x150>
 800112a:	e0d4      	b.n	80012d6 <__aeabi_fsub+0x2fa>
 800112c:	2301      	movs	r3, #1
 800112e:	003d      	movs	r5, r7
 8001130:	181b      	adds	r3, r3, r0
 8001132:	e7b5      	b.n	80010a0 <__aeabi_fsub+0xc4>
 8001134:	27fe      	movs	r7, #254	; 0xfe
 8001136:	1c6a      	adds	r2, r5, #1
 8001138:	4217      	tst	r7, r2
 800113a:	d171      	bne.n	8001220 <__aeabi_fsub+0x244>
 800113c:	2d00      	cmp	r5, #0
 800113e:	d000      	beq.n	8001142 <__aeabi_fsub+0x166>
 8001140:	e09e      	b.n	8001280 <__aeabi_fsub+0x2a4>
 8001142:	4663      	mov	r3, ip
 8001144:	2b00      	cmp	r3, #0
 8001146:	d100      	bne.n	800114a <__aeabi_fsub+0x16e>
 8001148:	e0d5      	b.n	80012f6 <__aeabi_fsub+0x31a>
 800114a:	2200      	movs	r2, #0
 800114c:	2800      	cmp	r0, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_fsub+0x176>
 8001150:	e78f      	b.n	8001072 <__aeabi_fsub+0x96>
 8001152:	1a1b      	subs	r3, r3, r0
 8001154:	015e      	lsls	r6, r3, #5
 8001156:	d400      	bmi.n	800115a <__aeabi_fsub+0x17e>
 8001158:	e0d6      	b.n	8001308 <__aeabi_fsub+0x32c>
 800115a:	4663      	mov	r3, ip
 800115c:	000c      	movs	r4, r1
 800115e:	1ac3      	subs	r3, r0, r3
 8001160:	e776      	b.n	8001050 <__aeabi_fsub+0x74>
 8001162:	2800      	cmp	r0, #0
 8001164:	d036      	beq.n	80011d4 <__aeabi_fsub+0x1f8>
 8001166:	1e51      	subs	r1, r2, #1
 8001168:	2a01      	cmp	r2, #1
 800116a:	d100      	bne.n	800116e <__aeabi_fsub+0x192>
 800116c:	e09a      	b.n	80012a4 <__aeabi_fsub+0x2c8>
 800116e:	2aff      	cmp	r2, #255	; 0xff
 8001170:	d026      	beq.n	80011c0 <__aeabi_fsub+0x1e4>
 8001172:	000a      	movs	r2, r1
 8001174:	e78f      	b.n	8001096 <__aeabi_fsub+0xba>
 8001176:	22ff      	movs	r2, #255	; 0xff
 8001178:	2600      	movs	r6, #0
 800117a:	e77a      	b.n	8001072 <__aeabi_fsub+0x96>
 800117c:	27fe      	movs	r7, #254	; 0xfe
 800117e:	1c6a      	adds	r2, r5, #1
 8001180:	4217      	tst	r7, r2
 8001182:	d062      	beq.n	800124a <__aeabi_fsub+0x26e>
 8001184:	2aff      	cmp	r2, #255	; 0xff
 8001186:	d0f6      	beq.n	8001176 <__aeabi_fsub+0x19a>
 8001188:	0015      	movs	r5, r2
 800118a:	4460      	add	r0, ip
 800118c:	0843      	lsrs	r3, r0, #1
 800118e:	075a      	lsls	r2, r3, #29
 8001190:	d000      	beq.n	8001194 <__aeabi_fsub+0x1b8>
 8001192:	e75f      	b.n	8001054 <__aeabi_fsub+0x78>
 8001194:	08db      	lsrs	r3, r3, #3
 8001196:	2dff      	cmp	r5, #255	; 0xff
 8001198:	d012      	beq.n	80011c0 <__aeabi_fsub+0x1e4>
 800119a:	025b      	lsls	r3, r3, #9
 800119c:	0a5e      	lsrs	r6, r3, #9
 800119e:	b2ea      	uxtb	r2, r5
 80011a0:	e767      	b.n	8001072 <__aeabi_fsub+0x96>
 80011a2:	4662      	mov	r2, ip
 80011a4:	2a00      	cmp	r2, #0
 80011a6:	d100      	bne.n	80011aa <__aeabi_fsub+0x1ce>
 80011a8:	e093      	b.n	80012d2 <__aeabi_fsub+0x2f6>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	d008      	beq.n	80011c0 <__aeabi_fsub+0x1e4>
 80011ae:	2280      	movs	r2, #128	; 0x80
 80011b0:	03d2      	lsls	r2, r2, #15
 80011b2:	4213      	tst	r3, r2
 80011b4:	d004      	beq.n	80011c0 <__aeabi_fsub+0x1e4>
 80011b6:	4640      	mov	r0, r8
 80011b8:	4210      	tst	r0, r2
 80011ba:	d101      	bne.n	80011c0 <__aeabi_fsub+0x1e4>
 80011bc:	000c      	movs	r4, r1
 80011be:	4643      	mov	r3, r8
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0d8      	beq.n	8001176 <__aeabi_fsub+0x19a>
 80011c4:	2680      	movs	r6, #128	; 0x80
 80011c6:	03f6      	lsls	r6, r6, #15
 80011c8:	431e      	orrs	r6, r3
 80011ca:	0276      	lsls	r6, r6, #9
 80011cc:	22ff      	movs	r2, #255	; 0xff
 80011ce:	0a76      	lsrs	r6, r6, #9
 80011d0:	e74f      	b.n	8001072 <__aeabi_fsub+0x96>
 80011d2:	4643      	mov	r3, r8
 80011d4:	0015      	movs	r5, r2
 80011d6:	e7de      	b.n	8001196 <__aeabi_fsub+0x1ba>
 80011d8:	2220      	movs	r2, #32
 80011da:	1b40      	subs	r0, r0, r5
 80011dc:	3001      	adds	r0, #1
 80011de:	1a12      	subs	r2, r2, r0
 80011e0:	0019      	movs	r1, r3
 80011e2:	4093      	lsls	r3, r2
 80011e4:	40c1      	lsrs	r1, r0
 80011e6:	1e5a      	subs	r2, r3, #1
 80011e8:	4193      	sbcs	r3, r2
 80011ea:	2500      	movs	r5, #0
 80011ec:	430b      	orrs	r3, r1
 80011ee:	e72f      	b.n	8001050 <__aeabi_fsub+0x74>
 80011f0:	2320      	movs	r3, #32
 80011f2:	1a9b      	subs	r3, r3, r2
 80011f4:	0001      	movs	r1, r0
 80011f6:	4098      	lsls	r0, r3
 80011f8:	0003      	movs	r3, r0
 80011fa:	40d1      	lsrs	r1, r2
 80011fc:	1e5a      	subs	r2, r3, #1
 80011fe:	4193      	sbcs	r3, r2
 8001200:	430b      	orrs	r3, r1
 8001202:	e712      	b.n	800102a <__aeabi_fsub+0x4e>
 8001204:	2fff      	cmp	r7, #255	; 0xff
 8001206:	d0d9      	beq.n	80011bc <__aeabi_fsub+0x1e0>
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	4664      	mov	r4, ip
 800120c:	04db      	lsls	r3, r3, #19
 800120e:	431c      	orrs	r4, r3
 8001210:	46a4      	mov	ip, r4
 8001212:	2a1b      	cmp	r2, #27
 8001214:	dd52      	ble.n	80012bc <__aeabi_fsub+0x2e0>
 8001216:	2301      	movs	r3, #1
 8001218:	000c      	movs	r4, r1
 800121a:	003d      	movs	r5, r7
 800121c:	1ac3      	subs	r3, r0, r3
 800121e:	e706      	b.n	800102e <__aeabi_fsub+0x52>
 8001220:	4663      	mov	r3, ip
 8001222:	1a1e      	subs	r6, r3, r0
 8001224:	0173      	lsls	r3, r6, #5
 8001226:	d439      	bmi.n	800129c <__aeabi_fsub+0x2c0>
 8001228:	2e00      	cmp	r6, #0
 800122a:	d000      	beq.n	800122e <__aeabi_fsub+0x252>
 800122c:	e704      	b.n	8001038 <__aeabi_fsub+0x5c>
 800122e:	2400      	movs	r4, #0
 8001230:	2200      	movs	r2, #0
 8001232:	2600      	movs	r6, #0
 8001234:	e71d      	b.n	8001072 <__aeabi_fsub+0x96>
 8001236:	2320      	movs	r3, #32
 8001238:	1a9b      	subs	r3, r3, r2
 800123a:	0001      	movs	r1, r0
 800123c:	4098      	lsls	r0, r3
 800123e:	0003      	movs	r3, r0
 8001240:	40d1      	lsrs	r1, r2
 8001242:	1e5a      	subs	r2, r3, #1
 8001244:	4193      	sbcs	r3, r2
 8001246:	430b      	orrs	r3, r1
 8001248:	e729      	b.n	800109e <__aeabi_fsub+0xc2>
 800124a:	2d00      	cmp	r5, #0
 800124c:	d1a9      	bne.n	80011a2 <__aeabi_fsub+0x1c6>
 800124e:	4663      	mov	r3, ip
 8001250:	2b00      	cmp	r3, #0
 8001252:	d056      	beq.n	8001302 <__aeabi_fsub+0x326>
 8001254:	2200      	movs	r2, #0
 8001256:	2800      	cmp	r0, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x280>
 800125a:	e70a      	b.n	8001072 <__aeabi_fsub+0x96>
 800125c:	0003      	movs	r3, r0
 800125e:	4463      	add	r3, ip
 8001260:	015a      	lsls	r2, r3, #5
 8001262:	d594      	bpl.n	800118e <__aeabi_fsub+0x1b2>
 8001264:	4a2b      	ldr	r2, [pc, #172]	; (8001314 <__aeabi_fsub+0x338>)
 8001266:	3501      	adds	r5, #1
 8001268:	4013      	ands	r3, r2
 800126a:	e790      	b.n	800118e <__aeabi_fsub+0x1b2>
 800126c:	4663      	mov	r3, ip
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0af      	beq.n	80011d2 <__aeabi_fsub+0x1f6>
 8001272:	1e53      	subs	r3, r2, #1
 8001274:	2a01      	cmp	r2, #1
 8001276:	d015      	beq.n	80012a4 <__aeabi_fsub+0x2c8>
 8001278:	2aff      	cmp	r2, #255	; 0xff
 800127a:	d02a      	beq.n	80012d2 <__aeabi_fsub+0x2f6>
 800127c:	001a      	movs	r2, r3
 800127e:	e752      	b.n	8001126 <__aeabi_fsub+0x14a>
 8001280:	4662      	mov	r2, ip
 8001282:	2a00      	cmp	r2, #0
 8001284:	d191      	bne.n	80011aa <__aeabi_fsub+0x1ce>
 8001286:	2800      	cmp	r0, #0
 8001288:	d198      	bne.n	80011bc <__aeabi_fsub+0x1e0>
 800128a:	2680      	movs	r6, #128	; 0x80
 800128c:	2400      	movs	r4, #0
 800128e:	22ff      	movs	r2, #255	; 0xff
 8001290:	03f6      	lsls	r6, r6, #15
 8001292:	e6ee      	b.n	8001072 <__aeabi_fsub+0x96>
 8001294:	000c      	movs	r4, r1
 8001296:	4643      	mov	r3, r8
 8001298:	0015      	movs	r5, r2
 800129a:	e77c      	b.n	8001196 <__aeabi_fsub+0x1ba>
 800129c:	4663      	mov	r3, ip
 800129e:	000c      	movs	r4, r1
 80012a0:	1ac6      	subs	r6, r0, r3
 80012a2:	e6c9      	b.n	8001038 <__aeabi_fsub+0x5c>
 80012a4:	0003      	movs	r3, r0
 80012a6:	4463      	add	r3, ip
 80012a8:	2501      	movs	r5, #1
 80012aa:	015a      	lsls	r2, r3, #5
 80012ac:	d400      	bmi.n	80012b0 <__aeabi_fsub+0x2d4>
 80012ae:	e76e      	b.n	800118e <__aeabi_fsub+0x1b2>
 80012b0:	2502      	movs	r5, #2
 80012b2:	e6fa      	b.n	80010aa <__aeabi_fsub+0xce>
 80012b4:	4663      	mov	r3, ip
 80012b6:	2501      	movs	r5, #1
 80012b8:	1a1b      	subs	r3, r3, r0
 80012ba:	e6b8      	b.n	800102e <__aeabi_fsub+0x52>
 80012bc:	4664      	mov	r4, ip
 80012be:	2320      	movs	r3, #32
 80012c0:	40d4      	lsrs	r4, r2
 80012c2:	1a9b      	subs	r3, r3, r2
 80012c4:	4662      	mov	r2, ip
 80012c6:	409a      	lsls	r2, r3
 80012c8:	0013      	movs	r3, r2
 80012ca:	1e5a      	subs	r2, r3, #1
 80012cc:	4193      	sbcs	r3, r2
 80012ce:	4323      	orrs	r3, r4
 80012d0:	e7a2      	b.n	8001218 <__aeabi_fsub+0x23c>
 80012d2:	4643      	mov	r3, r8
 80012d4:	e774      	b.n	80011c0 <__aeabi_fsub+0x1e4>
 80012d6:	4661      	mov	r1, ip
 80012d8:	2320      	movs	r3, #32
 80012da:	40d1      	lsrs	r1, r2
 80012dc:	1a9b      	subs	r3, r3, r2
 80012de:	4662      	mov	r2, ip
 80012e0:	409a      	lsls	r2, r3
 80012e2:	0013      	movs	r3, r2
 80012e4:	1e5a      	subs	r2, r3, #1
 80012e6:	4193      	sbcs	r3, r2
 80012e8:	430b      	orrs	r3, r1
 80012ea:	e720      	b.n	800112e <__aeabi_fsub+0x152>
 80012ec:	4663      	mov	r3, ip
 80012ee:	000c      	movs	r4, r1
 80012f0:	2501      	movs	r5, #1
 80012f2:	1ac3      	subs	r3, r0, r3
 80012f4:	e69b      	b.n	800102e <__aeabi_fsub+0x52>
 80012f6:	2800      	cmp	r0, #0
 80012f8:	d099      	beq.n	800122e <__aeabi_fsub+0x252>
 80012fa:	000c      	movs	r4, r1
 80012fc:	4646      	mov	r6, r8
 80012fe:	2200      	movs	r2, #0
 8001300:	e6b7      	b.n	8001072 <__aeabi_fsub+0x96>
 8001302:	4646      	mov	r6, r8
 8001304:	2200      	movs	r2, #0
 8001306:	e6b4      	b.n	8001072 <__aeabi_fsub+0x96>
 8001308:	2b00      	cmp	r3, #0
 800130a:	d000      	beq.n	800130e <__aeabi_fsub+0x332>
 800130c:	e73f      	b.n	800118e <__aeabi_fsub+0x1b2>
 800130e:	2400      	movs	r4, #0
 8001310:	2600      	movs	r6, #0
 8001312:	e6ae      	b.n	8001072 <__aeabi_fsub+0x96>
 8001314:	fbffffff 	.word	0xfbffffff
 8001318:	7dffffff 	.word	0x7dffffff

0800131c <__aeabi_f2iz>:
 800131c:	0241      	lsls	r1, r0, #9
 800131e:	0042      	lsls	r2, r0, #1
 8001320:	0fc3      	lsrs	r3, r0, #31
 8001322:	0a49      	lsrs	r1, r1, #9
 8001324:	2000      	movs	r0, #0
 8001326:	0e12      	lsrs	r2, r2, #24
 8001328:	2a7e      	cmp	r2, #126	; 0x7e
 800132a:	dd03      	ble.n	8001334 <__aeabi_f2iz+0x18>
 800132c:	2a9d      	cmp	r2, #157	; 0x9d
 800132e:	dd02      	ble.n	8001336 <__aeabi_f2iz+0x1a>
 8001330:	4a09      	ldr	r2, [pc, #36]	; (8001358 <__aeabi_f2iz+0x3c>)
 8001332:	1898      	adds	r0, r3, r2
 8001334:	4770      	bx	lr
 8001336:	2080      	movs	r0, #128	; 0x80
 8001338:	0400      	lsls	r0, r0, #16
 800133a:	4301      	orrs	r1, r0
 800133c:	2a95      	cmp	r2, #149	; 0x95
 800133e:	dc07      	bgt.n	8001350 <__aeabi_f2iz+0x34>
 8001340:	2096      	movs	r0, #150	; 0x96
 8001342:	1a82      	subs	r2, r0, r2
 8001344:	40d1      	lsrs	r1, r2
 8001346:	4248      	negs	r0, r1
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1f3      	bne.n	8001334 <__aeabi_f2iz+0x18>
 800134c:	0008      	movs	r0, r1
 800134e:	e7f1      	b.n	8001334 <__aeabi_f2iz+0x18>
 8001350:	3a96      	subs	r2, #150	; 0x96
 8001352:	4091      	lsls	r1, r2
 8001354:	e7f7      	b.n	8001346 <__aeabi_f2iz+0x2a>
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	7fffffff 	.word	0x7fffffff

0800135c <__aeabi_ui2f>:
 800135c:	b570      	push	{r4, r5, r6, lr}
 800135e:	1e04      	subs	r4, r0, #0
 8001360:	d00e      	beq.n	8001380 <__aeabi_ui2f+0x24>
 8001362:	f000 fc0d 	bl	8001b80 <__clzsi2>
 8001366:	239e      	movs	r3, #158	; 0x9e
 8001368:	0001      	movs	r1, r0
 800136a:	1a1b      	subs	r3, r3, r0
 800136c:	2b96      	cmp	r3, #150	; 0x96
 800136e:	dc0c      	bgt.n	800138a <__aeabi_ui2f+0x2e>
 8001370:	2808      	cmp	r0, #8
 8001372:	d02c      	beq.n	80013ce <__aeabi_ui2f+0x72>
 8001374:	3908      	subs	r1, #8
 8001376:	408c      	lsls	r4, r1
 8001378:	0264      	lsls	r4, r4, #9
 800137a:	0a64      	lsrs	r4, r4, #9
 800137c:	b2d8      	uxtb	r0, r3
 800137e:	e001      	b.n	8001384 <__aeabi_ui2f+0x28>
 8001380:	2000      	movs	r0, #0
 8001382:	2400      	movs	r4, #0
 8001384:	05c0      	lsls	r0, r0, #23
 8001386:	4320      	orrs	r0, r4
 8001388:	bd70      	pop	{r4, r5, r6, pc}
 800138a:	2b99      	cmp	r3, #153	; 0x99
 800138c:	dd0a      	ble.n	80013a4 <__aeabi_ui2f+0x48>
 800138e:	0002      	movs	r2, r0
 8001390:	0020      	movs	r0, r4
 8001392:	321b      	adds	r2, #27
 8001394:	4090      	lsls	r0, r2
 8001396:	0002      	movs	r2, r0
 8001398:	1e50      	subs	r0, r2, #1
 800139a:	4182      	sbcs	r2, r0
 800139c:	2005      	movs	r0, #5
 800139e:	1a40      	subs	r0, r0, r1
 80013a0:	40c4      	lsrs	r4, r0
 80013a2:	4314      	orrs	r4, r2
 80013a4:	2905      	cmp	r1, #5
 80013a6:	dc16      	bgt.n	80013d6 <__aeabi_ui2f+0x7a>
 80013a8:	0022      	movs	r2, r4
 80013aa:	480f      	ldr	r0, [pc, #60]	; (80013e8 <__aeabi_ui2f+0x8c>)
 80013ac:	4002      	ands	r2, r0
 80013ae:	0765      	lsls	r5, r4, #29
 80013b0:	d009      	beq.n	80013c6 <__aeabi_ui2f+0x6a>
 80013b2:	250f      	movs	r5, #15
 80013b4:	402c      	ands	r4, r5
 80013b6:	2c04      	cmp	r4, #4
 80013b8:	d005      	beq.n	80013c6 <__aeabi_ui2f+0x6a>
 80013ba:	3204      	adds	r2, #4
 80013bc:	0154      	lsls	r4, r2, #5
 80013be:	d502      	bpl.n	80013c6 <__aeabi_ui2f+0x6a>
 80013c0:	239f      	movs	r3, #159	; 0x9f
 80013c2:	4002      	ands	r2, r0
 80013c4:	1a5b      	subs	r3, r3, r1
 80013c6:	0192      	lsls	r2, r2, #6
 80013c8:	0a54      	lsrs	r4, r2, #9
 80013ca:	b2d8      	uxtb	r0, r3
 80013cc:	e7da      	b.n	8001384 <__aeabi_ui2f+0x28>
 80013ce:	0264      	lsls	r4, r4, #9
 80013d0:	2096      	movs	r0, #150	; 0x96
 80013d2:	0a64      	lsrs	r4, r4, #9
 80013d4:	e7d6      	b.n	8001384 <__aeabi_ui2f+0x28>
 80013d6:	1f4a      	subs	r2, r1, #5
 80013d8:	4094      	lsls	r4, r2
 80013da:	0022      	movs	r2, r4
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <__aeabi_ui2f+0x8c>)
 80013de:	4002      	ands	r2, r0
 80013e0:	0765      	lsls	r5, r4, #29
 80013e2:	d0f0      	beq.n	80013c6 <__aeabi_ui2f+0x6a>
 80013e4:	e7e5      	b.n	80013b2 <__aeabi_ui2f+0x56>
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	fbffffff 	.word	0xfbffffff

080013ec <__aeabi_ddiv>:
 80013ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ee:	4657      	mov	r7, sl
 80013f0:	464e      	mov	r6, r9
 80013f2:	4645      	mov	r5, r8
 80013f4:	46de      	mov	lr, fp
 80013f6:	b5e0      	push	{r5, r6, r7, lr}
 80013f8:	030c      	lsls	r4, r1, #12
 80013fa:	001f      	movs	r7, r3
 80013fc:	004b      	lsls	r3, r1, #1
 80013fe:	4681      	mov	r9, r0
 8001400:	4692      	mov	sl, r2
 8001402:	0005      	movs	r5, r0
 8001404:	b085      	sub	sp, #20
 8001406:	0b24      	lsrs	r4, r4, #12
 8001408:	0d5b      	lsrs	r3, r3, #21
 800140a:	0fce      	lsrs	r6, r1, #31
 800140c:	2b00      	cmp	r3, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_ddiv+0x26>
 8001410:	e152      	b.n	80016b8 <__aeabi_ddiv+0x2cc>
 8001412:	4ad2      	ldr	r2, [pc, #840]	; (800175c <__aeabi_ddiv+0x370>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d100      	bne.n	800141a <__aeabi_ddiv+0x2e>
 8001418:	e16e      	b.n	80016f8 <__aeabi_ddiv+0x30c>
 800141a:	0f42      	lsrs	r2, r0, #29
 800141c:	00e4      	lsls	r4, r4, #3
 800141e:	4314      	orrs	r4, r2
 8001420:	2280      	movs	r2, #128	; 0x80
 8001422:	0412      	lsls	r2, r2, #16
 8001424:	4322      	orrs	r2, r4
 8001426:	4690      	mov	r8, r2
 8001428:	4acd      	ldr	r2, [pc, #820]	; (8001760 <__aeabi_ddiv+0x374>)
 800142a:	00c5      	lsls	r5, r0, #3
 800142c:	4693      	mov	fp, r2
 800142e:	449b      	add	fp, r3
 8001430:	2300      	movs	r3, #0
 8001432:	4699      	mov	r9, r3
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	033c      	lsls	r4, r7, #12
 8001438:	007b      	lsls	r3, r7, #1
 800143a:	4650      	mov	r0, sl
 800143c:	0b24      	lsrs	r4, r4, #12
 800143e:	0d5b      	lsrs	r3, r3, #21
 8001440:	0fff      	lsrs	r7, r7, #31
 8001442:	2b00      	cmp	r3, #0
 8001444:	d100      	bne.n	8001448 <__aeabi_ddiv+0x5c>
 8001446:	e11a      	b.n	800167e <__aeabi_ddiv+0x292>
 8001448:	4ac4      	ldr	r2, [pc, #784]	; (800175c <__aeabi_ddiv+0x370>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d100      	bne.n	8001450 <__aeabi_ddiv+0x64>
 800144e:	e15e      	b.n	800170e <__aeabi_ddiv+0x322>
 8001450:	0f42      	lsrs	r2, r0, #29
 8001452:	00e4      	lsls	r4, r4, #3
 8001454:	4322      	orrs	r2, r4
 8001456:	2480      	movs	r4, #128	; 0x80
 8001458:	0424      	lsls	r4, r4, #16
 800145a:	4314      	orrs	r4, r2
 800145c:	4ac0      	ldr	r2, [pc, #768]	; (8001760 <__aeabi_ddiv+0x374>)
 800145e:	00c1      	lsls	r1, r0, #3
 8001460:	4694      	mov	ip, r2
 8001462:	465a      	mov	r2, fp
 8001464:	4463      	add	r3, ip
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	469b      	mov	fp, r3
 800146a:	2000      	movs	r0, #0
 800146c:	0033      	movs	r3, r6
 800146e:	407b      	eors	r3, r7
 8001470:	469a      	mov	sl, r3
 8001472:	464b      	mov	r3, r9
 8001474:	2b0f      	cmp	r3, #15
 8001476:	d827      	bhi.n	80014c8 <__aeabi_ddiv+0xdc>
 8001478:	4aba      	ldr	r2, [pc, #744]	; (8001764 <__aeabi_ddiv+0x378>)
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	58d3      	ldr	r3, [r2, r3]
 800147e:	469f      	mov	pc, r3
 8001480:	46b2      	mov	sl, r6
 8001482:	9b00      	ldr	r3, [sp, #0]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d016      	beq.n	80014b6 <__aeabi_ddiv+0xca>
 8001488:	2b03      	cmp	r3, #3
 800148a:	d100      	bne.n	800148e <__aeabi_ddiv+0xa2>
 800148c:	e287      	b.n	800199e <__aeabi_ddiv+0x5b2>
 800148e:	2b01      	cmp	r3, #1
 8001490:	d000      	beq.n	8001494 <__aeabi_ddiv+0xa8>
 8001492:	e0d5      	b.n	8001640 <__aeabi_ddiv+0x254>
 8001494:	2300      	movs	r3, #0
 8001496:	2200      	movs	r2, #0
 8001498:	2500      	movs	r5, #0
 800149a:	051b      	lsls	r3, r3, #20
 800149c:	4313      	orrs	r3, r2
 800149e:	4652      	mov	r2, sl
 80014a0:	07d2      	lsls	r2, r2, #31
 80014a2:	4313      	orrs	r3, r2
 80014a4:	0028      	movs	r0, r5
 80014a6:	0019      	movs	r1, r3
 80014a8:	b005      	add	sp, #20
 80014aa:	bcf0      	pop	{r4, r5, r6, r7}
 80014ac:	46bb      	mov	fp, r7
 80014ae:	46b2      	mov	sl, r6
 80014b0:	46a9      	mov	r9, r5
 80014b2:	46a0      	mov	r8, r4
 80014b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b6:	2200      	movs	r2, #0
 80014b8:	2500      	movs	r5, #0
 80014ba:	4ba8      	ldr	r3, [pc, #672]	; (800175c <__aeabi_ddiv+0x370>)
 80014bc:	e7ed      	b.n	800149a <__aeabi_ddiv+0xae>
 80014be:	46ba      	mov	sl, r7
 80014c0:	46a0      	mov	r8, r4
 80014c2:	000d      	movs	r5, r1
 80014c4:	9000      	str	r0, [sp, #0]
 80014c6:	e7dc      	b.n	8001482 <__aeabi_ddiv+0x96>
 80014c8:	4544      	cmp	r4, r8
 80014ca:	d200      	bcs.n	80014ce <__aeabi_ddiv+0xe2>
 80014cc:	e1c4      	b.n	8001858 <__aeabi_ddiv+0x46c>
 80014ce:	d100      	bne.n	80014d2 <__aeabi_ddiv+0xe6>
 80014d0:	e1bf      	b.n	8001852 <__aeabi_ddiv+0x466>
 80014d2:	2301      	movs	r3, #1
 80014d4:	425b      	negs	r3, r3
 80014d6:	469c      	mov	ip, r3
 80014d8:	002e      	movs	r6, r5
 80014da:	4640      	mov	r0, r8
 80014dc:	2500      	movs	r5, #0
 80014de:	44e3      	add	fp, ip
 80014e0:	0223      	lsls	r3, r4, #8
 80014e2:	0e0c      	lsrs	r4, r1, #24
 80014e4:	431c      	orrs	r4, r3
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	4699      	mov	r9, r3
 80014ea:	0423      	lsls	r3, r4, #16
 80014ec:	020a      	lsls	r2, r1, #8
 80014ee:	0c1f      	lsrs	r7, r3, #16
 80014f0:	4649      	mov	r1, r9
 80014f2:	9200      	str	r2, [sp, #0]
 80014f4:	9701      	str	r7, [sp, #4]
 80014f6:	f7fe fe8b 	bl	8000210 <__aeabi_uidivmod>
 80014fa:	0002      	movs	r2, r0
 80014fc:	437a      	muls	r2, r7
 80014fe:	040b      	lsls	r3, r1, #16
 8001500:	0c31      	lsrs	r1, r6, #16
 8001502:	4680      	mov	r8, r0
 8001504:	4319      	orrs	r1, r3
 8001506:	428a      	cmp	r2, r1
 8001508:	d907      	bls.n	800151a <__aeabi_ddiv+0x12e>
 800150a:	2301      	movs	r3, #1
 800150c:	425b      	negs	r3, r3
 800150e:	469c      	mov	ip, r3
 8001510:	1909      	adds	r1, r1, r4
 8001512:	44e0      	add	r8, ip
 8001514:	428c      	cmp	r4, r1
 8001516:	d800      	bhi.n	800151a <__aeabi_ddiv+0x12e>
 8001518:	e201      	b.n	800191e <__aeabi_ddiv+0x532>
 800151a:	1a88      	subs	r0, r1, r2
 800151c:	4649      	mov	r1, r9
 800151e:	f7fe fe77 	bl	8000210 <__aeabi_uidivmod>
 8001522:	9a01      	ldr	r2, [sp, #4]
 8001524:	0436      	lsls	r6, r6, #16
 8001526:	4342      	muls	r2, r0
 8001528:	0409      	lsls	r1, r1, #16
 800152a:	0c36      	lsrs	r6, r6, #16
 800152c:	0003      	movs	r3, r0
 800152e:	430e      	orrs	r6, r1
 8001530:	42b2      	cmp	r2, r6
 8001532:	d904      	bls.n	800153e <__aeabi_ddiv+0x152>
 8001534:	1936      	adds	r6, r6, r4
 8001536:	3b01      	subs	r3, #1
 8001538:	42b4      	cmp	r4, r6
 800153a:	d800      	bhi.n	800153e <__aeabi_ddiv+0x152>
 800153c:	e1e9      	b.n	8001912 <__aeabi_ddiv+0x526>
 800153e:	1ab0      	subs	r0, r6, r2
 8001540:	4642      	mov	r2, r8
 8001542:	9e00      	ldr	r6, [sp, #0]
 8001544:	0412      	lsls	r2, r2, #16
 8001546:	431a      	orrs	r2, r3
 8001548:	0c33      	lsrs	r3, r6, #16
 800154a:	001f      	movs	r7, r3
 800154c:	0c11      	lsrs	r1, r2, #16
 800154e:	4690      	mov	r8, r2
 8001550:	9302      	str	r3, [sp, #8]
 8001552:	0413      	lsls	r3, r2, #16
 8001554:	0432      	lsls	r2, r6, #16
 8001556:	0c16      	lsrs	r6, r2, #16
 8001558:	0032      	movs	r2, r6
 800155a:	0c1b      	lsrs	r3, r3, #16
 800155c:	435a      	muls	r2, r3
 800155e:	9603      	str	r6, [sp, #12]
 8001560:	437b      	muls	r3, r7
 8001562:	434e      	muls	r6, r1
 8001564:	4379      	muls	r1, r7
 8001566:	0c17      	lsrs	r7, r2, #16
 8001568:	46bc      	mov	ip, r7
 800156a:	199b      	adds	r3, r3, r6
 800156c:	4463      	add	r3, ip
 800156e:	429e      	cmp	r6, r3
 8001570:	d903      	bls.n	800157a <__aeabi_ddiv+0x18e>
 8001572:	2680      	movs	r6, #128	; 0x80
 8001574:	0276      	lsls	r6, r6, #9
 8001576:	46b4      	mov	ip, r6
 8001578:	4461      	add	r1, ip
 800157a:	0c1e      	lsrs	r6, r3, #16
 800157c:	1871      	adds	r1, r6, r1
 800157e:	0416      	lsls	r6, r2, #16
 8001580:	041b      	lsls	r3, r3, #16
 8001582:	0c36      	lsrs	r6, r6, #16
 8001584:	199e      	adds	r6, r3, r6
 8001586:	4288      	cmp	r0, r1
 8001588:	d302      	bcc.n	8001590 <__aeabi_ddiv+0x1a4>
 800158a:	d112      	bne.n	80015b2 <__aeabi_ddiv+0x1c6>
 800158c:	42b5      	cmp	r5, r6
 800158e:	d210      	bcs.n	80015b2 <__aeabi_ddiv+0x1c6>
 8001590:	4643      	mov	r3, r8
 8001592:	1e5a      	subs	r2, r3, #1
 8001594:	9b00      	ldr	r3, [sp, #0]
 8001596:	469c      	mov	ip, r3
 8001598:	4465      	add	r5, ip
 800159a:	001f      	movs	r7, r3
 800159c:	429d      	cmp	r5, r3
 800159e:	419b      	sbcs	r3, r3
 80015a0:	425b      	negs	r3, r3
 80015a2:	191b      	adds	r3, r3, r4
 80015a4:	18c0      	adds	r0, r0, r3
 80015a6:	4284      	cmp	r4, r0
 80015a8:	d200      	bcs.n	80015ac <__aeabi_ddiv+0x1c0>
 80015aa:	e19e      	b.n	80018ea <__aeabi_ddiv+0x4fe>
 80015ac:	d100      	bne.n	80015b0 <__aeabi_ddiv+0x1c4>
 80015ae:	e199      	b.n	80018e4 <__aeabi_ddiv+0x4f8>
 80015b0:	4690      	mov	r8, r2
 80015b2:	1bae      	subs	r6, r5, r6
 80015b4:	42b5      	cmp	r5, r6
 80015b6:	41ad      	sbcs	r5, r5
 80015b8:	1a40      	subs	r0, r0, r1
 80015ba:	426d      	negs	r5, r5
 80015bc:	1b40      	subs	r0, r0, r5
 80015be:	4284      	cmp	r4, r0
 80015c0:	d100      	bne.n	80015c4 <__aeabi_ddiv+0x1d8>
 80015c2:	e1d2      	b.n	800196a <__aeabi_ddiv+0x57e>
 80015c4:	4649      	mov	r1, r9
 80015c6:	f7fe fe23 	bl	8000210 <__aeabi_uidivmod>
 80015ca:	9a01      	ldr	r2, [sp, #4]
 80015cc:	040b      	lsls	r3, r1, #16
 80015ce:	4342      	muls	r2, r0
 80015d0:	0c31      	lsrs	r1, r6, #16
 80015d2:	0005      	movs	r5, r0
 80015d4:	4319      	orrs	r1, r3
 80015d6:	428a      	cmp	r2, r1
 80015d8:	d900      	bls.n	80015dc <__aeabi_ddiv+0x1f0>
 80015da:	e16c      	b.n	80018b6 <__aeabi_ddiv+0x4ca>
 80015dc:	1a88      	subs	r0, r1, r2
 80015de:	4649      	mov	r1, r9
 80015e0:	f7fe fe16 	bl	8000210 <__aeabi_uidivmod>
 80015e4:	9a01      	ldr	r2, [sp, #4]
 80015e6:	0436      	lsls	r6, r6, #16
 80015e8:	4342      	muls	r2, r0
 80015ea:	0409      	lsls	r1, r1, #16
 80015ec:	0c36      	lsrs	r6, r6, #16
 80015ee:	0003      	movs	r3, r0
 80015f0:	430e      	orrs	r6, r1
 80015f2:	42b2      	cmp	r2, r6
 80015f4:	d900      	bls.n	80015f8 <__aeabi_ddiv+0x20c>
 80015f6:	e153      	b.n	80018a0 <__aeabi_ddiv+0x4b4>
 80015f8:	9803      	ldr	r0, [sp, #12]
 80015fa:	1ab6      	subs	r6, r6, r2
 80015fc:	0002      	movs	r2, r0
 80015fe:	042d      	lsls	r5, r5, #16
 8001600:	431d      	orrs	r5, r3
 8001602:	9f02      	ldr	r7, [sp, #8]
 8001604:	042b      	lsls	r3, r5, #16
 8001606:	0c1b      	lsrs	r3, r3, #16
 8001608:	435a      	muls	r2, r3
 800160a:	437b      	muls	r3, r7
 800160c:	469c      	mov	ip, r3
 800160e:	0c29      	lsrs	r1, r5, #16
 8001610:	4348      	muls	r0, r1
 8001612:	0c13      	lsrs	r3, r2, #16
 8001614:	4484      	add	ip, r0
 8001616:	4463      	add	r3, ip
 8001618:	4379      	muls	r1, r7
 800161a:	4298      	cmp	r0, r3
 800161c:	d903      	bls.n	8001626 <__aeabi_ddiv+0x23a>
 800161e:	2080      	movs	r0, #128	; 0x80
 8001620:	0240      	lsls	r0, r0, #9
 8001622:	4684      	mov	ip, r0
 8001624:	4461      	add	r1, ip
 8001626:	0c18      	lsrs	r0, r3, #16
 8001628:	0412      	lsls	r2, r2, #16
 800162a:	041b      	lsls	r3, r3, #16
 800162c:	0c12      	lsrs	r2, r2, #16
 800162e:	1840      	adds	r0, r0, r1
 8001630:	189b      	adds	r3, r3, r2
 8001632:	4286      	cmp	r6, r0
 8001634:	d200      	bcs.n	8001638 <__aeabi_ddiv+0x24c>
 8001636:	e100      	b.n	800183a <__aeabi_ddiv+0x44e>
 8001638:	d100      	bne.n	800163c <__aeabi_ddiv+0x250>
 800163a:	e0fb      	b.n	8001834 <__aeabi_ddiv+0x448>
 800163c:	2301      	movs	r3, #1
 800163e:	431d      	orrs	r5, r3
 8001640:	4b49      	ldr	r3, [pc, #292]	; (8001768 <__aeabi_ddiv+0x37c>)
 8001642:	445b      	add	r3, fp
 8001644:	2b00      	cmp	r3, #0
 8001646:	dc00      	bgt.n	800164a <__aeabi_ddiv+0x25e>
 8001648:	e0aa      	b.n	80017a0 <__aeabi_ddiv+0x3b4>
 800164a:	076a      	lsls	r2, r5, #29
 800164c:	d000      	beq.n	8001650 <__aeabi_ddiv+0x264>
 800164e:	e13d      	b.n	80018cc <__aeabi_ddiv+0x4e0>
 8001650:	08e9      	lsrs	r1, r5, #3
 8001652:	4642      	mov	r2, r8
 8001654:	01d2      	lsls	r2, r2, #7
 8001656:	d506      	bpl.n	8001666 <__aeabi_ddiv+0x27a>
 8001658:	4642      	mov	r2, r8
 800165a:	4b44      	ldr	r3, [pc, #272]	; (800176c <__aeabi_ddiv+0x380>)
 800165c:	401a      	ands	r2, r3
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	4690      	mov	r8, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	445b      	add	r3, fp
 8001666:	4a42      	ldr	r2, [pc, #264]	; (8001770 <__aeabi_ddiv+0x384>)
 8001668:	4293      	cmp	r3, r2
 800166a:	dd00      	ble.n	800166e <__aeabi_ddiv+0x282>
 800166c:	e723      	b.n	80014b6 <__aeabi_ddiv+0xca>
 800166e:	4642      	mov	r2, r8
 8001670:	055b      	lsls	r3, r3, #21
 8001672:	0755      	lsls	r5, r2, #29
 8001674:	0252      	lsls	r2, r2, #9
 8001676:	430d      	orrs	r5, r1
 8001678:	0b12      	lsrs	r2, r2, #12
 800167a:	0d5b      	lsrs	r3, r3, #21
 800167c:	e70d      	b.n	800149a <__aeabi_ddiv+0xae>
 800167e:	4651      	mov	r1, sl
 8001680:	4321      	orrs	r1, r4
 8001682:	d100      	bne.n	8001686 <__aeabi_ddiv+0x29a>
 8001684:	e07c      	b.n	8001780 <__aeabi_ddiv+0x394>
 8001686:	2c00      	cmp	r4, #0
 8001688:	d100      	bne.n	800168c <__aeabi_ddiv+0x2a0>
 800168a:	e0fb      	b.n	8001884 <__aeabi_ddiv+0x498>
 800168c:	0020      	movs	r0, r4
 800168e:	f000 fa77 	bl	8001b80 <__clzsi2>
 8001692:	0002      	movs	r2, r0
 8001694:	3a0b      	subs	r2, #11
 8001696:	231d      	movs	r3, #29
 8001698:	1a9b      	subs	r3, r3, r2
 800169a:	4652      	mov	r2, sl
 800169c:	0001      	movs	r1, r0
 800169e:	40da      	lsrs	r2, r3
 80016a0:	4653      	mov	r3, sl
 80016a2:	3908      	subs	r1, #8
 80016a4:	408b      	lsls	r3, r1
 80016a6:	408c      	lsls	r4, r1
 80016a8:	0019      	movs	r1, r3
 80016aa:	4314      	orrs	r4, r2
 80016ac:	4b31      	ldr	r3, [pc, #196]	; (8001774 <__aeabi_ddiv+0x388>)
 80016ae:	4458      	add	r0, fp
 80016b0:	469b      	mov	fp, r3
 80016b2:	4483      	add	fp, r0
 80016b4:	2000      	movs	r0, #0
 80016b6:	e6d9      	b.n	800146c <__aeabi_ddiv+0x80>
 80016b8:	0003      	movs	r3, r0
 80016ba:	4323      	orrs	r3, r4
 80016bc:	4698      	mov	r8, r3
 80016be:	d044      	beq.n	800174a <__aeabi_ddiv+0x35e>
 80016c0:	2c00      	cmp	r4, #0
 80016c2:	d100      	bne.n	80016c6 <__aeabi_ddiv+0x2da>
 80016c4:	e0cf      	b.n	8001866 <__aeabi_ddiv+0x47a>
 80016c6:	0020      	movs	r0, r4
 80016c8:	f000 fa5a 	bl	8001b80 <__clzsi2>
 80016cc:	0001      	movs	r1, r0
 80016ce:	0002      	movs	r2, r0
 80016d0:	390b      	subs	r1, #11
 80016d2:	231d      	movs	r3, #29
 80016d4:	1a5b      	subs	r3, r3, r1
 80016d6:	4649      	mov	r1, r9
 80016d8:	0010      	movs	r0, r2
 80016da:	40d9      	lsrs	r1, r3
 80016dc:	3808      	subs	r0, #8
 80016de:	4084      	lsls	r4, r0
 80016e0:	000b      	movs	r3, r1
 80016e2:	464d      	mov	r5, r9
 80016e4:	4323      	orrs	r3, r4
 80016e6:	4698      	mov	r8, r3
 80016e8:	4085      	lsls	r5, r0
 80016ea:	4b23      	ldr	r3, [pc, #140]	; (8001778 <__aeabi_ddiv+0x38c>)
 80016ec:	1a9b      	subs	r3, r3, r2
 80016ee:	469b      	mov	fp, r3
 80016f0:	2300      	movs	r3, #0
 80016f2:	4699      	mov	r9, r3
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	e69e      	b.n	8001436 <__aeabi_ddiv+0x4a>
 80016f8:	0002      	movs	r2, r0
 80016fa:	4322      	orrs	r2, r4
 80016fc:	4690      	mov	r8, r2
 80016fe:	d11d      	bne.n	800173c <__aeabi_ddiv+0x350>
 8001700:	2208      	movs	r2, #8
 8001702:	469b      	mov	fp, r3
 8001704:	2302      	movs	r3, #2
 8001706:	2500      	movs	r5, #0
 8001708:	4691      	mov	r9, r2
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	e693      	b.n	8001436 <__aeabi_ddiv+0x4a>
 800170e:	4651      	mov	r1, sl
 8001710:	4321      	orrs	r1, r4
 8001712:	d109      	bne.n	8001728 <__aeabi_ddiv+0x33c>
 8001714:	2302      	movs	r3, #2
 8001716:	464a      	mov	r2, r9
 8001718:	431a      	orrs	r2, r3
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <__aeabi_ddiv+0x390>)
 800171c:	4691      	mov	r9, r2
 800171e:	469c      	mov	ip, r3
 8001720:	2400      	movs	r4, #0
 8001722:	2002      	movs	r0, #2
 8001724:	44e3      	add	fp, ip
 8001726:	e6a1      	b.n	800146c <__aeabi_ddiv+0x80>
 8001728:	2303      	movs	r3, #3
 800172a:	464a      	mov	r2, r9
 800172c:	431a      	orrs	r2, r3
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <__aeabi_ddiv+0x390>)
 8001730:	4691      	mov	r9, r2
 8001732:	469c      	mov	ip, r3
 8001734:	4651      	mov	r1, sl
 8001736:	2003      	movs	r0, #3
 8001738:	44e3      	add	fp, ip
 800173a:	e697      	b.n	800146c <__aeabi_ddiv+0x80>
 800173c:	220c      	movs	r2, #12
 800173e:	469b      	mov	fp, r3
 8001740:	2303      	movs	r3, #3
 8001742:	46a0      	mov	r8, r4
 8001744:	4691      	mov	r9, r2
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	e675      	b.n	8001436 <__aeabi_ddiv+0x4a>
 800174a:	2304      	movs	r3, #4
 800174c:	4699      	mov	r9, r3
 800174e:	2300      	movs	r3, #0
 8001750:	469b      	mov	fp, r3
 8001752:	3301      	adds	r3, #1
 8001754:	2500      	movs	r5, #0
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	e66d      	b.n	8001436 <__aeabi_ddiv+0x4a>
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	000007ff 	.word	0x000007ff
 8001760:	fffffc01 	.word	0xfffffc01
 8001764:	08009948 	.word	0x08009948
 8001768:	000003ff 	.word	0x000003ff
 800176c:	feffffff 	.word	0xfeffffff
 8001770:	000007fe 	.word	0x000007fe
 8001774:	000003f3 	.word	0x000003f3
 8001778:	fffffc0d 	.word	0xfffffc0d
 800177c:	fffff801 	.word	0xfffff801
 8001780:	464a      	mov	r2, r9
 8001782:	2301      	movs	r3, #1
 8001784:	431a      	orrs	r2, r3
 8001786:	4691      	mov	r9, r2
 8001788:	2400      	movs	r4, #0
 800178a:	2001      	movs	r0, #1
 800178c:	e66e      	b.n	800146c <__aeabi_ddiv+0x80>
 800178e:	2300      	movs	r3, #0
 8001790:	2280      	movs	r2, #128	; 0x80
 8001792:	469a      	mov	sl, r3
 8001794:	2500      	movs	r5, #0
 8001796:	4b88      	ldr	r3, [pc, #544]	; (80019b8 <__aeabi_ddiv+0x5cc>)
 8001798:	0312      	lsls	r2, r2, #12
 800179a:	e67e      	b.n	800149a <__aeabi_ddiv+0xae>
 800179c:	2501      	movs	r5, #1
 800179e:	426d      	negs	r5, r5
 80017a0:	2201      	movs	r2, #1
 80017a2:	1ad2      	subs	r2, r2, r3
 80017a4:	2a38      	cmp	r2, #56	; 0x38
 80017a6:	dd00      	ble.n	80017aa <__aeabi_ddiv+0x3be>
 80017a8:	e674      	b.n	8001494 <__aeabi_ddiv+0xa8>
 80017aa:	2a1f      	cmp	r2, #31
 80017ac:	dc00      	bgt.n	80017b0 <__aeabi_ddiv+0x3c4>
 80017ae:	e0bd      	b.n	800192c <__aeabi_ddiv+0x540>
 80017b0:	211f      	movs	r1, #31
 80017b2:	4249      	negs	r1, r1
 80017b4:	1acb      	subs	r3, r1, r3
 80017b6:	4641      	mov	r1, r8
 80017b8:	40d9      	lsrs	r1, r3
 80017ba:	000b      	movs	r3, r1
 80017bc:	2a20      	cmp	r2, #32
 80017be:	d004      	beq.n	80017ca <__aeabi_ddiv+0x3de>
 80017c0:	4641      	mov	r1, r8
 80017c2:	4a7e      	ldr	r2, [pc, #504]	; (80019bc <__aeabi_ddiv+0x5d0>)
 80017c4:	445a      	add	r2, fp
 80017c6:	4091      	lsls	r1, r2
 80017c8:	430d      	orrs	r5, r1
 80017ca:	0029      	movs	r1, r5
 80017cc:	1e4a      	subs	r2, r1, #1
 80017ce:	4191      	sbcs	r1, r2
 80017d0:	4319      	orrs	r1, r3
 80017d2:	2307      	movs	r3, #7
 80017d4:	001d      	movs	r5, r3
 80017d6:	2200      	movs	r2, #0
 80017d8:	400d      	ands	r5, r1
 80017da:	420b      	tst	r3, r1
 80017dc:	d100      	bne.n	80017e0 <__aeabi_ddiv+0x3f4>
 80017de:	e0d0      	b.n	8001982 <__aeabi_ddiv+0x596>
 80017e0:	220f      	movs	r2, #15
 80017e2:	2300      	movs	r3, #0
 80017e4:	400a      	ands	r2, r1
 80017e6:	2a04      	cmp	r2, #4
 80017e8:	d100      	bne.n	80017ec <__aeabi_ddiv+0x400>
 80017ea:	e0c7      	b.n	800197c <__aeabi_ddiv+0x590>
 80017ec:	1d0a      	adds	r2, r1, #4
 80017ee:	428a      	cmp	r2, r1
 80017f0:	4189      	sbcs	r1, r1
 80017f2:	4249      	negs	r1, r1
 80017f4:	185b      	adds	r3, r3, r1
 80017f6:	0011      	movs	r1, r2
 80017f8:	021a      	lsls	r2, r3, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_ddiv+0x412>
 80017fc:	e0be      	b.n	800197c <__aeabi_ddiv+0x590>
 80017fe:	2301      	movs	r3, #1
 8001800:	2200      	movs	r2, #0
 8001802:	2500      	movs	r5, #0
 8001804:	e649      	b.n	800149a <__aeabi_ddiv+0xae>
 8001806:	2280      	movs	r2, #128	; 0x80
 8001808:	4643      	mov	r3, r8
 800180a:	0312      	lsls	r2, r2, #12
 800180c:	4213      	tst	r3, r2
 800180e:	d008      	beq.n	8001822 <__aeabi_ddiv+0x436>
 8001810:	4214      	tst	r4, r2
 8001812:	d106      	bne.n	8001822 <__aeabi_ddiv+0x436>
 8001814:	4322      	orrs	r2, r4
 8001816:	0312      	lsls	r2, r2, #12
 8001818:	46ba      	mov	sl, r7
 800181a:	000d      	movs	r5, r1
 800181c:	4b66      	ldr	r3, [pc, #408]	; (80019b8 <__aeabi_ddiv+0x5cc>)
 800181e:	0b12      	lsrs	r2, r2, #12
 8001820:	e63b      	b.n	800149a <__aeabi_ddiv+0xae>
 8001822:	2280      	movs	r2, #128	; 0x80
 8001824:	4643      	mov	r3, r8
 8001826:	0312      	lsls	r2, r2, #12
 8001828:	431a      	orrs	r2, r3
 800182a:	0312      	lsls	r2, r2, #12
 800182c:	46b2      	mov	sl, r6
 800182e:	4b62      	ldr	r3, [pc, #392]	; (80019b8 <__aeabi_ddiv+0x5cc>)
 8001830:	0b12      	lsrs	r2, r2, #12
 8001832:	e632      	b.n	800149a <__aeabi_ddiv+0xae>
 8001834:	2b00      	cmp	r3, #0
 8001836:	d100      	bne.n	800183a <__aeabi_ddiv+0x44e>
 8001838:	e702      	b.n	8001640 <__aeabi_ddiv+0x254>
 800183a:	19a6      	adds	r6, r4, r6
 800183c:	1e6a      	subs	r2, r5, #1
 800183e:	42a6      	cmp	r6, r4
 8001840:	d200      	bcs.n	8001844 <__aeabi_ddiv+0x458>
 8001842:	e089      	b.n	8001958 <__aeabi_ddiv+0x56c>
 8001844:	4286      	cmp	r6, r0
 8001846:	d200      	bcs.n	800184a <__aeabi_ddiv+0x45e>
 8001848:	e09f      	b.n	800198a <__aeabi_ddiv+0x59e>
 800184a:	d100      	bne.n	800184e <__aeabi_ddiv+0x462>
 800184c:	e0af      	b.n	80019ae <__aeabi_ddiv+0x5c2>
 800184e:	0015      	movs	r5, r2
 8001850:	e6f4      	b.n	800163c <__aeabi_ddiv+0x250>
 8001852:	42a9      	cmp	r1, r5
 8001854:	d900      	bls.n	8001858 <__aeabi_ddiv+0x46c>
 8001856:	e63c      	b.n	80014d2 <__aeabi_ddiv+0xe6>
 8001858:	4643      	mov	r3, r8
 800185a:	07de      	lsls	r6, r3, #31
 800185c:	0858      	lsrs	r0, r3, #1
 800185e:	086b      	lsrs	r3, r5, #1
 8001860:	431e      	orrs	r6, r3
 8001862:	07ed      	lsls	r5, r5, #31
 8001864:	e63c      	b.n	80014e0 <__aeabi_ddiv+0xf4>
 8001866:	f000 f98b 	bl	8001b80 <__clzsi2>
 800186a:	0001      	movs	r1, r0
 800186c:	0002      	movs	r2, r0
 800186e:	3115      	adds	r1, #21
 8001870:	3220      	adds	r2, #32
 8001872:	291c      	cmp	r1, #28
 8001874:	dc00      	bgt.n	8001878 <__aeabi_ddiv+0x48c>
 8001876:	e72c      	b.n	80016d2 <__aeabi_ddiv+0x2e6>
 8001878:	464b      	mov	r3, r9
 800187a:	3808      	subs	r0, #8
 800187c:	4083      	lsls	r3, r0
 800187e:	2500      	movs	r5, #0
 8001880:	4698      	mov	r8, r3
 8001882:	e732      	b.n	80016ea <__aeabi_ddiv+0x2fe>
 8001884:	f000 f97c 	bl	8001b80 <__clzsi2>
 8001888:	0003      	movs	r3, r0
 800188a:	001a      	movs	r2, r3
 800188c:	3215      	adds	r2, #21
 800188e:	3020      	adds	r0, #32
 8001890:	2a1c      	cmp	r2, #28
 8001892:	dc00      	bgt.n	8001896 <__aeabi_ddiv+0x4aa>
 8001894:	e6ff      	b.n	8001696 <__aeabi_ddiv+0x2aa>
 8001896:	4654      	mov	r4, sl
 8001898:	3b08      	subs	r3, #8
 800189a:	2100      	movs	r1, #0
 800189c:	409c      	lsls	r4, r3
 800189e:	e705      	b.n	80016ac <__aeabi_ddiv+0x2c0>
 80018a0:	1936      	adds	r6, r6, r4
 80018a2:	3b01      	subs	r3, #1
 80018a4:	42b4      	cmp	r4, r6
 80018a6:	d900      	bls.n	80018aa <__aeabi_ddiv+0x4be>
 80018a8:	e6a6      	b.n	80015f8 <__aeabi_ddiv+0x20c>
 80018aa:	42b2      	cmp	r2, r6
 80018ac:	d800      	bhi.n	80018b0 <__aeabi_ddiv+0x4c4>
 80018ae:	e6a3      	b.n	80015f8 <__aeabi_ddiv+0x20c>
 80018b0:	1e83      	subs	r3, r0, #2
 80018b2:	1936      	adds	r6, r6, r4
 80018b4:	e6a0      	b.n	80015f8 <__aeabi_ddiv+0x20c>
 80018b6:	1909      	adds	r1, r1, r4
 80018b8:	3d01      	subs	r5, #1
 80018ba:	428c      	cmp	r4, r1
 80018bc:	d900      	bls.n	80018c0 <__aeabi_ddiv+0x4d4>
 80018be:	e68d      	b.n	80015dc <__aeabi_ddiv+0x1f0>
 80018c0:	428a      	cmp	r2, r1
 80018c2:	d800      	bhi.n	80018c6 <__aeabi_ddiv+0x4da>
 80018c4:	e68a      	b.n	80015dc <__aeabi_ddiv+0x1f0>
 80018c6:	1e85      	subs	r5, r0, #2
 80018c8:	1909      	adds	r1, r1, r4
 80018ca:	e687      	b.n	80015dc <__aeabi_ddiv+0x1f0>
 80018cc:	220f      	movs	r2, #15
 80018ce:	402a      	ands	r2, r5
 80018d0:	2a04      	cmp	r2, #4
 80018d2:	d100      	bne.n	80018d6 <__aeabi_ddiv+0x4ea>
 80018d4:	e6bc      	b.n	8001650 <__aeabi_ddiv+0x264>
 80018d6:	1d29      	adds	r1, r5, #4
 80018d8:	42a9      	cmp	r1, r5
 80018da:	41ad      	sbcs	r5, r5
 80018dc:	426d      	negs	r5, r5
 80018de:	08c9      	lsrs	r1, r1, #3
 80018e0:	44a8      	add	r8, r5
 80018e2:	e6b6      	b.n	8001652 <__aeabi_ddiv+0x266>
 80018e4:	42af      	cmp	r7, r5
 80018e6:	d900      	bls.n	80018ea <__aeabi_ddiv+0x4fe>
 80018e8:	e662      	b.n	80015b0 <__aeabi_ddiv+0x1c4>
 80018ea:	4281      	cmp	r1, r0
 80018ec:	d804      	bhi.n	80018f8 <__aeabi_ddiv+0x50c>
 80018ee:	d000      	beq.n	80018f2 <__aeabi_ddiv+0x506>
 80018f0:	e65e      	b.n	80015b0 <__aeabi_ddiv+0x1c4>
 80018f2:	42ae      	cmp	r6, r5
 80018f4:	d800      	bhi.n	80018f8 <__aeabi_ddiv+0x50c>
 80018f6:	e65b      	b.n	80015b0 <__aeabi_ddiv+0x1c4>
 80018f8:	2302      	movs	r3, #2
 80018fa:	425b      	negs	r3, r3
 80018fc:	469c      	mov	ip, r3
 80018fe:	9b00      	ldr	r3, [sp, #0]
 8001900:	44e0      	add	r8, ip
 8001902:	469c      	mov	ip, r3
 8001904:	4465      	add	r5, ip
 8001906:	429d      	cmp	r5, r3
 8001908:	419b      	sbcs	r3, r3
 800190a:	425b      	negs	r3, r3
 800190c:	191b      	adds	r3, r3, r4
 800190e:	18c0      	adds	r0, r0, r3
 8001910:	e64f      	b.n	80015b2 <__aeabi_ddiv+0x1c6>
 8001912:	42b2      	cmp	r2, r6
 8001914:	d800      	bhi.n	8001918 <__aeabi_ddiv+0x52c>
 8001916:	e612      	b.n	800153e <__aeabi_ddiv+0x152>
 8001918:	1e83      	subs	r3, r0, #2
 800191a:	1936      	adds	r6, r6, r4
 800191c:	e60f      	b.n	800153e <__aeabi_ddiv+0x152>
 800191e:	428a      	cmp	r2, r1
 8001920:	d800      	bhi.n	8001924 <__aeabi_ddiv+0x538>
 8001922:	e5fa      	b.n	800151a <__aeabi_ddiv+0x12e>
 8001924:	1e83      	subs	r3, r0, #2
 8001926:	4698      	mov	r8, r3
 8001928:	1909      	adds	r1, r1, r4
 800192a:	e5f6      	b.n	800151a <__aeabi_ddiv+0x12e>
 800192c:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <__aeabi_ddiv+0x5d4>)
 800192e:	0028      	movs	r0, r5
 8001930:	445b      	add	r3, fp
 8001932:	4641      	mov	r1, r8
 8001934:	409d      	lsls	r5, r3
 8001936:	4099      	lsls	r1, r3
 8001938:	40d0      	lsrs	r0, r2
 800193a:	1e6b      	subs	r3, r5, #1
 800193c:	419d      	sbcs	r5, r3
 800193e:	4643      	mov	r3, r8
 8001940:	4301      	orrs	r1, r0
 8001942:	4329      	orrs	r1, r5
 8001944:	40d3      	lsrs	r3, r2
 8001946:	074a      	lsls	r2, r1, #29
 8001948:	d100      	bne.n	800194c <__aeabi_ddiv+0x560>
 800194a:	e755      	b.n	80017f8 <__aeabi_ddiv+0x40c>
 800194c:	220f      	movs	r2, #15
 800194e:	400a      	ands	r2, r1
 8001950:	2a04      	cmp	r2, #4
 8001952:	d000      	beq.n	8001956 <__aeabi_ddiv+0x56a>
 8001954:	e74a      	b.n	80017ec <__aeabi_ddiv+0x400>
 8001956:	e74f      	b.n	80017f8 <__aeabi_ddiv+0x40c>
 8001958:	0015      	movs	r5, r2
 800195a:	4286      	cmp	r6, r0
 800195c:	d000      	beq.n	8001960 <__aeabi_ddiv+0x574>
 800195e:	e66d      	b.n	800163c <__aeabi_ddiv+0x250>
 8001960:	9a00      	ldr	r2, [sp, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d000      	beq.n	8001968 <__aeabi_ddiv+0x57c>
 8001966:	e669      	b.n	800163c <__aeabi_ddiv+0x250>
 8001968:	e66a      	b.n	8001640 <__aeabi_ddiv+0x254>
 800196a:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <__aeabi_ddiv+0x5d8>)
 800196c:	445b      	add	r3, fp
 800196e:	2b00      	cmp	r3, #0
 8001970:	dc00      	bgt.n	8001974 <__aeabi_ddiv+0x588>
 8001972:	e713      	b.n	800179c <__aeabi_ddiv+0x3b0>
 8001974:	2501      	movs	r5, #1
 8001976:	2100      	movs	r1, #0
 8001978:	44a8      	add	r8, r5
 800197a:	e66a      	b.n	8001652 <__aeabi_ddiv+0x266>
 800197c:	075d      	lsls	r5, r3, #29
 800197e:	025b      	lsls	r3, r3, #9
 8001980:	0b1a      	lsrs	r2, r3, #12
 8001982:	08c9      	lsrs	r1, r1, #3
 8001984:	2300      	movs	r3, #0
 8001986:	430d      	orrs	r5, r1
 8001988:	e587      	b.n	800149a <__aeabi_ddiv+0xae>
 800198a:	9900      	ldr	r1, [sp, #0]
 800198c:	3d02      	subs	r5, #2
 800198e:	004a      	lsls	r2, r1, #1
 8001990:	428a      	cmp	r2, r1
 8001992:	41bf      	sbcs	r7, r7
 8001994:	427f      	negs	r7, r7
 8001996:	193f      	adds	r7, r7, r4
 8001998:	19f6      	adds	r6, r6, r7
 800199a:	9200      	str	r2, [sp, #0]
 800199c:	e7dd      	b.n	800195a <__aeabi_ddiv+0x56e>
 800199e:	2280      	movs	r2, #128	; 0x80
 80019a0:	4643      	mov	r3, r8
 80019a2:	0312      	lsls	r2, r2, #12
 80019a4:	431a      	orrs	r2, r3
 80019a6:	0312      	lsls	r2, r2, #12
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <__aeabi_ddiv+0x5cc>)
 80019aa:	0b12      	lsrs	r2, r2, #12
 80019ac:	e575      	b.n	800149a <__aeabi_ddiv+0xae>
 80019ae:	9900      	ldr	r1, [sp, #0]
 80019b0:	4299      	cmp	r1, r3
 80019b2:	d3ea      	bcc.n	800198a <__aeabi_ddiv+0x59e>
 80019b4:	0015      	movs	r5, r2
 80019b6:	e7d3      	b.n	8001960 <__aeabi_ddiv+0x574>
 80019b8:	000007ff 	.word	0x000007ff
 80019bc:	0000043e 	.word	0x0000043e
 80019c0:	0000041e 	.word	0x0000041e
 80019c4:	000003ff 	.word	0x000003ff

080019c8 <__aeabi_i2d>:
 80019c8:	b570      	push	{r4, r5, r6, lr}
 80019ca:	2800      	cmp	r0, #0
 80019cc:	d016      	beq.n	80019fc <__aeabi_i2d+0x34>
 80019ce:	17c3      	asrs	r3, r0, #31
 80019d0:	18c5      	adds	r5, r0, r3
 80019d2:	405d      	eors	r5, r3
 80019d4:	0fc4      	lsrs	r4, r0, #31
 80019d6:	0028      	movs	r0, r5
 80019d8:	f000 f8d2 	bl	8001b80 <__clzsi2>
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <__aeabi_i2d+0x5c>)
 80019de:	1a1b      	subs	r3, r3, r0
 80019e0:	280a      	cmp	r0, #10
 80019e2:	dc16      	bgt.n	8001a12 <__aeabi_i2d+0x4a>
 80019e4:	0002      	movs	r2, r0
 80019e6:	002e      	movs	r6, r5
 80019e8:	3215      	adds	r2, #21
 80019ea:	4096      	lsls	r6, r2
 80019ec:	220b      	movs	r2, #11
 80019ee:	1a12      	subs	r2, r2, r0
 80019f0:	40d5      	lsrs	r5, r2
 80019f2:	055b      	lsls	r3, r3, #21
 80019f4:	032d      	lsls	r5, r5, #12
 80019f6:	0b2d      	lsrs	r5, r5, #12
 80019f8:	0d5b      	lsrs	r3, r3, #21
 80019fa:	e003      	b.n	8001a04 <__aeabi_i2d+0x3c>
 80019fc:	2400      	movs	r4, #0
 80019fe:	2300      	movs	r3, #0
 8001a00:	2500      	movs	r5, #0
 8001a02:	2600      	movs	r6, #0
 8001a04:	051b      	lsls	r3, r3, #20
 8001a06:	432b      	orrs	r3, r5
 8001a08:	07e4      	lsls	r4, r4, #31
 8001a0a:	4323      	orrs	r3, r4
 8001a0c:	0030      	movs	r0, r6
 8001a0e:	0019      	movs	r1, r3
 8001a10:	bd70      	pop	{r4, r5, r6, pc}
 8001a12:	380b      	subs	r0, #11
 8001a14:	4085      	lsls	r5, r0
 8001a16:	055b      	lsls	r3, r3, #21
 8001a18:	032d      	lsls	r5, r5, #12
 8001a1a:	2600      	movs	r6, #0
 8001a1c:	0b2d      	lsrs	r5, r5, #12
 8001a1e:	0d5b      	lsrs	r3, r3, #21
 8001a20:	e7f0      	b.n	8001a04 <__aeabi_i2d+0x3c>
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	0000041e 	.word	0x0000041e

08001a28 <__aeabi_ui2d>:
 8001a28:	b510      	push	{r4, lr}
 8001a2a:	1e04      	subs	r4, r0, #0
 8001a2c:	d010      	beq.n	8001a50 <__aeabi_ui2d+0x28>
 8001a2e:	f000 f8a7 	bl	8001b80 <__clzsi2>
 8001a32:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <__aeabi_ui2d+0x48>)
 8001a34:	1a1b      	subs	r3, r3, r0
 8001a36:	280a      	cmp	r0, #10
 8001a38:	dc11      	bgt.n	8001a5e <__aeabi_ui2d+0x36>
 8001a3a:	220b      	movs	r2, #11
 8001a3c:	0021      	movs	r1, r4
 8001a3e:	1a12      	subs	r2, r2, r0
 8001a40:	40d1      	lsrs	r1, r2
 8001a42:	3015      	adds	r0, #21
 8001a44:	030a      	lsls	r2, r1, #12
 8001a46:	055b      	lsls	r3, r3, #21
 8001a48:	4084      	lsls	r4, r0
 8001a4a:	0b12      	lsrs	r2, r2, #12
 8001a4c:	0d5b      	lsrs	r3, r3, #21
 8001a4e:	e001      	b.n	8001a54 <__aeabi_ui2d+0x2c>
 8001a50:	2300      	movs	r3, #0
 8001a52:	2200      	movs	r2, #0
 8001a54:	051b      	lsls	r3, r3, #20
 8001a56:	4313      	orrs	r3, r2
 8001a58:	0020      	movs	r0, r4
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	bd10      	pop	{r4, pc}
 8001a5e:	0022      	movs	r2, r4
 8001a60:	380b      	subs	r0, #11
 8001a62:	4082      	lsls	r2, r0
 8001a64:	055b      	lsls	r3, r3, #21
 8001a66:	0312      	lsls	r2, r2, #12
 8001a68:	2400      	movs	r4, #0
 8001a6a:	0b12      	lsrs	r2, r2, #12
 8001a6c:	0d5b      	lsrs	r3, r3, #21
 8001a6e:	e7f1      	b.n	8001a54 <__aeabi_ui2d+0x2c>
 8001a70:	0000041e 	.word	0x0000041e

08001a74 <__aeabi_d2f>:
 8001a74:	0002      	movs	r2, r0
 8001a76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a78:	004b      	lsls	r3, r1, #1
 8001a7a:	030d      	lsls	r5, r1, #12
 8001a7c:	0f40      	lsrs	r0, r0, #29
 8001a7e:	0d5b      	lsrs	r3, r3, #21
 8001a80:	0fcc      	lsrs	r4, r1, #31
 8001a82:	0a6d      	lsrs	r5, r5, #9
 8001a84:	493a      	ldr	r1, [pc, #232]	; (8001b70 <__aeabi_d2f+0xfc>)
 8001a86:	4305      	orrs	r5, r0
 8001a88:	1c58      	adds	r0, r3, #1
 8001a8a:	00d7      	lsls	r7, r2, #3
 8001a8c:	4208      	tst	r0, r1
 8001a8e:	d00a      	beq.n	8001aa6 <__aeabi_d2f+0x32>
 8001a90:	4938      	ldr	r1, [pc, #224]	; (8001b74 <__aeabi_d2f+0x100>)
 8001a92:	1859      	adds	r1, r3, r1
 8001a94:	29fe      	cmp	r1, #254	; 0xfe
 8001a96:	dd16      	ble.n	8001ac6 <__aeabi_d2f+0x52>
 8001a98:	20ff      	movs	r0, #255	; 0xff
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	05c0      	lsls	r0, r0, #23
 8001a9e:	4310      	orrs	r0, r2
 8001aa0:	07e4      	lsls	r4, r4, #31
 8001aa2:	4320      	orrs	r0, r4
 8001aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d106      	bne.n	8001ab8 <__aeabi_d2f+0x44>
 8001aaa:	433d      	orrs	r5, r7
 8001aac:	d026      	beq.n	8001afc <__aeabi_d2f+0x88>
 8001aae:	2205      	movs	r2, #5
 8001ab0:	0192      	lsls	r2, r2, #6
 8001ab2:	0a52      	lsrs	r2, r2, #9
 8001ab4:	b2d8      	uxtb	r0, r3
 8001ab6:	e7f1      	b.n	8001a9c <__aeabi_d2f+0x28>
 8001ab8:	432f      	orrs	r7, r5
 8001aba:	d0ed      	beq.n	8001a98 <__aeabi_d2f+0x24>
 8001abc:	2280      	movs	r2, #128	; 0x80
 8001abe:	03d2      	lsls	r2, r2, #15
 8001ac0:	20ff      	movs	r0, #255	; 0xff
 8001ac2:	432a      	orrs	r2, r5
 8001ac4:	e7ea      	b.n	8001a9c <__aeabi_d2f+0x28>
 8001ac6:	2900      	cmp	r1, #0
 8001ac8:	dd1b      	ble.n	8001b02 <__aeabi_d2f+0x8e>
 8001aca:	0192      	lsls	r2, r2, #6
 8001acc:	1e50      	subs	r0, r2, #1
 8001ace:	4182      	sbcs	r2, r0
 8001ad0:	00ed      	lsls	r5, r5, #3
 8001ad2:	0f7f      	lsrs	r7, r7, #29
 8001ad4:	432a      	orrs	r2, r5
 8001ad6:	433a      	orrs	r2, r7
 8001ad8:	0753      	lsls	r3, r2, #29
 8001ada:	d047      	beq.n	8001b6c <__aeabi_d2f+0xf8>
 8001adc:	230f      	movs	r3, #15
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d000      	beq.n	8001ae6 <__aeabi_d2f+0x72>
 8001ae4:	3204      	adds	r2, #4
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	04db      	lsls	r3, r3, #19
 8001aea:	4013      	ands	r3, r2
 8001aec:	d03e      	beq.n	8001b6c <__aeabi_d2f+0xf8>
 8001aee:	1c48      	adds	r0, r1, #1
 8001af0:	29fe      	cmp	r1, #254	; 0xfe
 8001af2:	d0d1      	beq.n	8001a98 <__aeabi_d2f+0x24>
 8001af4:	0192      	lsls	r2, r2, #6
 8001af6:	0a52      	lsrs	r2, r2, #9
 8001af8:	b2c0      	uxtb	r0, r0
 8001afa:	e7cf      	b.n	8001a9c <__aeabi_d2f+0x28>
 8001afc:	2000      	movs	r0, #0
 8001afe:	2200      	movs	r2, #0
 8001b00:	e7cc      	b.n	8001a9c <__aeabi_d2f+0x28>
 8001b02:	000a      	movs	r2, r1
 8001b04:	3217      	adds	r2, #23
 8001b06:	db2f      	blt.n	8001b68 <__aeabi_d2f+0xf4>
 8001b08:	2680      	movs	r6, #128	; 0x80
 8001b0a:	0436      	lsls	r6, r6, #16
 8001b0c:	432e      	orrs	r6, r5
 8001b0e:	251e      	movs	r5, #30
 8001b10:	1a6d      	subs	r5, r5, r1
 8001b12:	2d1f      	cmp	r5, #31
 8001b14:	dd11      	ble.n	8001b3a <__aeabi_d2f+0xc6>
 8001b16:	2202      	movs	r2, #2
 8001b18:	4252      	negs	r2, r2
 8001b1a:	1a52      	subs	r2, r2, r1
 8001b1c:	0031      	movs	r1, r6
 8001b1e:	40d1      	lsrs	r1, r2
 8001b20:	2d20      	cmp	r5, #32
 8001b22:	d004      	beq.n	8001b2e <__aeabi_d2f+0xba>
 8001b24:	4a14      	ldr	r2, [pc, #80]	; (8001b78 <__aeabi_d2f+0x104>)
 8001b26:	4694      	mov	ip, r2
 8001b28:	4463      	add	r3, ip
 8001b2a:	409e      	lsls	r6, r3
 8001b2c:	4337      	orrs	r7, r6
 8001b2e:	003a      	movs	r2, r7
 8001b30:	1e53      	subs	r3, r2, #1
 8001b32:	419a      	sbcs	r2, r3
 8001b34:	430a      	orrs	r2, r1
 8001b36:	2100      	movs	r1, #0
 8001b38:	e7ce      	b.n	8001ad8 <__aeabi_d2f+0x64>
 8001b3a:	4a10      	ldr	r2, [pc, #64]	; (8001b7c <__aeabi_d2f+0x108>)
 8001b3c:	0038      	movs	r0, r7
 8001b3e:	4694      	mov	ip, r2
 8001b40:	4463      	add	r3, ip
 8001b42:	4098      	lsls	r0, r3
 8001b44:	003a      	movs	r2, r7
 8001b46:	1e41      	subs	r1, r0, #1
 8001b48:	4188      	sbcs	r0, r1
 8001b4a:	409e      	lsls	r6, r3
 8001b4c:	40ea      	lsrs	r2, r5
 8001b4e:	4330      	orrs	r0, r6
 8001b50:	4302      	orrs	r2, r0
 8001b52:	2100      	movs	r1, #0
 8001b54:	0753      	lsls	r3, r2, #29
 8001b56:	d1c1      	bne.n	8001adc <__aeabi_d2f+0x68>
 8001b58:	2180      	movs	r1, #128	; 0x80
 8001b5a:	0013      	movs	r3, r2
 8001b5c:	04c9      	lsls	r1, r1, #19
 8001b5e:	2001      	movs	r0, #1
 8001b60:	400b      	ands	r3, r1
 8001b62:	420a      	tst	r2, r1
 8001b64:	d1c6      	bne.n	8001af4 <__aeabi_d2f+0x80>
 8001b66:	e7a3      	b.n	8001ab0 <__aeabi_d2f+0x3c>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e7a0      	b.n	8001aae <__aeabi_d2f+0x3a>
 8001b6c:	000b      	movs	r3, r1
 8001b6e:	e79f      	b.n	8001ab0 <__aeabi_d2f+0x3c>
 8001b70:	000007fe 	.word	0x000007fe
 8001b74:	fffffc80 	.word	0xfffffc80
 8001b78:	fffffca2 	.word	0xfffffca2
 8001b7c:	fffffc82 	.word	0xfffffc82

08001b80 <__clzsi2>:
 8001b80:	211c      	movs	r1, #28
 8001b82:	2301      	movs	r3, #1
 8001b84:	041b      	lsls	r3, r3, #16
 8001b86:	4298      	cmp	r0, r3
 8001b88:	d301      	bcc.n	8001b8e <__clzsi2+0xe>
 8001b8a:	0c00      	lsrs	r0, r0, #16
 8001b8c:	3910      	subs	r1, #16
 8001b8e:	0a1b      	lsrs	r3, r3, #8
 8001b90:	4298      	cmp	r0, r3
 8001b92:	d301      	bcc.n	8001b98 <__clzsi2+0x18>
 8001b94:	0a00      	lsrs	r0, r0, #8
 8001b96:	3908      	subs	r1, #8
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	4298      	cmp	r0, r3
 8001b9c:	d301      	bcc.n	8001ba2 <__clzsi2+0x22>
 8001b9e:	0900      	lsrs	r0, r0, #4
 8001ba0:	3904      	subs	r1, #4
 8001ba2:	a202      	add	r2, pc, #8	; (adr r2, 8001bac <__clzsi2+0x2c>)
 8001ba4:	5c10      	ldrb	r0, [r2, r0]
 8001ba6:	1840      	adds	r0, r0, r1
 8001ba8:	4770      	bx	lr
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	02020304 	.word	0x02020304
 8001bb0:	01010101 	.word	0x01010101
	...

08001bbc <__clzdi2>:
 8001bbc:	b510      	push	{r4, lr}
 8001bbe:	2900      	cmp	r1, #0
 8001bc0:	d103      	bne.n	8001bca <__clzdi2+0xe>
 8001bc2:	f7ff ffdd 	bl	8001b80 <__clzsi2>
 8001bc6:	3020      	adds	r0, #32
 8001bc8:	e002      	b.n	8001bd0 <__clzdi2+0x14>
 8001bca:	0008      	movs	r0, r1
 8001bcc:	f7ff ffd8 	bl	8001b80 <__clzsi2>
 8001bd0:	bd10      	pop	{r4, pc}
 8001bd2:	46c0      	nop			; (mov r8, r8)

08001bd4 <_ZN9ADC_STM32C1Ev>:

extern ADC_HandleTypeDef hadc1;

ADC_STM32 adcSingleton;

ADC_STM32::ADC_STM32() {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <_ZN9ADC_STM32C1Ev+0x20>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	601a      	str	r2, [r3, #0]
	hadc = &hadc1;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <_ZN9ADC_STM32C1Ev+0x24>)
 8001be6:	605a      	str	r2, [r3, #4]
}
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	0018      	movs	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b002      	add	sp, #8
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	08009990 	.word	0x08009990
 8001bf8:	200004bc 	.word	0x200004bc

08001bfc <_ZN9ADC_STM32D1Ev>:

ADC_STM32::~ADC_STM32() {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	4a03      	ldr	r2, [pc, #12]	; (8001c14 <_ZN9ADC_STM32D1Ev+0x18>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	601a      	str	r2, [r3, #0]

}
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b002      	add	sp, #8
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	08009990 	.word	0x08009990

08001c18 <_ZN9ADC_STM32D0Ev>:
ADC_STM32::~ADC_STM32() {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
}
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	0018      	movs	r0, r3
 8001c24:	f7ff ffea 	bl	8001bfc <_ZN9ADC_STM32D1Ev>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2128      	movs	r1, #40	; 0x28
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f007 fc67 	bl	8009500 <_ZdlPvj>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	0018      	movs	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b002      	add	sp, #8
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_ZN9ADC_STM3211getInstanceEv>:

ADC_STM32* ADC_STM32::getInstance() {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	return &adcSingleton;
 8001c40:	4b01      	ldr	r3, [pc, #4]	; (8001c48 <_ZN9ADC_STM3211getInstanceEv+0xc>)
}
 8001c42:	0018      	movs	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	2000007c 	.word	0x2000007c

08001c4c <_ZN9ADC_STM324initEv>:

int32_t ADC_STM32::init(){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	hadc->ConvCpltCallback = convCpltCallbackStatic;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	4a03      	ldr	r2, [pc, #12]	; (8001c68 <_ZN9ADC_STM324initEv+0x1c>)
 8001c5a:	665a      	str	r2, [r3, #100]	; 0x64
	return 0;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	0018      	movs	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b002      	add	sp, #8
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	08001cb1 	.word	0x08001cb1

08001c6c <_ZN9ADC_STM329startScanEv>:

int32_t ADC_STM32::startScan() {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	return HAL_ADC_Start_DMA(hadc, (uint32_t*)adcData, hadc->Init.NbrOfConversion);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6858      	ldr	r0, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3308      	adds	r3, #8
 8001c7c:	0019      	movs	r1, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	001a      	movs	r2, r3
 8001c86:	f002 fabf 	bl	8004208 <HAL_ADC_Start_DMA>
 8001c8a:	0003      	movs	r3, r0
}
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	b002      	add	sp, #8
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <_ZN9ADC_STM327getDataEm>:

uint16_t ADC_STM32::getData(uint32_t rank) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
	// TODO Verificar estado do DMA e retornar erro se a conversão não estiver finalizada
	return adcData[rank];
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	3204      	adds	r2, #4
 8001ca4:	0052      	lsls	r2, r2, #1
 8001ca6:	5ad3      	ldrh	r3, [r2, r3]
}
 8001ca8:	0018      	movs	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b002      	add	sp, #8
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_ZN9ADC_STM3222convCpltCallbackStaticEP19__ADC_HandleTypeDef>:

void ADC_STM32::convCpltCallbackStatic(ADC_HandleTypeDef *_hadc) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	adcSingleton.convCpltCallback();
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <_ZN9ADC_STM3222convCpltCallbackStaticEP19__ADC_HandleTypeDef+0x18>)
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f000 f806 	bl	8001ccc <_ZN9ADC_STM3216convCpltCallbackEv>
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b002      	add	sp, #8
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	2000007c 	.word	0x2000007c

08001ccc <_ZN9ADC_STM3216convCpltCallbackEv>:

void ADC_STM32::convCpltCallback() {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

}
 8001cd4:	46c0      	nop			; (mov r8, r8)
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b002      	add	sp, #8
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <_Z41__static_initialization_and_destruction_0ii>:
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d107      	bne.n	8001cfc <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d103      	bne.n	8001cfc <_Z41__static_initialization_and_destruction_0ii+0x20>
ADC_STM32 adcSingleton;
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f7ff ff6c 	bl	8001bd4 <_ZN9ADC_STM32C1Ev>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d107      	bne.n	8001d12 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	4a05      	ldr	r2, [pc, #20]	; (8001d1c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d103      	bne.n	8001d12 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f7ff ff75 	bl	8001bfc <_ZN9ADC_STM32D1Ev>
}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b002      	add	sp, #8
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	0000ffff 	.word	0x0000ffff
 8001d20:	2000007c 	.word	0x2000007c

08001d24 <_GLOBAL__sub_I_adcSingleton>:
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <_GLOBAL__sub_I_adcSingleton+0x14>)
 8001d2a:	0019      	movs	r1, r3
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f7ff ffd5 	bl	8001cdc <_Z41__static_initialization_and_destruction_0ii>
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	0000ffff 	.word	0x0000ffff

08001d3c <_GLOBAL__sub_D_adcSingleton>:
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <_GLOBAL__sub_D_adcSingleton+0x14>)
 8001d42:	0019      	movs	r1, r3
 8001d44:	2000      	movs	r0, #0
 8001d46:	f7ff ffc9 	bl	8001cdc <_Z41__static_initialization_and_destruction_0ii>
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	0000ffff 	.word	0x0000ffff

08001d54 <_ZN10BrushServoC1Ev>:

PWM_Pin_STM32 pwma(&htim1, TIM_CHANNEL_1, true);
PWM_Pin_STM32 pwmb(&htim1, TIM_CHANNEL_2, true);
Motor_IR4427 motor(&pwma, &pwmb);

BrushServo::BrushServo() {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	4a06      	ldr	r2, [pc, #24]	; (8001d78 <_ZN10BrushServoC1Ev+0x24>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	601a      	str	r2, [r3, #0]
	huart = &hlpuart1;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <_ZN10BrushServoC1Ev+0x28>)
 8001d66:	609a      	str	r2, [r3, #8]
	hControlTimer = &htim6;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a05      	ldr	r2, [pc, #20]	; (8001d80 <_ZN10BrushServoC1Ev+0x2c>)
 8001d6c:	605a      	str	r2, [r3, #4]
}
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	0018      	movs	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b002      	add	sp, #8
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	080099c4 	.word	0x080099c4
 8001d7c:	200005a0 	.word	0x200005a0
 8001d80:	2000089c 	.word	0x2000089c

08001d84 <_ZN10BrushServoD1Ev>:

BrushServo::~BrushServo() {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	4a03      	ldr	r2, [pc, #12]	; (8001d9c <_ZN10BrushServoD1Ev+0x18>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	601a      	str	r2, [r3, #0]

}
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	0018      	movs	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b002      	add	sp, #8
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	080099c4 	.word	0x080099c4

08001da0 <_ZN10BrushServoD0Ev>:
BrushServo::~BrushServo() {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
}
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	0018      	movs	r0, r3
 8001dac:	f7ff ffea 	bl	8001d84 <_ZN10BrushServoD1Ev>
 8001db0:	23ed      	movs	r3, #237	; 0xed
 8001db2:	009a      	lsls	r2, r3, #2
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	0011      	movs	r1, r2
 8001db8:	0018      	movs	r0, r3
 8001dba:	f007 fba1 	bl	8009500 <_ZdlPvj>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b002      	add	sp, #8
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <__tcf_0>:

BrushServo* BrushServo::getInstance(){
	static BrushServo brushServoSingleton;
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4b02      	ldr	r3, [pc, #8]	; (8001dd8 <__tcf_0+0x10>)
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f7ff ffd8 	bl	8001d84 <_ZN10BrushServoD1Ev>
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000104 	.word	0x20000104

08001ddc <_ZN10BrushServo11getInstanceEv>:
BrushServo* BrushServo::getInstance(){
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
	static BrushServo brushServoSingleton;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <_ZN10BrushServo11getInstanceEv+0x38>)
 8001de2:	0018      	movs	r0, r3
 8001de4:	f007 fb90 	bl	8009508 <__cxa_guard_acquire>
 8001de8:	0003      	movs	r3, r0
 8001dea:	1e5a      	subs	r2, r3, #1
 8001dec:	4193      	sbcs	r3, r2
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00b      	beq.n	8001e0c <_ZN10BrushServo11getInstanceEv+0x30>
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <_ZN10BrushServo11getInstanceEv+0x3c>)
 8001df6:	0018      	movs	r0, r3
 8001df8:	f7ff ffac 	bl	8001d54 <_ZN10BrushServoC1Ev>
 8001dfc:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <_ZN10BrushServo11getInstanceEv+0x40>)
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f007 fb96 	bl	8009530 <atexit>
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <_ZN10BrushServo11getInstanceEv+0x38>)
 8001e06:	0018      	movs	r0, r3
 8001e08:	f007 fb8b 	bl	8009522 <__cxa_guard_release>
	return &brushServoSingleton;
 8001e0c:	4b02      	ldr	r3, [pc, #8]	; (8001e18 <_ZN10BrushServo11getInstanceEv+0x3c>)
}
 8001e0e:	0018      	movs	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	200004b8 	.word	0x200004b8
 8001e18:	20000104 	.word	0x20000104
 8001e1c:	08001dc9 	.word	0x08001dc9

08001e20 <_ZN10BrushServo4initEv>:

int32_t BrushServo::init() {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	initRam();
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f000 fa82 	bl	8002334 <_ZN10BrushServo7initRamEv>
	motor.init();
 8001e30:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <_ZN10BrushServo4initEv+0x4c>)
 8001e32:	0018      	movs	r0, r3
 8001e34:	f000 fcc8 	bl	80027c8 <_ZN12Motor_IR44274initEv>
	ina.init();
 8001e38:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <_ZN10BrushServo4initEv+0x50>)
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f000 fc84 	bl	8002748 <_ZN6INA1X94initEv>
	vin.init();
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <_ZN10BrushServo4initEv+0x54>)
 8001e42:	0018      	movs	r0, r3
 8001e44:	f000 ff4e 	bl	8002ce4 <_ZN8VinMeter4initEv>
	potentiometer.init();
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <_ZN10BrushServo4initEv+0x58>)
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f000 fee0 	bl	8002c10 <_ZN13Potentiometer4initEv>
	initControl();
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	0018      	movs	r0, r3
 8001e54:	f000 fa46 	bl	80022e4 <_ZN10BrushServo11initControlEv>
	initUart();
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f000 fa10 	bl	8002280 <_ZN10BrushServo8initUartEv>
	return 0;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	0018      	movs	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b002      	add	sp, #8
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	200000f8 	.word	0x200000f8
 8001e70:	200000a4 	.word	0x200000a4
 8001e74:	200000b8 	.word	0x200000b8
 8001e78:	200000cc 	.word	0x200000cc

08001e7c <_ZN10BrushServo15controlCallbackEv>:

void BrushServo::controlCallback() {
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b08b      	sub	sp, #44	; 0x2c
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	if(!ramArea[64]){
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	23a6      	movs	r3, #166	; 0xa6
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	5cd3      	ldrb	r3, [r2, r3]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d106      	bne.n	8001e9e <_ZN10BrushServo15controlCallbackEv+0x22>
		// Disabled
		motor.setPower(0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	4b89      	ldr	r3, [pc, #548]	; (80020b8 <_ZN10BrushServo15controlCallbackEv+0x23c>)
 8001e94:	1c11      	adds	r1, r2, #0
 8001e96:	0018      	movs	r0, r3
 8001e98:	f000 fca9 	bl	80027ee <_ZN12Motor_IR44278setPowerEf>
		return;
 8001e9c:	e109      	b.n	80020b2 <_ZN10BrushServo15controlCallbackEv+0x236>
	}
	float currentPosition = potentiometer.read();
 8001e9e:	4b87      	ldr	r3, [pc, #540]	; (80020bc <_ZN10BrushServo15controlCallbackEv+0x240>)
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f000 febf 	bl	8002c24 <_ZN13Potentiometer4readEv>
 8001ea6:	1c03      	adds	r3, r0, #0
 8001ea8:	623b      	str	r3, [r7, #32]
	float goalPosition = (*(uint32_t*)&ramArea[116])/4096.0;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3381      	adds	r3, #129	; 0x81
 8001eae:	33ff      	adds	r3, #255	; 0xff
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f7ff fdb8 	bl	8001a28 <__aeabi_ui2d>
 8001eb8:	2200      	movs	r2, #0
 8001eba:	4b81      	ldr	r3, [pc, #516]	; (80020c0 <_ZN10BrushServo15controlCallbackEv+0x244>)
 8001ebc:	f7ff fa96 	bl	80013ec <__aeabi_ddiv>
 8001ec0:	0002      	movs	r2, r0
 8001ec2:	000b      	movs	r3, r1
 8001ec4:	0010      	movs	r0, r2
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	f7ff fdd4 	bl	8001a74 <__aeabi_d2f>
 8001ecc:	1c03      	adds	r3, r0, #0
 8001ece:	61fb      	str	r3, [r7, #28]
	float desiredPosition = goalPosition;	// TODO implementar profile com velocidade
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	61bb      	str	r3, [r7, #24]
	float kp = (*(uint16_t*)&ramArea[84])/128.0;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3361      	adds	r3, #97	; 0x61
 8001ed8:	33ff      	adds	r3, #255	; 0xff
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7ff fd73 	bl	80019c8 <__aeabi_i2d>
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	4b77      	ldr	r3, [pc, #476]	; (80020c4 <_ZN10BrushServo15controlCallbackEv+0x248>)
 8001ee6:	f7ff fa81 	bl	80013ec <__aeabi_ddiv>
 8001eea:	0002      	movs	r2, r0
 8001eec:	000b      	movs	r3, r1
 8001eee:	0010      	movs	r0, r2
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	f7ff fdbf 	bl	8001a74 <__aeabi_d2f>
 8001ef6:	1c03      	adds	r3, r0, #0
 8001ef8:	617b      	str	r3, [r7, #20]
	float ki = (*(uint16_t*)&ramArea[82])/65536.0;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	335f      	adds	r3, #95	; 0x5f
 8001efe:	33ff      	adds	r3, #255	; 0xff
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	0018      	movs	r0, r3
 8001f04:	f7ff fd60 	bl	80019c8 <__aeabi_i2d>
 8001f08:	2200      	movs	r2, #0
 8001f0a:	4b6f      	ldr	r3, [pc, #444]	; (80020c8 <_ZN10BrushServo15controlCallbackEv+0x24c>)
 8001f0c:	f7ff fa6e 	bl	80013ec <__aeabi_ddiv>
 8001f10:	0002      	movs	r2, r0
 8001f12:	000b      	movs	r3, r1
 8001f14:	0010      	movs	r0, r2
 8001f16:	0019      	movs	r1, r3
 8001f18:	f7ff fdac 	bl	8001a74 <__aeabi_d2f>
 8001f1c:	1c03      	adds	r3, r0, #0
 8001f1e:	613b      	str	r3, [r7, #16]
	float kd = (*(uint16_t*)&ramArea[80])/16.0;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	335d      	adds	r3, #93	; 0x5d
 8001f24:	33ff      	adds	r3, #255	; 0xff
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f7ff fd4d 	bl	80019c8 <__aeabi_i2d>
 8001f2e:	2200      	movs	r2, #0
 8001f30:	4b66      	ldr	r3, [pc, #408]	; (80020cc <_ZN10BrushServo15controlCallbackEv+0x250>)
 8001f32:	f7ff fa5b 	bl	80013ec <__aeabi_ddiv>
 8001f36:	0002      	movs	r2, r0
 8001f38:	000b      	movs	r3, r1
 8001f3a:	0010      	movs	r0, r2
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	f7ff fd99 	bl	8001a74 <__aeabi_d2f>
 8001f42:	1c03      	adds	r3, r0, #0
 8001f44:	60fb      	str	r3, [r7, #12]

	float lastError = error;
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	23e9      	movs	r3, #233	; 0xe9
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	58d3      	ldr	r3, [r2, r3]
 8001f4e:	60bb      	str	r3, [r7, #8]
	error = desiredPosition - currentPosition;
 8001f50:	6a39      	ldr	r1, [r7, #32]
 8001f52:	69b8      	ldr	r0, [r7, #24]
 8001f54:	f7ff f842 	bl	8000fdc <__aeabi_fsub>
 8001f58:	1c03      	adds	r3, r0, #0
 8001f5a:	1c19      	adds	r1, r3, #0
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	23e9      	movs	r3, #233	; 0xe9
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	50d1      	str	r1, [r2, r3]
	derror = (error-lastError)/deltaT;
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	23e9      	movs	r3, #233	; 0xe9
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	58d3      	ldr	r3, [r2, r3]
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	1c18      	adds	r0, r3, #0
 8001f70:	f7ff f834 	bl	8000fdc <__aeabi_fsub>
 8001f74:	1c03      	adds	r3, r0, #0
 8001f76:	1c18      	adds	r0, r3, #0
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	23ec      	movs	r3, #236	; 0xec
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	58d3      	ldr	r3, [r2, r3]
 8001f80:	1c19      	adds	r1, r3, #0
 8001f82:	f7fe fd13 	bl	80009ac <__aeabi_fdiv>
 8001f86:	1c03      	adds	r3, r0, #0
 8001f88:	1c19      	adds	r1, r3, #0
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	23ea      	movs	r3, #234	; 0xea
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	50d1      	str	r1, [r2, r3]
	ierror += error*deltaT;
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	23eb      	movs	r3, #235	; 0xeb
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	58d4      	ldr	r4, [r2, r3]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	23e9      	movs	r3, #233	; 0xe9
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	58d0      	ldr	r0, [r2, r3]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	23ec      	movs	r3, #236	; 0xec
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	58d3      	ldr	r3, [r2, r3]
 8001faa:	1c19      	adds	r1, r3, #0
 8001fac:	f7fe fec8 	bl	8000d40 <__aeabi_fmul>
 8001fb0:	1c03      	adds	r3, r0, #0
 8001fb2:	1c19      	adds	r1, r3, #0
 8001fb4:	1c20      	adds	r0, r4, #0
 8001fb6:	f7fe fb59 	bl	800066c <__aeabi_fadd>
 8001fba:	1c03      	adds	r3, r0, #0
 8001fbc:	1c19      	adds	r1, r3, #0
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	23eb      	movs	r3, #235	; 0xeb
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	50d1      	str	r1, [r2, r3]
	if(ki*ierror > 1){		// Anti-windup (verificar possibilidades)
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	23eb      	movs	r3, #235	; 0xeb
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	58d3      	ldr	r3, [r2, r3]
 8001fce:	6939      	ldr	r1, [r7, #16]
 8001fd0:	1c18      	adds	r0, r3, #0
 8001fd2:	f7fe feb5 	bl	8000d40 <__aeabi_fmul>
 8001fd6:	1c03      	adds	r3, r0, #0
 8001fd8:	21fe      	movs	r1, #254	; 0xfe
 8001fda:	0589      	lsls	r1, r1, #22
 8001fdc:	1c18      	adds	r0, r3, #0
 8001fde:	f7fe fa2d 	bl	800043c <__aeabi_fcmpgt>
 8001fe2:	1e03      	subs	r3, r0, #0
 8001fe4:	d00b      	beq.n	8001ffe <_ZN10BrushServo15controlCallbackEv+0x182>
		ierror = 1/ki;
 8001fe6:	6939      	ldr	r1, [r7, #16]
 8001fe8:	20fe      	movs	r0, #254	; 0xfe
 8001fea:	0580      	lsls	r0, r0, #22
 8001fec:	f7fe fcde 	bl	80009ac <__aeabi_fdiv>
 8001ff0:	1c03      	adds	r3, r0, #0
 8001ff2:	1c19      	adds	r1, r3, #0
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	23eb      	movs	r3, #235	; 0xeb
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	50d1      	str	r1, [r2, r3]
 8001ffc:	e018      	b.n	8002030 <_ZN10BrushServo15controlCallbackEv+0x1b4>
	}else if(ki*ierror < -1){
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	23eb      	movs	r3, #235	; 0xeb
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	58d3      	ldr	r3, [r2, r3]
 8002006:	6939      	ldr	r1, [r7, #16]
 8002008:	1c18      	adds	r0, r3, #0
 800200a:	f7fe fe99 	bl	8000d40 <__aeabi_fmul>
 800200e:	1c03      	adds	r3, r0, #0
 8002010:	492f      	ldr	r1, [pc, #188]	; (80020d0 <_ZN10BrushServo15controlCallbackEv+0x254>)
 8002012:	1c18      	adds	r0, r3, #0
 8002014:	f7fe f9fe 	bl	8000414 <__aeabi_fcmplt>
 8002018:	1e03      	subs	r3, r0, #0
 800201a:	d009      	beq.n	8002030 <_ZN10BrushServo15controlCallbackEv+0x1b4>
		ierror = -1/ki;
 800201c:	6939      	ldr	r1, [r7, #16]
 800201e:	482c      	ldr	r0, [pc, #176]	; (80020d0 <_ZN10BrushServo15controlCallbackEv+0x254>)
 8002020:	f7fe fcc4 	bl	80009ac <__aeabi_fdiv>
 8002024:	1c03      	adds	r3, r0, #0
 8002026:	1c19      	adds	r1, r3, #0
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	23eb      	movs	r3, #235	; 0xeb
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	50d1      	str	r1, [r2, r3]
	}
	float pid = kp*error + ki*ierror + kd*derror;
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	23e9      	movs	r3, #233	; 0xe9
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	58d3      	ldr	r3, [r2, r3]
 8002038:	6979      	ldr	r1, [r7, #20]
 800203a:	1c18      	adds	r0, r3, #0
 800203c:	f7fe fe80 	bl	8000d40 <__aeabi_fmul>
 8002040:	1c03      	adds	r3, r0, #0
 8002042:	1c1c      	adds	r4, r3, #0
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	23eb      	movs	r3, #235	; 0xeb
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	58d3      	ldr	r3, [r2, r3]
 800204c:	6939      	ldr	r1, [r7, #16]
 800204e:	1c18      	adds	r0, r3, #0
 8002050:	f7fe fe76 	bl	8000d40 <__aeabi_fmul>
 8002054:	1c03      	adds	r3, r0, #0
 8002056:	1c19      	adds	r1, r3, #0
 8002058:	1c20      	adds	r0, r4, #0
 800205a:	f7fe fb07 	bl	800066c <__aeabi_fadd>
 800205e:	1c03      	adds	r3, r0, #0
 8002060:	1c1c      	adds	r4, r3, #0
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	23ea      	movs	r3, #234	; 0xea
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	58d3      	ldr	r3, [r2, r3]
 800206a:	68f9      	ldr	r1, [r7, #12]
 800206c:	1c18      	adds	r0, r3, #0
 800206e:	f7fe fe67 	bl	8000d40 <__aeabi_fmul>
 8002072:	1c03      	adds	r3, r0, #0
 8002074:	1c19      	adds	r1, r3, #0
 8002076:	1c20      	adds	r0, r4, #0
 8002078:	f7fe faf8 	bl	800066c <__aeabi_fadd>
 800207c:	1c03      	adds	r3, r0, #0
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
	if(pid > 1){		// Clamp
 8002080:	21fe      	movs	r1, #254	; 0xfe
 8002082:	0589      	lsls	r1, r1, #22
 8002084:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002086:	f7fe f9d9 	bl	800043c <__aeabi_fcmpgt>
 800208a:	1e03      	subs	r3, r0, #0
 800208c:	d003      	beq.n	8002096 <_ZN10BrushServo15controlCallbackEv+0x21a>
		pid = 1;
 800208e:	23fe      	movs	r3, #254	; 0xfe
 8002090:	059b      	lsls	r3, r3, #22
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
 8002094:	e007      	b.n	80020a6 <_ZN10BrushServo15controlCallbackEv+0x22a>
	}else if(pid < -1){
 8002096:	490e      	ldr	r1, [pc, #56]	; (80020d0 <_ZN10BrushServo15controlCallbackEv+0x254>)
 8002098:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800209a:	f7fe f9bb 	bl	8000414 <__aeabi_fcmplt>
 800209e:	1e03      	subs	r3, r0, #0
 80020a0:	d001      	beq.n	80020a6 <_ZN10BrushServo15controlCallbackEv+0x22a>
		pid = -1;
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <_ZN10BrushServo15controlCallbackEv+0x254>)
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
	}
	motor.setPower(pid);
 80020a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <_ZN10BrushServo15controlCallbackEv+0x23c>)
 80020aa:	1c11      	adds	r1, r2, #0
 80020ac:	0018      	movs	r0, r3
 80020ae:	f000 fb9e 	bl	80027ee <_ZN12Motor_IR44278setPowerEf>
}
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b00b      	add	sp, #44	; 0x2c
 80020b6:	bd90      	pop	{r4, r7, pc}
 80020b8:	200000f8 	.word	0x200000f8
 80020bc:	200000cc 	.word	0x200000cc
 80020c0:	40b00000 	.word	0x40b00000
 80020c4:	40600000 	.word	0x40600000
 80020c8:	40f00000 	.word	0x40f00000
 80020cc:	40300000 	.word	0x40300000
 80020d0:	bf800000 	.word	0xbf800000

080020d4 <_ZN10BrushServo24UartTxCpltCallbackStaticEP20__UART_HandleTypeDef>:

void BrushServo::UartTxCpltCallbackStatic(UART_HandleTypeDef *_huart) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	getInstance()->UartTxCpltCallback();
 80020dc:	f7ff fe7e 	bl	8001ddc <_ZN10BrushServo11getInstanceEv>
 80020e0:	0003      	movs	r3, r0
 80020e2:	0018      	movs	r0, r3
 80020e4:	f000 f855 	bl	8002192 <_ZN10BrushServo18UartTxCpltCallbackEv>
}
 80020e8:	46c0      	nop			; (mov r8, r8)
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b002      	add	sp, #8
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <_ZN10BrushServo24UartRxCpltCallbackStaticEP20__UART_HandleTypeDef>:

void BrushServo::UartRxCpltCallbackStatic(UART_HandleTypeDef *_huart) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

}
 80020f8:	46c0      	nop			; (mov r8, r8)
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b002      	add	sp, #8
 80020fe:	bd80      	pop	{r7, pc}

08002100 <_ZN10BrushServo25UartRxEventCallbackStaticEP20__UART_HandleTypeDeft>:

void BrushServo::UartRxEventCallbackStatic(UART_HandleTypeDef *_huart, uint16_t _Pos) {
 8002100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	000a      	movs	r2, r1
 800210a:	1cbb      	adds	r3, r7, #2
 800210c:	801a      	strh	r2, [r3, #0]
	getInstance()->UartRxCpltCallback();
 800210e:	f7ff fe65 	bl	8001ddc <_ZN10BrushServo11getInstanceEv>
 8002112:	0003      	movs	r3, r0
 8002114:	0018      	movs	r0, r3
 8002116:	f000 f845 	bl	80021a4 <_ZN10BrushServo18UartRxCpltCallbackEv>
	HAL_HalfDuplex_EnableReceiver(getInstance()->huart);
 800211a:	f7ff fe5f 	bl	8001ddc <_ZN10BrushServo11getInstanceEv>
 800211e:	0003      	movs	r3, r0
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	0018      	movs	r0, r3
 8002124:	f006 f891 	bl	800824a <HAL_HalfDuplex_EnableReceiver>
	HAL_StatusTypeDef status = HAL_UARTEx_ReceiveToIdle_DMA(getInstance()->huart, getInstance()->uartBuffer, UART_BUFFER_SIZE);
 8002128:	f7ff fe58 	bl	8001ddc <_ZN10BrushServo11getInstanceEv>
 800212c:	0003      	movs	r3, r0
 800212e:	689d      	ldr	r5, [r3, #8]
 8002130:	f7ff fe54 	bl	8001ddc <_ZN10BrushServo11getInstanceEv>
 8002134:	0003      	movs	r3, r0
 8002136:	330c      	adds	r3, #12
 8002138:	260f      	movs	r6, #15
 800213a:	19bc      	adds	r4, r7, r6
 800213c:	2280      	movs	r2, #128	; 0x80
 800213e:	0052      	lsls	r2, r2, #1
 8002140:	0019      	movs	r1, r3
 8002142:	0028      	movs	r0, r5
 8002144:	f007 f916 	bl	8009374 <HAL_UARTEx_ReceiveToIdle_DMA>
 8002148:	0003      	movs	r3, r0
 800214a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){
 800214c:	19bb      	adds	r3, r7, r6
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d000      	beq.n	8002156 <_ZN10BrushServo25UartRxEventCallbackStaticEP20__UART_HandleTypeDeft+0x56>
		__NOP();
 8002154:	46c0      	nop			; (mov r8, r8)
	}
}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	46bd      	mov	sp, r7
 800215a:	b005      	add	sp, #20
 800215c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800215e <_ZN10BrushServo23UartErrorCallbackStaticEP20__UART_HandleTypeDef>:

void BrushServo::UartErrorCallbackStatic(UART_HandleTypeDef *_huart) {
 800215e:	b5b0      	push	{r4, r5, r7, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_UARTEx_ReceiveToIdle_DMA(getInstance()->huart, getInstance()->uartBuffer, UART_BUFFER_SIZE);
 8002166:	f7ff fe39 	bl	8001ddc <_ZN10BrushServo11getInstanceEv>
 800216a:	0003      	movs	r3, r0
 800216c:	689d      	ldr	r5, [r3, #8]
 800216e:	f7ff fe35 	bl	8001ddc <_ZN10BrushServo11getInstanceEv>
 8002172:	0003      	movs	r3, r0
 8002174:	330c      	adds	r3, #12
 8002176:	220f      	movs	r2, #15
 8002178:	18bc      	adds	r4, r7, r2
 800217a:	2280      	movs	r2, #128	; 0x80
 800217c:	0052      	lsls	r2, r2, #1
 800217e:	0019      	movs	r1, r3
 8002180:	0028      	movs	r0, r5
 8002182:	f007 f8f7 	bl	8009374 <HAL_UARTEx_ReceiveToIdle_DMA>
 8002186:	0003      	movs	r3, r0
 8002188:	7023      	strb	r3, [r4, #0]
}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	46bd      	mov	sp, r7
 800218e:	b004      	add	sp, #16
 8002190:	bdb0      	pop	{r4, r5, r7, pc}

08002192 <_ZN10BrushServo18UartTxCpltCallbackEv>:

void BrushServo::UartTxCpltCallback() {
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]

}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	46bd      	mov	sp, r7
 800219e:	b002      	add	sp, #8
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <_ZN10BrushServo18UartRxCpltCallbackEv>:

void BrushServo::UartRxCpltCallback() {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	if(uartBuffer[0] != 0xFF || uartBuffer[1] != 0xFF){
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7b1b      	ldrb	r3, [r3, #12]
 80021b0:	2bff      	cmp	r3, #255	; 0xff
 80021b2:	d152      	bne.n	800225a <_ZN10BrushServo18UartRxCpltCallbackEv+0xb6>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	7b5b      	ldrb	r3, [r3, #13]
 80021b8:	2bff      	cmp	r3, #255	; 0xff
 80021ba:	d14e      	bne.n	800225a <_ZN10BrushServo18UartRxCpltCallbackEv+0xb6>
		// Invalid header
		return;
	}
	if(uartBuffer[2] != ramArea[7]){
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	7b9a      	ldrb	r2, [r3, #14]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	2314      	movs	r3, #20
 80021c4:	33ff      	adds	r3, #255	; 0xff
 80021c6:	5ccb      	ldrb	r3, [r1, r3]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d148      	bne.n	800225e <_ZN10BrushServo18UartRxCpltCallbackEv+0xba>
		// Not for this ID
		return;
	}
	uint32_t length = uartBuffer[3];
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	7bdb      	ldrb	r3, [r3, #15]
 80021d0:	60fb      	str	r3, [r7, #12]
	if(length == 0){
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d044      	beq.n	8002262 <_ZN10BrushServo18UartRxCpltCallbackEv+0xbe>
		// Zero length
		return;
	}
	uint8_t calculatedChecksum = 0;
 80021d8:	2317      	movs	r3, #23
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 2; i < length+3; i++){
 80021e0:	2302      	movs	r3, #2
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	e00d      	b.n	8002202 <_ZN10BrushServo18UartRxCpltCallbackEv+0x5e>
		calculatedChecksum += uartBuffer[i];
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	18d3      	adds	r3, r2, r3
 80021ec:	330c      	adds	r3, #12
 80021ee:	7819      	ldrb	r1, [r3, #0]
 80021f0:	2217      	movs	r2, #23
 80021f2:	18bb      	adds	r3, r7, r2
 80021f4:	18ba      	adds	r2, r7, r2
 80021f6:	7812      	ldrb	r2, [r2, #0]
 80021f8:	188a      	adds	r2, r1, r2
 80021fa:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 2; i < length+3; i++){
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	3301      	adds	r3, #1
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	3303      	adds	r3, #3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	429a      	cmp	r2, r3
 800220a:	d3ec      	bcc.n	80021e6 <_ZN10BrushServo18UartRxCpltCallbackEv+0x42>
	}
	calculatedChecksum = ~(calculatedChecksum);
 800220c:	2117      	movs	r1, #23
 800220e:	187b      	adds	r3, r7, r1
 8002210:	187a      	adds	r2, r7, r1
 8002212:	7812      	ldrb	r2, [r2, #0]
 8002214:	43d2      	mvns	r2, r2
 8002216:	701a      	strb	r2, [r3, #0]
	if(calculatedChecksum != uartBuffer[length+3]){
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	3303      	adds	r3, #3
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	18d3      	adds	r3, r2, r3
 8002220:	7b1b      	ldrb	r3, [r3, #12]
 8002222:	187a      	adds	r2, r7, r1
 8002224:	7812      	ldrb	r2, [r2, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d11d      	bne.n	8002266 <_ZN10BrushServo18UartRxCpltCallbackEv+0xc2>
		// Checksum mismatch
		return;
	}
	switch(uartBuffer[4]){
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	7c1b      	ldrb	r3, [r3, #16]
 800222e:	2b92      	cmp	r3, #146	; 0x92
 8002230:	d01b      	beq.n	800226a <_ZN10BrushServo18UartRxCpltCallbackEv+0xc6>
 8002232:	dc1c      	bgt.n	800226e <_ZN10BrushServo18UartRxCpltCallbackEv+0xca>
 8002234:	2b08      	cmp	r3, #8
 8002236:	dc08      	bgt.n	800224a <_ZN10BrushServo18UartRxCpltCallbackEv+0xa6>
 8002238:	2b00      	cmp	r3, #0
 800223a:	dd18      	ble.n	800226e <_ZN10BrushServo18UartRxCpltCallbackEv+0xca>
 800223c:	2b08      	cmp	r3, #8
 800223e:	d816      	bhi.n	800226e <_ZN10BrushServo18UartRxCpltCallbackEv+0xca>
 8002240:	009a      	lsls	r2, r3, #2
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <_ZN10BrushServo18UartRxCpltCallbackEv+0xd8>)
 8002244:	18d3      	adds	r3, r2, r3
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	469f      	mov	pc, r3
 800224a:	2b83      	cmp	r3, #131	; 0x83
 800224c:	d011      	beq.n	8002272 <_ZN10BrushServo18UartRxCpltCallbackEv+0xce>
		break;
	case 0x92:
		// Bulk read
		break;
	default:
		break;
 800224e:	e00e      	b.n	800226e <_ZN10BrushServo18UartRxCpltCallbackEv+0xca>
		instructionWrite();
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	0018      	movs	r0, r3
 8002254:	f000 f980 	bl	8002558 <_ZN10BrushServo16instructionWriteEv>
		break;
 8002258:	e00c      	b.n	8002274 <_ZN10BrushServo18UartRxCpltCallbackEv+0xd0>
		return;
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	e00a      	b.n	8002274 <_ZN10BrushServo18UartRxCpltCallbackEv+0xd0>
		return;
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	e008      	b.n	8002274 <_ZN10BrushServo18UartRxCpltCallbackEv+0xd0>
		return;
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	e006      	b.n	8002274 <_ZN10BrushServo18UartRxCpltCallbackEv+0xd0>
		return;
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	e004      	b.n	8002274 <_ZN10BrushServo18UartRxCpltCallbackEv+0xd0>
		break;
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	e002      	b.n	8002274 <_ZN10BrushServo18UartRxCpltCallbackEv+0xd0>
		break;
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	e000      	b.n	8002274 <_ZN10BrushServo18UartRxCpltCallbackEv+0xd0>
		break;
 8002272:	46c0      	nop			; (mov r8, r8)
	}
}
 8002274:	46bd      	mov	sp, r7
 8002276:	b006      	add	sp, #24
 8002278:	bd80      	pop	{r7, pc}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	08009998 	.word	0x08009998

08002280 <_ZN10BrushServo8initUartEv>:

void BrushServo::initUart() {
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	huart->TxCpltCallback = UartTxCpltCallbackStatic;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2198      	movs	r1, #152	; 0x98
 800228e:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <_ZN10BrushServo8initUartEv+0x54>)
 8002290:	505a      	str	r2, [r3, r1]
	huart->RxCpltCallback = UartRxCpltCallbackStatic;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	21a0      	movs	r1, #160	; 0xa0
 8002298:	4a0f      	ldr	r2, [pc, #60]	; (80022d8 <_ZN10BrushServo8initUartEv+0x58>)
 800229a:	505a      	str	r2, [r3, r1]
	huart->RxEventCallback = UartRxEventCallbackStatic;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	21c0      	movs	r1, #192	; 0xc0
 80022a2:	4a0e      	ldr	r2, [pc, #56]	; (80022dc <_ZN10BrushServo8initUartEv+0x5c>)
 80022a4:	505a      	str	r2, [r3, r1]
	huart->ErrorCallback = UartErrorCallbackStatic;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	21a4      	movs	r1, #164	; 0xa4
 80022ac:	4a0c      	ldr	r2, [pc, #48]	; (80022e0 <_ZN10BrushServo8initUartEv+0x60>)
 80022ae:	505a      	str	r2, [r3, r1]
	HAL_HalfDuplex_EnableReceiver(huart);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	0018      	movs	r0, r3
 80022b6:	f005 ffc8 	bl	800824a <HAL_HalfDuplex_EnableReceiver>
	// FIXME Verificar se tem forma melhor de detectar fim do pacote (usar header?)
	HAL_UARTEx_ReceiveToIdle_DMA(huart, uartBuffer, UART_BUFFER_SIZE);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6898      	ldr	r0, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	330c      	adds	r3, #12
 80022c2:	2280      	movs	r2, #128	; 0x80
 80022c4:	0052      	lsls	r2, r2, #1
 80022c6:	0019      	movs	r1, r3
 80022c8:	f007 f854 	bl	8009374 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b002      	add	sp, #8
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	080020d5 	.word	0x080020d5
 80022d8:	080020f1 	.word	0x080020f1
 80022dc:	08002101 	.word	0x08002101
 80022e0:	0800215f 	.word	0x0800215f

080022e4 <_ZN10BrushServo11initControlEv>:

void BrushServo::initControl() {
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	deltaT = (hControlTimer->Instance->ARR + 1) * (hControlTimer->Instance->PSC + 1)/(float)HAL_RCC_GetPCLK1Freq();
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fe:	3301      	adds	r3, #1
 8002300:	4353      	muls	r3, r2
 8002302:	0018      	movs	r0, r3
 8002304:	f7ff f82a 	bl	800135c <__aeabi_ui2f>
 8002308:	1c04      	adds	r4, r0, #0
 800230a:	f003 fd7b 	bl	8005e04 <HAL_RCC_GetPCLK1Freq>
 800230e:	0003      	movs	r3, r0
 8002310:	0018      	movs	r0, r3
 8002312:	f7ff f823 	bl	800135c <__aeabi_ui2f>
 8002316:	1c03      	adds	r3, r0, #0
 8002318:	1c19      	adds	r1, r3, #0
 800231a:	1c20      	adds	r0, r4, #0
 800231c:	f7fe fb46 	bl	80009ac <__aeabi_fdiv>
 8002320:	1c03      	adds	r3, r0, #0
 8002322:	1c19      	adds	r1, r3, #0
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	23ec      	movs	r3, #236	; 0xec
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	50d1      	str	r1, [r2, r3]
}
 800232c:	46c0      	nop			; (mov r8, r8)
 800232e:	46bd      	mov	sp, r7
 8002330:	b003      	add	sp, #12
 8002332:	bd90      	pop	{r4, r7, pc}

08002334 <_ZN10BrushServo7initRamEv>:

void BrushServo::initRam() {
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	// Model Number
	ramArea[0] = 30;
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	2386      	movs	r3, #134	; 0x86
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	211e      	movs	r1, #30
 8002344:	54d1      	strb	r1, [r2, r3]
	// Model Information
	// Cortex M0 doesn't support unaligned access
	*(uint16_t*)&ramArea[2] = 0;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	330f      	adds	r3, #15
 800234a:	33ff      	adds	r3, #255	; 0xff
 800234c:	2200      	movs	r2, #0
 800234e:	801a      	strh	r2, [r3, #0]
	*(uint16_t*)&ramArea[4] = 0;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3311      	adds	r3, #17
 8002354:	33ff      	adds	r3, #255	; 0xff
 8002356:	2200      	movs	r2, #0
 8002358:	801a      	strh	r2, [r3, #0]
	// Firmware Version
	ramArea[6] = 1;
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	2389      	movs	r3, #137	; 0x89
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	2101      	movs	r1, #1
 8002362:	54d1      	strb	r1, [r2, r3]
	// ID
	ramArea[7] = 1;
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	2314      	movs	r3, #20
 8002368:	33ff      	adds	r3, #255	; 0xff
 800236a:	2101      	movs	r1, #1
 800236c:	54d1      	strb	r1, [r2, r3]
	// Baud Rate
	ramArea[8] = 1;
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	238a      	movs	r3, #138	; 0x8a
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	2101      	movs	r1, #1
 8002376:	54d1      	strb	r1, [r2, r3]
	// Return Delay Time
	ramArea[9] = 250;
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	2316      	movs	r3, #22
 800237c:	33ff      	adds	r3, #255	; 0xff
 800237e:	21fa      	movs	r1, #250	; 0xfa
 8002380:	54d1      	strb	r1, [r2, r3]
	// Drive mode
	ramArea[10] = 0;
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	238b      	movs	r3, #139	; 0x8b
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	2100      	movs	r1, #0
 800238a:	54d1      	strb	r1, [r2, r3]
	// Operating mode
	ramArea[11] = 3;
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	2318      	movs	r3, #24
 8002390:	33ff      	adds	r3, #255	; 0xff
 8002392:	2103      	movs	r1, #3
 8002394:	54d1      	strb	r1, [r2, r3]
	// Secondary(Shadow) ID
	ramArea[12] = 255;
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	238c      	movs	r3, #140	; 0x8c
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	21ff      	movs	r1, #255	; 0xff
 800239e:	54d1      	strb	r1, [r2, r3]
	// Protocol Type
	ramArea[13] = 2;
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	231a      	movs	r3, #26
 80023a4:	33ff      	adds	r3, #255	; 0xff
 80023a6:	2102      	movs	r1, #2
 80023a8:	54d1      	strb	r1, [r2, r3]
	// Homing Offset
	*(uint32_t*)&ramArea[20] = 0;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3321      	adds	r3, #33	; 0x21
 80023ae:	33ff      	adds	r3, #255	; 0xff
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
	// Moving Threshold
	*(uint32_t*)&ramArea[24] = 10;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3325      	adds	r3, #37	; 0x25
 80023b8:	33ff      	adds	r3, #255	; 0xff
 80023ba:	220a      	movs	r2, #10
 80023bc:	601a      	str	r2, [r3, #0]
	// Temperature Limit
	ramArea[31] = 80;
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	232c      	movs	r3, #44	; 0x2c
 80023c2:	33ff      	adds	r3, #255	; 0xff
 80023c4:	2150      	movs	r1, #80	; 0x50
 80023c6:	54d1      	strb	r1, [r2, r3]
	// Max Voltage Limit
	*(uint16_t*)&ramArea[32] = 160;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	332d      	adds	r3, #45	; 0x2d
 80023cc:	33ff      	adds	r3, #255	; 0xff
 80023ce:	22a0      	movs	r2, #160	; 0xa0
 80023d0:	801a      	strh	r2, [r3, #0]
	// Min Voltage Limit
	*(uint16_t*)&ramArea[34] = 95;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	332f      	adds	r3, #47	; 0x2f
 80023d6:	33ff      	adds	r3, #255	; 0xff
 80023d8:	225f      	movs	r2, #95	; 0x5f
 80023da:	801a      	strh	r2, [r3, #0]
	// PWM Limit
	*(uint16_t*)&ramArea[36] = 885;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3331      	adds	r3, #49	; 0x31
 80023e0:	33ff      	adds	r3, #255	; 0xff
 80023e2:	4a59      	ldr	r2, [pc, #356]	; (8002548 <_ZN10BrushServo7initRamEv+0x214>)
 80023e4:	801a      	strh	r2, [r3, #0]
	// Acceleration Limit
	*(uint32_t*)&ramArea[40] = 32767;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3335      	adds	r3, #53	; 0x35
 80023ea:	33ff      	adds	r3, #255	; 0xff
 80023ec:	4a57      	ldr	r2, [pc, #348]	; (800254c <_ZN10BrushServo7initRamEv+0x218>)
 80023ee:	601a      	str	r2, [r3, #0]
	// Velocity Limit
	*(uint32_t*)&ramArea[44] = 230;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3339      	adds	r3, #57	; 0x39
 80023f4:	33ff      	adds	r3, #255	; 0xff
 80023f6:	22e6      	movs	r2, #230	; 0xe6
 80023f8:	601a      	str	r2, [r3, #0]
	// Max Position Limit
	*(uint32_t*)&ramArea[48] = 4095;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	333d      	adds	r3, #61	; 0x3d
 80023fe:	33ff      	adds	r3, #255	; 0xff
 8002400:	4a53      	ldr	r2, [pc, #332]	; (8002550 <_ZN10BrushServo7initRamEv+0x21c>)
 8002402:	601a      	str	r2, [r3, #0]
	// Min Position Limit
	*(uint32_t*)&ramArea[52] = 0;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3341      	adds	r3, #65	; 0x41
 8002408:	33ff      	adds	r3, #255	; 0xff
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
	// Shutdown
	ramArea[63] = 52;
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	234c      	movs	r3, #76	; 0x4c
 8002412:	33ff      	adds	r3, #255	; 0xff
 8002414:	2134      	movs	r1, #52	; 0x34
 8002416:	54d1      	strb	r1, [r2, r3]

	// Torque Enable
	ramArea[64] = 0;
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	23a6      	movs	r3, #166	; 0xa6
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2100      	movs	r1, #0
 8002420:	54d1      	strb	r1, [r2, r3]
	// LED
	ramArea[65] = 0;
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	234e      	movs	r3, #78	; 0x4e
 8002426:	33ff      	adds	r3, #255	; 0xff
 8002428:	2100      	movs	r1, #0
 800242a:	54d1      	strb	r1, [r2, r3]
	// Status Return Level
	ramArea[68] = 2;
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	23a8      	movs	r3, #168	; 0xa8
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2102      	movs	r1, #2
 8002434:	54d1      	strb	r1, [r2, r3]
	// Registered Instruction
	ramArea[69] = 0;
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	2352      	movs	r3, #82	; 0x52
 800243a:	33ff      	adds	r3, #255	; 0xff
 800243c:	2100      	movs	r1, #0
 800243e:	54d1      	strb	r1, [r2, r3]
	// Hardware Error Status
	ramArea[70] = 0;
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	23a9      	movs	r3, #169	; 0xa9
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2100      	movs	r1, #0
 8002448:	54d1      	strb	r1, [r2, r3]
	// Velocity I Gain
	*(uint16_t*)&ramArea[76] = 1920;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3359      	adds	r3, #89	; 0x59
 800244e:	33ff      	adds	r3, #255	; 0xff
 8002450:	22f0      	movs	r2, #240	; 0xf0
 8002452:	00d2      	lsls	r2, r2, #3
 8002454:	801a      	strh	r2, [r3, #0]
	// Velocity P Gain
	*(uint16_t*)&ramArea[78] = 100;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	335b      	adds	r3, #91	; 0x5b
 800245a:	33ff      	adds	r3, #255	; 0xff
 800245c:	2264      	movs	r2, #100	; 0x64
 800245e:	801a      	strh	r2, [r3, #0]
	// Position D Gain
	*(uint16_t*)&ramArea[80] = 0;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	335d      	adds	r3, #93	; 0x5d
 8002464:	33ff      	adds	r3, #255	; 0xff
 8002466:	2200      	movs	r2, #0
 8002468:	801a      	strh	r2, [r3, #0]
	// Position I Gain
	*(uint16_t*)&ramArea[82] = 0;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	335f      	adds	r3, #95	; 0x5f
 800246e:	33ff      	adds	r3, #255	; 0xff
 8002470:	2200      	movs	r2, #0
 8002472:	801a      	strh	r2, [r3, #0]
	// Position P Gain
	*(uint16_t*)&ramArea[84] = 850;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3361      	adds	r3, #97	; 0x61
 8002478:	33ff      	adds	r3, #255	; 0xff
 800247a:	4a36      	ldr	r2, [pc, #216]	; (8002554 <_ZN10BrushServo7initRamEv+0x220>)
 800247c:	801a      	strh	r2, [r3, #0]
	// Feedforward 2nd Gain
	*(uint16_t*)&ramArea[88] = 0;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3365      	adds	r3, #101	; 0x65
 8002482:	33ff      	adds	r3, #255	; 0xff
 8002484:	2200      	movs	r2, #0
 8002486:	801a      	strh	r2, [r3, #0]
	// Feedforward 1st Gain
	*(uint16_t*)&ramArea[90] = 0;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3367      	adds	r3, #103	; 0x67
 800248c:	33ff      	adds	r3, #255	; 0xff
 800248e:	2200      	movs	r2, #0
 8002490:	801a      	strh	r2, [r3, #0]
	// BUS Watchdog
	ramArea[98] = 0;
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	23b7      	movs	r3, #183	; 0xb7
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	2100      	movs	r1, #0
 800249a:	54d1      	strb	r1, [r2, r3]
	// Goal PWM
	*(uint16_t*)&ramArea[100] = 0;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3371      	adds	r3, #113	; 0x71
 80024a0:	33ff      	adds	r3, #255	; 0xff
 80024a2:	2200      	movs	r2, #0
 80024a4:	801a      	strh	r2, [r3, #0]
	// Goal Velocity
	*(uint32_t*)&ramArea[104] = 0;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3375      	adds	r3, #117	; 0x75
 80024aa:	33ff      	adds	r3, #255	; 0xff
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
	// Profile Acceleration
	*(uint32_t*)&ramArea[108] = 0;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3379      	adds	r3, #121	; 0x79
 80024b4:	33ff      	adds	r3, #255	; 0xff
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
	// Profile Velocity
	*(uint32_t*)&ramArea[112] = 0;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	337d      	adds	r3, #125	; 0x7d
 80024be:	33ff      	adds	r3, #255	; 0xff
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
	// Goal Position
	*(uint32_t*)&ramArea[116] = 2048;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3381      	adds	r3, #129	; 0x81
 80024c8:	33ff      	adds	r3, #255	; 0xff
 80024ca:	2280      	movs	r2, #128	; 0x80
 80024cc:	0112      	lsls	r2, r2, #4
 80024ce:	601a      	str	r2, [r3, #0]
	// Realtime Tick
	*(uint16_t*)&ramArea[120] = 0;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3385      	adds	r3, #133	; 0x85
 80024d4:	33ff      	adds	r3, #255	; 0xff
 80024d6:	2200      	movs	r2, #0
 80024d8:	801a      	strh	r2, [r3, #0]
	// Moving
	ramArea[122] = 0;
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	23c3      	movs	r3, #195	; 0xc3
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	2100      	movs	r1, #0
 80024e2:	54d1      	strb	r1, [r2, r3]
	// Moving Status
	ramArea[123] = 0;
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	2388      	movs	r3, #136	; 0x88
 80024e8:	33ff      	adds	r3, #255	; 0xff
 80024ea:	2100      	movs	r1, #0
 80024ec:	54d1      	strb	r1, [r2, r3]
	// Present PWM
	*(uint16_t*)&ramArea[124] = 0;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3389      	adds	r3, #137	; 0x89
 80024f2:	33ff      	adds	r3, #255	; 0xff
 80024f4:	2200      	movs	r2, #0
 80024f6:	801a      	strh	r2, [r3, #0]
	// Present Load
	*(uint16_t*)&ramArea[126] = 0;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	338b      	adds	r3, #139	; 0x8b
 80024fc:	33ff      	adds	r3, #255	; 0xff
 80024fe:	2200      	movs	r2, #0
 8002500:	801a      	strh	r2, [r3, #0]
	// Present Velocity
	*(uint32_t*)&ramArea[128] = 0;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	338d      	adds	r3, #141	; 0x8d
 8002506:	33ff      	adds	r3, #255	; 0xff
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
	// Present Position
	*(uint32_t*)&ramArea[132] = 0;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3391      	adds	r3, #145	; 0x91
 8002510:	33ff      	adds	r3, #255	; 0xff
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
	// Velocity Trajectory
	*(uint32_t*)&ramArea[136] = 0;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3395      	adds	r3, #149	; 0x95
 800251a:	33ff      	adds	r3, #255	; 0xff
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
	// Position Trajectory
	*(uint32_t*)&ramArea[140] = 0;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3399      	adds	r3, #153	; 0x99
 8002524:	33ff      	adds	r3, #255	; 0xff
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
	// Present Input Voltage
	*(uint16_t*)&ramArea[144] = 0;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	339d      	adds	r3, #157	; 0x9d
 800252e:	33ff      	adds	r3, #255	; 0xff
 8002530:	2200      	movs	r2, #0
 8002532:	801a      	strh	r2, [r3, #0]
	// Present Temperature
	ramArea[146] = 0;
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	23cf      	movs	r3, #207	; 0xcf
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	2100      	movs	r1, #0
 800253c:	54d1      	strb	r1, [r2, r3]
}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	46bd      	mov	sp, r7
 8002542:	b002      	add	sp, #8
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	00000375 	.word	0x00000375
 800254c:	00007fff 	.word	0x00007fff
 8002550:	00000fff 	.word	0x00000fff
 8002554:	00000352 	.word	0x00000352

08002558 <_ZN10BrushServo16instructionWriteEv>:

void BrushServo::instructionWrite() {
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	uint32_t numberOfBytes = uartBuffer[3] - 3;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	7bdb      	ldrb	r3, [r3, #15]
 8002564:	3b03      	subs	r3, #3
 8002566:	613b      	str	r3, [r7, #16]
	uint32_t startingAddress = uartBuffer[5];
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7c5b      	ldrb	r3, [r3, #17]
 800256c:	60fb      	str	r3, [r7, #12]
	for(uint32_t i = 0; i<numberOfBytes; i++){
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	e011      	b.n	8002598 <_ZN10BrushServo16instructionWriteEv+0x40>
		ramArea[i + startingAddress] = uartBuffer[i + 6];
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	3306      	adds	r3, #6
 8002578:	6979      	ldr	r1, [r7, #20]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	188a      	adds	r2, r1, r2
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	18cb      	adds	r3, r1, r3
 8002582:	7b18      	ldrb	r0, [r3, #12]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	2386      	movs	r3, #134	; 0x86
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	188a      	adds	r2, r1, r2
 800258c:	18d3      	adds	r3, r2, r3
 800258e:	1c02      	adds	r2, r0, #0
 8002590:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i<numberOfBytes; i++){
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	3301      	adds	r3, #1
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	429a      	cmp	r2, r3
 800259e:	d3e9      	bcc.n	8002574 <_ZN10BrushServo16instructionWriteEv+0x1c>
	}
}
 80025a0:	46c0      	nop			; (mov r8, r8)
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b006      	add	sp, #24
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <_Z41__static_initialization_and_destruction_0ii>:
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d133      	bne.n	8002624 <_Z41__static_initialization_and_destruction_0ii+0x78>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	4a2b      	ldr	r2, [pc, #172]	; (800266c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d12f      	bne.n	8002624 <_Z41__static_initialization_and_destruction_0ii+0x78>
INA1X9 ina(ADC_STM32::getInstance(), 3, 0.005, 100000);
 80025c4:	f7ff fb3a 	bl	8001c3c <_ZN9ADC_STM3211getInstanceEv>
 80025c8:	0001      	movs	r1, r0
 80025ca:	4a29      	ldr	r2, [pc, #164]	; (8002670 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80025cc:	4829      	ldr	r0, [pc, #164]	; (8002674 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80025ce:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	1c13      	adds	r3, r2, #0
 80025d4:	2203      	movs	r2, #3
 80025d6:	f000 f879 	bl	80026cc <_ZN6INA1X9C1EP9ADC_STM32mff>
VinMeter vin(ADC_STM32::getInstance(), 2, 2200, 1000);
 80025da:	f7ff fb2f 	bl	8001c3c <_ZN9ADC_STM3211getInstanceEv>
 80025de:	0001      	movs	r1, r0
 80025e0:	4a26      	ldr	r2, [pc, #152]	; (800267c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80025e2:	4827      	ldr	r0, [pc, #156]	; (8002680 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80025e4:	4b27      	ldr	r3, [pc, #156]	; (8002684 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	1c13      	adds	r3, r2, #0
 80025ea:	2202      	movs	r2, #2
 80025ec:	f000 fb3c 	bl	8002c68 <_ZN8VinMeterC1EP9ADC_STM32mff>
Potentiometer potentiometer(ADC_STM32::getInstance(), 1);
 80025f0:	f7ff fb24 	bl	8001c3c <_ZN9ADC_STM3211getInstanceEv>
 80025f4:	0001      	movs	r1, r0
 80025f6:	4b24      	ldr	r3, [pc, #144]	; (8002688 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	0018      	movs	r0, r3
 80025fc:	f000 fad2 	bl	8002ba4 <_ZN13PotentiometerC1EP9ADC_STM32m>
PWM_Pin_STM32 pwma(&htim1, TIM_CHANNEL_1, true);
 8002600:	4922      	ldr	r1, [pc, #136]	; (800268c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8002602:	4823      	ldr	r0, [pc, #140]	; (8002690 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8002604:	2301      	movs	r3, #1
 8002606:	2200      	movs	r2, #0
 8002608:	f000 f920 	bl	800284c <_ZN13PWM_Pin_STM32C1EP19__TIM_HandleTypeDefmb>
PWM_Pin_STM32 pwmb(&htim1, TIM_CHANNEL_2, true);
 800260c:	491f      	ldr	r1, [pc, #124]	; (800268c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800260e:	4821      	ldr	r0, [pc, #132]	; (8002694 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8002610:	2301      	movs	r3, #1
 8002612:	2204      	movs	r2, #4
 8002614:	f000 f91a 	bl	800284c <_ZN13PWM_Pin_STM32C1EP19__TIM_HandleTypeDefmb>
Motor_IR4427 motor(&pwma, &pwmb);
 8002618:	4a1e      	ldr	r2, [pc, #120]	; (8002694 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800261a:	491d      	ldr	r1, [pc, #116]	; (8002690 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 800261c:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800261e:	0018      	movs	r0, r3
 8002620:	f000 f89c 	bl	800275c <_ZN12Motor_IR4427C1EP13PWM_Pin_STM32S1_>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d11b      	bne.n	8002662 <_Z41__static_initialization_and_destruction_0ii+0xb6>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	4a0f      	ldr	r2, [pc, #60]	; (800266c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d117      	bne.n	8002662 <_Z41__static_initialization_and_destruction_0ii+0xb6>
 8002632:	4b19      	ldr	r3, [pc, #100]	; (8002698 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002634:	0018      	movs	r0, r3
 8002636:	f000 f8a7 	bl	8002788 <_ZN12Motor_IR4427D1Ev>
PWM_Pin_STM32 pwmb(&htim1, TIM_CHANNEL_2, true);
 800263a:	4b16      	ldr	r3, [pc, #88]	; (8002694 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800263c:	0018      	movs	r0, r3
 800263e:	f000 f923 	bl	8002888 <_ZN13PWM_Pin_STM32D1Ev>
PWM_Pin_STM32 pwma(&htim1, TIM_CHANNEL_1, true);
 8002642:	4b13      	ldr	r3, [pc, #76]	; (8002690 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8002644:	0018      	movs	r0, r3
 8002646:	f000 f91f 	bl	8002888 <_ZN13PWM_Pin_STM32D1Ev>
Potentiometer potentiometer(ADC_STM32::getInstance(), 1);
 800264a:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 800264c:	0018      	movs	r0, r3
 800264e:	f000 fabf 	bl	8002bd0 <_ZN13PotentiometerD1Ev>
VinMeter vin(ADC_STM32::getInstance(), 2, 2200, 1000);
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8002654:	0018      	movs	r0, r3
 8002656:	f000 fb25 	bl	8002ca4 <_ZN8VinMeterD1Ev>
INA1X9 ina(ADC_STM32::getInstance(), 3, 0.005, 100000);
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800265c:	0018      	movs	r0, r3
 800265e:	f000 f853 	bl	8002708 <_ZN6INA1X9D1Ev>
}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	46bd      	mov	sp, r7
 8002666:	b002      	add	sp, #8
 8002668:	bd80      	pop	{r7, pc}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	0000ffff 	.word	0x0000ffff
 8002670:	3ba3d70a 	.word	0x3ba3d70a
 8002674:	200000a4 	.word	0x200000a4
 8002678:	47c35000 	.word	0x47c35000
 800267c:	45098000 	.word	0x45098000
 8002680:	200000b8 	.word	0x200000b8
 8002684:	447a0000 	.word	0x447a0000
 8002688:	200000cc 	.word	0x200000cc
 800268c:	20000724 	.word	0x20000724
 8002690:	200000d8 	.word	0x200000d8
 8002694:	200000e8 	.word	0x200000e8
 8002698:	200000f8 	.word	0x200000f8

0800269c <_GLOBAL__sub_I_ina>:
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <_GLOBAL__sub_I_ina+0x14>)
 80026a2:	0019      	movs	r1, r3
 80026a4:	2001      	movs	r0, #1
 80026a6:	f7ff ff81 	bl	80025ac <_Z41__static_initialization_and_destruction_0ii>
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	0000ffff 	.word	0x0000ffff

080026b4 <_GLOBAL__sub_D_ina>:
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <_GLOBAL__sub_D_ina+0x14>)
 80026ba:	0019      	movs	r1, r3
 80026bc:	2000      	movs	r0, #0
 80026be:	f7ff ff75 	bl	80025ac <_Z41__static_initialization_and_destruction_0ii>
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	0000ffff 	.word	0x0000ffff

080026cc <_ZN6INA1X9C1EP9ADC_STM32mff>:
 *      Author: Gabriel
 */

#include "INA1X9.hpp"

INA1X9::INA1X9(ADC_STM32* adc, uint32_t adcRank, float rs, float rl) : adc(adc), adcRank(adcRank), rs(rs), rl(rl) {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <_ZN6INA1X9C1EP9ADC_STM32mff+0x38>)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	611a      	str	r2, [r3, #16]

}
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	0018      	movs	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b004      	add	sp, #16
 8002700:	bd80      	pop	{r7, pc}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	080099d4 	.word	0x080099d4

08002708 <_ZN6INA1X9D1Ev>:

INA1X9::~INA1X9() {
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	4a03      	ldr	r2, [pc, #12]	; (8002720 <_ZN6INA1X9D1Ev+0x18>)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	601a      	str	r2, [r3, #0]

}
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	0018      	movs	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	b002      	add	sp, #8
 800271e:	bd80      	pop	{r7, pc}
 8002720:	080099d4 	.word	0x080099d4

08002724 <_ZN6INA1X9D0Ev>:
INA1X9::~INA1X9() {
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
}
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	0018      	movs	r0, r3
 8002730:	f7ff ffea 	bl	8002708 <_ZN6INA1X9D1Ev>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2114      	movs	r1, #20
 8002738:	0018      	movs	r0, r3
 800273a:	f006 fee1 	bl	8009500 <_ZdlPvj>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	0018      	movs	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	b002      	add	sp, #8
 8002746:	bd80      	pop	{r7, pc}

08002748 <_ZN6INA1X94initEv>:

int32_t INA1X9::init() {
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	return 0;
 8002750:	2300      	movs	r3, #0
}
 8002752:	0018      	movs	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	b002      	add	sp, #8
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <_ZN12Motor_IR4427C1EP13PWM_Pin_STM32S1_>:
 *      Author: Gabriel
 */

#include "Motor_IR4427.hpp"

Motor_IR4427::Motor_IR4427(PWM_Pin_STM32* pwma, PWM_Pin_STM32* pwmb) : pwma(pwma), pwmb(pwmb) {
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	4a06      	ldr	r2, [pc, #24]	; (8002784 <_ZN12Motor_IR4427C1EP13PWM_Pin_STM32S1_+0x28>)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	609a      	str	r2, [r3, #8]

}
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	0018      	movs	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	b004      	add	sp, #16
 8002782:	bd80      	pop	{r7, pc}
 8002784:	080099e4 	.word	0x080099e4

08002788 <_ZN12Motor_IR4427D1Ev>:

Motor_IR4427::~Motor_IR4427() {
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	4a03      	ldr	r2, [pc, #12]	; (80027a0 <_ZN12Motor_IR4427D1Ev+0x18>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	601a      	str	r2, [r3, #0]

}
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	0018      	movs	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	b002      	add	sp, #8
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	080099e4 	.word	0x080099e4

080027a4 <_ZN12Motor_IR4427D0Ev>:
Motor_IR4427::~Motor_IR4427() {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
}
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	0018      	movs	r0, r3
 80027b0:	f7ff ffea 	bl	8002788 <_ZN12Motor_IR4427D1Ev>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	210c      	movs	r1, #12
 80027b8:	0018      	movs	r0, r3
 80027ba:	f006 fea1 	bl	8009500 <_ZdlPvj>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b002      	add	sp, #8
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <_ZN12Motor_IR44274initEv>:

int32_t Motor_IR4427::init() {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	pwma->init();
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	0018      	movs	r0, r3
 80027d6:	f000 f877 	bl	80028c8 <_ZN13PWM_Pin_STM324initEv>
	pwmb->init();
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	0018      	movs	r0, r3
 80027e0:	f000 f872 	bl	80028c8 <_ZN13PWM_Pin_STM324initEv>
	return 0;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	0018      	movs	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b002      	add	sp, #8
 80027ec:	bd80      	pop	{r7, pc}

080027ee <_ZN12Motor_IR44278setPowerEf>:

void Motor_IR4427::setEnabled(bool enabled) {

}

void Motor_IR4427::setPower(float power) {
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
	if(power<0){
 80027f8:	2100      	movs	r1, #0
 80027fa:	6838      	ldr	r0, [r7, #0]
 80027fc:	f7fd fe0a 	bl	8000414 <__aeabi_fcmplt>
 8002800:	1e03      	subs	r3, r0, #0
 8002802:	d010      	beq.n	8002826 <_ZN12Motor_IR44278setPowerEf+0x38>
		pwma->setCycle(0);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	1c11      	adds	r1, r2, #0
 800280c:	0018      	movs	r0, r3
 800280e:	f000 f97f 	bl	8002b10 <_ZN13PWM_Pin_STM328setCycleEf>
		pwmb->setCycle(-power);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6898      	ldr	r0, [r3, #8]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2280      	movs	r2, #128	; 0x80
 800281a:	0612      	lsls	r2, r2, #24
 800281c:	4053      	eors	r3, r2
 800281e:	1c19      	adds	r1, r3, #0
 8002820:	f000 f976 	bl	8002b10 <_ZN13PWM_Pin_STM328setCycleEf>
	}else{
		pwma->setCycle(power);
		pwmb->setCycle(0);
	}
}
 8002824:	e00d      	b.n	8002842 <_ZN12Motor_IR44278setPowerEf+0x54>
		pwma->setCycle(power);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	1c11      	adds	r1, r2, #0
 800282e:	0018      	movs	r0, r3
 8002830:	f000 f96e 	bl	8002b10 <_ZN13PWM_Pin_STM328setCycleEf>
		pwmb->setCycle(0);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2200      	movs	r2, #0
 800283a:	1c11      	adds	r1, r2, #0
 800283c:	0018      	movs	r0, r3
 800283e:	f000 f967 	bl	8002b10 <_ZN13PWM_Pin_STM328setCycleEf>
}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	46bd      	mov	sp, r7
 8002846:	b002      	add	sp, #8
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <_ZN13PWM_Pin_STM32C1EP19__TIM_HandleTypeDefmb>:
 *      Author: Gabriel
 */

#include "PWM_Pin_STM32.hpp"

PWM_Pin_STM32::PWM_Pin_STM32(TIM_HandleTypeDef *htim, uint32_t channel, bool enableComplimentary) :
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	001a      	movs	r2, r3
 800285a:	1cfb      	adds	r3, r7, #3
 800285c:	701a      	strb	r2, [r3, #0]
		htim(htim), channel(channel), enableComplimentary(enableComplimentary) {
 800285e:	4a09      	ldr	r2, [pc, #36]	; (8002884 <_ZN13PWM_Pin_STM32C1EP19__TIM_HandleTypeDefmb+0x38>)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1cfa      	adds	r2, r7, #3
 8002874:	7812      	ldrb	r2, [r2, #0]
 8002876:	731a      	strb	r2, [r3, #12]
}
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	0018      	movs	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	b004      	add	sp, #16
 8002880:	bd80      	pop	{r7, pc}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	08009a48 	.word	0x08009a48

08002888 <_ZN13PWM_Pin_STM32D1Ev>:

PWM_Pin_STM32::~PWM_Pin_STM32() {
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	4a03      	ldr	r2, [pc, #12]	; (80028a0 <_ZN13PWM_Pin_STM32D1Ev+0x18>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	601a      	str	r2, [r3, #0]

}
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	0018      	movs	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	b002      	add	sp, #8
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	08009a48 	.word	0x08009a48

080028a4 <_ZN13PWM_Pin_STM32D0Ev>:
PWM_Pin_STM32::~PWM_Pin_STM32() {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
}
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	0018      	movs	r0, r3
 80028b0:	f7ff ffea 	bl	8002888 <_ZN13PWM_Pin_STM32D1Ev>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2110      	movs	r1, #16
 80028b8:	0018      	movs	r0, r3
 80028ba:	f006 fe21 	bl	8009500 <_ZdlPvj>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	0018      	movs	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b002      	add	sp, #8
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <_ZN13PWM_Pin_STM324initEv>:

int32_t PWM_Pin_STM32::init() {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
	if(!IS_TIM_INSTANCE(htim->Instance)){
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a86      	ldr	r2, [pc, #536]	; (8002af0 <_ZN13PWM_Pin_STM324initEv+0x228>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d033      	beq.n	8002944 <_ZN13PWM_Pin_STM324initEv+0x7c>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	05db      	lsls	r3, r3, #23
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d02c      	beq.n	8002944 <_ZN13PWM_Pin_STM324initEv+0x7c>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a80      	ldr	r2, [pc, #512]	; (8002af4 <_ZN13PWM_Pin_STM324initEv+0x22c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d026      	beq.n	8002944 <_ZN13PWM_Pin_STM324initEv+0x7c>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a7e      	ldr	r2, [pc, #504]	; (8002af8 <_ZN13PWM_Pin_STM324initEv+0x230>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d020      	beq.n	8002944 <_ZN13PWM_Pin_STM324initEv+0x7c>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a7c      	ldr	r2, [pc, #496]	; (8002afc <_ZN13PWM_Pin_STM324initEv+0x234>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01a      	beq.n	8002944 <_ZN13PWM_Pin_STM324initEv+0x7c>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a7a      	ldr	r2, [pc, #488]	; (8002b00 <_ZN13PWM_Pin_STM324initEv+0x238>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d014      	beq.n	8002944 <_ZN13PWM_Pin_STM324initEv+0x7c>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a78      	ldr	r2, [pc, #480]	; (8002b04 <_ZN13PWM_Pin_STM324initEv+0x23c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00e      	beq.n	8002944 <_ZN13PWM_Pin_STM324initEv+0x7c>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a76      	ldr	r2, [pc, #472]	; (8002b08 <_ZN13PWM_Pin_STM324initEv+0x240>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d008      	beq.n	8002944 <_ZN13PWM_Pin_STM324initEv+0x7c>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a74      	ldr	r2, [pc, #464]	; (8002b0c <_ZN13PWM_Pin_STM324initEv+0x244>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d002      	beq.n	8002944 <_ZN13PWM_Pin_STM324initEv+0x7c>
		// Timer doesn't exist
		return -1;
 800293e:	2301      	movs	r3, #1
 8002940:	425b      	negs	r3, r3
 8002942:	e0d0      	b.n	8002ae6 <_ZN13PWM_Pin_STM324initEv+0x21e>
	}
	if (!IS_TIM_CCX_INSTANCE(htim->Instance, channel)) {
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a69      	ldr	r2, [pc, #420]	; (8002af0 <_ZN13PWM_Pin_STM324initEv+0x228>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d11d      	bne.n	800298c <_ZN13PWM_Pin_STM324initEv+0xc4>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d100      	bne.n	800295a <_ZN13PWM_Pin_STM324initEv+0x92>
 8002958:	e074      	b.n	8002a44 <_ZN13PWM_Pin_STM324initEv+0x17c>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2b04      	cmp	r3, #4
 8002960:	d100      	bne.n	8002964 <_ZN13PWM_Pin_STM324initEv+0x9c>
 8002962:	e06f      	b.n	8002a44 <_ZN13PWM_Pin_STM324initEv+0x17c>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b08      	cmp	r3, #8
 800296a:	d100      	bne.n	800296e <_ZN13PWM_Pin_STM324initEv+0xa6>
 800296c:	e06a      	b.n	8002a44 <_ZN13PWM_Pin_STM324initEv+0x17c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b0c      	cmp	r3, #12
 8002974:	d100      	bne.n	8002978 <_ZN13PWM_Pin_STM324initEv+0xb0>
 8002976:	e065      	b.n	8002a44 <_ZN13PWM_Pin_STM324initEv+0x17c>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b10      	cmp	r3, #16
 800297e:	d100      	bne.n	8002982 <_ZN13PWM_Pin_STM324initEv+0xba>
 8002980:	e060      	b.n	8002a44 <_ZN13PWM_Pin_STM324initEv+0x17c>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2b14      	cmp	r3, #20
 8002988:	d100      	bne.n	800298c <_ZN13PWM_Pin_STM324initEv+0xc4>
 800298a:	e05b      	b.n	8002a44 <_ZN13PWM_Pin_STM324initEv+0x17c>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	05db      	lsls	r3, r3, #23
 8002996:	429a      	cmp	r2, r3
 8002998:	d10f      	bne.n	80029ba <_ZN13PWM_Pin_STM324initEv+0xf2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d050      	beq.n	8002a44 <_ZN13PWM_Pin_STM324initEv+0x17c>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d04c      	beq.n	8002a44 <_ZN13PWM_Pin_STM324initEv+0x17c>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d048      	beq.n	8002a44 <_ZN13PWM_Pin_STM324initEv+0x17c>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b0c      	cmp	r3, #12
 80029b8:	d044      	beq.n	8002a44 <_ZN13PWM_Pin_STM324initEv+0x17c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a4c      	ldr	r2, [pc, #304]	; (8002af4 <_ZN13PWM_Pin_STM324initEv+0x22c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d10f      	bne.n	80029e6 <_ZN13PWM_Pin_STM324initEv+0x11e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d03a      	beq.n	8002a44 <_ZN13PWM_Pin_STM324initEv+0x17c>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d036      	beq.n	8002a44 <_ZN13PWM_Pin_STM324initEv+0x17c>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d032      	beq.n	8002a44 <_ZN13PWM_Pin_STM324initEv+0x17c>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b0c      	cmp	r3, #12
 80029e4:	d02e      	beq.n	8002a44 <_ZN13PWM_Pin_STM324initEv+0x17c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a44      	ldr	r2, [pc, #272]	; (8002b00 <_ZN13PWM_Pin_STM324initEv+0x238>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d103      	bne.n	80029fa <_ZN13PWM_Pin_STM324initEv+0x132>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d024      	beq.n	8002a44 <_ZN13PWM_Pin_STM324initEv+0x17c>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a40      	ldr	r2, [pc, #256]	; (8002b04 <_ZN13PWM_Pin_STM324initEv+0x23c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d107      	bne.n	8002a16 <_ZN13PWM_Pin_STM324initEv+0x14e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d01a      	beq.n	8002a44 <_ZN13PWM_Pin_STM324initEv+0x17c>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d016      	beq.n	8002a44 <_ZN13PWM_Pin_STM324initEv+0x17c>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a3a      	ldr	r2, [pc, #232]	; (8002b08 <_ZN13PWM_Pin_STM324initEv+0x240>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d103      	bne.n	8002a2a <_ZN13PWM_Pin_STM324initEv+0x162>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00c      	beq.n	8002a44 <_ZN13PWM_Pin_STM324initEv+0x17c>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a36      	ldr	r2, [pc, #216]	; (8002b0c <_ZN13PWM_Pin_STM324initEv+0x244>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d103      	bne.n	8002a3e <_ZN13PWM_Pin_STM324initEv+0x176>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <_ZN13PWM_Pin_STM324initEv+0x17c>
		// Channel doesn't exist
		return -1;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	425b      	negs	r3, r3
 8002a42:	e050      	b.n	8002ae6 <_ZN13PWM_Pin_STM324initEv+0x21e>
	}
	if (enableComplimentary && !IS_TIM_CCXN_INSTANCE(htim->Instance, channel)) {
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	7b1b      	ldrb	r3, [r3, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d032      	beq.n	8002ab2 <_ZN13PWM_Pin_STM324initEv+0x1ea>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a27      	ldr	r2, [pc, #156]	; (8002af0 <_ZN13PWM_Pin_STM324initEv+0x228>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d10b      	bne.n	8002a70 <_ZN13PWM_Pin_STM324initEv+0x1a8>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d028      	beq.n	8002ab2 <_ZN13PWM_Pin_STM324initEv+0x1ea>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d024      	beq.n	8002ab2 <_ZN13PWM_Pin_STM324initEv+0x1ea>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d020      	beq.n	8002ab2 <_ZN13PWM_Pin_STM324initEv+0x1ea>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a23      	ldr	r2, [pc, #140]	; (8002b04 <_ZN13PWM_Pin_STM324initEv+0x23c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d103      	bne.n	8002a84 <_ZN13PWM_Pin_STM324initEv+0x1bc>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d016      	beq.n	8002ab2 <_ZN13PWM_Pin_STM324initEv+0x1ea>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a1f      	ldr	r2, [pc, #124]	; (8002b08 <_ZN13PWM_Pin_STM324initEv+0x240>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d103      	bne.n	8002a98 <_ZN13PWM_Pin_STM324initEv+0x1d0>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00c      	beq.n	8002ab2 <_ZN13PWM_Pin_STM324initEv+0x1ea>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a1b      	ldr	r2, [pc, #108]	; (8002b0c <_ZN13PWM_Pin_STM324initEv+0x244>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d103      	bne.n	8002aac <_ZN13PWM_Pin_STM324initEv+0x1e4>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <_ZN13PWM_Pin_STM324initEv+0x1ea>
		// Channel doesn't have a complimentary output
		return -1;
 8002aac:	2301      	movs	r3, #1
 8002aae:	425b      	negs	r3, r3
 8002ab0:	e019      	b.n	8002ae6 <_ZN13PWM_Pin_STM324initEv+0x21e>
	}
	HAL_TIM_Base_Start(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f003 fc02 	bl	80062c0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htim, channel);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	0019      	movs	r1, r3
 8002ac6:	0010      	movs	r0, r2
 8002ac8:	f003 fd18 	bl	80064fc <HAL_TIM_PWM_Start>
	if (enableComplimentary) {
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7b1b      	ldrb	r3, [r3, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d007      	beq.n	8002ae4 <_ZN13PWM_Pin_STM324initEv+0x21c>
		HAL_TIMEx_PWMN_Start(htim, channel);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	0019      	movs	r1, r3
 8002ade:	0010      	movs	r0, r2
 8002ae0:	f004 fdc8 	bl	8007674 <HAL_TIMEx_PWMN_Start>
	}
	return 0;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b002      	add	sp, #8
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	40012c00 	.word	0x40012c00
 8002af4:	40000400 	.word	0x40000400
 8002af8:	40001000 	.word	0x40001000
 8002afc:	40001400 	.word	0x40001400
 8002b00:	40002000 	.word	0x40002000
 8002b04:	40014000 	.word	0x40014000
 8002b08:	40014400 	.word	0x40014400
 8002b0c:	40014800 	.word	0x40014800

08002b10 <_ZN13PWM_Pin_STM328setCycleEf>:

void PWM_Pin_STM32::setCycle(float cycle) {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
	uint32_t ccrValue = cycle * htim->Instance->ARR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	0018      	movs	r0, r3
 8002b24:	f7fe fc1a 	bl	800135c <__aeabi_ui2f>
 8002b28:	1c03      	adds	r3, r0, #0
 8002b2a:	6839      	ldr	r1, [r7, #0]
 8002b2c:	1c18      	adds	r0, r3, #0
 8002b2e:	f7fe f907 	bl	8000d40 <__aeabi_fmul>
 8002b32:	1c03      	adds	r3, r0, #0
 8002b34:	1c18      	adds	r0, r3, #0
 8002b36:	f7fd fcb5 	bl	80004a4 <__aeabi_f2uiz>
 8002b3a:	0003      	movs	r3, r0
 8002b3c:	60fb      	str	r3, [r7, #12]
	switch (channel) {
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b14      	cmp	r3, #20
 8002b44:	d828      	bhi.n	8002b98 <_ZN13PWM_Pin_STM328setCycleEf+0x88>
 8002b46:	009a      	lsls	r2, r3, #2
 8002b48:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <_ZN13PWM_Pin_STM328setCycleEf+0x90>)
 8002b4a:	18d3      	adds	r3, r2, r3
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	469f      	mov	pc, r3
	case TIM_CHANNEL_1:
		htim->Instance->CCR1 = ccrValue;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8002b5a:	e01d      	b.n	8002b98 <_ZN13PWM_Pin_STM328setCycleEf+0x88>
	case TIM_CHANNEL_2:
		htim->Instance->CCR2 = ccrValue;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8002b66:	e017      	b.n	8002b98 <_ZN13PWM_Pin_STM328setCycleEf+0x88>
	case TIM_CHANNEL_3:
		htim->Instance->CCR3 = ccrValue;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8002b72:	e011      	b.n	8002b98 <_ZN13PWM_Pin_STM328setCycleEf+0x88>
	case TIM_CHANNEL_4:
		htim->Instance->CCR4 = ccrValue;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002b7e:	e00b      	b.n	8002b98 <_ZN13PWM_Pin_STM328setCycleEf+0x88>
	case TIM_CHANNEL_5:
		htim->Instance->CCR5 = ccrValue;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	659a      	str	r2, [r3, #88]	; 0x58
		break;
 8002b8a:	e005      	b.n	8002b98 <_ZN13PWM_Pin_STM328setCycleEf+0x88>
	case TIM_CHANNEL_6:
		htim->Instance->CCR6 = ccrValue;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	65da      	str	r2, [r3, #92]	; 0x5c
		break;
 8002b96:	46c0      	nop			; (mov r8, r8)
	}
}
 8002b98:	46c0      	nop			; (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b004      	add	sp, #16
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	080099ec 	.word	0x080099ec

08002ba4 <_ZN13PotentiometerC1EP9ADC_STM32m>:
 *      Author: Gabriel
 */

#include "Potentiometer.hpp"

Potentiometer::Potentiometer(ADC_STM32* adc, uint32_t adcRank) : adc(adc), adcRank(adcRank) {
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	4a06      	ldr	r2, [pc, #24]	; (8002bcc <_ZN13PotentiometerC1EP9ADC_STM32m+0x28>)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	609a      	str	r2, [r3, #8]

}
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b004      	add	sp, #16
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	08009a58 	.word	0x08009a58

08002bd0 <_ZN13PotentiometerD1Ev>:

Potentiometer::~Potentiometer() {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	4a03      	ldr	r2, [pc, #12]	; (8002be8 <_ZN13PotentiometerD1Ev+0x18>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	601a      	str	r2, [r3, #0]

}
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b002      	add	sp, #8
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	08009a58 	.word	0x08009a58

08002bec <_ZN13PotentiometerD0Ev>:
Potentiometer::~Potentiometer() {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
}
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f7ff ffea 	bl	8002bd0 <_ZN13PotentiometerD1Ev>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	210c      	movs	r1, #12
 8002c00:	0018      	movs	r0, r3
 8002c02:	f006 fc7d 	bl	8009500 <_ZdlPvj>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	0018      	movs	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b002      	add	sp, #8
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <_ZN13Potentiometer4initEv>:

int32_t Potentiometer::init() {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	return 0;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	b002      	add	sp, #8
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <_ZN13Potentiometer4readEv>:

float Potentiometer::read() {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
	return adc->getData(adcRank)/4096.0;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	0019      	movs	r1, r3
 8002c36:	0010      	movs	r0, r2
 8002c38:	f7ff f82c 	bl	8001c94 <_ZN9ADC_STM327getDataEm>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f7fe fec2 	bl	80019c8 <__aeabi_i2d>
 8002c44:	2200      	movs	r2, #0
 8002c46:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <_ZN13Potentiometer4readEv+0x40>)
 8002c48:	f7fe fbd0 	bl	80013ec <__aeabi_ddiv>
 8002c4c:	0002      	movs	r2, r0
 8002c4e:	000b      	movs	r3, r1
 8002c50:	0010      	movs	r0, r2
 8002c52:	0019      	movs	r1, r3
 8002c54:	f7fe ff0e 	bl	8001a74 <__aeabi_d2f>
 8002c58:	1c03      	adds	r3, r0, #0
}
 8002c5a:	1c18      	adds	r0, r3, #0
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b002      	add	sp, #8
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	40b00000 	.word	0x40b00000

08002c68 <_ZN8VinMeterC1EP9ADC_STM32mff>:
 *      Author: Gabriel
 */

#include "VinMeter.hpp"

VinMeter::VinMeter(ADC_STM32* adc, uint32_t adcRank, float rh, float rl) : adc(adc), adcRank(adcRank), rh(rh), rl(rl) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	603b      	str	r3, [r7, #0]
 8002c76:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <_ZN8VinMeterC1EP9ADC_STM32mff+0x38>)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	611a      	str	r2, [r3, #16]

}
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	0018      	movs	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	b004      	add	sp, #16
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	08009a68 	.word	0x08009a68

08002ca4 <_ZN8VinMeterD1Ev>:

VinMeter::~VinMeter() {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	4a03      	ldr	r2, [pc, #12]	; (8002cbc <_ZN8VinMeterD1Ev+0x18>)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	601a      	str	r2, [r3, #0]

}
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b002      	add	sp, #8
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	08009a68 	.word	0x08009a68

08002cc0 <_ZN8VinMeterD0Ev>:
VinMeter::~VinMeter() {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
}
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f7ff ffea 	bl	8002ca4 <_ZN8VinMeterD1Ev>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2114      	movs	r1, #20
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f006 fc13 	bl	8009500 <_ZdlPvj>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	0018      	movs	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b002      	add	sp, #8
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <_ZN8VinMeter4initEv>:

int32_t VinMeter::init() {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
	return 0;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	0018      	movs	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b002      	add	sp, #8
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <_Z12controlTimerP19__TIM_HandleTypeDef>:
#include "ADC_STM32.hpp"
#include "BrushServo.hpp"

extern TIM_HandleTypeDef htim6;

void controlTimer(TIM_HandleTypeDef* htim){
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b086      	sub	sp, #24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
	uint32_t t0 = TIM2->CNT;
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	05db      	lsls	r3, r3, #23
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	617b      	str	r3, [r7, #20]
	BrushServo::getInstance()->controlCallback();
 8002d06:	f7ff f869 	bl	8001ddc <_ZN10BrushServo11getInstanceEv>
 8002d0a:	0003      	movs	r3, r0
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f7ff f8b5 	bl	8001e7c <_ZN10BrushServo15controlCallbackEv>
	ADC_STM32::getInstance()->startScan();
 8002d12:	f7fe ff93 	bl	8001c3c <_ZN9ADC_STM3211getInstanceEv>
 8002d16:	0003      	movs	r3, r0
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f7fe ffa7 	bl	8001c6c <_ZN9ADC_STM329startScanEv>
	uint32_t t1 = TIM2->CNT;
 8002d1e:	2380      	movs	r3, #128	; 0x80
 8002d20:	05db      	lsls	r3, r3, #23
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	613b      	str	r3, [r7, #16]
	uint32_t delta = t1 - t0;
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	60fb      	str	r3, [r7, #12]
}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b006      	add	sp, #24
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <start>:

void start(){
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
	htim6.PeriodElapsedCallback = controlTimer;
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <start+0x40>)
 8002d3e:	2184      	movs	r1, #132	; 0x84
 8002d40:	4a0e      	ldr	r2, [pc, #56]	; (8002d7c <start+0x44>)
 8002d42:	505a      	str	r2, [r3, r1]
	ADC_STM32::getInstance()->init();
 8002d44:	f7fe ff7a 	bl	8001c3c <_ZN9ADC_STM3211getInstanceEv>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f7fe ff7e 	bl	8001c4c <_ZN9ADC_STM324initEv>
	ADC_STM32::getInstance()->startScan();
 8002d50:	f7fe ff74 	bl	8001c3c <_ZN9ADC_STM3211getInstanceEv>
 8002d54:	0003      	movs	r3, r0
 8002d56:	0018      	movs	r0, r3
 8002d58:	f7fe ff88 	bl	8001c6c <_ZN9ADC_STM329startScanEv>
	BrushServo::getInstance()->init();
 8002d5c:	f7ff f83e 	bl	8001ddc <_ZN10BrushServo11getInstanceEv>
 8002d60:	0003      	movs	r3, r0
 8002d62:	0018      	movs	r0, r3
 8002d64:	f7ff f85c 	bl	8001e20 <_ZN10BrushServo4initEv>
	HAL_TIM_Base_Start_IT(&htim6);
 8002d68:	4b03      	ldr	r3, [pc, #12]	; (8002d78 <start+0x40>)
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f003 fafc 	bl	8006368 <HAL_TIM_Base_Start_IT>
}
 8002d70:	46c0      	nop			; (mov r8, r8)
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	2000089c 	.word	0x2000089c
 8002d7c:	08002cf7 	.word	0x08002cf7

08002d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d84:	f000 fee4 	bl	8003b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d88:	f000 f818 	bl	8002dbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d8c:	f000 fb0c 	bl	80033a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d90:	f000 fae4 	bl	800335c <MX_DMA_Init>
  MX_ADC1_Init();
 8002d94:	f000 f870 	bl	8002e78 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8002d98:	f000 f924 	bl	8002fe4 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8002d9c:	f000 f978 	bl	8003090 <MX_TIM1_Init>
  MX_TIM6_Init();
 8002da0:	f000 faa0 	bl	80032e4 <MX_TIM6_Init>
  MX_TIM2_Init();
 8002da4:	f000 fa4a 	bl	800323c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8002da8:	4b03      	ldr	r3, [pc, #12]	; (8002db8 <main+0x38>)
 8002daa:	0018      	movs	r0, r3
 8002dac:	f003 fa88 	bl	80062c0 <HAL_TIM_Base_Start>
  start();
 8002db0:	f7ff ffc2 	bl	8002d38 <start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002db4:	e7fe      	b.n	8002db4 <main+0x34>
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	200007e0 	.word	0x200007e0

08002dbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b093      	sub	sp, #76	; 0x4c
 8002dc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dc2:	2410      	movs	r4, #16
 8002dc4:	193b      	adds	r3, r7, r4
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	2338      	movs	r3, #56	; 0x38
 8002dca:	001a      	movs	r2, r3
 8002dcc:	2100      	movs	r1, #0
 8002dce:	f006 fc7f 	bl	80096d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dd2:	003b      	movs	r3, r7
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	2310      	movs	r3, #16
 8002dd8:	001a      	movs	r2, r3
 8002dda:	2100      	movs	r1, #0
 8002ddc:	f006 fc78 	bl	80096d0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	0018      	movs	r0, r3
 8002de6:	f002 fb13 	bl	8005410 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dea:	193b      	adds	r3, r7, r4
 8002dec:	2202      	movs	r2, #2
 8002dee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002df0:	193b      	adds	r3, r7, r4
 8002df2:	2280      	movs	r2, #128	; 0x80
 8002df4:	0052      	lsls	r2, r2, #1
 8002df6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002df8:	0021      	movs	r1, r4
 8002dfa:	187b      	adds	r3, r7, r1
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e00:	187b      	adds	r3, r7, r1
 8002e02:	2240      	movs	r2, #64	; 0x40
 8002e04:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e06:	187b      	adds	r3, r7, r1
 8002e08:	2202      	movs	r2, #2
 8002e0a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e0c:	187b      	adds	r3, r7, r1
 8002e0e:	2202      	movs	r2, #2
 8002e10:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002e12:	187b      	adds	r3, r7, r1
 8002e14:	2200      	movs	r2, #0
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002e18:	187b      	adds	r3, r7, r1
 8002e1a:	2208      	movs	r2, #8
 8002e1c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e1e:	187b      	adds	r3, r7, r1
 8002e20:	2280      	movs	r2, #128	; 0x80
 8002e22:	0292      	lsls	r2, r2, #10
 8002e24:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002e26:	187b      	adds	r3, r7, r1
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	0492      	lsls	r2, r2, #18
 8002e2c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002e2e:	187b      	adds	r3, r7, r1
 8002e30:	2280      	movs	r2, #128	; 0x80
 8002e32:	0592      	lsls	r2, r2, #22
 8002e34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e36:	187b      	adds	r3, r7, r1
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f002 fb35 	bl	80054a8 <HAL_RCC_OscConfig>
 8002e3e:	1e03      	subs	r3, r0, #0
 8002e40:	d001      	beq.n	8002e46 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002e42:	f000 fb15 	bl	8003470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e46:	003b      	movs	r3, r7
 8002e48:	2207      	movs	r2, #7
 8002e4a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e4c:	003b      	movs	r3, r7
 8002e4e:	2202      	movs	r2, #2
 8002e50:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e52:	003b      	movs	r3, r7
 8002e54:	2200      	movs	r2, #0
 8002e56:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e58:	003b      	movs	r3, r7
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e5e:	003b      	movs	r3, r7
 8002e60:	2102      	movs	r1, #2
 8002e62:	0018      	movs	r0, r3
 8002e64:	f002 fe3a 	bl	8005adc <HAL_RCC_ClockConfig>
 8002e68:	1e03      	subs	r3, r0, #0
 8002e6a:	d001      	beq.n	8002e70 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002e6c:	f000 fb00 	bl	8003470 <Error_Handler>
  }
}
 8002e70:	46c0      	nop			; (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b013      	add	sp, #76	; 0x4c
 8002e76:	bd90      	pop	{r4, r7, pc}

08002e78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	0018      	movs	r0, r3
 8002e82:	230c      	movs	r3, #12
 8002e84:	001a      	movs	r2, r3
 8002e86:	2100      	movs	r1, #0
 8002e88:	f006 fc22 	bl	80096d0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002e8c:	4b4e      	ldr	r3, [pc, #312]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002e8e:	4a4f      	ldr	r2, [pc, #316]	; (8002fcc <MX_ADC1_Init+0x154>)
 8002e90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002e92:	4b4d      	ldr	r3, [pc, #308]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002e94:	2280      	movs	r2, #128	; 0x80
 8002e96:	05d2      	lsls	r2, r2, #23
 8002e98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e9a:	4b4b      	ldr	r3, [pc, #300]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ea0:	4b49      	ldr	r3, [pc, #292]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002ea6:	4b48      	ldr	r3, [pc, #288]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002ea8:	2280      	movs	r2, #128	; 0x80
 8002eaa:	0392      	lsls	r2, r2, #14
 8002eac:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002eae:	4b46      	ldr	r3, [pc, #280]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002eb4:	4b44      	ldr	r3, [pc, #272]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002eba:	4b43      	ldr	r3, [pc, #268]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002ec0:	4b41      	ldr	r3, [pc, #260]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 8002ec6:	4b40      	ldr	r3, [pc, #256]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002ec8:	2205      	movs	r2, #5
 8002eca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ecc:	4b3e      	ldr	r3, [pc, #248]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002ece:	2220      	movs	r2, #32
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ed4:	4b3c      	ldr	r3, [pc, #240]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002eda:	4b3b      	ldr	r3, [pc, #236]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002ee0:	4b39      	ldr	r3, [pc, #228]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002ee2:	222c      	movs	r2, #44	; 0x2c
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002ee8:	4b37      	ldr	r3, [pc, #220]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8002eee:	4b36      	ldr	r3, [pc, #216]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002ef0:	2207      	movs	r2, #7
 8002ef2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002ef4:	4b34      	ldr	r3, [pc, #208]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002efa:	4b33      	ldr	r3, [pc, #204]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002efc:	223c      	movs	r2, #60	; 0x3c
 8002efe:	2100      	movs	r1, #0
 8002f00:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8002f02:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002f04:	2280      	movs	r2, #128	; 0x80
 8002f06:	0592      	lsls	r2, r2, #22
 8002f08:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f0a:	4b2f      	ldr	r3, [pc, #188]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f000 ffa3 	bl	8003e58 <HAL_ADC_Init>
 8002f12:	1e03      	subs	r3, r0, #0
 8002f14:	d001      	beq.n	8002f1a <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 8002f16:	f000 faab 	bl	8003470 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002f1a:	1d3b      	adds	r3, r7, #4
 8002f1c:	4a2c      	ldr	r2, [pc, #176]	; (8002fd0 <MX_ADC1_Init+0x158>)
 8002f1e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002f20:	1d3b      	adds	r3, r7, #4
 8002f22:	2200      	movs	r2, #0
 8002f24:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002f26:	1d3b      	adds	r3, r7, #4
 8002f28:	2200      	movs	r2, #0
 8002f2a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f2c:	1d3a      	adds	r2, r7, #4
 8002f2e:	4b26      	ldr	r3, [pc, #152]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002f30:	0011      	movs	r1, r2
 8002f32:	0018      	movs	r0, r3
 8002f34:	f001 fa16 	bl	8004364 <HAL_ADC_ConfigChannel>
 8002f38:	1e03      	subs	r3, r0, #0
 8002f3a:	d001      	beq.n	8002f40 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002f3c:	f000 fa98 	bl	8003470 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002f40:	1d3b      	adds	r3, r7, #4
 8002f42:	4a24      	ldr	r2, [pc, #144]	; (8002fd4 <MX_ADC1_Init+0x15c>)
 8002f44:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002f46:	1d3b      	adds	r3, r7, #4
 8002f48:	2204      	movs	r2, #4
 8002f4a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f4c:	1d3a      	adds	r2, r7, #4
 8002f4e:	4b1e      	ldr	r3, [pc, #120]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002f50:	0011      	movs	r1, r2
 8002f52:	0018      	movs	r0, r3
 8002f54:	f001 fa06 	bl	8004364 <HAL_ADC_ConfigChannel>
 8002f58:	1e03      	subs	r3, r0, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8002f5c:	f000 fa88 	bl	8003470 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002f60:	1d3b      	adds	r3, r7, #4
 8002f62:	4a1d      	ldr	r2, [pc, #116]	; (8002fd8 <MX_ADC1_Init+0x160>)
 8002f64:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002f66:	1d3b      	adds	r3, r7, #4
 8002f68:	2208      	movs	r2, #8
 8002f6a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f6c:	1d3a      	adds	r2, r7, #4
 8002f6e:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002f70:	0011      	movs	r1, r2
 8002f72:	0018      	movs	r0, r3
 8002f74:	f001 f9f6 	bl	8004364 <HAL_ADC_ConfigChannel>
 8002f78:	1e03      	subs	r3, r0, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8002f7c:	f000 fa78 	bl	8003470 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002f80:	1d3b      	adds	r3, r7, #4
 8002f82:	4a16      	ldr	r2, [pc, #88]	; (8002fdc <MX_ADC1_Init+0x164>)
 8002f84:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002f86:	1d3b      	adds	r3, r7, #4
 8002f88:	220c      	movs	r2, #12
 8002f8a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f8c:	1d3a      	adds	r2, r7, #4
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002f90:	0011      	movs	r1, r2
 8002f92:	0018      	movs	r0, r3
 8002f94:	f001 f9e6 	bl	8004364 <HAL_ADC_ConfigChannel>
 8002f98:	1e03      	subs	r3, r0, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8002f9c:	f000 fa68 	bl	8003470 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002fa0:	1d3b      	adds	r3, r7, #4
 8002fa2:	4a0f      	ldr	r2, [pc, #60]	; (8002fe0 <MX_ADC1_Init+0x168>)
 8002fa4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002fa6:	1d3b      	adds	r3, r7, #4
 8002fa8:	2210      	movs	r2, #16
 8002faa:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fac:	1d3a      	adds	r2, r7, #4
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <MX_ADC1_Init+0x150>)
 8002fb0:	0011      	movs	r1, r2
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f001 f9d6 	bl	8004364 <HAL_ADC_ConfigChannel>
 8002fb8:	1e03      	subs	r3, r0, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_ADC1_Init+0x148>
  {
    Error_Handler();
 8002fbc:	f000 fa58 	bl	8003470 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002fc0:	46c0      	nop			; (mov r8, r8)
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b004      	add	sp, #16
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	200004bc 	.word	0x200004bc
 8002fcc:	40012400 	.word	0x40012400
 8002fd0:	b4002000 	.word	0xb4002000
 8002fd4:	24000200 	.word	0x24000200
 8002fd8:	28000400 	.word	0x28000400
 8002fdc:	2c000800 	.word	0x2c000800
 8002fe0:	b0001000 	.word	0xb0001000

08002fe4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002fe8:	4b27      	ldr	r3, [pc, #156]	; (8003088 <MX_LPUART1_UART_Init+0xa4>)
 8002fea:	4a28      	ldr	r2, [pc, #160]	; (800308c <MX_LPUART1_UART_Init+0xa8>)
 8002fec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 921600;
 8002fee:	4b26      	ldr	r3, [pc, #152]	; (8003088 <MX_LPUART1_UART_Init+0xa4>)
 8002ff0:	22e1      	movs	r2, #225	; 0xe1
 8002ff2:	0312      	lsls	r2, r2, #12
 8002ff4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ff6:	4b24      	ldr	r3, [pc, #144]	; (8003088 <MX_LPUART1_UART_Init+0xa4>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002ffc:	4b22      	ldr	r3, [pc, #136]	; (8003088 <MX_LPUART1_UART_Init+0xa4>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003002:	4b21      	ldr	r3, [pc, #132]	; (8003088 <MX_LPUART1_UART_Init+0xa4>)
 8003004:	2200      	movs	r2, #0
 8003006:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003008:	4b1f      	ldr	r3, [pc, #124]	; (8003088 <MX_LPUART1_UART_Init+0xa4>)
 800300a:	220c      	movs	r2, #12
 800300c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800300e:	4b1e      	ldr	r3, [pc, #120]	; (8003088 <MX_LPUART1_UART_Init+0xa4>)
 8003010:	2200      	movs	r2, #0
 8003012:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003014:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <MX_LPUART1_UART_Init+0xa4>)
 8003016:	2200      	movs	r2, #0
 8003018:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800301a:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <MX_LPUART1_UART_Init+0xa4>)
 800301c:	2200      	movs	r2, #0
 800301e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8003020:	4b19      	ldr	r3, [pc, #100]	; (8003088 <MX_LPUART1_UART_Init+0xa4>)
 8003022:	2230      	movs	r2, #48	; 0x30
 8003024:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003026:	4b18      	ldr	r3, [pc, #96]	; (8003088 <MX_LPUART1_UART_Init+0xa4>)
 8003028:	2280      	movs	r2, #128	; 0x80
 800302a:	0152      	lsls	r2, r2, #5
 800302c:	63da      	str	r2, [r3, #60]	; 0x3c
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800302e:	4b16      	ldr	r3, [pc, #88]	; (8003088 <MX_LPUART1_UART_Init+0xa4>)
 8003030:	2280      	movs	r2, #128	; 0x80
 8003032:	0192      	lsls	r2, r2, #6
 8003034:	641a      	str	r2, [r3, #64]	; 0x40
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8003036:	4b14      	ldr	r3, [pc, #80]	; (8003088 <MX_LPUART1_UART_Init+0xa4>)
 8003038:	2200      	movs	r2, #0
 800303a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 800303c:	4b12      	ldr	r3, [pc, #72]	; (8003088 <MX_LPUART1_UART_Init+0xa4>)
 800303e:	0018      	movs	r0, r3
 8003040:	f004 fd14 	bl	8007a6c <HAL_HalfDuplex_Init>
 8003044:	1e03      	subs	r3, r0, #0
 8003046:	d001      	beq.n	800304c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8003048:	f000 fa12 	bl	8003470 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800304c:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <MX_LPUART1_UART_Init+0xa4>)
 800304e:	2100      	movs	r1, #0
 8003050:	0018      	movs	r0, r3
 8003052:	f006 f90d 	bl	8009270 <HAL_UARTEx_SetTxFifoThreshold>
 8003056:	1e03      	subs	r3, r0, #0
 8003058:	d001      	beq.n	800305e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800305a:	f000 fa09 	bl	8003470 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800305e:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <MX_LPUART1_UART_Init+0xa4>)
 8003060:	2100      	movs	r1, #0
 8003062:	0018      	movs	r0, r3
 8003064:	f006 f944 	bl	80092f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003068:	1e03      	subs	r3, r0, #0
 800306a:	d001      	beq.n	8003070 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800306c:	f000 fa00 	bl	8003470 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <MX_LPUART1_UART_Init+0xa4>)
 8003072:	0018      	movs	r0, r3
 8003074:	f006 f8c2 	bl	80091fc <HAL_UARTEx_DisableFifoMode>
 8003078:	1e03      	subs	r3, r0, #0
 800307a:	d001      	beq.n	8003080 <MX_LPUART1_UART_Init+0x9c>
  {
    Error_Handler();
 800307c:	f000 f9f8 	bl	8003470 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	200005a0 	.word	0x200005a0
 800308c:	40008000 	.word	0x40008000

08003090 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b09c      	sub	sp, #112	; 0x70
 8003094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003096:	2360      	movs	r3, #96	; 0x60
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	0018      	movs	r0, r3
 800309c:	2310      	movs	r3, #16
 800309e:	001a      	movs	r2, r3
 80030a0:	2100      	movs	r1, #0
 80030a2:	f006 fb15 	bl	80096d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030a6:	2354      	movs	r3, #84	; 0x54
 80030a8:	18fb      	adds	r3, r7, r3
 80030aa:	0018      	movs	r0, r3
 80030ac:	230c      	movs	r3, #12
 80030ae:	001a      	movs	r2, r3
 80030b0:	2100      	movs	r1, #0
 80030b2:	f006 fb0d 	bl	80096d0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030b6:	2338      	movs	r3, #56	; 0x38
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	0018      	movs	r0, r3
 80030bc:	231c      	movs	r3, #28
 80030be:	001a      	movs	r2, r3
 80030c0:	2100      	movs	r1, #0
 80030c2:	f006 fb05 	bl	80096d0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80030c6:	1d3b      	adds	r3, r7, #4
 80030c8:	0018      	movs	r0, r3
 80030ca:	2334      	movs	r3, #52	; 0x34
 80030cc:	001a      	movs	r2, r3
 80030ce:	2100      	movs	r1, #0
 80030d0:	f006 fafe 	bl	80096d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80030d4:	4b56      	ldr	r3, [pc, #344]	; (8003230 <MX_TIM1_Init+0x1a0>)
 80030d6:	4a57      	ldr	r2, [pc, #348]	; (8003234 <MX_TIM1_Init+0x1a4>)
 80030d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80030da:	4b55      	ldr	r3, [pc, #340]	; (8003230 <MX_TIM1_Init+0x1a0>)
 80030dc:	2200      	movs	r2, #0
 80030de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030e0:	4b53      	ldr	r3, [pc, #332]	; (8003230 <MX_TIM1_Init+0x1a0>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80030e6:	4b52      	ldr	r3, [pc, #328]	; (8003230 <MX_TIM1_Init+0x1a0>)
 80030e8:	4a53      	ldr	r2, [pc, #332]	; (8003238 <MX_TIM1_Init+0x1a8>)
 80030ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ec:	4b50      	ldr	r3, [pc, #320]	; (8003230 <MX_TIM1_Init+0x1a0>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80030f2:	4b4f      	ldr	r3, [pc, #316]	; (8003230 <MX_TIM1_Init+0x1a0>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030f8:	4b4d      	ldr	r3, [pc, #308]	; (8003230 <MX_TIM1_Init+0x1a0>)
 80030fa:	2280      	movs	r2, #128	; 0x80
 80030fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80030fe:	4b4c      	ldr	r3, [pc, #304]	; (8003230 <MX_TIM1_Init+0x1a0>)
 8003100:	0018      	movs	r0, r3
 8003102:	f003 f877 	bl	80061f4 <HAL_TIM_Base_Init>
 8003106:	1e03      	subs	r3, r0, #0
 8003108:	d001      	beq.n	800310e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800310a:	f000 f9b1 	bl	8003470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800310e:	2160      	movs	r1, #96	; 0x60
 8003110:	187b      	adds	r3, r7, r1
 8003112:	2280      	movs	r2, #128	; 0x80
 8003114:	0152      	lsls	r2, r2, #5
 8003116:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003118:	187a      	adds	r2, r7, r1
 800311a:	4b45      	ldr	r3, [pc, #276]	; (8003230 <MX_TIM1_Init+0x1a0>)
 800311c:	0011      	movs	r1, r2
 800311e:	0018      	movs	r0, r3
 8003120:	f003 fd2a 	bl	8006b78 <HAL_TIM_ConfigClockSource>
 8003124:	1e03      	subs	r3, r0, #0
 8003126:	d001      	beq.n	800312c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8003128:	f000 f9a2 	bl	8003470 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800312c:	4b40      	ldr	r3, [pc, #256]	; (8003230 <MX_TIM1_Init+0x1a0>)
 800312e:	0018      	movs	r0, r3
 8003130:	f003 f976 	bl	8006420 <HAL_TIM_PWM_Init>
 8003134:	1e03      	subs	r3, r0, #0
 8003136:	d001      	beq.n	800313c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8003138:	f000 f99a 	bl	8003470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800313c:	2154      	movs	r1, #84	; 0x54
 800313e:	187b      	adds	r3, r7, r1
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003144:	187b      	adds	r3, r7, r1
 8003146:	2200      	movs	r2, #0
 8003148:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800314a:	187b      	adds	r3, r7, r1
 800314c:	2200      	movs	r2, #0
 800314e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003150:	187a      	adds	r2, r7, r1
 8003152:	4b37      	ldr	r3, [pc, #220]	; (8003230 <MX_TIM1_Init+0x1a0>)
 8003154:	0011      	movs	r1, r2
 8003156:	0018      	movs	r0, r3
 8003158:	f004 fb30 	bl	80077bc <HAL_TIMEx_MasterConfigSynchronization>
 800315c:	1e03      	subs	r3, r0, #0
 800315e:	d001      	beq.n	8003164 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8003160:	f000 f986 	bl	8003470 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003164:	2138      	movs	r1, #56	; 0x38
 8003166:	187b      	adds	r3, r7, r1
 8003168:	2260      	movs	r2, #96	; 0x60
 800316a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800316c:	187b      	adds	r3, r7, r1
 800316e:	2200      	movs	r2, #0
 8003170:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003172:	187b      	adds	r3, r7, r1
 8003174:	2202      	movs	r2, #2
 8003176:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003178:	187b      	adds	r3, r7, r1
 800317a:	2200      	movs	r2, #0
 800317c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800317e:	187b      	adds	r3, r7, r1
 8003180:	2200      	movs	r2, #0
 8003182:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003184:	187b      	adds	r3, r7, r1
 8003186:	2200      	movs	r2, #0
 8003188:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800318a:	187b      	adds	r3, r7, r1
 800318c:	2200      	movs	r2, #0
 800318e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003190:	1879      	adds	r1, r7, r1
 8003192:	4b27      	ldr	r3, [pc, #156]	; (8003230 <MX_TIM1_Init+0x1a0>)
 8003194:	2200      	movs	r2, #0
 8003196:	0018      	movs	r0, r3
 8003198:	f003 fbee 	bl	8006978 <HAL_TIM_PWM_ConfigChannel>
 800319c:	1e03      	subs	r3, r0, #0
 800319e:	d001      	beq.n	80031a4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80031a0:	f000 f966 	bl	8003470 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031a4:	2338      	movs	r3, #56	; 0x38
 80031a6:	18f9      	adds	r1, r7, r3
 80031a8:	4b21      	ldr	r3, [pc, #132]	; (8003230 <MX_TIM1_Init+0x1a0>)
 80031aa:	2204      	movs	r2, #4
 80031ac:	0018      	movs	r0, r3
 80031ae:	f003 fbe3 	bl	8006978 <HAL_TIM_PWM_ConfigChannel>
 80031b2:	1e03      	subs	r3, r0, #0
 80031b4:	d001      	beq.n	80031ba <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80031b6:	f000 f95b 	bl	8003470 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80031ba:	1d3b      	adds	r3, r7, #4
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80031c0:	1d3b      	adds	r3, r7, #4
 80031c2:	2200      	movs	r2, #0
 80031c4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80031c6:	1d3b      	adds	r3, r7, #4
 80031c8:	2200      	movs	r2, #0
 80031ca:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80031cc:	1d3b      	adds	r3, r7, #4
 80031ce:	2200      	movs	r2, #0
 80031d0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80031d2:	1d3b      	adds	r3, r7, #4
 80031d4:	2200      	movs	r2, #0
 80031d6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80031d8:	1d3b      	adds	r3, r7, #4
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	0192      	lsls	r2, r2, #6
 80031de:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80031e0:	1d3b      	adds	r3, r7, #4
 80031e2:	2200      	movs	r2, #0
 80031e4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80031e6:	1d3b      	adds	r3, r7, #4
 80031e8:	2200      	movs	r2, #0
 80031ea:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80031ec:	1d3b      	adds	r3, r7, #4
 80031ee:	2200      	movs	r2, #0
 80031f0:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80031f2:	1d3b      	adds	r3, r7, #4
 80031f4:	2280      	movs	r2, #128	; 0x80
 80031f6:	0492      	lsls	r2, r2, #18
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80031fa:	1d3b      	adds	r3, r7, #4
 80031fc:	2200      	movs	r2, #0
 80031fe:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003200:	1d3b      	adds	r3, r7, #4
 8003202:	2200      	movs	r2, #0
 8003204:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003206:	1d3b      	adds	r3, r7, #4
 8003208:	2200      	movs	r2, #0
 800320a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800320c:	1d3a      	adds	r2, r7, #4
 800320e:	4b08      	ldr	r3, [pc, #32]	; (8003230 <MX_TIM1_Init+0x1a0>)
 8003210:	0011      	movs	r1, r2
 8003212:	0018      	movs	r0, r3
 8003214:	f004 fb40 	bl	8007898 <HAL_TIMEx_ConfigBreakDeadTime>
 8003218:	1e03      	subs	r3, r0, #0
 800321a:	d001      	beq.n	8003220 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 800321c:	f000 f928 	bl	8003470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003220:	4b03      	ldr	r3, [pc, #12]	; (8003230 <MX_TIM1_Init+0x1a0>)
 8003222:	0018      	movs	r0, r3
 8003224:	f000 faf0 	bl	8003808 <HAL_TIM_MspPostInit>

}
 8003228:	46c0      	nop			; (mov r8, r8)
 800322a:	46bd      	mov	sp, r7
 800322c:	b01c      	add	sp, #112	; 0x70
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000724 	.word	0x20000724
 8003234:	40012c00 	.word	0x40012c00
 8003238:	0000ffff 	.word	0x0000ffff

0800323c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003242:	2310      	movs	r3, #16
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	0018      	movs	r0, r3
 8003248:	2310      	movs	r3, #16
 800324a:	001a      	movs	r2, r3
 800324c:	2100      	movs	r1, #0
 800324e:	f006 fa3f 	bl	80096d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003252:	1d3b      	adds	r3, r7, #4
 8003254:	0018      	movs	r0, r3
 8003256:	230c      	movs	r3, #12
 8003258:	001a      	movs	r2, r3
 800325a:	2100      	movs	r1, #0
 800325c:	f006 fa38 	bl	80096d0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003260:	4b1f      	ldr	r3, [pc, #124]	; (80032e0 <MX_TIM2_Init+0xa4>)
 8003262:	2280      	movs	r2, #128	; 0x80
 8003264:	05d2      	lsls	r2, r2, #23
 8003266:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003268:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <MX_TIM2_Init+0xa4>)
 800326a:	2200      	movs	r2, #0
 800326c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800326e:	4b1c      	ldr	r3, [pc, #112]	; (80032e0 <MX_TIM2_Init+0xa4>)
 8003270:	2200      	movs	r2, #0
 8003272:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003274:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <MX_TIM2_Init+0xa4>)
 8003276:	2201      	movs	r2, #1
 8003278:	4252      	negs	r2, r2
 800327a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800327c:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <MX_TIM2_Init+0xa4>)
 800327e:	2200      	movs	r2, #0
 8003280:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003282:	4b17      	ldr	r3, [pc, #92]	; (80032e0 <MX_TIM2_Init+0xa4>)
 8003284:	2200      	movs	r2, #0
 8003286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003288:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <MX_TIM2_Init+0xa4>)
 800328a:	0018      	movs	r0, r3
 800328c:	f002 ffb2 	bl	80061f4 <HAL_TIM_Base_Init>
 8003290:	1e03      	subs	r3, r0, #0
 8003292:	d001      	beq.n	8003298 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003294:	f000 f8ec 	bl	8003470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003298:	2110      	movs	r1, #16
 800329a:	187b      	adds	r3, r7, r1
 800329c:	2280      	movs	r2, #128	; 0x80
 800329e:	0152      	lsls	r2, r2, #5
 80032a0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80032a2:	187a      	adds	r2, r7, r1
 80032a4:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <MX_TIM2_Init+0xa4>)
 80032a6:	0011      	movs	r1, r2
 80032a8:	0018      	movs	r0, r3
 80032aa:	f003 fc65 	bl	8006b78 <HAL_TIM_ConfigClockSource>
 80032ae:	1e03      	subs	r3, r0, #0
 80032b0:	d001      	beq.n	80032b6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80032b2:	f000 f8dd 	bl	8003470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032bc:	1d3b      	adds	r3, r7, #4
 80032be:	2200      	movs	r2, #0
 80032c0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032c2:	1d3a      	adds	r2, r7, #4
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <MX_TIM2_Init+0xa4>)
 80032c6:	0011      	movs	r1, r2
 80032c8:	0018      	movs	r0, r3
 80032ca:	f004 fa77 	bl	80077bc <HAL_TIMEx_MasterConfigSynchronization>
 80032ce:	1e03      	subs	r3, r0, #0
 80032d0:	d001      	beq.n	80032d6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80032d2:	f000 f8cd 	bl	8003470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	46bd      	mov	sp, r7
 80032da:	b008      	add	sp, #32
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	200007e0 	.word	0x200007e0

080032e4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032ea:	1d3b      	adds	r3, r7, #4
 80032ec:	0018      	movs	r0, r3
 80032ee:	230c      	movs	r3, #12
 80032f0:	001a      	movs	r2, r3
 80032f2:	2100      	movs	r1, #0
 80032f4:	f006 f9ec 	bl	80096d0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80032f8:	4b15      	ldr	r3, [pc, #84]	; (8003350 <MX_TIM6_Init+0x6c>)
 80032fa:	4a16      	ldr	r2, [pc, #88]	; (8003354 <MX_TIM6_Init+0x70>)
 80032fc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63;
 80032fe:	4b14      	ldr	r3, [pc, #80]	; (8003350 <MX_TIM6_Init+0x6c>)
 8003300:	223f      	movs	r2, #63	; 0x3f
 8003302:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003304:	4b12      	ldr	r3, [pc, #72]	; (8003350 <MX_TIM6_Init+0x6c>)
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800330a:	4b11      	ldr	r3, [pc, #68]	; (8003350 <MX_TIM6_Init+0x6c>)
 800330c:	4a12      	ldr	r2, [pc, #72]	; (8003358 <MX_TIM6_Init+0x74>)
 800330e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <MX_TIM6_Init+0x6c>)
 8003312:	2200      	movs	r2, #0
 8003314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003316:	4b0e      	ldr	r3, [pc, #56]	; (8003350 <MX_TIM6_Init+0x6c>)
 8003318:	0018      	movs	r0, r3
 800331a:	f002 ff6b 	bl	80061f4 <HAL_TIM_Base_Init>
 800331e:	1e03      	subs	r3, r0, #0
 8003320:	d001      	beq.n	8003326 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003322:	f000 f8a5 	bl	8003470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003326:	1d3b      	adds	r3, r7, #4
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800332c:	1d3b      	adds	r3, r7, #4
 800332e:	2200      	movs	r2, #0
 8003330:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003332:	1d3a      	adds	r2, r7, #4
 8003334:	4b06      	ldr	r3, [pc, #24]	; (8003350 <MX_TIM6_Init+0x6c>)
 8003336:	0011      	movs	r1, r2
 8003338:	0018      	movs	r0, r3
 800333a:	f004 fa3f 	bl	80077bc <HAL_TIMEx_MasterConfigSynchronization>
 800333e:	1e03      	subs	r3, r0, #0
 8003340:	d001      	beq.n	8003346 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8003342:	f000 f895 	bl	8003470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	46bd      	mov	sp, r7
 800334a:	b004      	add	sp, #16
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	2000089c 	.word	0x2000089c
 8003354:	40001000 	.word	0x40001000
 8003358:	000003e7 	.word	0x000003e7

0800335c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003362:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <MX_DMA_Init+0x48>)
 8003364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003366:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <MX_DMA_Init+0x48>)
 8003368:	2101      	movs	r1, #1
 800336a:	430a      	orrs	r2, r1
 800336c:	639a      	str	r2, [r3, #56]	; 0x38
 800336e:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <MX_DMA_Init+0x48>)
 8003370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003372:	2201      	movs	r2, #1
 8003374:	4013      	ands	r3, r2
 8003376:	607b      	str	r3, [r7, #4]
 8003378:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800337a:	2200      	movs	r2, #0
 800337c:	2100      	movs	r1, #0
 800337e:	2009      	movs	r0, #9
 8003380:	f001 fb80 	bl	8004a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003384:	2009      	movs	r0, #9
 8003386:	f001 fb92 	bl	8004aae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800338a:	2200      	movs	r2, #0
 800338c:	2100      	movs	r1, #0
 800338e:	200a      	movs	r0, #10
 8003390:	f001 fb78 	bl	8004a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003394:	200a      	movs	r0, #10
 8003396:	f001 fb8a 	bl	8004aae <HAL_NVIC_EnableIRQ>

}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	46bd      	mov	sp, r7
 800339e:	b002      	add	sp, #8
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	40021000 	.word	0x40021000

080033a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033a8:	b590      	push	{r4, r7, lr}
 80033aa:	b089      	sub	sp, #36	; 0x24
 80033ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ae:	240c      	movs	r4, #12
 80033b0:	193b      	adds	r3, r7, r4
 80033b2:	0018      	movs	r0, r3
 80033b4:	2314      	movs	r3, #20
 80033b6:	001a      	movs	r2, r3
 80033b8:	2100      	movs	r1, #0
 80033ba:	f006 f989 	bl	80096d0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033be:	4b21      	ldr	r3, [pc, #132]	; (8003444 <MX_GPIO_Init+0x9c>)
 80033c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033c2:	4b20      	ldr	r3, [pc, #128]	; (8003444 <MX_GPIO_Init+0x9c>)
 80033c4:	2104      	movs	r1, #4
 80033c6:	430a      	orrs	r2, r1
 80033c8:	635a      	str	r2, [r3, #52]	; 0x34
 80033ca:	4b1e      	ldr	r3, [pc, #120]	; (8003444 <MX_GPIO_Init+0x9c>)
 80033cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ce:	2204      	movs	r2, #4
 80033d0:	4013      	ands	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d6:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <MX_GPIO_Init+0x9c>)
 80033d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033da:	4b1a      	ldr	r3, [pc, #104]	; (8003444 <MX_GPIO_Init+0x9c>)
 80033dc:	2102      	movs	r1, #2
 80033de:	430a      	orrs	r2, r1
 80033e0:	635a      	str	r2, [r3, #52]	; 0x34
 80033e2:	4b18      	ldr	r3, [pc, #96]	; (8003444 <MX_GPIO_Init+0x9c>)
 80033e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e6:	2202      	movs	r2, #2
 80033e8:	4013      	ands	r3, r2
 80033ea:	607b      	str	r3, [r7, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ee:	4b15      	ldr	r3, [pc, #84]	; (8003444 <MX_GPIO_Init+0x9c>)
 80033f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033f2:	4b14      	ldr	r3, [pc, #80]	; (8003444 <MX_GPIO_Init+0x9c>)
 80033f4:	2101      	movs	r1, #1
 80033f6:	430a      	orrs	r2, r1
 80033f8:	635a      	str	r2, [r3, #52]	; 0x34
 80033fa:	4b12      	ldr	r3, [pc, #72]	; (8003444 <MX_GPIO_Init+0x9c>)
 80033fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fe:	2201      	movs	r2, #1
 8003400:	4013      	ands	r3, r2
 8003402:	603b      	str	r3, [r7, #0]
 8003404:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003406:	2380      	movs	r3, #128	; 0x80
 8003408:	019b      	lsls	r3, r3, #6
 800340a:	480f      	ldr	r0, [pc, #60]	; (8003448 <MX_GPIO_Init+0xa0>)
 800340c:	2200      	movs	r2, #0
 800340e:	0019      	movs	r1, r3
 8003410:	f001 ffe0 	bl	80053d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003414:	193b      	adds	r3, r7, r4
 8003416:	2280      	movs	r2, #128	; 0x80
 8003418:	0192      	lsls	r2, r2, #6
 800341a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800341c:	193b      	adds	r3, r7, r4
 800341e:	2201      	movs	r2, #1
 8003420:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003422:	193b      	adds	r3, r7, r4
 8003424:	2200      	movs	r2, #0
 8003426:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003428:	193b      	adds	r3, r7, r4
 800342a:	2200      	movs	r2, #0
 800342c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800342e:	193b      	adds	r3, r7, r4
 8003430:	4a05      	ldr	r2, [pc, #20]	; (8003448 <MX_GPIO_Init+0xa0>)
 8003432:	0019      	movs	r1, r3
 8003434:	0010      	movs	r0, r2
 8003436:	f001 fe69 	bl	800510c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	46bd      	mov	sp, r7
 800343e:	b009      	add	sp, #36	; 0x24
 8003440:	bd90      	pop	{r4, r7, pc}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	40021000 	.word	0x40021000
 8003448:	50000800 	.word	0x50000800

0800344c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a04      	ldr	r2, [pc, #16]	; (800346c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800345e:	f000 fb97 	bl	8003b90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	46bd      	mov	sp, r7
 8003466:	b002      	add	sp, #8
 8003468:	bd80      	pop	{r7, pc}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	40001400 	.word	0x40001400

08003470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003474:	b672      	cpsid	i
}
 8003476:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003478:	e7fe      	b.n	8003478 <Error_Handler+0x8>
	...

0800347c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003482:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <HAL_MspInit+0x44>)
 8003484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003486:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <HAL_MspInit+0x44>)
 8003488:	2101      	movs	r1, #1
 800348a:	430a      	orrs	r2, r1
 800348c:	641a      	str	r2, [r3, #64]	; 0x40
 800348e:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <HAL_MspInit+0x44>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	2201      	movs	r2, #1
 8003494:	4013      	ands	r3, r2
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800349a:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <HAL_MspInit+0x44>)
 800349c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800349e:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <HAL_MspInit+0x44>)
 80034a0:	2180      	movs	r1, #128	; 0x80
 80034a2:	0549      	lsls	r1, r1, #21
 80034a4:	430a      	orrs	r2, r1
 80034a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <HAL_MspInit+0x44>)
 80034aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ac:	2380      	movs	r3, #128	; 0x80
 80034ae:	055b      	lsls	r3, r3, #21
 80034b0:	4013      	ands	r3, r2
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b002      	add	sp, #8
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	40021000 	.word	0x40021000

080034c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034c4:	b590      	push	{r4, r7, lr}
 80034c6:	b08b      	sub	sp, #44	; 0x2c
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034cc:	2414      	movs	r4, #20
 80034ce:	193b      	adds	r3, r7, r4
 80034d0:	0018      	movs	r0, r3
 80034d2:	2314      	movs	r3, #20
 80034d4:	001a      	movs	r2, r3
 80034d6:	2100      	movs	r1, #0
 80034d8:	f006 f8fa 	bl	80096d0 <memset>
  if(hadc->Instance==ADC1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a2d      	ldr	r2, [pc, #180]	; (8003598 <HAL_ADC_MspInit+0xd4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d153      	bne.n	800358e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80034e6:	4b2d      	ldr	r3, [pc, #180]	; (800359c <HAL_ADC_MspInit+0xd8>)
 80034e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ea:	4b2c      	ldr	r3, [pc, #176]	; (800359c <HAL_ADC_MspInit+0xd8>)
 80034ec:	2180      	movs	r1, #128	; 0x80
 80034ee:	0349      	lsls	r1, r1, #13
 80034f0:	430a      	orrs	r2, r1
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40
 80034f4:	4b29      	ldr	r3, [pc, #164]	; (800359c <HAL_ADC_MspInit+0xd8>)
 80034f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034f8:	2380      	movs	r3, #128	; 0x80
 80034fa:	035b      	lsls	r3, r3, #13
 80034fc:	4013      	ands	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003502:	4b26      	ldr	r3, [pc, #152]	; (800359c <HAL_ADC_MspInit+0xd8>)
 8003504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003506:	4b25      	ldr	r3, [pc, #148]	; (800359c <HAL_ADC_MspInit+0xd8>)
 8003508:	2102      	movs	r1, #2
 800350a:	430a      	orrs	r2, r1
 800350c:	635a      	str	r2, [r3, #52]	; 0x34
 800350e:	4b23      	ldr	r3, [pc, #140]	; (800359c <HAL_ADC_MspInit+0xd8>)
 8003510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003512:	2202      	movs	r2, #2
 8003514:	4013      	ands	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    PB2     ------> ADC1_IN10
    PB10     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10;
 800351a:	193b      	adds	r3, r7, r4
 800351c:	4a20      	ldr	r2, [pc, #128]	; (80035a0 <HAL_ADC_MspInit+0xdc>)
 800351e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003520:	193b      	adds	r3, r7, r4
 8003522:	2203      	movs	r2, #3
 8003524:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	193b      	adds	r3, r7, r4
 8003528:	2200      	movs	r2, #0
 800352a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352c:	193b      	adds	r3, r7, r4
 800352e:	4a1d      	ldr	r2, [pc, #116]	; (80035a4 <HAL_ADC_MspInit+0xe0>)
 8003530:	0019      	movs	r1, r3
 8003532:	0010      	movs	r0, r2
 8003534:	f001 fdea 	bl	800510c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003538:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <HAL_ADC_MspInit+0xe4>)
 800353a:	4a1c      	ldr	r2, [pc, #112]	; (80035ac <HAL_ADC_MspInit+0xe8>)
 800353c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800353e:	4b1a      	ldr	r3, [pc, #104]	; (80035a8 <HAL_ADC_MspInit+0xe4>)
 8003540:	2205      	movs	r2, #5
 8003542:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003544:	4b18      	ldr	r3, [pc, #96]	; (80035a8 <HAL_ADC_MspInit+0xe4>)
 8003546:	2200      	movs	r2, #0
 8003548:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800354a:	4b17      	ldr	r3, [pc, #92]	; (80035a8 <HAL_ADC_MspInit+0xe4>)
 800354c:	2200      	movs	r2, #0
 800354e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003550:	4b15      	ldr	r3, [pc, #84]	; (80035a8 <HAL_ADC_MspInit+0xe4>)
 8003552:	2280      	movs	r2, #128	; 0x80
 8003554:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003556:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <HAL_ADC_MspInit+0xe4>)
 8003558:	2280      	movs	r2, #128	; 0x80
 800355a:	0052      	lsls	r2, r2, #1
 800355c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800355e:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <HAL_ADC_MspInit+0xe4>)
 8003560:	2280      	movs	r2, #128	; 0x80
 8003562:	00d2      	lsls	r2, r2, #3
 8003564:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003566:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <HAL_ADC_MspInit+0xe4>)
 8003568:	2200      	movs	r2, #0
 800356a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800356c:	4b0e      	ldr	r3, [pc, #56]	; (80035a8 <HAL_ADC_MspInit+0xe4>)
 800356e:	2200      	movs	r2, #0
 8003570:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003572:	4b0d      	ldr	r3, [pc, #52]	; (80035a8 <HAL_ADC_MspInit+0xe4>)
 8003574:	0018      	movs	r0, r3
 8003576:	f001 faab 	bl	8004ad0 <HAL_DMA_Init>
 800357a:	1e03      	subs	r3, r0, #0
 800357c:	d001      	beq.n	8003582 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800357e:	f7ff ff77 	bl	8003470 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a08      	ldr	r2, [pc, #32]	; (80035a8 <HAL_ADC_MspInit+0xe4>)
 8003586:	651a      	str	r2, [r3, #80]	; 0x50
 8003588:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <HAL_ADC_MspInit+0xe4>)
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	46bd      	mov	sp, r7
 8003592:	b00b      	add	sp, #44	; 0x2c
 8003594:	bd90      	pop	{r4, r7, pc}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	40012400 	.word	0x40012400
 800359c:	40021000 	.word	0x40021000
 80035a0:	00000406 	.word	0x00000406
 80035a4:	50000400 	.word	0x50000400
 80035a8:	20000544 	.word	0x20000544
 80035ac:	40020008 	.word	0x40020008

080035b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035b0:	b590      	push	{r4, r7, lr}
 80035b2:	b097      	sub	sp, #92	; 0x5c
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b8:	2344      	movs	r3, #68	; 0x44
 80035ba:	18fb      	adds	r3, r7, r3
 80035bc:	0018      	movs	r0, r3
 80035be:	2314      	movs	r3, #20
 80035c0:	001a      	movs	r2, r3
 80035c2:	2100      	movs	r1, #0
 80035c4:	f006 f884 	bl	80096d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035c8:	2410      	movs	r4, #16
 80035ca:	193b      	adds	r3, r7, r4
 80035cc:	0018      	movs	r0, r3
 80035ce:	2334      	movs	r3, #52	; 0x34
 80035d0:	001a      	movs	r2, r3
 80035d2:	2100      	movs	r1, #0
 80035d4:	f006 f87c 	bl	80096d0 <memset>
  if(huart->Instance==LPUART1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a50      	ldr	r2, [pc, #320]	; (8003720 <HAL_UART_MspInit+0x170>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d000      	beq.n	80035e4 <HAL_UART_MspInit+0x34>
 80035e2:	e099      	b.n	8003718 <HAL_UART_MspInit+0x168>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80035e4:	193b      	adds	r3, r7, r4
 80035e6:	2210      	movs	r2, #16
 80035e8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80035ea:	193b      	adds	r3, r7, r4
 80035ec:	2200      	movs	r2, #0
 80035ee:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035f0:	193b      	adds	r3, r7, r4
 80035f2:	0018      	movs	r0, r3
 80035f4:	f002 fc46 	bl	8005e84 <HAL_RCCEx_PeriphCLKConfig>
 80035f8:	1e03      	subs	r3, r0, #0
 80035fa:	d001      	beq.n	8003600 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80035fc:	f7ff ff38 	bl	8003470 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003600:	4b48      	ldr	r3, [pc, #288]	; (8003724 <HAL_UART_MspInit+0x174>)
 8003602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003604:	4b47      	ldr	r3, [pc, #284]	; (8003724 <HAL_UART_MspInit+0x174>)
 8003606:	2180      	movs	r1, #128	; 0x80
 8003608:	0349      	lsls	r1, r1, #13
 800360a:	430a      	orrs	r2, r1
 800360c:	63da      	str	r2, [r3, #60]	; 0x3c
 800360e:	4b45      	ldr	r3, [pc, #276]	; (8003724 <HAL_UART_MspInit+0x174>)
 8003610:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003612:	2380      	movs	r3, #128	; 0x80
 8003614:	035b      	lsls	r3, r3, #13
 8003616:	4013      	ands	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800361c:	4b41      	ldr	r3, [pc, #260]	; (8003724 <HAL_UART_MspInit+0x174>)
 800361e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003620:	4b40      	ldr	r3, [pc, #256]	; (8003724 <HAL_UART_MspInit+0x174>)
 8003622:	2102      	movs	r1, #2
 8003624:	430a      	orrs	r2, r1
 8003626:	635a      	str	r2, [r3, #52]	; 0x34
 8003628:	4b3e      	ldr	r3, [pc, #248]	; (8003724 <HAL_UART_MspInit+0x174>)
 800362a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362c:	2202      	movs	r2, #2
 800362e:	4013      	ands	r3, r2
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003634:	2144      	movs	r1, #68	; 0x44
 8003636:	187b      	adds	r3, r7, r1
 8003638:	2280      	movs	r2, #128	; 0x80
 800363a:	0112      	lsls	r2, r2, #4
 800363c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800363e:	187b      	adds	r3, r7, r1
 8003640:	2212      	movs	r2, #18
 8003642:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003644:	187b      	adds	r3, r7, r1
 8003646:	2201      	movs	r2, #1
 8003648:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800364a:	187b      	adds	r3, r7, r1
 800364c:	2203      	movs	r2, #3
 800364e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPUART1;
 8003650:	187b      	adds	r3, r7, r1
 8003652:	2201      	movs	r2, #1
 8003654:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003656:	187b      	adds	r3, r7, r1
 8003658:	4a33      	ldr	r2, [pc, #204]	; (8003728 <HAL_UART_MspInit+0x178>)
 800365a:	0019      	movs	r1, r3
 800365c:	0010      	movs	r0, r2
 800365e:	f001 fd55 	bl	800510c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8003662:	4b32      	ldr	r3, [pc, #200]	; (800372c <HAL_UART_MspInit+0x17c>)
 8003664:	4a32      	ldr	r2, [pc, #200]	; (8003730 <HAL_UART_MspInit+0x180>)
 8003666:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003668:	4b30      	ldr	r3, [pc, #192]	; (800372c <HAL_UART_MspInit+0x17c>)
 800366a:	220f      	movs	r2, #15
 800366c:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800366e:	4b2f      	ldr	r3, [pc, #188]	; (800372c <HAL_UART_MspInit+0x17c>)
 8003670:	2210      	movs	r2, #16
 8003672:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003674:	4b2d      	ldr	r3, [pc, #180]	; (800372c <HAL_UART_MspInit+0x17c>)
 8003676:	2200      	movs	r2, #0
 8003678:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800367a:	4b2c      	ldr	r3, [pc, #176]	; (800372c <HAL_UART_MspInit+0x17c>)
 800367c:	2280      	movs	r2, #128	; 0x80
 800367e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003680:	4b2a      	ldr	r3, [pc, #168]	; (800372c <HAL_UART_MspInit+0x17c>)
 8003682:	2200      	movs	r2, #0
 8003684:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003686:	4b29      	ldr	r3, [pc, #164]	; (800372c <HAL_UART_MspInit+0x17c>)
 8003688:	2200      	movs	r2, #0
 800368a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800368c:	4b27      	ldr	r3, [pc, #156]	; (800372c <HAL_UART_MspInit+0x17c>)
 800368e:	2200      	movs	r2, #0
 8003690:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003692:	4b26      	ldr	r3, [pc, #152]	; (800372c <HAL_UART_MspInit+0x17c>)
 8003694:	2200      	movs	r2, #0
 8003696:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003698:	4b24      	ldr	r3, [pc, #144]	; (800372c <HAL_UART_MspInit+0x17c>)
 800369a:	0018      	movs	r0, r3
 800369c:	f001 fa18 	bl	8004ad0 <HAL_DMA_Init>
 80036a0:	1e03      	subs	r3, r0, #0
 80036a2:	d001      	beq.n	80036a8 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 80036a4:	f7ff fee4 	bl	8003470 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a20      	ldr	r2, [pc, #128]	; (800372c <HAL_UART_MspInit+0x17c>)
 80036ac:	67da      	str	r2, [r3, #124]	; 0x7c
 80036ae:	4b1f      	ldr	r3, [pc, #124]	; (800372c <HAL_UART_MspInit+0x17c>)
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 80036b4:	4b1f      	ldr	r3, [pc, #124]	; (8003734 <HAL_UART_MspInit+0x184>)
 80036b6:	4a20      	ldr	r2, [pc, #128]	; (8003738 <HAL_UART_MspInit+0x188>)
 80036b8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80036ba:	4b1e      	ldr	r3, [pc, #120]	; (8003734 <HAL_UART_MspInit+0x184>)
 80036bc:	220e      	movs	r2, #14
 80036be:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036c0:	4b1c      	ldr	r3, [pc, #112]	; (8003734 <HAL_UART_MspInit+0x184>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036c6:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <HAL_UART_MspInit+0x184>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036cc:	4b19      	ldr	r3, [pc, #100]	; (8003734 <HAL_UART_MspInit+0x184>)
 80036ce:	2280      	movs	r2, #128	; 0x80
 80036d0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036d2:	4b18      	ldr	r3, [pc, #96]	; (8003734 <HAL_UART_MspInit+0x184>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036d8:	4b16      	ldr	r3, [pc, #88]	; (8003734 <HAL_UART_MspInit+0x184>)
 80036da:	2200      	movs	r2, #0
 80036dc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80036de:	4b15      	ldr	r3, [pc, #84]	; (8003734 <HAL_UART_MspInit+0x184>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036e4:	4b13      	ldr	r3, [pc, #76]	; (8003734 <HAL_UART_MspInit+0x184>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80036ea:	4b12      	ldr	r3, [pc, #72]	; (8003734 <HAL_UART_MspInit+0x184>)
 80036ec:	0018      	movs	r0, r3
 80036ee:	f001 f9ef 	bl	8004ad0 <HAL_DMA_Init>
 80036f2:	1e03      	subs	r3, r0, #0
 80036f4:	d001      	beq.n	80036fa <HAL_UART_MspInit+0x14a>
    {
      Error_Handler();
 80036f6:	f7ff febb 	bl	8003470 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2180      	movs	r1, #128	; 0x80
 80036fe:	4a0d      	ldr	r2, [pc, #52]	; (8003734 <HAL_UART_MspInit+0x184>)
 8003700:	505a      	str	r2, [r3, r1]
 8003702:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <HAL_UART_MspInit+0x184>)
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	629a      	str	r2, [r3, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 2, 0);
 8003708:	2200      	movs	r2, #0
 800370a:	2102      	movs	r1, #2
 800370c:	201d      	movs	r0, #29
 800370e:	f001 f9b9 	bl	8004a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8003712:	201d      	movs	r0, #29
 8003714:	f001 f9cb 	bl	8004aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8003718:	46c0      	nop			; (mov r8, r8)
 800371a:	46bd      	mov	sp, r7
 800371c:	b017      	add	sp, #92	; 0x5c
 800371e:	bd90      	pop	{r4, r7, pc}
 8003720:	40008000 	.word	0x40008000
 8003724:	40021000 	.word	0x40021000
 8003728:	50000400 	.word	0x50000400
 800372c:	2000066c 	.word	0x2000066c
 8003730:	4002001c 	.word	0x4002001c
 8003734:	200006c8 	.word	0x200006c8
 8003738:	40020030 	.word	0x40020030

0800373c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800373c:	b590      	push	{r4, r7, lr}
 800373e:	b093      	sub	sp, #76	; 0x4c
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003744:	2414      	movs	r4, #20
 8003746:	193b      	adds	r3, r7, r4
 8003748:	0018      	movs	r0, r3
 800374a:	2334      	movs	r3, #52	; 0x34
 800374c:	001a      	movs	r2, r3
 800374e:	2100      	movs	r1, #0
 8003750:	f005 ffbe 	bl	80096d0 <memset>
  if(htim_base->Instance==TIM1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a28      	ldr	r2, [pc, #160]	; (80037fc <HAL_TIM_Base_MspInit+0xc0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d11d      	bne.n	800379a <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800375e:	193b      	adds	r3, r7, r4
 8003760:	2280      	movs	r2, #128	; 0x80
 8003762:	0392      	lsls	r2, r2, #14
 8003764:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8003766:	193b      	adds	r3, r7, r4
 8003768:	2200      	movs	r2, #0
 800376a:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800376c:	193b      	adds	r3, r7, r4
 800376e:	0018      	movs	r0, r3
 8003770:	f002 fb88 	bl	8005e84 <HAL_RCCEx_PeriphCLKConfig>
 8003774:	1e03      	subs	r3, r0, #0
 8003776:	d001      	beq.n	800377c <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8003778:	f7ff fe7a 	bl	8003470 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800377c:	4b20      	ldr	r3, [pc, #128]	; (8003800 <HAL_TIM_Base_MspInit+0xc4>)
 800377e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003780:	4b1f      	ldr	r3, [pc, #124]	; (8003800 <HAL_TIM_Base_MspInit+0xc4>)
 8003782:	2180      	movs	r1, #128	; 0x80
 8003784:	0109      	lsls	r1, r1, #4
 8003786:	430a      	orrs	r2, r1
 8003788:	641a      	str	r2, [r3, #64]	; 0x40
 800378a:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <HAL_TIM_Base_MspInit+0xc4>)
 800378c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	4013      	ands	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003798:	e02b      	b.n	80037f2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	05db      	lsls	r3, r3, #23
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d10c      	bne.n	80037c0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037a6:	4b16      	ldr	r3, [pc, #88]	; (8003800 <HAL_TIM_Base_MspInit+0xc4>)
 80037a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037aa:	4b15      	ldr	r3, [pc, #84]	; (8003800 <HAL_TIM_Base_MspInit+0xc4>)
 80037ac:	2101      	movs	r1, #1
 80037ae:	430a      	orrs	r2, r1
 80037b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80037b2:	4b13      	ldr	r3, [pc, #76]	; (8003800 <HAL_TIM_Base_MspInit+0xc4>)
 80037b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b6:	2201      	movs	r2, #1
 80037b8:	4013      	ands	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	68fb      	ldr	r3, [r7, #12]
}
 80037be:	e018      	b.n	80037f2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a0f      	ldr	r2, [pc, #60]	; (8003804 <HAL_TIM_Base_MspInit+0xc8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d113      	bne.n	80037f2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80037ca:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <HAL_TIM_Base_MspInit+0xc4>)
 80037cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037ce:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <HAL_TIM_Base_MspInit+0xc4>)
 80037d0:	2110      	movs	r1, #16
 80037d2:	430a      	orrs	r2, r1
 80037d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80037d6:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <HAL_TIM_Base_MspInit+0xc4>)
 80037d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037da:	2210      	movs	r2, #16
 80037dc:	4013      	ands	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 80037e2:	2200      	movs	r2, #0
 80037e4:	2102      	movs	r1, #2
 80037e6:	2011      	movs	r0, #17
 80037e8:	f001 f94c 	bl	8004a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80037ec:	2011      	movs	r0, #17
 80037ee:	f001 f95e 	bl	8004aae <HAL_NVIC_EnableIRQ>
}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b013      	add	sp, #76	; 0x4c
 80037f8:	bd90      	pop	{r4, r7, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	40012c00 	.word	0x40012c00
 8003800:	40021000 	.word	0x40021000
 8003804:	40001000 	.word	0x40001000

08003808 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003808:	b590      	push	{r4, r7, lr}
 800380a:	b08b      	sub	sp, #44	; 0x2c
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003810:	2414      	movs	r4, #20
 8003812:	193b      	adds	r3, r7, r4
 8003814:	0018      	movs	r0, r3
 8003816:	2314      	movs	r3, #20
 8003818:	001a      	movs	r2, r3
 800381a:	2100      	movs	r1, #0
 800381c:	f005 ff58 	bl	80096d0 <memset>
  if(htim->Instance==TIM1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a26      	ldr	r2, [pc, #152]	; (80038c0 <HAL_TIM_MspPostInit+0xb8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d145      	bne.n	80038b6 <HAL_TIM_MspPostInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800382a:	4b26      	ldr	r3, [pc, #152]	; (80038c4 <HAL_TIM_MspPostInit+0xbc>)
 800382c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800382e:	4b25      	ldr	r3, [pc, #148]	; (80038c4 <HAL_TIM_MspPostInit+0xbc>)
 8003830:	2102      	movs	r1, #2
 8003832:	430a      	orrs	r2, r1
 8003834:	635a      	str	r2, [r3, #52]	; 0x34
 8003836:	4b23      	ldr	r3, [pc, #140]	; (80038c4 <HAL_TIM_MspPostInit+0xbc>)
 8003838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383a:	2202      	movs	r2, #2
 800383c:	4013      	ands	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003842:	4b20      	ldr	r3, [pc, #128]	; (80038c4 <HAL_TIM_MspPostInit+0xbc>)
 8003844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003846:	4b1f      	ldr	r3, [pc, #124]	; (80038c4 <HAL_TIM_MspPostInit+0xbc>)
 8003848:	2101      	movs	r1, #1
 800384a:	430a      	orrs	r2, r1
 800384c:	635a      	str	r2, [r3, #52]	; 0x34
 800384e:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <HAL_TIM_MspPostInit+0xbc>)
 8003850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003852:	2201      	movs	r2, #1
 8003854:	4013      	ands	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800385a:	193b      	adds	r3, r7, r4
 800385c:	22c0      	movs	r2, #192	; 0xc0
 800385e:	01d2      	lsls	r2, r2, #7
 8003860:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003862:	193b      	adds	r3, r7, r4
 8003864:	2202      	movs	r2, #2
 8003866:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003868:	193b      	adds	r3, r7, r4
 800386a:	2200      	movs	r2, #0
 800386c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800386e:	193b      	adds	r3, r7, r4
 8003870:	2200      	movs	r2, #0
 8003872:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003874:	193b      	adds	r3, r7, r4
 8003876:	2202      	movs	r2, #2
 8003878:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800387a:	193b      	adds	r3, r7, r4
 800387c:	4a12      	ldr	r2, [pc, #72]	; (80038c8 <HAL_TIM_MspPostInit+0xc0>)
 800387e:	0019      	movs	r1, r3
 8003880:	0010      	movs	r0, r2
 8003882:	f001 fc43 	bl	800510c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003886:	0021      	movs	r1, r4
 8003888:	187b      	adds	r3, r7, r1
 800388a:	22c0      	movs	r2, #192	; 0xc0
 800388c:	0092      	lsls	r2, r2, #2
 800388e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003890:	187b      	adds	r3, r7, r1
 8003892:	2202      	movs	r2, #2
 8003894:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003896:	187b      	adds	r3, r7, r1
 8003898:	2200      	movs	r2, #0
 800389a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800389c:	187b      	adds	r3, r7, r1
 800389e:	2200      	movs	r2, #0
 80038a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80038a2:	187b      	adds	r3, r7, r1
 80038a4:	2202      	movs	r2, #2
 80038a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a8:	187a      	adds	r2, r7, r1
 80038aa:	23a0      	movs	r3, #160	; 0xa0
 80038ac:	05db      	lsls	r3, r3, #23
 80038ae:	0011      	movs	r1, r2
 80038b0:	0018      	movs	r0, r3
 80038b2:	f001 fc2b 	bl	800510c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b00b      	add	sp, #44	; 0x2c
 80038bc:	bd90      	pop	{r4, r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	40012c00 	.word	0x40012c00
 80038c4:	40021000 	.word	0x40021000
 80038c8:	50000400 	.word	0x50000400

080038cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038cc:	b5b0      	push	{r4, r5, r7, lr}
 80038ce:	b08c      	sub	sp, #48	; 0x30
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80038d4:	232b      	movs	r3, #43	; 0x2b
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80038dc:	4b37      	ldr	r3, [pc, #220]	; (80039bc <HAL_InitTick+0xf0>)
 80038de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038e0:	4b36      	ldr	r3, [pc, #216]	; (80039bc <HAL_InitTick+0xf0>)
 80038e2:	2120      	movs	r1, #32
 80038e4:	430a      	orrs	r2, r1
 80038e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80038e8:	4b34      	ldr	r3, [pc, #208]	; (80039bc <HAL_InitTick+0xf0>)
 80038ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ec:	2220      	movs	r2, #32
 80038ee:	4013      	ands	r3, r2
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038f4:	230c      	movs	r3, #12
 80038f6:	18fa      	adds	r2, r7, r3
 80038f8:	2410      	movs	r4, #16
 80038fa:	193b      	adds	r3, r7, r4
 80038fc:	0011      	movs	r1, r2
 80038fe:	0018      	movs	r0, r3
 8003900:	f002 fa96 	bl	8005e30 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003904:	193b      	adds	r3, r7, r4
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	2b00      	cmp	r3, #0
 800390e:	d104      	bne.n	800391a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003910:	f002 fa78 	bl	8005e04 <HAL_RCC_GetPCLK1Freq>
 8003914:	0003      	movs	r3, r0
 8003916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003918:	e004      	b.n	8003924 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800391a:	f002 fa73 	bl	8005e04 <HAL_RCC_GetPCLK1Freq>
 800391e:	0003      	movs	r3, r0
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003926:	4926      	ldr	r1, [pc, #152]	; (80039c0 <HAL_InitTick+0xf4>)
 8003928:	0018      	movs	r0, r3
 800392a:	f7fc fbeb 	bl	8000104 <__udivsi3>
 800392e:	0003      	movs	r3, r0
 8003930:	3b01      	subs	r3, #1
 8003932:	623b      	str	r3, [r7, #32]

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003934:	4b23      	ldr	r3, [pc, #140]	; (80039c4 <HAL_InitTick+0xf8>)
 8003936:	4a24      	ldr	r2, [pc, #144]	; (80039c8 <HAL_InitTick+0xfc>)
 8003938:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800393a:	4b22      	ldr	r3, [pc, #136]	; (80039c4 <HAL_InitTick+0xf8>)
 800393c:	4a23      	ldr	r2, [pc, #140]	; (80039cc <HAL_InitTick+0x100>)
 800393e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003940:	4b20      	ldr	r3, [pc, #128]	; (80039c4 <HAL_InitTick+0xf8>)
 8003942:	6a3a      	ldr	r2, [r7, #32]
 8003944:	605a      	str	r2, [r3, #4]
  htim7.Init.ClockDivision = 0;
 8003946:	4b1f      	ldr	r3, [pc, #124]	; (80039c4 <HAL_InitTick+0xf8>)
 8003948:	2200      	movs	r2, #0
 800394a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800394c:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <HAL_InitTick+0xf8>)
 800394e:	2200      	movs	r2, #0
 8003950:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003952:	4b1c      	ldr	r3, [pc, #112]	; (80039c4 <HAL_InitTick+0xf8>)
 8003954:	2200      	movs	r2, #0
 8003956:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8003958:	252b      	movs	r5, #43	; 0x2b
 800395a:	197c      	adds	r4, r7, r5
 800395c:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <HAL_InitTick+0xf8>)
 800395e:	0018      	movs	r0, r3
 8003960:	f002 fc48 	bl	80061f4 <HAL_TIM_Base_Init>
 8003964:	0003      	movs	r3, r0
 8003966:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8003968:	197b      	adds	r3, r7, r5
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d11e      	bne.n	80039ae <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8003970:	197c      	adds	r4, r7, r5
 8003972:	4b14      	ldr	r3, [pc, #80]	; (80039c4 <HAL_InitTick+0xf8>)
 8003974:	0018      	movs	r0, r3
 8003976:	f002 fcf7 	bl	8006368 <HAL_TIM_Base_Start_IT>
 800397a:	0003      	movs	r3, r0
 800397c:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800397e:	197b      	adds	r3, r7, r5
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d113      	bne.n	80039ae <HAL_InitTick+0xe2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 8003986:	2012      	movs	r0, #18
 8003988:	f001 f891 	bl	8004aae <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b03      	cmp	r3, #3
 8003990:	d809      	bhi.n	80039a6 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, TickPriority, 0U);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	0019      	movs	r1, r3
 8003998:	2012      	movs	r0, #18
 800399a:	f001 f873 	bl	8004a84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800399e:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <HAL_InitTick+0x104>)
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	e003      	b.n	80039ae <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 80039a6:	232b      	movs	r3, #43	; 0x2b
 80039a8:	18fb      	adds	r3, r7, r3
 80039aa:	2201      	movs	r2, #1
 80039ac:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80039ae:	232b      	movs	r3, #43	; 0x2b
 80039b0:	18fb      	adds	r3, r7, r3
 80039b2:	781b      	ldrb	r3, [r3, #0]
}
 80039b4:	0018      	movs	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b00c      	add	sp, #48	; 0x30
 80039ba:	bdb0      	pop	{r4, r5, r7, pc}
 80039bc:	40021000 	.word	0x40021000
 80039c0:	000f4240 	.word	0x000f4240
 80039c4:	20000958 	.word	0x20000958
 80039c8:	40001400 	.word	0x40001400
 80039cc:	000003e7 	.word	0x000003e7
 80039d0:	20000004 	.word	0x20000004

080039d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039d8:	e7fe      	b.n	80039d8 <NMI_Handler+0x4>

080039da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039de:	e7fe      	b.n	80039de <HardFault_Handler+0x4>

080039e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80039e4:	46c0      	nop			; (mov r8, r8)
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <DMA1_Channel1_IRQHandler+0x14>)
 8003a06:	0018      	movs	r0, r3
 8003a08:	f001 fa3e 	bl	8004e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003a0c:	46c0      	nop			; (mov r8, r8)
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	20000544 	.word	0x20000544

08003a18 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f001 fa32 	bl	8004e88 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8003a24:	4b04      	ldr	r3, [pc, #16]	; (8003a38 <DMA1_Channel2_3_IRQHandler+0x20>)
 8003a26:	0018      	movs	r0, r3
 8003a28:	f001 fa2e 	bl	8004e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003a2c:	46c0      	nop			; (mov r8, r8)
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	2000066c 	.word	0x2000066c
 8003a38:	200006c8 	.word	0x200006c8

08003a3c <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003a40:	4b03      	ldr	r3, [pc, #12]	; (8003a50 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8003a42:	0018      	movs	r0, r3
 8003a44:	f002 fe44 	bl	80066d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8003a48:	46c0      	nop			; (mov r8, r8)
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	2000089c 	.word	0x2000089c

08003a54 <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 interrupts (LPTIM2 interrupt through EXTI line 30).
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */

  /* USER CODE END TIM7_LPTIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003a58:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <TIM7_LPTIM2_IRQHandler+0x14>)
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f002 fe38 	bl	80066d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 8003a60:	46c0      	nop			; (mov r8, r8)
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	20000958 	.word	0x20000958

08003a6c <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003a70:	4b03      	ldr	r3, [pc, #12]	; (8003a80 <USART3_4_LPUART1_IRQHandler+0x14>)
 8003a72:	0018      	movs	r0, r3
 8003a74:	f004 f86a 	bl	8007b4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8003a78:	46c0      	nop			; (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	200005a0 	.word	0x200005a0

08003a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a8c:	4a14      	ldr	r2, [pc, #80]	; (8003ae0 <_sbrk+0x5c>)
 8003a8e:	4b15      	ldr	r3, [pc, #84]	; (8003ae4 <_sbrk+0x60>)
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a98:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <_sbrk+0x64>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d102      	bne.n	8003aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003aa0:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <_sbrk+0x64>)
 8003aa2:	4a12      	ldr	r2, [pc, #72]	; (8003aec <_sbrk+0x68>)
 8003aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003aa6:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <_sbrk+0x64>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	18d3      	adds	r3, r2, r3
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d207      	bcs.n	8003ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ab4:	f005 fe26 	bl	8009704 <__errno>
 8003ab8:	0003      	movs	r3, r0
 8003aba:	220c      	movs	r2, #12
 8003abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	425b      	negs	r3, r3
 8003ac2:	e009      	b.n	8003ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ac4:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <_sbrk+0x64>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aca:	4b07      	ldr	r3, [pc, #28]	; (8003ae8 <_sbrk+0x64>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	18d2      	adds	r2, r2, r3
 8003ad2:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <_sbrk+0x64>)
 8003ad4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
}
 8003ad8:	0018      	movs	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b006      	add	sp, #24
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20009000 	.word	0x20009000
 8003ae4:	00000400 	.word	0x00000400
 8003ae8:	20000a14 	.word	0x20000a14
 8003aec:	20000bf8 	.word	0x20000bf8

08003af0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003afc:	480d      	ldr	r0, [pc, #52]	; (8003b34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003afe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003b00:	f7ff fff6 	bl	8003af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b04:	480c      	ldr	r0, [pc, #48]	; (8003b38 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b06:	490d      	ldr	r1, [pc, #52]	; (8003b3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b08:	4a0d      	ldr	r2, [pc, #52]	; (8003b40 <LoopForever+0xe>)
  movs r3, #0
 8003b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b0c:	e002      	b.n	8003b14 <LoopCopyDataInit>

08003b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b12:	3304      	adds	r3, #4

08003b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b18:	d3f9      	bcc.n	8003b0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b1a:	4a0a      	ldr	r2, [pc, #40]	; (8003b44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b1c:	4c0a      	ldr	r4, [pc, #40]	; (8003b48 <LoopForever+0x16>)
  movs r3, #0
 8003b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b20:	e001      	b.n	8003b26 <LoopFillZerobss>

08003b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b24:	3204      	adds	r2, #4

08003b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b28:	d3fb      	bcc.n	8003b22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003b2a:	f005 fdf1 	bl	8009710 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003b2e:	f7ff f927 	bl	8002d80 <main>

08003b32 <LoopForever>:

LoopForever:
  b LoopForever
 8003b32:	e7fe      	b.n	8003b32 <LoopForever>
  ldr   r0, =_estack
 8003b34:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b3c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003b40:	08009b6c 	.word	0x08009b6c
  ldr r2, =_sbss
 8003b44:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003b48:	20000bf4 	.word	0x20000bf4

08003b4c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b4c:	e7fe      	b.n	8003b4c <ADC1_COMP_IRQHandler>
	...

08003b50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b56:	1dfb      	adds	r3, r7, #7
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_Init+0x3c>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <HAL_Init+0x3c>)
 8003b62:	2180      	movs	r1, #128	; 0x80
 8003b64:	0049      	lsls	r1, r1, #1
 8003b66:	430a      	orrs	r2, r1
 8003b68:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b6a:	2003      	movs	r0, #3
 8003b6c:	f7ff feae 	bl	80038cc <HAL_InitTick>
 8003b70:	1e03      	subs	r3, r0, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003b74:	1dfb      	adds	r3, r7, #7
 8003b76:	2201      	movs	r2, #1
 8003b78:	701a      	strb	r2, [r3, #0]
 8003b7a:	e001      	b.n	8003b80 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003b7c:	f7ff fc7e 	bl	800347c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b80:	1dfb      	adds	r3, r7, #7
 8003b82:	781b      	ldrb	r3, [r3, #0]
}
 8003b84:	0018      	movs	r0, r3
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b002      	add	sp, #8
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40022000 	.word	0x40022000

08003b90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <HAL_IncTick+0x1c>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	001a      	movs	r2, r3
 8003b9a:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <HAL_IncTick+0x20>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	18d2      	adds	r2, r2, r3
 8003ba0:	4b03      	ldr	r3, [pc, #12]	; (8003bb0 <HAL_IncTick+0x20>)
 8003ba2:	601a      	str	r2, [r3, #0]
}
 8003ba4:	46c0      	nop			; (mov r8, r8)
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	20000008 	.word	0x20000008
 8003bb0:	20000a18 	.word	0x20000a18

08003bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8003bb8:	4b02      	ldr	r3, [pc, #8]	; (8003bc4 <HAL_GetTick+0x10>)
 8003bba:	681b      	ldr	r3, [r3, #0]
}
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	20000a18 	.word	0x20000a18

08003bc8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a05      	ldr	r2, [pc, #20]	; (8003bec <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003bd8:	401a      	ands	r2, r3
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	601a      	str	r2, [r3, #0]
}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b002      	add	sp, #8
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	fe3fffff 	.word	0xfe3fffff

08003bf0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	23e0      	movs	r3, #224	; 0xe0
 8003bfe:	045b      	lsls	r3, r3, #17
 8003c00:	4013      	ands	r3, r2
}
 8003c02:	0018      	movs	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b002      	add	sp, #8
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	2104      	movs	r1, #4
 8003c1e:	400a      	ands	r2, r1
 8003c20:	2107      	movs	r1, #7
 8003c22:	4091      	lsls	r1, r2
 8003c24:	000a      	movs	r2, r1
 8003c26:	43d2      	mvns	r2, r2
 8003c28:	401a      	ands	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2104      	movs	r1, #4
 8003c2e:	400b      	ands	r3, r1
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4099      	lsls	r1, r3
 8003c34:	000b      	movs	r3, r1
 8003c36:	431a      	orrs	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b004      	add	sp, #16
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	2104      	movs	r1, #4
 8003c56:	400a      	ands	r2, r1
 8003c58:	2107      	movs	r1, #7
 8003c5a:	4091      	lsls	r1, r2
 8003c5c:	000a      	movs	r2, r1
 8003c5e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2104      	movs	r1, #4
 8003c64:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003c66:	40da      	lsrs	r2, r3
 8003c68:	0013      	movs	r3, r2
}
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b002      	add	sp, #8
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	23c0      	movs	r3, #192	; 0xc0
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	4013      	ands	r3, r2
 8003c84:	d101      	bne.n	8003c8a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	b002      	add	sp, #8
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	211f      	movs	r1, #31
 8003ca8:	400a      	ands	r2, r1
 8003caa:	210f      	movs	r1, #15
 8003cac:	4091      	lsls	r1, r2
 8003cae:	000a      	movs	r2, r1
 8003cb0:	43d2      	mvns	r2, r2
 8003cb2:	401a      	ands	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	0e9b      	lsrs	r3, r3, #26
 8003cb8:	210f      	movs	r1, #15
 8003cba:	4019      	ands	r1, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	201f      	movs	r0, #31
 8003cc0:	4003      	ands	r3, r0
 8003cc2:	4099      	lsls	r1, r3
 8003cc4:	000b      	movs	r3, r1
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ccc:	46c0      	nop			; (mov r8, r8)
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	b004      	add	sp, #16
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	035b      	lsls	r3, r3, #13
 8003ce6:	0b5b      	lsrs	r3, r3, #13
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	b002      	add	sp, #8
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	0352      	lsls	r2, r2, #13
 8003d08:	0b52      	lsrs	r2, r2, #13
 8003d0a:	43d2      	mvns	r2, r2
 8003d0c:	401a      	ands	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b002      	add	sp, #8
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	0212      	lsls	r2, r2, #8
 8003d30:	43d2      	mvns	r2, r2
 8003d32:	401a      	ands	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	400b      	ands	r3, r1
 8003d3c:	4904      	ldr	r1, [pc, #16]	; (8003d50 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003d3e:	400b      	ands	r3, r1
 8003d40:	431a      	orrs	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	b004      	add	sp, #16
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	07ffff00 	.word	0x07ffff00

08003d54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	4a05      	ldr	r2, [pc, #20]	; (8003d78 <LL_ADC_EnableInternalRegulator+0x24>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	2280      	movs	r2, #128	; 0x80
 8003d66:	0552      	lsls	r2, r2, #21
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b002      	add	sp, #8
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	6fffffe8 	.word	0x6fffffe8

08003d7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	055b      	lsls	r3, r3, #21
 8003d8c:	401a      	ands	r2, r3
 8003d8e:	2380      	movs	r3, #128	; 0x80
 8003d90:	055b      	lsls	r3, r3, #21
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d101      	bne.n	8003d9a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b002      	add	sp, #8
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	4a04      	ldr	r2, [pc, #16]	; (8003dc4 <LL_ADC_Enable+0x20>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	2201      	movs	r2, #1
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003dbc:	46c0      	nop			; (mov r8, r8)
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b002      	add	sp, #8
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	7fffffe8 	.word	0x7fffffe8

08003dc8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	4a04      	ldr	r2, [pc, #16]	; (8003de8 <LL_ADC_Disable+0x20>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2202      	movs	r2, #2
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003de0:	46c0      	nop			; (mov r8, r8)
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b002      	add	sp, #8
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	7fffffe8 	.word	0x7fffffe8

08003dec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <LL_ADC_IsEnabled+0x18>
 8003e00:	2301      	movs	r3, #1
 8003e02:	e000      	b.n	8003e06 <LL_ADC_IsEnabled+0x1a>
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	0018      	movs	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b002      	add	sp, #8
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	4a04      	ldr	r2, [pc, #16]	; (8003e30 <LL_ADC_REG_StartConversion+0x20>)
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2204      	movs	r2, #4
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e28:	46c0      	nop			; (mov r8, r8)
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b002      	add	sp, #8
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	7fffffe8 	.word	0x7fffffe8

08003e34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2204      	movs	r2, #4
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d101      	bne.n	8003e4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	0018      	movs	r0, r3
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b002      	add	sp, #8
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e60:	231f      	movs	r3, #31
 8003e62:	18fb      	adds	r3, r7, r3
 8003e64:	2200      	movs	r2, #0
 8003e66:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e19f      	b.n	80041be <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d12a      	bne.n	8003edc <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4acf      	ldr	r2, [pc, #828]	; (80041c8 <HAL_ADC_Init+0x370>)
 8003e8a:	665a      	str	r2, [r3, #100]	; 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4acf      	ldr	r2, [pc, #828]	; (80041cc <HAL_ADC_Init+0x374>)
 8003e90:	669a      	str	r2, [r3, #104]	; 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4ace      	ldr	r2, [pc, #824]	; (80041d0 <HAL_ADC_Init+0x378>)
 8003e96:	66da      	str	r2, [r3, #108]	; 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4ace      	ldr	r2, [pc, #824]	; (80041d4 <HAL_ADC_Init+0x37c>)
 8003e9c:	671a      	str	r2, [r3, #112]	; 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4acd      	ldr	r2, [pc, #820]	; (80041d8 <HAL_ADC_Init+0x380>)
 8003ea2:	675a      	str	r2, [r3, #116]	; 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4acd      	ldr	r2, [pc, #820]	; (80041dc <HAL_ADC_Init+0x384>)
 8003ea8:	679a      	str	r2, [r3, #120]	; 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4acc      	ldr	r2, [pc, #816]	; (80041e0 <HAL_ADC_Init+0x388>)
 8003eae:	67da      	str	r2, [r3, #124]	; 0x7c

    if (hadc->MspInitCallback == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2280      	movs	r2, #128	; 0x80
 8003eb4:	589b      	ldr	r3, [r3, r2]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d103      	bne.n	8003ec2 <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2180      	movs	r1, #128	; 0x80
 8003ebe:	4ac9      	ldr	r2, [pc, #804]	; (80041e4 <HAL_ADC_Init+0x38c>)
 8003ec0:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2280      	movs	r2, #128	; 0x80
 8003ec6:	589b      	ldr	r3, [r3, r2]
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	0010      	movs	r0, r2
 8003ecc:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2254      	movs	r2, #84	; 0x54
 8003ed8:	2100      	movs	r1, #0
 8003eda:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f7ff ff4b 	bl	8003d7c <LL_ADC_IsInternalRegulatorEnabled>
 8003ee6:	1e03      	subs	r3, r0, #0
 8003ee8:	d115      	bne.n	8003f16 <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f7ff ff30 	bl	8003d54 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ef4:	4bbc      	ldr	r3, [pc, #752]	; (80041e8 <HAL_ADC_Init+0x390>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	49bc      	ldr	r1, [pc, #752]	; (80041ec <HAL_ADC_Init+0x394>)
 8003efa:	0018      	movs	r0, r3
 8003efc:	f7fc f902 	bl	8000104 <__udivsi3>
 8003f00:	0003      	movs	r3, r0
 8003f02:	3301      	adds	r3, #1
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003f08:	e002      	b.n	8003f10 <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f9      	bne.n	8003f0a <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f7ff ff2e 	bl	8003d7c <LL_ADC_IsInternalRegulatorEnabled>
 8003f20:	1e03      	subs	r3, r0, #0
 8003f22:	d10f      	bne.n	8003f44 <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f28:	2210      	movs	r2, #16
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f34:	2201      	movs	r2, #1
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f3c:	231f      	movs	r3, #31
 8003f3e:	18fb      	adds	r3, r7, r3
 8003f40:	2201      	movs	r2, #1
 8003f42:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f7ff ff73 	bl	8003e34 <LL_ADC_REG_IsConversionOngoing>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f56:	2210      	movs	r2, #16
 8003f58:	4013      	ands	r3, r2
 8003f5a:	d000      	beq.n	8003f5e <HAL_ADC_Init+0x106>
 8003f5c:	e122      	b.n	80041a4 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d000      	beq.n	8003f66 <HAL_ADC_Init+0x10e>
 8003f64:	e11e      	b.n	80041a4 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6a:	4aa1      	ldr	r2, [pc, #644]	; (80041f0 <HAL_ADC_Init+0x398>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2202      	movs	r2, #2
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f7ff ff36 	bl	8003dec <LL_ADC_IsEnabled>
 8003f80:	1e03      	subs	r3, r0, #0
 8003f82:	d000      	beq.n	8003f86 <HAL_ADC_Init+0x12e>
 8003f84:	e0ad      	b.n	80040e2 <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	7e1b      	ldrb	r3, [r3, #24]
 8003f8e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003f90:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	7e5b      	ldrb	r3, [r3, #25]
 8003f96:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003f98:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	7e9b      	ldrb	r3, [r3, #26]
 8003f9e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003fa0:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_ADC_Init+0x158>
 8003faa:	2380      	movs	r3, #128	; 0x80
 8003fac:	015b      	lsls	r3, r3, #5
 8003fae:	e000      	b.n	8003fb2 <HAL_ADC_Init+0x15a>
 8003fb0:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003fb2:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003fb8:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	da04      	bge.n	8003fcc <HAL_ADC_Init+0x174>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	085b      	lsrs	r3, r3, #1
 8003fca:	e001      	b.n	8003fd0 <HAL_ADC_Init+0x178>
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8003fd0:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	212c      	movs	r1, #44	; 0x2c
 8003fd6:	5c5b      	ldrb	r3, [r3, r1]
 8003fd8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003fda:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	5c9b      	ldrb	r3, [r3, r2]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d115      	bne.n	8004018 <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	7e9b      	ldrb	r3, [r3, #26]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d105      	bne.n	8004000 <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	2280      	movs	r2, #128	; 0x80
 8003ff8:	0252      	lsls	r2, r2, #9
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
 8003ffe:	e00b      	b.n	8004018 <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004004:	2220      	movs	r2, #32
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004010:	2201      	movs	r2, #1
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <HAL_ADC_Init+0x1de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004024:	23e0      	movs	r3, #224	; 0xe0
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800402e:	4313      	orrs	r3, r2
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4313      	orrs	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	4a6d      	ldr	r2, [pc, #436]	; (80041f4 <HAL_ADC_Init+0x39c>)
 800403e:	4013      	ands	r3, r2
 8004040:	0019      	movs	r1, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	430a      	orrs	r2, r1
 800404a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	0f9b      	lsrs	r3, r3, #30
 8004052:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004058:	4313      	orrs	r3, r2
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	223c      	movs	r2, #60	; 0x3c
 8004064:	5c9b      	ldrb	r3, [r3, r2]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d111      	bne.n	800408e <HAL_ADC_Init+0x236>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	0f9b      	lsrs	r3, r3, #30
 8004070:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004076:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800407c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8004082:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	2201      	movs	r2, #1
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	4a58      	ldr	r2, [pc, #352]	; (80041f8 <HAL_ADC_Init+0x3a0>)
 8004096:	4013      	ands	r3, r2
 8004098:	0019      	movs	r1, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	23c0      	movs	r3, #192	; 0xc0
 80040aa:	061b      	lsls	r3, r3, #24
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d018      	beq.n	80040e2 <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80040b4:	2380      	movs	r3, #128	; 0x80
 80040b6:	05db      	lsls	r3, r3, #23
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d012      	beq.n	80040e2 <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80040c0:	2380      	movs	r3, #128	; 0x80
 80040c2:	061b      	lsls	r3, r3, #24
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d00c      	beq.n	80040e2 <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80040c8:	4b4c      	ldr	r3, [pc, #304]	; (80041fc <HAL_ADC_Init+0x3a4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a4c      	ldr	r2, [pc, #304]	; (8004200 <HAL_ADC_Init+0x3a8>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	0019      	movs	r1, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	23f0      	movs	r3, #240	; 0xf0
 80040d8:	039b      	lsls	r3, r3, #14
 80040da:	401a      	ands	r2, r3
 80040dc:	4b47      	ldr	r3, [pc, #284]	; (80041fc <HAL_ADC_Init+0x3a4>)
 80040de:	430a      	orrs	r2, r1
 80040e0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ea:	001a      	movs	r2, r3
 80040ec:	2100      	movs	r1, #0
 80040ee:	f7ff fd8c 	bl	8003c0a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	4942      	ldr	r1, [pc, #264]	; (8004204 <HAL_ADC_Init+0x3ac>)
 80040fc:	001a      	movs	r2, r3
 80040fe:	f7ff fd84 	bl	8003c0a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2110      	movs	r1, #16
 8004116:	4249      	negs	r1, r1
 8004118:	430a      	orrs	r2, r1
 800411a:	629a      	str	r2, [r3, #40]	; 0x28
 800411c:	e018      	b.n	8004150 <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691a      	ldr	r2, [r3, #16]
 8004122:	2380      	movs	r3, #128	; 0x80
 8004124:	039b      	lsls	r3, r3, #14
 8004126:	429a      	cmp	r2, r3
 8004128:	d112      	bne.n	8004150 <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	3b01      	subs	r3, #1
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	221c      	movs	r2, #28
 800413a:	4013      	ands	r3, r2
 800413c:	2210      	movs	r2, #16
 800413e:	4252      	negs	r2, r2
 8004140:	409a      	lsls	r2, r3
 8004142:	0011      	movs	r1, r2
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2100      	movs	r1, #0
 8004156:	0018      	movs	r0, r3
 8004158:	f7ff fd74 	bl	8003c44 <LL_ADC_GetSamplingTimeCommonChannels>
 800415c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004162:	429a      	cmp	r2, r3
 8004164:	d10b      	bne.n	800417e <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004170:	2203      	movs	r2, #3
 8004172:	4393      	bics	r3, r2
 8004174:	2201      	movs	r2, #1
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800417c:	e01c      	b.n	80041b8 <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004182:	2212      	movs	r2, #18
 8004184:	4393      	bics	r3, r2
 8004186:	2210      	movs	r2, #16
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004192:	2201      	movs	r2, #1
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800419a:	231f      	movs	r3, #31
 800419c:	18fb      	adds	r3, r7, r3
 800419e:	2201      	movs	r2, #1
 80041a0:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80041a2:	e009      	b.n	80041b8 <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a8:	2210      	movs	r2, #16
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80041b0:	231f      	movs	r3, #31
 80041b2:	18fb      	adds	r3, r7, r3
 80041b4:	2201      	movs	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80041b8:	231f      	movs	r3, #31
 80041ba:	18fb      	adds	r3, r7, r3
 80041bc:	781b      	ldrb	r3, [r3, #0]
}
 80041be:	0018      	movs	r0, r3
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b008      	add	sp, #32
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	08004325 	.word	0x08004325
 80041cc:	08004335 	.word	0x08004335
 80041d0:	08004345 	.word	0x08004345
 80041d4:	08004355 	.word	0x08004355
 80041d8:	08004945 	.word	0x08004945
 80041dc:	08004955 	.word	0x08004955
 80041e0:	08004965 	.word	0x08004965
 80041e4:	080034c5 	.word	0x080034c5
 80041e8:	20000000 	.word	0x20000000
 80041ec:	00030d40 	.word	0x00030d40
 80041f0:	fffffefd 	.word	0xfffffefd
 80041f4:	fffe0201 	.word	0xfffe0201
 80041f8:	1ffffc02 	.word	0x1ffffc02
 80041fc:	40012708 	.word	0x40012708
 8004200:	ffc3ffff 	.word	0xffc3ffff
 8004204:	07ffff04 	.word	0x07ffff04

08004208 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004208:	b5b0      	push	{r4, r5, r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	0018      	movs	r0, r3
 800421a:	f7ff fe0b 	bl	8003e34 <LL_ADC_REG_IsConversionOngoing>
 800421e:	1e03      	subs	r3, r0, #0
 8004220:	d16c      	bne.n	80042fc <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2254      	movs	r2, #84	; 0x54
 8004226:	5c9b      	ldrb	r3, [r3, r2]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_ADC_Start_DMA+0x28>
 800422c:	2302      	movs	r3, #2
 800422e:	e06c      	b.n	800430a <HAL_ADC_Start_DMA+0x102>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2254      	movs	r2, #84	; 0x54
 8004234:	2101      	movs	r1, #1
 8004236:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	2201      	movs	r2, #1
 8004240:	4013      	ands	r3, r2
 8004242:	d113      	bne.n	800426c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	0018      	movs	r0, r3
 800424a:	f7ff fdcf 	bl	8003dec <LL_ADC_IsEnabled>
 800424e:	1e03      	subs	r3, r0, #0
 8004250:	d004      	beq.n	800425c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	0018      	movs	r0, r3
 8004258:	f7ff fdb6 	bl	8003dc8 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2101      	movs	r1, #1
 8004268:	430a      	orrs	r2, r1
 800426a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800426c:	2517      	movs	r5, #23
 800426e:	197c      	adds	r4, r7, r5
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	0018      	movs	r0, r3
 8004274:	f000 fa4e 	bl	8004714 <ADC_Enable>
 8004278:	0003      	movs	r3, r0
 800427a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800427c:	002c      	movs	r4, r5
 800427e:	193b      	adds	r3, r7, r4
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d13e      	bne.n	8004304 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	4a22      	ldr	r2, [pc, #136]	; (8004314 <HAL_ADC_Start_DMA+0x10c>)
 800428c:	4013      	ands	r3, r2
 800428e:	2280      	movs	r2, #128	; 0x80
 8004290:	0052      	lsls	r2, r2, #1
 8004292:	431a      	orrs	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a2:	4a1d      	ldr	r2, [pc, #116]	; (8004318 <HAL_ADC_Start_DMA+0x110>)
 80042a4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042aa:	4a1c      	ldr	r2, [pc, #112]	; (800431c <HAL_ADC_Start_DMA+0x114>)
 80042ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b2:	4a1b      	ldr	r2, [pc, #108]	; (8004320 <HAL_ADC_Start_DMA+0x118>)
 80042b4:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	221c      	movs	r2, #28
 80042bc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2254      	movs	r2, #84	; 0x54
 80042c2:	2100      	movs	r1, #0
 80042c4:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2110      	movs	r1, #16
 80042d2:	430a      	orrs	r2, r1
 80042d4:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3340      	adds	r3, #64	; 0x40
 80042e0:	0019      	movs	r1, r3
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	193c      	adds	r4, r7, r4
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f000 fc7c 	bl	8004be4 <HAL_DMA_Start_IT>
 80042ec:	0003      	movs	r3, r0
 80042ee:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	0018      	movs	r0, r3
 80042f6:	f7ff fd8b 	bl	8003e10 <LL_ADC_REG_StartConversion>
 80042fa:	e003      	b.n	8004304 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80042fc:	2317      	movs	r3, #23
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	2202      	movs	r2, #2
 8004302:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004304:	2317      	movs	r3, #23
 8004306:	18fb      	adds	r3, r7, r3
 8004308:	781b      	ldrb	r3, [r3, #0]
}
 800430a:	0018      	movs	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	b006      	add	sp, #24
 8004310:	bdb0      	pop	{r4, r5, r7, pc}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	fffff0fe 	.word	0xfffff0fe
 8004318:	08004821 	.word	0x08004821
 800431c:	080048ed 	.word	0x080048ed
 8004320:	0800490d 	.word	0x0800490d

08004324 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800432c:	46c0      	nop			; (mov r8, r8)
 800432e:	46bd      	mov	sp, r7
 8004330:	b002      	add	sp, #8
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800433c:	46c0      	nop			; (mov r8, r8)
 800433e:	46bd      	mov	sp, r7
 8004340:	b002      	add	sp, #8
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800434c:	46c0      	nop			; (mov r8, r8)
 800434e:	46bd      	mov	sp, r7
 8004350:	b002      	add	sp, #8
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800435c:	46c0      	nop			; (mov r8, r8)
 800435e:	46bd      	mov	sp, r7
 8004360:	b002      	add	sp, #8
 8004362:	bd80      	pop	{r7, pc}

08004364 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800436e:	2317      	movs	r3, #23
 8004370:	18fb      	adds	r3, r7, r3
 8004372:	2200      	movs	r2, #0
 8004374:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2254      	movs	r2, #84	; 0x54
 800437e:	5c9b      	ldrb	r3, [r3, r2]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_ADC_ConfigChannel+0x24>
 8004384:	2302      	movs	r3, #2
 8004386:	e1c0      	b.n	800470a <HAL_ADC_ConfigChannel+0x3a6>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2254      	movs	r2, #84	; 0x54
 800438c:	2101      	movs	r1, #1
 800438e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	0018      	movs	r0, r3
 8004396:	f7ff fd4d 	bl	8003e34 <LL_ADC_REG_IsConversionOngoing>
 800439a:	1e03      	subs	r3, r0, #0
 800439c:	d000      	beq.n	80043a0 <HAL_ADC_ConfigChannel+0x3c>
 800439e:	e1a3      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d100      	bne.n	80043aa <HAL_ADC_ConfigChannel+0x46>
 80043a8:	e143      	b.n	8004632 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	2380      	movs	r3, #128	; 0x80
 80043b0:	061b      	lsls	r3, r3, #24
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d004      	beq.n	80043c0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80043ba:	4ac1      	ldr	r2, [pc, #772]	; (80046c0 <HAL_ADC_ConfigChannel+0x35c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d108      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	0019      	movs	r1, r3
 80043ca:	0010      	movs	r0, r2
 80043cc:	f7ff fc82 	bl	8003cd4 <LL_ADC_REG_SetSequencerChAdd>
 80043d0:	e0c9      	b.n	8004566 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	211f      	movs	r1, #31
 80043dc:	400b      	ands	r3, r1
 80043de:	210f      	movs	r1, #15
 80043e0:	4099      	lsls	r1, r3
 80043e2:	000b      	movs	r3, r1
 80043e4:	43db      	mvns	r3, r3
 80043e6:	4013      	ands	r3, r2
 80043e8:	0019      	movs	r1, r3
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	035b      	lsls	r3, r3, #13
 80043f0:	0b5b      	lsrs	r3, r3, #13
 80043f2:	d105      	bne.n	8004400 <HAL_ADC_ConfigChannel+0x9c>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	0e9b      	lsrs	r3, r3, #26
 80043fa:	221f      	movs	r2, #31
 80043fc:	4013      	ands	r3, r2
 80043fe:	e098      	b.n	8004532 <HAL_ADC_ConfigChannel+0x1ce>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2201      	movs	r2, #1
 8004406:	4013      	ands	r3, r2
 8004408:	d000      	beq.n	800440c <HAL_ADC_ConfigChannel+0xa8>
 800440a:	e091      	b.n	8004530 <HAL_ADC_ConfigChannel+0x1cc>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2202      	movs	r2, #2
 8004412:	4013      	ands	r3, r2
 8004414:	d000      	beq.n	8004418 <HAL_ADC_ConfigChannel+0xb4>
 8004416:	e089      	b.n	800452c <HAL_ADC_ConfigChannel+0x1c8>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2204      	movs	r2, #4
 800441e:	4013      	ands	r3, r2
 8004420:	d000      	beq.n	8004424 <HAL_ADC_ConfigChannel+0xc0>
 8004422:	e081      	b.n	8004528 <HAL_ADC_ConfigChannel+0x1c4>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2208      	movs	r2, #8
 800442a:	4013      	ands	r3, r2
 800442c:	d000      	beq.n	8004430 <HAL_ADC_ConfigChannel+0xcc>
 800442e:	e079      	b.n	8004524 <HAL_ADC_ConfigChannel+0x1c0>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2210      	movs	r2, #16
 8004436:	4013      	ands	r3, r2
 8004438:	d000      	beq.n	800443c <HAL_ADC_ConfigChannel+0xd8>
 800443a:	e071      	b.n	8004520 <HAL_ADC_ConfigChannel+0x1bc>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2220      	movs	r2, #32
 8004442:	4013      	ands	r3, r2
 8004444:	d000      	beq.n	8004448 <HAL_ADC_ConfigChannel+0xe4>
 8004446:	e069      	b.n	800451c <HAL_ADC_ConfigChannel+0x1b8>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2240      	movs	r2, #64	; 0x40
 800444e:	4013      	ands	r3, r2
 8004450:	d000      	beq.n	8004454 <HAL_ADC_ConfigChannel+0xf0>
 8004452:	e061      	b.n	8004518 <HAL_ADC_ConfigChannel+0x1b4>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2280      	movs	r2, #128	; 0x80
 800445a:	4013      	ands	r3, r2
 800445c:	d000      	beq.n	8004460 <HAL_ADC_ConfigChannel+0xfc>
 800445e:	e059      	b.n	8004514 <HAL_ADC_ConfigChannel+0x1b0>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	4013      	ands	r3, r2
 800446a:	d151      	bne.n	8004510 <HAL_ADC_ConfigChannel+0x1ac>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	2380      	movs	r3, #128	; 0x80
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4013      	ands	r3, r2
 8004476:	d149      	bne.n	800450c <HAL_ADC_ConfigChannel+0x1a8>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	2380      	movs	r3, #128	; 0x80
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4013      	ands	r3, r2
 8004482:	d141      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x1a4>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	2380      	movs	r3, #128	; 0x80
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	4013      	ands	r3, r2
 800448e:	d139      	bne.n	8004504 <HAL_ADC_ConfigChannel+0x1a0>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	2380      	movs	r3, #128	; 0x80
 8004496:	015b      	lsls	r3, r3, #5
 8004498:	4013      	ands	r3, r2
 800449a:	d131      	bne.n	8004500 <HAL_ADC_ConfigChannel+0x19c>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	2380      	movs	r3, #128	; 0x80
 80044a2:	019b      	lsls	r3, r3, #6
 80044a4:	4013      	ands	r3, r2
 80044a6:	d129      	bne.n	80044fc <HAL_ADC_ConfigChannel+0x198>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	2380      	movs	r3, #128	; 0x80
 80044ae:	01db      	lsls	r3, r3, #7
 80044b0:	4013      	ands	r3, r2
 80044b2:	d121      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0x194>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	2380      	movs	r3, #128	; 0x80
 80044ba:	021b      	lsls	r3, r3, #8
 80044bc:	4013      	ands	r3, r2
 80044be:	d119      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x190>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	2380      	movs	r3, #128	; 0x80
 80044c6:	025b      	lsls	r3, r3, #9
 80044c8:	4013      	ands	r3, r2
 80044ca:	d111      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x18c>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	2380      	movs	r3, #128	; 0x80
 80044d2:	029b      	lsls	r3, r3, #10
 80044d4:	4013      	ands	r3, r2
 80044d6:	d109      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x188>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	2380      	movs	r3, #128	; 0x80
 80044de:	02db      	lsls	r3, r3, #11
 80044e0:	4013      	ands	r3, r2
 80044e2:	d001      	beq.n	80044e8 <HAL_ADC_ConfigChannel+0x184>
 80044e4:	2312      	movs	r3, #18
 80044e6:	e024      	b.n	8004532 <HAL_ADC_ConfigChannel+0x1ce>
 80044e8:	2300      	movs	r3, #0
 80044ea:	e022      	b.n	8004532 <HAL_ADC_ConfigChannel+0x1ce>
 80044ec:	2311      	movs	r3, #17
 80044ee:	e020      	b.n	8004532 <HAL_ADC_ConfigChannel+0x1ce>
 80044f0:	2310      	movs	r3, #16
 80044f2:	e01e      	b.n	8004532 <HAL_ADC_ConfigChannel+0x1ce>
 80044f4:	230f      	movs	r3, #15
 80044f6:	e01c      	b.n	8004532 <HAL_ADC_ConfigChannel+0x1ce>
 80044f8:	230e      	movs	r3, #14
 80044fa:	e01a      	b.n	8004532 <HAL_ADC_ConfigChannel+0x1ce>
 80044fc:	230d      	movs	r3, #13
 80044fe:	e018      	b.n	8004532 <HAL_ADC_ConfigChannel+0x1ce>
 8004500:	230c      	movs	r3, #12
 8004502:	e016      	b.n	8004532 <HAL_ADC_ConfigChannel+0x1ce>
 8004504:	230b      	movs	r3, #11
 8004506:	e014      	b.n	8004532 <HAL_ADC_ConfigChannel+0x1ce>
 8004508:	230a      	movs	r3, #10
 800450a:	e012      	b.n	8004532 <HAL_ADC_ConfigChannel+0x1ce>
 800450c:	2309      	movs	r3, #9
 800450e:	e010      	b.n	8004532 <HAL_ADC_ConfigChannel+0x1ce>
 8004510:	2308      	movs	r3, #8
 8004512:	e00e      	b.n	8004532 <HAL_ADC_ConfigChannel+0x1ce>
 8004514:	2307      	movs	r3, #7
 8004516:	e00c      	b.n	8004532 <HAL_ADC_ConfigChannel+0x1ce>
 8004518:	2306      	movs	r3, #6
 800451a:	e00a      	b.n	8004532 <HAL_ADC_ConfigChannel+0x1ce>
 800451c:	2305      	movs	r3, #5
 800451e:	e008      	b.n	8004532 <HAL_ADC_ConfigChannel+0x1ce>
 8004520:	2304      	movs	r3, #4
 8004522:	e006      	b.n	8004532 <HAL_ADC_ConfigChannel+0x1ce>
 8004524:	2303      	movs	r3, #3
 8004526:	e004      	b.n	8004532 <HAL_ADC_ConfigChannel+0x1ce>
 8004528:	2302      	movs	r3, #2
 800452a:	e002      	b.n	8004532 <HAL_ADC_ConfigChannel+0x1ce>
 800452c:	2301      	movs	r3, #1
 800452e:	e000      	b.n	8004532 <HAL_ADC_ConfigChannel+0x1ce>
 8004530:	2300      	movs	r3, #0
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	6852      	ldr	r2, [r2, #4]
 8004536:	201f      	movs	r0, #31
 8004538:	4002      	ands	r2, r0
 800453a:	4093      	lsls	r3, r2
 800453c:	000a      	movs	r2, r1
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	089b      	lsrs	r3, r3, #2
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	429a      	cmp	r2, r3
 8004552:	d808      	bhi.n	8004566 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6818      	ldr	r0, [r3, #0]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	6859      	ldr	r1, [r3, #4]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	001a      	movs	r2, r3
 8004562:	f7ff fb97 	bl	8003c94 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	6819      	ldr	r1, [r3, #0]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	001a      	movs	r2, r3
 8004574:	f7ff fbd2 	bl	8003d1c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	db00      	blt.n	8004582 <HAL_ADC_ConfigChannel+0x21e>
 8004580:	e0bc      	b.n	80046fc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004582:	4b50      	ldr	r3, [pc, #320]	; (80046c4 <HAL_ADC_ConfigChannel+0x360>)
 8004584:	0018      	movs	r0, r3
 8004586:	f7ff fb33 	bl	8003bf0 <LL_ADC_GetCommonPathInternalCh>
 800458a:	0003      	movs	r3, r0
 800458c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a4d      	ldr	r2, [pc, #308]	; (80046c8 <HAL_ADC_ConfigChannel+0x364>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d122      	bne.n	80045de <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	2380      	movs	r3, #128	; 0x80
 800459c:	041b      	lsls	r3, r3, #16
 800459e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80045a0:	d11d      	bne.n	80045de <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	2280      	movs	r2, #128	; 0x80
 80045a6:	0412      	lsls	r2, r2, #16
 80045a8:	4313      	orrs	r3, r2
 80045aa:	4a46      	ldr	r2, [pc, #280]	; (80046c4 <HAL_ADC_ConfigChannel+0x360>)
 80045ac:	0019      	movs	r1, r3
 80045ae:	0010      	movs	r0, r2
 80045b0:	f7ff fb0a 	bl	8003bc8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045b4:	4b45      	ldr	r3, [pc, #276]	; (80046cc <HAL_ADC_ConfigChannel+0x368>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4945      	ldr	r1, [pc, #276]	; (80046d0 <HAL_ADC_ConfigChannel+0x36c>)
 80045ba:	0018      	movs	r0, r3
 80045bc:	f7fb fda2 	bl	8000104 <__udivsi3>
 80045c0:	0003      	movs	r3, r0
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	0013      	movs	r3, r2
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	189b      	adds	r3, r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80045ce:	e002      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1f9      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80045dc:	e08e      	b.n	80046fc <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a3c      	ldr	r2, [pc, #240]	; (80046d4 <HAL_ADC_ConfigChannel+0x370>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d10e      	bne.n	8004606 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	2380      	movs	r3, #128	; 0x80
 80045ec:	045b      	lsls	r3, r3, #17
 80045ee:	4013      	ands	r3, r2
 80045f0:	d109      	bne.n	8004606 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	2280      	movs	r2, #128	; 0x80
 80045f6:	0452      	lsls	r2, r2, #17
 80045f8:	4313      	orrs	r3, r2
 80045fa:	4a32      	ldr	r2, [pc, #200]	; (80046c4 <HAL_ADC_ConfigChannel+0x360>)
 80045fc:	0019      	movs	r1, r3
 80045fe:	0010      	movs	r0, r2
 8004600:	f7ff fae2 	bl	8003bc8 <LL_ADC_SetCommonPathInternalCh>
 8004604:	e07a      	b.n	80046fc <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a33      	ldr	r2, [pc, #204]	; (80046d8 <HAL_ADC_ConfigChannel+0x374>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d000      	beq.n	8004612 <HAL_ADC_ConfigChannel+0x2ae>
 8004610:	e074      	b.n	80046fc <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	03db      	lsls	r3, r3, #15
 8004618:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800461a:	d000      	beq.n	800461e <HAL_ADC_ConfigChannel+0x2ba>
 800461c:	e06e      	b.n	80046fc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2280      	movs	r2, #128	; 0x80
 8004622:	03d2      	lsls	r2, r2, #15
 8004624:	4313      	orrs	r3, r2
 8004626:	4a27      	ldr	r2, [pc, #156]	; (80046c4 <HAL_ADC_ConfigChannel+0x360>)
 8004628:	0019      	movs	r1, r3
 800462a:	0010      	movs	r0, r2
 800462c:	f7ff facc 	bl	8003bc8 <LL_ADC_SetCommonPathInternalCh>
 8004630:	e064      	b.n	80046fc <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	2380      	movs	r3, #128	; 0x80
 8004638:	061b      	lsls	r3, r3, #24
 800463a:	429a      	cmp	r2, r3
 800463c:	d004      	beq.n	8004648 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004642:	4a1f      	ldr	r2, [pc, #124]	; (80046c0 <HAL_ADC_ConfigChannel+0x35c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d107      	bne.n	8004658 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	0019      	movs	r1, r3
 8004652:	0010      	movs	r0, r2
 8004654:	f7ff fb4f 	bl	8003cf6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	da4d      	bge.n	80046fc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004660:	4b18      	ldr	r3, [pc, #96]	; (80046c4 <HAL_ADC_ConfigChannel+0x360>)
 8004662:	0018      	movs	r0, r3
 8004664:	f7ff fac4 	bl	8003bf0 <LL_ADC_GetCommonPathInternalCh>
 8004668:	0003      	movs	r3, r0
 800466a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a15      	ldr	r2, [pc, #84]	; (80046c8 <HAL_ADC_ConfigChannel+0x364>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d108      	bne.n	8004688 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	4a18      	ldr	r2, [pc, #96]	; (80046dc <HAL_ADC_ConfigChannel+0x378>)
 800467a:	4013      	ands	r3, r2
 800467c:	4a11      	ldr	r2, [pc, #68]	; (80046c4 <HAL_ADC_ConfigChannel+0x360>)
 800467e:	0019      	movs	r1, r3
 8004680:	0010      	movs	r0, r2
 8004682:	f7ff faa1 	bl	8003bc8 <LL_ADC_SetCommonPathInternalCh>
 8004686:	e039      	b.n	80046fc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a11      	ldr	r2, [pc, #68]	; (80046d4 <HAL_ADC_ConfigChannel+0x370>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d108      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	4a12      	ldr	r2, [pc, #72]	; (80046e0 <HAL_ADC_ConfigChannel+0x37c>)
 8004696:	4013      	ands	r3, r2
 8004698:	4a0a      	ldr	r2, [pc, #40]	; (80046c4 <HAL_ADC_ConfigChannel+0x360>)
 800469a:	0019      	movs	r1, r3
 800469c:	0010      	movs	r0, r2
 800469e:	f7ff fa93 	bl	8003bc8 <LL_ADC_SetCommonPathInternalCh>
 80046a2:	e02b      	b.n	80046fc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a0b      	ldr	r2, [pc, #44]	; (80046d8 <HAL_ADC_ConfigChannel+0x374>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d126      	bne.n	80046fc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	4a0c      	ldr	r2, [pc, #48]	; (80046e4 <HAL_ADC_ConfigChannel+0x380>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	4a03      	ldr	r2, [pc, #12]	; (80046c4 <HAL_ADC_ConfigChannel+0x360>)
 80046b6:	0019      	movs	r1, r3
 80046b8:	0010      	movs	r0, r2
 80046ba:	f7ff fa85 	bl	8003bc8 <LL_ADC_SetCommonPathInternalCh>
 80046be:	e01d      	b.n	80046fc <HAL_ADC_ConfigChannel+0x398>
 80046c0:	80000004 	.word	0x80000004
 80046c4:	40012708 	.word	0x40012708
 80046c8:	b0001000 	.word	0xb0001000
 80046cc:	20000000 	.word	0x20000000
 80046d0:	00030d40 	.word	0x00030d40
 80046d4:	b8004000 	.word	0xb8004000
 80046d8:	b4002000 	.word	0xb4002000
 80046dc:	ff7fffff 	.word	0xff7fffff
 80046e0:	feffffff 	.word	0xfeffffff
 80046e4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ec:	2220      	movs	r2, #32
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80046f4:	2317      	movs	r3, #23
 80046f6:	18fb      	adds	r3, r7, r3
 80046f8:	2201      	movs	r2, #1
 80046fa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2254      	movs	r2, #84	; 0x54
 8004700:	2100      	movs	r1, #0
 8004702:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004704:	2317      	movs	r3, #23
 8004706:	18fb      	adds	r3, r7, r3
 8004708:	781b      	ldrb	r3, [r3, #0]
}
 800470a:	0018      	movs	r0, r3
 800470c:	46bd      	mov	sp, r7
 800470e:	b006      	add	sp, #24
 8004710:	bd80      	pop	{r7, pc}
 8004712:	46c0      	nop			; (mov r8, r8)

08004714 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800471c:	2300      	movs	r3, #0
 800471e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	0018      	movs	r0, r3
 8004726:	f7ff fb61 	bl	8003dec <LL_ADC_IsEnabled>
 800472a:	1e03      	subs	r3, r0, #0
 800472c:	d000      	beq.n	8004730 <ADC_Enable+0x1c>
 800472e:	e069      	b.n	8004804 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	4a36      	ldr	r2, [pc, #216]	; (8004810 <ADC_Enable+0xfc>)
 8004738:	4013      	ands	r3, r2
 800473a:	d00d      	beq.n	8004758 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004740:	2210      	movs	r2, #16
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474c:	2201      	movs	r2, #1
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e056      	b.n	8004806 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	0018      	movs	r0, r3
 800475e:	f7ff fb21 	bl	8003da4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004762:	4b2c      	ldr	r3, [pc, #176]	; (8004814 <ADC_Enable+0x100>)
 8004764:	0018      	movs	r0, r3
 8004766:	f7ff fa43 	bl	8003bf0 <LL_ADC_GetCommonPathInternalCh>
 800476a:	0002      	movs	r2, r0
 800476c:	2380      	movs	r3, #128	; 0x80
 800476e:	041b      	lsls	r3, r3, #16
 8004770:	4013      	ands	r3, r2
 8004772:	d00f      	beq.n	8004794 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004774:	4b28      	ldr	r3, [pc, #160]	; (8004818 <ADC_Enable+0x104>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4928      	ldr	r1, [pc, #160]	; (800481c <ADC_Enable+0x108>)
 800477a:	0018      	movs	r0, r3
 800477c:	f7fb fcc2 	bl	8000104 <__udivsi3>
 8004780:	0003      	movs	r3, r0
 8004782:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004784:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004786:	e002      	b.n	800478e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	3b01      	subs	r3, #1
 800478c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1f9      	bne.n	8004788 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	7e5b      	ldrb	r3, [r3, #25]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d033      	beq.n	8004804 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800479c:	f7ff fa0a 	bl	8003bb4 <HAL_GetTick>
 80047a0:	0003      	movs	r3, r0
 80047a2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047a4:	e027      	b.n	80047f6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	0018      	movs	r0, r3
 80047ac:	f7ff fb1e 	bl	8003dec <LL_ADC_IsEnabled>
 80047b0:	1e03      	subs	r3, r0, #0
 80047b2:	d104      	bne.n	80047be <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	0018      	movs	r0, r3
 80047ba:	f7ff faf3 	bl	8003da4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047be:	f7ff f9f9 	bl	8003bb4 <HAL_GetTick>
 80047c2:	0002      	movs	r2, r0
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d914      	bls.n	80047f6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2201      	movs	r2, #1
 80047d4:	4013      	ands	r3, r2
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d00d      	beq.n	80047f6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047de:	2210      	movs	r2, #16
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ea:	2201      	movs	r2, #1
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e007      	b.n	8004806 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2201      	movs	r2, #1
 80047fe:	4013      	ands	r3, r2
 8004800:	2b01      	cmp	r3, #1
 8004802:	d1d0      	bne.n	80047a6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	0018      	movs	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	b004      	add	sp, #16
 800480c:	bd80      	pop	{r7, pc}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	80000017 	.word	0x80000017
 8004814:	40012708 	.word	0x40012708
 8004818:	20000000 	.word	0x20000000
 800481c:	00030d40 	.word	0x00030d40

08004820 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004832:	2250      	movs	r2, #80	; 0x50
 8004834:	4013      	ands	r3, r2
 8004836:	d142      	bne.n	80048be <ADC_DMAConvCplt+0x9e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483c:	2280      	movs	r2, #128	; 0x80
 800483e:	0092      	lsls	r2, r2, #2
 8004840:	431a      	orrs	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	0018      	movs	r0, r3
 800484c:	f7ff fa11 	bl	8003c72 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004850:	1e03      	subs	r3, r0, #0
 8004852:	d02e      	beq.n	80048b2 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	7e9b      	ldrb	r3, [r3, #26]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d12a      	bne.n	80048b2 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2208      	movs	r2, #8
 8004864:	4013      	ands	r3, r2
 8004866:	2b08      	cmp	r3, #8
 8004868:	d123      	bne.n	80048b2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	0018      	movs	r0, r3
 8004870:	f7ff fae0 	bl	8003e34 <LL_ADC_REG_IsConversionOngoing>
 8004874:	1e03      	subs	r3, r0, #0
 8004876:	d110      	bne.n	800489a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	210c      	movs	r1, #12
 8004884:	438a      	bics	r2, r1
 8004886:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488c:	4a16      	ldr	r2, [pc, #88]	; (80048e8 <ADC_DMAConvCplt+0xc8>)
 800488e:	4013      	ands	r3, r2
 8004890:	2201      	movs	r2, #1
 8004892:	431a      	orrs	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	659a      	str	r2, [r3, #88]	; 0x58
 8004898:	e00b      	b.n	80048b2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489e:	2220      	movs	r2, #32
 80048a0:	431a      	orrs	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048aa:	2201      	movs	r2, #1
 80048ac:	431a      	orrs	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	0010      	movs	r0, r2
 80048ba:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80048bc:	e010      	b.n	80048e0 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c2:	2210      	movs	r2, #16
 80048c4:	4013      	ands	r3, r2
 80048c6:	d005      	beq.n	80048d4 <ADC_DMAConvCplt+0xb4>
      hadc->ErrorCallback(hadc);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	0010      	movs	r0, r2
 80048d0:	4798      	blx	r3
}
 80048d2:	e005      	b.n	80048e0 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	0010      	movs	r0, r2
 80048de:	4798      	blx	r3
}
 80048e0:	46c0      	nop			; (mov r8, r8)
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b004      	add	sp, #16
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	fffffefe 	.word	0xfffffefe

080048ec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	0010      	movs	r0, r2
 8004902:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004904:	46c0      	nop			; (mov r8, r8)
 8004906:	46bd      	mov	sp, r7
 8004908:	b004      	add	sp, #16
 800490a:	bd80      	pop	{r7, pc}

0800490c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491e:	2240      	movs	r2, #64	; 0x40
 8004920:	431a      	orrs	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492a:	2204      	movs	r2, #4
 800492c:	431a      	orrs	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	0010      	movs	r0, r2
 800493a:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800493c:	46c0      	nop			; (mov r8, r8)
 800493e:	46bd      	mov	sp, r7
 8004940:	b004      	add	sp, #16
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800494c:	46c0      	nop			; (mov r8, r8)
 800494e:	46bd      	mov	sp, r7
 8004950:	b002      	add	sp, #8
 8004952:	bd80      	pop	{r7, pc}

08004954 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800495c:	46c0      	nop			; (mov r8, r8)
 800495e:	46bd      	mov	sp, r7
 8004960:	b002      	add	sp, #8
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800496c:	46c0      	nop			; (mov r8, r8)
 800496e:	46bd      	mov	sp, r7
 8004970:	b002      	add	sp, #8
 8004972:	bd80      	pop	{r7, pc}

08004974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	0002      	movs	r2, r0
 800497c:	1dfb      	adds	r3, r7, #7
 800497e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004980:	1dfb      	adds	r3, r7, #7
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b7f      	cmp	r3, #127	; 0x7f
 8004986:	d809      	bhi.n	800499c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004988:	1dfb      	adds	r3, r7, #7
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	001a      	movs	r2, r3
 800498e:	231f      	movs	r3, #31
 8004990:	401a      	ands	r2, r3
 8004992:	4b04      	ldr	r3, [pc, #16]	; (80049a4 <__NVIC_EnableIRQ+0x30>)
 8004994:	2101      	movs	r1, #1
 8004996:	4091      	lsls	r1, r2
 8004998:	000a      	movs	r2, r1
 800499a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800499c:	46c0      	nop			; (mov r8, r8)
 800499e:	46bd      	mov	sp, r7
 80049a0:	b002      	add	sp, #8
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	e000e100 	.word	0xe000e100

080049a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049a8:	b590      	push	{r4, r7, lr}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	0002      	movs	r2, r0
 80049b0:	6039      	str	r1, [r7, #0]
 80049b2:	1dfb      	adds	r3, r7, #7
 80049b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80049b6:	1dfb      	adds	r3, r7, #7
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	2b7f      	cmp	r3, #127	; 0x7f
 80049bc:	d828      	bhi.n	8004a10 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049be:	4a2f      	ldr	r2, [pc, #188]	; (8004a7c <__NVIC_SetPriority+0xd4>)
 80049c0:	1dfb      	adds	r3, r7, #7
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	b25b      	sxtb	r3, r3
 80049c6:	089b      	lsrs	r3, r3, #2
 80049c8:	33c0      	adds	r3, #192	; 0xc0
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	589b      	ldr	r3, [r3, r2]
 80049ce:	1dfa      	adds	r2, r7, #7
 80049d0:	7812      	ldrb	r2, [r2, #0]
 80049d2:	0011      	movs	r1, r2
 80049d4:	2203      	movs	r2, #3
 80049d6:	400a      	ands	r2, r1
 80049d8:	00d2      	lsls	r2, r2, #3
 80049da:	21ff      	movs	r1, #255	; 0xff
 80049dc:	4091      	lsls	r1, r2
 80049de:	000a      	movs	r2, r1
 80049e0:	43d2      	mvns	r2, r2
 80049e2:	401a      	ands	r2, r3
 80049e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	019b      	lsls	r3, r3, #6
 80049ea:	22ff      	movs	r2, #255	; 0xff
 80049ec:	401a      	ands	r2, r3
 80049ee:	1dfb      	adds	r3, r7, #7
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	0018      	movs	r0, r3
 80049f4:	2303      	movs	r3, #3
 80049f6:	4003      	ands	r3, r0
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049fc:	481f      	ldr	r0, [pc, #124]	; (8004a7c <__NVIC_SetPriority+0xd4>)
 80049fe:	1dfb      	adds	r3, r7, #7
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	b25b      	sxtb	r3, r3
 8004a04:	089b      	lsrs	r3, r3, #2
 8004a06:	430a      	orrs	r2, r1
 8004a08:	33c0      	adds	r3, #192	; 0xc0
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004a0e:	e031      	b.n	8004a74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a10:	4a1b      	ldr	r2, [pc, #108]	; (8004a80 <__NVIC_SetPriority+0xd8>)
 8004a12:	1dfb      	adds	r3, r7, #7
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	0019      	movs	r1, r3
 8004a18:	230f      	movs	r3, #15
 8004a1a:	400b      	ands	r3, r1
 8004a1c:	3b08      	subs	r3, #8
 8004a1e:	089b      	lsrs	r3, r3, #2
 8004a20:	3306      	adds	r3, #6
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	18d3      	adds	r3, r2, r3
 8004a26:	3304      	adds	r3, #4
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	1dfa      	adds	r2, r7, #7
 8004a2c:	7812      	ldrb	r2, [r2, #0]
 8004a2e:	0011      	movs	r1, r2
 8004a30:	2203      	movs	r2, #3
 8004a32:	400a      	ands	r2, r1
 8004a34:	00d2      	lsls	r2, r2, #3
 8004a36:	21ff      	movs	r1, #255	; 0xff
 8004a38:	4091      	lsls	r1, r2
 8004a3a:	000a      	movs	r2, r1
 8004a3c:	43d2      	mvns	r2, r2
 8004a3e:	401a      	ands	r2, r3
 8004a40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	019b      	lsls	r3, r3, #6
 8004a46:	22ff      	movs	r2, #255	; 0xff
 8004a48:	401a      	ands	r2, r3
 8004a4a:	1dfb      	adds	r3, r7, #7
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	0018      	movs	r0, r3
 8004a50:	2303      	movs	r3, #3
 8004a52:	4003      	ands	r3, r0
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a58:	4809      	ldr	r0, [pc, #36]	; (8004a80 <__NVIC_SetPriority+0xd8>)
 8004a5a:	1dfb      	adds	r3, r7, #7
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	001c      	movs	r4, r3
 8004a60:	230f      	movs	r3, #15
 8004a62:	4023      	ands	r3, r4
 8004a64:	3b08      	subs	r3, #8
 8004a66:	089b      	lsrs	r3, r3, #2
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	3306      	adds	r3, #6
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	18c3      	adds	r3, r0, r3
 8004a70:	3304      	adds	r3, #4
 8004a72:	601a      	str	r2, [r3, #0]
}
 8004a74:	46c0      	nop			; (mov r8, r8)
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b003      	add	sp, #12
 8004a7a:	bd90      	pop	{r4, r7, pc}
 8004a7c:	e000e100 	.word	0xe000e100
 8004a80:	e000ed00 	.word	0xe000ed00

08004a84 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	607a      	str	r2, [r7, #4]
 8004a8e:	210f      	movs	r1, #15
 8004a90:	187b      	adds	r3, r7, r1
 8004a92:	1c02      	adds	r2, r0, #0
 8004a94:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	187b      	adds	r3, r7, r1
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	b25b      	sxtb	r3, r3
 8004a9e:	0011      	movs	r1, r2
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f7ff ff81 	bl	80049a8 <__NVIC_SetPriority>
}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b004      	add	sp, #16
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b082      	sub	sp, #8
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	0002      	movs	r2, r0
 8004ab6:	1dfb      	adds	r3, r7, #7
 8004ab8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004aba:	1dfb      	adds	r3, r7, #7
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	b25b      	sxtb	r3, r3
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f7ff ff57 	bl	8004974 <__NVIC_EnableIRQ>
}
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b002      	add	sp, #8
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e077      	b.n	8004bd2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a3d      	ldr	r2, [pc, #244]	; (8004bdc <HAL_DMA_Init+0x10c>)
 8004ae8:	4694      	mov	ip, r2
 8004aea:	4463      	add	r3, ip
 8004aec:	2114      	movs	r1, #20
 8004aee:	0018      	movs	r0, r3
 8004af0:	f7fb fb08 	bl	8000104 <__udivsi3>
 8004af4:	0003      	movs	r3, r0
 8004af6:	009a      	lsls	r2, r3, #2
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2225      	movs	r2, #37	; 0x25
 8004b00:	2102      	movs	r1, #2
 8004b02:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4934      	ldr	r1, [pc, #208]	; (8004be0 <HAL_DMA_Init+0x110>)
 8004b10:	400a      	ands	r2, r1
 8004b12:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6819      	ldr	r1, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689a      	ldr	r2, [r3, #8]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f000 fa8d 	bl	800506c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	2380      	movs	r3, #128	; 0x80
 8004b58:	01db      	lsls	r3, r3, #7
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d102      	bne.n	8004b64 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6c:	213f      	movs	r1, #63	; 0x3f
 8004b6e:	400a      	ands	r2, r1
 8004b70:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004b7a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d011      	beq.n	8004ba8 <HAL_DMA_Init+0xd8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	d80d      	bhi.n	8004ba8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f000 fa98 	bl	80050c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004ba4:	605a      	str	r2, [r3, #4]
 8004ba6:	e008      	b.n	8004bba <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2225      	movs	r2, #37	; 0x25
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2224      	movs	r2, #36	; 0x24
 8004bcc:	2100      	movs	r1, #0
 8004bce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	b002      	add	sp, #8
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	bffdfff8 	.word	0xbffdfff8
 8004be0:	ffff800f 	.word	0xffff800f

08004be4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf2:	2317      	movs	r3, #23
 8004bf4:	18fb      	adds	r3, r7, r3
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2224      	movs	r2, #36	; 0x24
 8004bfe:	5c9b      	ldrb	r3, [r3, r2]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d101      	bne.n	8004c08 <HAL_DMA_Start_IT+0x24>
 8004c04:	2302      	movs	r3, #2
 8004c06:	e06f      	b.n	8004ce8 <HAL_DMA_Start_IT+0x104>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2224      	movs	r2, #36	; 0x24
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2225      	movs	r2, #37	; 0x25
 8004c14:	5c9b      	ldrb	r3, [r3, r2]
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d157      	bne.n	8004ccc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2225      	movs	r2, #37	; 0x25
 8004c20:	2102      	movs	r1, #2
 8004c22:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2101      	movs	r1, #1
 8004c36:	438a      	bics	r2, r1
 8004c38:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	68b9      	ldr	r1, [r7, #8]
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 f9d3 	bl	8004fec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d008      	beq.n	8004c60 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	210e      	movs	r1, #14
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	e00f      	b.n	8004c80 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2104      	movs	r1, #4
 8004c6c:	438a      	bics	r2, r1
 8004c6e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	210a      	movs	r1, #10
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	2380      	movs	r3, #128	; 0x80
 8004c88:	025b      	lsls	r3, r3, #9
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d008      	beq.n	8004ca0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c98:	2180      	movs	r1, #128	; 0x80
 8004c9a:	0049      	lsls	r1, r1, #1
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d008      	beq.n	8004cba <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb2:	2180      	movs	r1, #128	; 0x80
 8004cb4:	0049      	lsls	r1, r1, #1
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	e00a      	b.n	8004ce2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2280      	movs	r2, #128	; 0x80
 8004cd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2224      	movs	r2, #36	; 0x24
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8004cda:	2317      	movs	r3, #23
 8004cdc:	18fb      	adds	r3, r7, r3
 8004cde:	2201      	movs	r2, #1
 8004ce0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004ce2:	2317      	movs	r3, #23
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	781b      	ldrb	r3, [r3, #0]
}
 8004ce8:	0018      	movs	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b006      	add	sp, #24
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e050      	b.n	8004da4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2225      	movs	r2, #37	; 0x25
 8004d06:	5c9b      	ldrb	r3, [r3, r2]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d008      	beq.n	8004d20 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2204      	movs	r2, #4
 8004d12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2224      	movs	r2, #36	; 0x24
 8004d18:	2100      	movs	r1, #0
 8004d1a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e041      	b.n	8004da4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	210e      	movs	r1, #14
 8004d2c:	438a      	bics	r2, r1
 8004d2e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3a:	491c      	ldr	r1, [pc, #112]	; (8004dac <HAL_DMA_Abort+0xbc>)
 8004d3c:	400a      	ands	r2, r1
 8004d3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	438a      	bics	r2, r1
 8004d4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8004d50:	4b17      	ldr	r3, [pc, #92]	; (8004db0 <HAL_DMA_Abort+0xc0>)
 8004d52:	6859      	ldr	r1, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	221c      	movs	r2, #28
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	4b13      	ldr	r3, [pc, #76]	; (8004db0 <HAL_DMA_Abort+0xc0>)
 8004d62:	430a      	orrs	r2, r1
 8004d64:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004d6e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00c      	beq.n	8004d92 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d82:	490a      	ldr	r1, [pc, #40]	; (8004dac <HAL_DMA_Abort+0xbc>)
 8004d84:	400a      	ands	r2, r1
 8004d86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004d90:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2225      	movs	r2, #37	; 0x25
 8004d96:	2101      	movs	r1, #1
 8004d98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2224      	movs	r2, #36	; 0x24
 8004d9e:	2100      	movs	r1, #0
 8004da0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	0018      	movs	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	b002      	add	sp, #8
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	fffffeff 	.word	0xfffffeff
 8004db0:	40020000 	.word	0x40020000

08004db4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dbc:	210f      	movs	r1, #15
 8004dbe:	187b      	adds	r3, r7, r1
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2225      	movs	r2, #37	; 0x25
 8004dc8:	5c9b      	ldrb	r3, [r3, r2]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d006      	beq.n	8004dde <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2204      	movs	r2, #4
 8004dd4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004dd6:	187b      	adds	r3, r7, r1
 8004dd8:	2201      	movs	r2, #1
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	e049      	b.n	8004e72 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	210e      	movs	r1, #14
 8004dea:	438a      	bics	r2, r1
 8004dec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2101      	movs	r1, #1
 8004dfa:	438a      	bics	r2, r1
 8004dfc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e08:	491d      	ldr	r1, [pc, #116]	; (8004e80 <HAL_DMA_Abort_IT+0xcc>)
 8004e0a:	400a      	ands	r2, r1
 8004e0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8004e0e:	4b1d      	ldr	r3, [pc, #116]	; (8004e84 <HAL_DMA_Abort_IT+0xd0>)
 8004e10:	6859      	ldr	r1, [r3, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	221c      	movs	r2, #28
 8004e18:	4013      	ands	r3, r2
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	409a      	lsls	r2, r3
 8004e1e:	4b19      	ldr	r3, [pc, #100]	; (8004e84 <HAL_DMA_Abort_IT+0xd0>)
 8004e20:	430a      	orrs	r2, r1
 8004e22:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004e2c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00c      	beq.n	8004e50 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e40:	490f      	ldr	r1, [pc, #60]	; (8004e80 <HAL_DMA_Abort_IT+0xcc>)
 8004e42:	400a      	ands	r2, r1
 8004e44:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004e4e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2225      	movs	r2, #37	; 0x25
 8004e54:	2101      	movs	r1, #1
 8004e56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2224      	movs	r2, #36	; 0x24
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d004      	beq.n	8004e72 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	0010      	movs	r0, r2
 8004e70:	4798      	blx	r3
    }
  }
  return status;
 8004e72:	230f      	movs	r3, #15
 8004e74:	18fb      	adds	r3, r7, r3
 8004e76:	781b      	ldrb	r3, [r3, #0]
}
 8004e78:	0018      	movs	r0, r3
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	b004      	add	sp, #16
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	fffffeff 	.word	0xfffffeff
 8004e84:	40020000 	.word	0x40020000

08004e88 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8004e90:	4b55      	ldr	r3, [pc, #340]	; (8004fe8 <HAL_DMA_IRQHandler+0x160>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	221c      	movs	r2, #28
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	2204      	movs	r2, #4
 8004ea8:	409a      	lsls	r2, r3
 8004eaa:	0013      	movs	r3, r2
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	d027      	beq.n	8004f02 <HAL_DMA_IRQHandler+0x7a>
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2204      	movs	r2, #4
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	d023      	beq.n	8004f02 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	d107      	bne.n	8004ed6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2104      	movs	r1, #4
 8004ed2:	438a      	bics	r2, r1
 8004ed4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004ed6:	4b44      	ldr	r3, [pc, #272]	; (8004fe8 <HAL_DMA_IRQHandler+0x160>)
 8004ed8:	6859      	ldr	r1, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	221c      	movs	r2, #28
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	2204      	movs	r2, #4
 8004ee4:	409a      	lsls	r2, r3
 8004ee6:	4b40      	ldr	r3, [pc, #256]	; (8004fe8 <HAL_DMA_IRQHandler+0x160>)
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d100      	bne.n	8004ef6 <HAL_DMA_IRQHandler+0x6e>
 8004ef4:	e073      	b.n	8004fde <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	0010      	movs	r0, r2
 8004efe:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004f00:	e06d      	b.n	8004fde <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	221c      	movs	r2, #28
 8004f08:	4013      	ands	r3, r2
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	409a      	lsls	r2, r3
 8004f0e:	0013      	movs	r3, r2
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4013      	ands	r3, r2
 8004f14:	d02e      	beq.n	8004f74 <HAL_DMA_IRQHandler+0xec>
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2202      	movs	r2, #2
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	d02a      	beq.n	8004f74 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2220      	movs	r2, #32
 8004f26:	4013      	ands	r3, r2
 8004f28:	d10b      	bne.n	8004f42 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	210a      	movs	r1, #10
 8004f36:	438a      	bics	r2, r1
 8004f38:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2225      	movs	r2, #37	; 0x25
 8004f3e:	2101      	movs	r1, #1
 8004f40:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004f42:	4b29      	ldr	r3, [pc, #164]	; (8004fe8 <HAL_DMA_IRQHandler+0x160>)
 8004f44:	6859      	ldr	r1, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	221c      	movs	r2, #28
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	2202      	movs	r2, #2
 8004f50:	409a      	lsls	r2, r3
 8004f52:	4b25      	ldr	r3, [pc, #148]	; (8004fe8 <HAL_DMA_IRQHandler+0x160>)
 8004f54:	430a      	orrs	r2, r1
 8004f56:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2224      	movs	r2, #36	; 0x24
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d03a      	beq.n	8004fde <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	0010      	movs	r0, r2
 8004f70:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004f72:	e034      	b.n	8004fde <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	221c      	movs	r2, #28
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2208      	movs	r2, #8
 8004f7e:	409a      	lsls	r2, r3
 8004f80:	0013      	movs	r3, r2
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4013      	ands	r3, r2
 8004f86:	d02b      	beq.n	8004fe0 <HAL_DMA_IRQHandler+0x158>
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2208      	movs	r2, #8
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	d027      	beq.n	8004fe0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	210e      	movs	r1, #14
 8004f9c:	438a      	bics	r2, r1
 8004f9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004fa0:	4b11      	ldr	r3, [pc, #68]	; (8004fe8 <HAL_DMA_IRQHandler+0x160>)
 8004fa2:	6859      	ldr	r1, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa8:	221c      	movs	r2, #28
 8004faa:	4013      	ands	r3, r2
 8004fac:	2201      	movs	r2, #1
 8004fae:	409a      	lsls	r2, r3
 8004fb0:	4b0d      	ldr	r3, [pc, #52]	; (8004fe8 <HAL_DMA_IRQHandler+0x160>)
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2225      	movs	r2, #37	; 0x25
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2224      	movs	r2, #36	; 0x24
 8004fc8:	2100      	movs	r1, #0
 8004fca:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	0010      	movs	r0, r2
 8004fdc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	46c0      	nop			; (mov r8, r8)
}
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	b004      	add	sp, #16
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40020000 	.word	0x40020000

08004fec <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005002:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005008:	2b00      	cmp	r3, #0
 800500a:	d004      	beq.n	8005016 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005014:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005016:	4b14      	ldr	r3, [pc, #80]	; (8005068 <DMA_SetConfig+0x7c>)
 8005018:	6859      	ldr	r1, [r3, #4]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	221c      	movs	r2, #28
 8005020:	4013      	ands	r3, r2
 8005022:	2201      	movs	r2, #1
 8005024:	409a      	lsls	r2, r3
 8005026:	4b10      	ldr	r3, [pc, #64]	; (8005068 <DMA_SetConfig+0x7c>)
 8005028:	430a      	orrs	r2, r1
 800502a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	2b10      	cmp	r3, #16
 800503a:	d108      	bne.n	800504e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800504c:	e007      	b.n	800505e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	60da      	str	r2, [r3, #12]
}
 800505e:	46c0      	nop			; (mov r8, r8)
 8005060:	46bd      	mov	sp, r7
 8005062:	b004      	add	sp, #16
 8005064:	bd80      	pop	{r7, pc}
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	40020000 	.word	0x40020000

0800506c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005078:	089b      	lsrs	r3, r3, #2
 800507a:	4a10      	ldr	r2, [pc, #64]	; (80050bc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800507c:	4694      	mov	ip, r2
 800507e:	4463      	add	r3, ip
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	001a      	movs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	001a      	movs	r2, r3
 800508e:	23ff      	movs	r3, #255	; 0xff
 8005090:	4013      	ands	r3, r2
 8005092:	3b08      	subs	r3, #8
 8005094:	2114      	movs	r1, #20
 8005096:	0018      	movs	r0, r3
 8005098:	f7fb f834 	bl	8000104 <__udivsi3>
 800509c:	0003      	movs	r3, r0
 800509e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a07      	ldr	r2, [pc, #28]	; (80050c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80050a4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	221f      	movs	r2, #31
 80050aa:	4013      	ands	r3, r2
 80050ac:	2201      	movs	r2, #1
 80050ae:	409a      	lsls	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80050b4:	46c0      	nop			; (mov r8, r8)
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b004      	add	sp, #16
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	10008200 	.word	0x10008200
 80050c0:	40020880 	.word	0x40020880

080050c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	223f      	movs	r2, #63	; 0x3f
 80050d2:	4013      	ands	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4a0a      	ldr	r2, [pc, #40]	; (8005104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80050da:	4694      	mov	ip, r2
 80050dc:	4463      	add	r3, ip
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	001a      	movs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a07      	ldr	r2, [pc, #28]	; (8005108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80050ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	2203      	movs	r2, #3
 80050f2:	4013      	ands	r3, r2
 80050f4:	2201      	movs	r2, #1
 80050f6:	409a      	lsls	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	659a      	str	r2, [r3, #88]	; 0x58
}
 80050fc:	46c0      	nop			; (mov r8, r8)
 80050fe:	46bd      	mov	sp, r7
 8005100:	b004      	add	sp, #16
 8005102:	bd80      	pop	{r7, pc}
 8005104:	1000823f 	.word	0x1000823f
 8005108:	40020940 	.word	0x40020940

0800510c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005116:	2300      	movs	r3, #0
 8005118:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800511a:	e147      	b.n	80053ac <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2101      	movs	r1, #1
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4091      	lsls	r1, r2
 8005126:	000a      	movs	r2, r1
 8005128:	4013      	ands	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d100      	bne.n	8005134 <HAL_GPIO_Init+0x28>
 8005132:	e138      	b.n	80053a6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2203      	movs	r2, #3
 800513a:	4013      	ands	r3, r2
 800513c:	2b01      	cmp	r3, #1
 800513e:	d005      	beq.n	800514c <HAL_GPIO_Init+0x40>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2203      	movs	r2, #3
 8005146:	4013      	ands	r3, r2
 8005148:	2b02      	cmp	r3, #2
 800514a:	d130      	bne.n	80051ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	2203      	movs	r2, #3
 8005158:	409a      	lsls	r2, r3
 800515a:	0013      	movs	r3, r2
 800515c:	43da      	mvns	r2, r3
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	4013      	ands	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	005b      	lsls	r3, r3, #1
 800516c:	409a      	lsls	r2, r3
 800516e:	0013      	movs	r3, r2
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005182:	2201      	movs	r2, #1
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	409a      	lsls	r2, r3
 8005188:	0013      	movs	r3, r2
 800518a:	43da      	mvns	r2, r3
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	4013      	ands	r3, r2
 8005190:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	091b      	lsrs	r3, r3, #4
 8005198:	2201      	movs	r2, #1
 800519a:	401a      	ands	r2, r3
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	409a      	lsls	r2, r3
 80051a0:	0013      	movs	r3, r2
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2203      	movs	r2, #3
 80051b4:	4013      	ands	r3, r2
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d017      	beq.n	80051ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	2203      	movs	r2, #3
 80051c6:	409a      	lsls	r2, r3
 80051c8:	0013      	movs	r3, r2
 80051ca:	43da      	mvns	r2, r3
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	4013      	ands	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	409a      	lsls	r2, r3
 80051dc:	0013      	movs	r3, r2
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2203      	movs	r2, #3
 80051f0:	4013      	ands	r3, r2
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d123      	bne.n	800523e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	08da      	lsrs	r2, r3, #3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	3208      	adds	r2, #8
 80051fe:	0092      	lsls	r2, r2, #2
 8005200:	58d3      	ldr	r3, [r2, r3]
 8005202:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	2207      	movs	r2, #7
 8005208:	4013      	ands	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	220f      	movs	r2, #15
 800520e:	409a      	lsls	r2, r3
 8005210:	0013      	movs	r3, r2
 8005212:	43da      	mvns	r2, r3
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	4013      	ands	r3, r2
 8005218:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	691a      	ldr	r2, [r3, #16]
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2107      	movs	r1, #7
 8005222:	400b      	ands	r3, r1
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	409a      	lsls	r2, r3
 8005228:	0013      	movs	r3, r2
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	08da      	lsrs	r2, r3, #3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3208      	adds	r2, #8
 8005238:	0092      	lsls	r2, r2, #2
 800523a:	6939      	ldr	r1, [r7, #16]
 800523c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	2203      	movs	r2, #3
 800524a:	409a      	lsls	r2, r3
 800524c:	0013      	movs	r3, r2
 800524e:	43da      	mvns	r2, r3
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	4013      	ands	r3, r2
 8005254:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2203      	movs	r2, #3
 800525c:	401a      	ands	r2, r3
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	409a      	lsls	r2, r3
 8005264:	0013      	movs	r3, r2
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	23c0      	movs	r3, #192	; 0xc0
 8005278:	029b      	lsls	r3, r3, #10
 800527a:	4013      	ands	r3, r2
 800527c:	d100      	bne.n	8005280 <HAL_GPIO_Init+0x174>
 800527e:	e092      	b.n	80053a6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005280:	4a50      	ldr	r2, [pc, #320]	; (80053c4 <HAL_GPIO_Init+0x2b8>)
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	089b      	lsrs	r3, r3, #2
 8005286:	3318      	adds	r3, #24
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	589b      	ldr	r3, [r3, r2]
 800528c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2203      	movs	r2, #3
 8005292:	4013      	ands	r3, r2
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	220f      	movs	r2, #15
 8005298:	409a      	lsls	r2, r3
 800529a:	0013      	movs	r3, r2
 800529c:	43da      	mvns	r2, r3
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	4013      	ands	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	23a0      	movs	r3, #160	; 0xa0
 80052a8:	05db      	lsls	r3, r3, #23
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d013      	beq.n	80052d6 <HAL_GPIO_Init+0x1ca>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a45      	ldr	r2, [pc, #276]	; (80053c8 <HAL_GPIO_Init+0x2bc>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d00d      	beq.n	80052d2 <HAL_GPIO_Init+0x1c6>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a44      	ldr	r2, [pc, #272]	; (80053cc <HAL_GPIO_Init+0x2c0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d007      	beq.n	80052ce <HAL_GPIO_Init+0x1c2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a43      	ldr	r2, [pc, #268]	; (80053d0 <HAL_GPIO_Init+0x2c4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d101      	bne.n	80052ca <HAL_GPIO_Init+0x1be>
 80052c6:	2303      	movs	r3, #3
 80052c8:	e006      	b.n	80052d8 <HAL_GPIO_Init+0x1cc>
 80052ca:	2305      	movs	r3, #5
 80052cc:	e004      	b.n	80052d8 <HAL_GPIO_Init+0x1cc>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e002      	b.n	80052d8 <HAL_GPIO_Init+0x1cc>
 80052d2:	2301      	movs	r3, #1
 80052d4:	e000      	b.n	80052d8 <HAL_GPIO_Init+0x1cc>
 80052d6:	2300      	movs	r3, #0
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	2103      	movs	r1, #3
 80052dc:	400a      	ands	r2, r1
 80052de:	00d2      	lsls	r2, r2, #3
 80052e0:	4093      	lsls	r3, r2
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80052e8:	4936      	ldr	r1, [pc, #216]	; (80053c4 <HAL_GPIO_Init+0x2b8>)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	089b      	lsrs	r3, r3, #2
 80052ee:	3318      	adds	r3, #24
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052f6:	4b33      	ldr	r3, [pc, #204]	; (80053c4 <HAL_GPIO_Init+0x2b8>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	43da      	mvns	r2, r3
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	4013      	ands	r3, r2
 8005304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	2380      	movs	r3, #128	; 0x80
 800530c:	035b      	lsls	r3, r3, #13
 800530e:	4013      	ands	r3, r2
 8005310:	d003      	beq.n	800531a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800531a:	4b2a      	ldr	r3, [pc, #168]	; (80053c4 <HAL_GPIO_Init+0x2b8>)
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005320:	4b28      	ldr	r3, [pc, #160]	; (80053c4 <HAL_GPIO_Init+0x2b8>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	43da      	mvns	r2, r3
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4013      	ands	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	2380      	movs	r3, #128	; 0x80
 8005336:	039b      	lsls	r3, r3, #14
 8005338:	4013      	ands	r3, r2
 800533a:	d003      	beq.n	8005344 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005344:	4b1f      	ldr	r3, [pc, #124]	; (80053c4 <HAL_GPIO_Init+0x2b8>)
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800534a:	4a1e      	ldr	r2, [pc, #120]	; (80053c4 <HAL_GPIO_Init+0x2b8>)
 800534c:	2384      	movs	r3, #132	; 0x84
 800534e:	58d3      	ldr	r3, [r2, r3]
 8005350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	43da      	mvns	r2, r3
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	4013      	ands	r3, r2
 800535a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	2380      	movs	r3, #128	; 0x80
 8005362:	029b      	lsls	r3, r3, #10
 8005364:	4013      	ands	r3, r2
 8005366:	d003      	beq.n	8005370 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005370:	4914      	ldr	r1, [pc, #80]	; (80053c4 <HAL_GPIO_Init+0x2b8>)
 8005372:	2284      	movs	r2, #132	; 0x84
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005378:	4a12      	ldr	r2, [pc, #72]	; (80053c4 <HAL_GPIO_Init+0x2b8>)
 800537a:	2380      	movs	r3, #128	; 0x80
 800537c:	58d3      	ldr	r3, [r2, r3]
 800537e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	43da      	mvns	r2, r3
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	4013      	ands	r3, r2
 8005388:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	2380      	movs	r3, #128	; 0x80
 8005390:	025b      	lsls	r3, r3, #9
 8005392:	4013      	ands	r3, r2
 8005394:	d003      	beq.n	800539e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800539e:	4909      	ldr	r1, [pc, #36]	; (80053c4 <HAL_GPIO_Init+0x2b8>)
 80053a0:	2280      	movs	r2, #128	; 0x80
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	3301      	adds	r3, #1
 80053aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	40da      	lsrs	r2, r3
 80053b4:	1e13      	subs	r3, r2, #0
 80053b6:	d000      	beq.n	80053ba <HAL_GPIO_Init+0x2ae>
 80053b8:	e6b0      	b.n	800511c <HAL_GPIO_Init+0x10>
  }
}
 80053ba:	46c0      	nop			; (mov r8, r8)
 80053bc:	46c0      	nop			; (mov r8, r8)
 80053be:	46bd      	mov	sp, r7
 80053c0:	b006      	add	sp, #24
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40021800 	.word	0x40021800
 80053c8:	50000400 	.word	0x50000400
 80053cc:	50000800 	.word	0x50000800
 80053d0:	50000c00 	.word	0x50000c00

080053d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	0008      	movs	r0, r1
 80053de:	0011      	movs	r1, r2
 80053e0:	1cbb      	adds	r3, r7, #2
 80053e2:	1c02      	adds	r2, r0, #0
 80053e4:	801a      	strh	r2, [r3, #0]
 80053e6:	1c7b      	adds	r3, r7, #1
 80053e8:	1c0a      	adds	r2, r1, #0
 80053ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053ec:	1c7b      	adds	r3, r7, #1
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d004      	beq.n	80053fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053f4:	1cbb      	adds	r3, r7, #2
 80053f6:	881a      	ldrh	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053fc:	e003      	b.n	8005406 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053fe:	1cbb      	adds	r3, r7, #2
 8005400:	881a      	ldrh	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	46bd      	mov	sp, r7
 800540a:	b002      	add	sp, #8
 800540c:	bd80      	pop	{r7, pc}
	...

08005410 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005418:	4b19      	ldr	r3, [pc, #100]	; (8005480 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a19      	ldr	r2, [pc, #100]	; (8005484 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800541e:	4013      	ands	r3, r2
 8005420:	0019      	movs	r1, r3
 8005422:	4b17      	ldr	r3, [pc, #92]	; (8005480 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	430a      	orrs	r2, r1
 8005428:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	429a      	cmp	r2, r3
 8005432:	d11f      	bne.n	8005474 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005434:	4b14      	ldr	r3, [pc, #80]	; (8005488 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	0013      	movs	r3, r2
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	189b      	adds	r3, r3, r2
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	4912      	ldr	r1, [pc, #72]	; (800548c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005442:	0018      	movs	r0, r3
 8005444:	f7fa fe5e 	bl	8000104 <__udivsi3>
 8005448:	0003      	movs	r3, r0
 800544a:	3301      	adds	r3, #1
 800544c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800544e:	e008      	b.n	8005462 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3b01      	subs	r3, #1
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	e001      	b.n	8005462 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e009      	b.n	8005476 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005462:	4b07      	ldr	r3, [pc, #28]	; (8005480 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005464:	695a      	ldr	r2, [r3, #20]
 8005466:	2380      	movs	r3, #128	; 0x80
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	401a      	ands	r2, r3
 800546c:	2380      	movs	r3, #128	; 0x80
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	429a      	cmp	r2, r3
 8005472:	d0ed      	beq.n	8005450 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	0018      	movs	r0, r3
 8005478:	46bd      	mov	sp, r7
 800547a:	b004      	add	sp, #16
 800547c:	bd80      	pop	{r7, pc}
 800547e:	46c0      	nop			; (mov r8, r8)
 8005480:	40007000 	.word	0x40007000
 8005484:	fffff9ff 	.word	0xfffff9ff
 8005488:	20000000 	.word	0x20000000
 800548c:	000f4240 	.word	0x000f4240

08005490 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005494:	4b03      	ldr	r3, [pc, #12]	; (80054a4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	23e0      	movs	r3, #224	; 0xe0
 800549a:	01db      	lsls	r3, r3, #7
 800549c:	4013      	ands	r3, r2
}
 800549e:	0018      	movs	r0, r3
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40021000 	.word	0x40021000

080054a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e2fe      	b.n	8005ab8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2201      	movs	r2, #1
 80054c0:	4013      	ands	r3, r2
 80054c2:	d100      	bne.n	80054c6 <HAL_RCC_OscConfig+0x1e>
 80054c4:	e07c      	b.n	80055c0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054c6:	4bc3      	ldr	r3, [pc, #780]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	2238      	movs	r2, #56	; 0x38
 80054cc:	4013      	ands	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054d0:	4bc0      	ldr	r3, [pc, #768]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	2203      	movs	r2, #3
 80054d6:	4013      	ands	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	2b10      	cmp	r3, #16
 80054de:	d102      	bne.n	80054e6 <HAL_RCC_OscConfig+0x3e>
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d002      	beq.n	80054ec <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d10b      	bne.n	8005504 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054ec:	4bb9      	ldr	r3, [pc, #740]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	2380      	movs	r3, #128	; 0x80
 80054f2:	029b      	lsls	r3, r3, #10
 80054f4:	4013      	ands	r3, r2
 80054f6:	d062      	beq.n	80055be <HAL_RCC_OscConfig+0x116>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d15e      	bne.n	80055be <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e2d9      	b.n	8005ab8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	025b      	lsls	r3, r3, #9
 800550c:	429a      	cmp	r2, r3
 800550e:	d107      	bne.n	8005520 <HAL_RCC_OscConfig+0x78>
 8005510:	4bb0      	ldr	r3, [pc, #704]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	4baf      	ldr	r3, [pc, #700]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 8005516:	2180      	movs	r1, #128	; 0x80
 8005518:	0249      	lsls	r1, r1, #9
 800551a:	430a      	orrs	r2, r1
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	e020      	b.n	8005562 <HAL_RCC_OscConfig+0xba>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	23a0      	movs	r3, #160	; 0xa0
 8005526:	02db      	lsls	r3, r3, #11
 8005528:	429a      	cmp	r2, r3
 800552a:	d10e      	bne.n	800554a <HAL_RCC_OscConfig+0xa2>
 800552c:	4ba9      	ldr	r3, [pc, #676]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	4ba8      	ldr	r3, [pc, #672]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 8005532:	2180      	movs	r1, #128	; 0x80
 8005534:	02c9      	lsls	r1, r1, #11
 8005536:	430a      	orrs	r2, r1
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	4ba6      	ldr	r3, [pc, #664]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	4ba5      	ldr	r3, [pc, #660]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 8005540:	2180      	movs	r1, #128	; 0x80
 8005542:	0249      	lsls	r1, r1, #9
 8005544:	430a      	orrs	r2, r1
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	e00b      	b.n	8005562 <HAL_RCC_OscConfig+0xba>
 800554a:	4ba2      	ldr	r3, [pc, #648]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	4ba1      	ldr	r3, [pc, #644]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 8005550:	49a1      	ldr	r1, [pc, #644]	; (80057d8 <HAL_RCC_OscConfig+0x330>)
 8005552:	400a      	ands	r2, r1
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	4b9f      	ldr	r3, [pc, #636]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	4b9e      	ldr	r3, [pc, #632]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 800555c:	499f      	ldr	r1, [pc, #636]	; (80057dc <HAL_RCC_OscConfig+0x334>)
 800555e:	400a      	ands	r2, r1
 8005560:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d014      	beq.n	8005594 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556a:	f7fe fb23 	bl	8003bb4 <HAL_GetTick>
 800556e:	0003      	movs	r3, r0
 8005570:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005574:	f7fe fb1e 	bl	8003bb4 <HAL_GetTick>
 8005578:	0002      	movs	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b64      	cmp	r3, #100	; 0x64
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e298      	b.n	8005ab8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005586:	4b93      	ldr	r3, [pc, #588]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	2380      	movs	r3, #128	; 0x80
 800558c:	029b      	lsls	r3, r3, #10
 800558e:	4013      	ands	r3, r2
 8005590:	d0f0      	beq.n	8005574 <HAL_RCC_OscConfig+0xcc>
 8005592:	e015      	b.n	80055c0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005594:	f7fe fb0e 	bl	8003bb4 <HAL_GetTick>
 8005598:	0003      	movs	r3, r0
 800559a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800559c:	e008      	b.n	80055b0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800559e:	f7fe fb09 	bl	8003bb4 <HAL_GetTick>
 80055a2:	0002      	movs	r2, r0
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b64      	cmp	r3, #100	; 0x64
 80055aa:	d901      	bls.n	80055b0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e283      	b.n	8005ab8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055b0:	4b88      	ldr	r3, [pc, #544]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	2380      	movs	r3, #128	; 0x80
 80055b6:	029b      	lsls	r3, r3, #10
 80055b8:	4013      	ands	r3, r2
 80055ba:	d1f0      	bne.n	800559e <HAL_RCC_OscConfig+0xf6>
 80055bc:	e000      	b.n	80055c0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2202      	movs	r2, #2
 80055c6:	4013      	ands	r3, r2
 80055c8:	d100      	bne.n	80055cc <HAL_RCC_OscConfig+0x124>
 80055ca:	e099      	b.n	8005700 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055cc:	4b81      	ldr	r3, [pc, #516]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	2238      	movs	r2, #56	; 0x38
 80055d2:	4013      	ands	r3, r2
 80055d4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055d6:	4b7f      	ldr	r3, [pc, #508]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	2203      	movs	r2, #3
 80055dc:	4013      	ands	r3, r2
 80055de:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	2b10      	cmp	r3, #16
 80055e4:	d102      	bne.n	80055ec <HAL_RCC_OscConfig+0x144>
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d002      	beq.n	80055f2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d135      	bne.n	800565e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055f2:	4b78      	ldr	r3, [pc, #480]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	2380      	movs	r3, #128	; 0x80
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	4013      	ands	r3, r2
 80055fc:	d005      	beq.n	800560a <HAL_RCC_OscConfig+0x162>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e256      	b.n	8005ab8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800560a:	4b72      	ldr	r3, [pc, #456]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	4a74      	ldr	r2, [pc, #464]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 8005610:	4013      	ands	r3, r2
 8005612:	0019      	movs	r1, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	021a      	lsls	r2, r3, #8
 800561a:	4b6e      	ldr	r3, [pc, #440]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 800561c:	430a      	orrs	r2, r1
 800561e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d112      	bne.n	800564c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005626:	4b6b      	ldr	r3, [pc, #428]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a6e      	ldr	r2, [pc, #440]	; (80057e4 <HAL_RCC_OscConfig+0x33c>)
 800562c:	4013      	ands	r3, r2
 800562e:	0019      	movs	r1, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	4b67      	ldr	r3, [pc, #412]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 8005636:	430a      	orrs	r2, r1
 8005638:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800563a:	4b66      	ldr	r3, [pc, #408]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	0adb      	lsrs	r3, r3, #11
 8005640:	2207      	movs	r2, #7
 8005642:	4013      	ands	r3, r2
 8005644:	4a68      	ldr	r2, [pc, #416]	; (80057e8 <HAL_RCC_OscConfig+0x340>)
 8005646:	40da      	lsrs	r2, r3
 8005648:	4b68      	ldr	r3, [pc, #416]	; (80057ec <HAL_RCC_OscConfig+0x344>)
 800564a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800564c:	4b68      	ldr	r3, [pc, #416]	; (80057f0 <HAL_RCC_OscConfig+0x348>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	0018      	movs	r0, r3
 8005652:	f7fe f93b 	bl	80038cc <HAL_InitTick>
 8005656:	1e03      	subs	r3, r0, #0
 8005658:	d051      	beq.n	80056fe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e22c      	b.n	8005ab8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d030      	beq.n	80056c8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005666:	4b5b      	ldr	r3, [pc, #364]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a5e      	ldr	r2, [pc, #376]	; (80057e4 <HAL_RCC_OscConfig+0x33c>)
 800566c:	4013      	ands	r3, r2
 800566e:	0019      	movs	r1, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691a      	ldr	r2, [r3, #16]
 8005674:	4b57      	ldr	r3, [pc, #348]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 8005676:	430a      	orrs	r2, r1
 8005678:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800567a:	4b56      	ldr	r3, [pc, #344]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	4b55      	ldr	r3, [pc, #340]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 8005680:	2180      	movs	r1, #128	; 0x80
 8005682:	0049      	lsls	r1, r1, #1
 8005684:	430a      	orrs	r2, r1
 8005686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005688:	f7fe fa94 	bl	8003bb4 <HAL_GetTick>
 800568c:	0003      	movs	r3, r0
 800568e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005690:	e008      	b.n	80056a4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005692:	f7fe fa8f 	bl	8003bb4 <HAL_GetTick>
 8005696:	0002      	movs	r2, r0
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d901      	bls.n	80056a4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e209      	b.n	8005ab8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056a4:	4b4b      	ldr	r3, [pc, #300]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	2380      	movs	r3, #128	; 0x80
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	4013      	ands	r3, r2
 80056ae:	d0f0      	beq.n	8005692 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b0:	4b48      	ldr	r3, [pc, #288]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	4a4a      	ldr	r2, [pc, #296]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 80056b6:	4013      	ands	r3, r2
 80056b8:	0019      	movs	r1, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	021a      	lsls	r2, r3, #8
 80056c0:	4b44      	ldr	r3, [pc, #272]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 80056c2:	430a      	orrs	r2, r1
 80056c4:	605a      	str	r2, [r3, #4]
 80056c6:	e01b      	b.n	8005700 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80056c8:	4b42      	ldr	r3, [pc, #264]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	4b41      	ldr	r3, [pc, #260]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 80056ce:	4949      	ldr	r1, [pc, #292]	; (80057f4 <HAL_RCC_OscConfig+0x34c>)
 80056d0:	400a      	ands	r2, r1
 80056d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d4:	f7fe fa6e 	bl	8003bb4 <HAL_GetTick>
 80056d8:	0003      	movs	r3, r0
 80056da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056dc:	e008      	b.n	80056f0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056de:	f7fe fa69 	bl	8003bb4 <HAL_GetTick>
 80056e2:	0002      	movs	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e1e3      	b.n	8005ab8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056f0:	4b38      	ldr	r3, [pc, #224]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	2380      	movs	r3, #128	; 0x80
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	4013      	ands	r3, r2
 80056fa:	d1f0      	bne.n	80056de <HAL_RCC_OscConfig+0x236>
 80056fc:	e000      	b.n	8005700 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2208      	movs	r2, #8
 8005706:	4013      	ands	r3, r2
 8005708:	d047      	beq.n	800579a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800570a:	4b32      	ldr	r3, [pc, #200]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	2238      	movs	r2, #56	; 0x38
 8005710:	4013      	ands	r3, r2
 8005712:	2b18      	cmp	r3, #24
 8005714:	d10a      	bne.n	800572c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005716:	4b2f      	ldr	r3, [pc, #188]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 8005718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800571a:	2202      	movs	r2, #2
 800571c:	4013      	ands	r3, r2
 800571e:	d03c      	beq.n	800579a <HAL_RCC_OscConfig+0x2f2>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d138      	bne.n	800579a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e1c5      	b.n	8005ab8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d019      	beq.n	8005768 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005734:	4b27      	ldr	r3, [pc, #156]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 8005736:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005738:	4b26      	ldr	r3, [pc, #152]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 800573a:	2101      	movs	r1, #1
 800573c:	430a      	orrs	r2, r1
 800573e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005740:	f7fe fa38 	bl	8003bb4 <HAL_GetTick>
 8005744:	0003      	movs	r3, r0
 8005746:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005748:	e008      	b.n	800575c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800574a:	f7fe fa33 	bl	8003bb4 <HAL_GetTick>
 800574e:	0002      	movs	r2, r0
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d901      	bls.n	800575c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e1ad      	b.n	8005ab8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800575c:	4b1d      	ldr	r3, [pc, #116]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 800575e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005760:	2202      	movs	r2, #2
 8005762:	4013      	ands	r3, r2
 8005764:	d0f1      	beq.n	800574a <HAL_RCC_OscConfig+0x2a2>
 8005766:	e018      	b.n	800579a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005768:	4b1a      	ldr	r3, [pc, #104]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 800576a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800576c:	4b19      	ldr	r3, [pc, #100]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 800576e:	2101      	movs	r1, #1
 8005770:	438a      	bics	r2, r1
 8005772:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005774:	f7fe fa1e 	bl	8003bb4 <HAL_GetTick>
 8005778:	0003      	movs	r3, r0
 800577a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800577c:	e008      	b.n	8005790 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800577e:	f7fe fa19 	bl	8003bb4 <HAL_GetTick>
 8005782:	0002      	movs	r2, r0
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e193      	b.n	8005ab8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005790:	4b10      	ldr	r3, [pc, #64]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 8005792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005794:	2202      	movs	r2, #2
 8005796:	4013      	ands	r3, r2
 8005798:	d1f1      	bne.n	800577e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2204      	movs	r2, #4
 80057a0:	4013      	ands	r3, r2
 80057a2:	d100      	bne.n	80057a6 <HAL_RCC_OscConfig+0x2fe>
 80057a4:	e0c6      	b.n	8005934 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057a6:	231f      	movs	r3, #31
 80057a8:	18fb      	adds	r3, r7, r3
 80057aa:	2200      	movs	r2, #0
 80057ac:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80057ae:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	2238      	movs	r2, #56	; 0x38
 80057b4:	4013      	ands	r3, r2
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d11e      	bne.n	80057f8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80057ba:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <HAL_RCC_OscConfig+0x32c>)
 80057bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057be:	2202      	movs	r2, #2
 80057c0:	4013      	ands	r3, r2
 80057c2:	d100      	bne.n	80057c6 <HAL_RCC_OscConfig+0x31e>
 80057c4:	e0b6      	b.n	8005934 <HAL_RCC_OscConfig+0x48c>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d000      	beq.n	80057d0 <HAL_RCC_OscConfig+0x328>
 80057ce:	e0b1      	b.n	8005934 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e171      	b.n	8005ab8 <HAL_RCC_OscConfig+0x610>
 80057d4:	40021000 	.word	0x40021000
 80057d8:	fffeffff 	.word	0xfffeffff
 80057dc:	fffbffff 	.word	0xfffbffff
 80057e0:	ffff80ff 	.word	0xffff80ff
 80057e4:	ffffc7ff 	.word	0xffffc7ff
 80057e8:	00f42400 	.word	0x00f42400
 80057ec:	20000000 	.word	0x20000000
 80057f0:	20000004 	.word	0x20000004
 80057f4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057f8:	4bb1      	ldr	r3, [pc, #708]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 80057fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057fc:	2380      	movs	r3, #128	; 0x80
 80057fe:	055b      	lsls	r3, r3, #21
 8005800:	4013      	ands	r3, r2
 8005802:	d101      	bne.n	8005808 <HAL_RCC_OscConfig+0x360>
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <HAL_RCC_OscConfig+0x362>
 8005808:	2300      	movs	r3, #0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d011      	beq.n	8005832 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800580e:	4bac      	ldr	r3, [pc, #688]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 8005810:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005812:	4bab      	ldr	r3, [pc, #684]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 8005814:	2180      	movs	r1, #128	; 0x80
 8005816:	0549      	lsls	r1, r1, #21
 8005818:	430a      	orrs	r2, r1
 800581a:	63da      	str	r2, [r3, #60]	; 0x3c
 800581c:	4ba8      	ldr	r3, [pc, #672]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 800581e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005820:	2380      	movs	r3, #128	; 0x80
 8005822:	055b      	lsls	r3, r3, #21
 8005824:	4013      	ands	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800582a:	231f      	movs	r3, #31
 800582c:	18fb      	adds	r3, r7, r3
 800582e:	2201      	movs	r2, #1
 8005830:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005832:	4ba4      	ldr	r3, [pc, #656]	; (8005ac4 <HAL_RCC_OscConfig+0x61c>)
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	2380      	movs	r3, #128	; 0x80
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	4013      	ands	r3, r2
 800583c:	d11a      	bne.n	8005874 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800583e:	4ba1      	ldr	r3, [pc, #644]	; (8005ac4 <HAL_RCC_OscConfig+0x61c>)
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	4ba0      	ldr	r3, [pc, #640]	; (8005ac4 <HAL_RCC_OscConfig+0x61c>)
 8005844:	2180      	movs	r1, #128	; 0x80
 8005846:	0049      	lsls	r1, r1, #1
 8005848:	430a      	orrs	r2, r1
 800584a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800584c:	f7fe f9b2 	bl	8003bb4 <HAL_GetTick>
 8005850:	0003      	movs	r3, r0
 8005852:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005854:	e008      	b.n	8005868 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005856:	f7fe f9ad 	bl	8003bb4 <HAL_GetTick>
 800585a:	0002      	movs	r2, r0
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	2b02      	cmp	r3, #2
 8005862:	d901      	bls.n	8005868 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e127      	b.n	8005ab8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005868:	4b96      	ldr	r3, [pc, #600]	; (8005ac4 <HAL_RCC_OscConfig+0x61c>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	2380      	movs	r3, #128	; 0x80
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	4013      	ands	r3, r2
 8005872:	d0f0      	beq.n	8005856 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d106      	bne.n	800588a <HAL_RCC_OscConfig+0x3e2>
 800587c:	4b90      	ldr	r3, [pc, #576]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 800587e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005880:	4b8f      	ldr	r3, [pc, #572]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 8005882:	2101      	movs	r1, #1
 8005884:	430a      	orrs	r2, r1
 8005886:	65da      	str	r2, [r3, #92]	; 0x5c
 8005888:	e01c      	b.n	80058c4 <HAL_RCC_OscConfig+0x41c>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	2b05      	cmp	r3, #5
 8005890:	d10c      	bne.n	80058ac <HAL_RCC_OscConfig+0x404>
 8005892:	4b8b      	ldr	r3, [pc, #556]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 8005894:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005896:	4b8a      	ldr	r3, [pc, #552]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 8005898:	2104      	movs	r1, #4
 800589a:	430a      	orrs	r2, r1
 800589c:	65da      	str	r2, [r3, #92]	; 0x5c
 800589e:	4b88      	ldr	r3, [pc, #544]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 80058a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058a2:	4b87      	ldr	r3, [pc, #540]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 80058a4:	2101      	movs	r1, #1
 80058a6:	430a      	orrs	r2, r1
 80058a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80058aa:	e00b      	b.n	80058c4 <HAL_RCC_OscConfig+0x41c>
 80058ac:	4b84      	ldr	r3, [pc, #528]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 80058ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058b0:	4b83      	ldr	r3, [pc, #524]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 80058b2:	2101      	movs	r1, #1
 80058b4:	438a      	bics	r2, r1
 80058b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80058b8:	4b81      	ldr	r3, [pc, #516]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 80058ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058bc:	4b80      	ldr	r3, [pc, #512]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 80058be:	2104      	movs	r1, #4
 80058c0:	438a      	bics	r2, r1
 80058c2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d014      	beq.n	80058f6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058cc:	f7fe f972 	bl	8003bb4 <HAL_GetTick>
 80058d0:	0003      	movs	r3, r0
 80058d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058d4:	e009      	b.n	80058ea <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058d6:	f7fe f96d 	bl	8003bb4 <HAL_GetTick>
 80058da:	0002      	movs	r2, r0
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	4a79      	ldr	r2, [pc, #484]	; (8005ac8 <HAL_RCC_OscConfig+0x620>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e0e6      	b.n	8005ab8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ea:	4b75      	ldr	r3, [pc, #468]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 80058ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ee:	2202      	movs	r2, #2
 80058f0:	4013      	ands	r3, r2
 80058f2:	d0f0      	beq.n	80058d6 <HAL_RCC_OscConfig+0x42e>
 80058f4:	e013      	b.n	800591e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f6:	f7fe f95d 	bl	8003bb4 <HAL_GetTick>
 80058fa:	0003      	movs	r3, r0
 80058fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058fe:	e009      	b.n	8005914 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005900:	f7fe f958 	bl	8003bb4 <HAL_GetTick>
 8005904:	0002      	movs	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	4a6f      	ldr	r2, [pc, #444]	; (8005ac8 <HAL_RCC_OscConfig+0x620>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e0d1      	b.n	8005ab8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005914:	4b6a      	ldr	r3, [pc, #424]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 8005916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005918:	2202      	movs	r2, #2
 800591a:	4013      	ands	r3, r2
 800591c:	d1f0      	bne.n	8005900 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800591e:	231f      	movs	r3, #31
 8005920:	18fb      	adds	r3, r7, r3
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d105      	bne.n	8005934 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005928:	4b65      	ldr	r3, [pc, #404]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 800592a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800592c:	4b64      	ldr	r3, [pc, #400]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 800592e:	4967      	ldr	r1, [pc, #412]	; (8005acc <HAL_RCC_OscConfig+0x624>)
 8005930:	400a      	ands	r2, r1
 8005932:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d100      	bne.n	800593e <HAL_RCC_OscConfig+0x496>
 800593c:	e0bb      	b.n	8005ab6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800593e:	4b60      	ldr	r3, [pc, #384]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	2238      	movs	r2, #56	; 0x38
 8005944:	4013      	ands	r3, r2
 8005946:	2b10      	cmp	r3, #16
 8005948:	d100      	bne.n	800594c <HAL_RCC_OscConfig+0x4a4>
 800594a:	e07b      	b.n	8005a44 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	2b02      	cmp	r3, #2
 8005952:	d156      	bne.n	8005a02 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005954:	4b5a      	ldr	r3, [pc, #360]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	4b59      	ldr	r3, [pc, #356]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 800595a:	495d      	ldr	r1, [pc, #372]	; (8005ad0 <HAL_RCC_OscConfig+0x628>)
 800595c:	400a      	ands	r2, r1
 800595e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005960:	f7fe f928 	bl	8003bb4 <HAL_GetTick>
 8005964:	0003      	movs	r3, r0
 8005966:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005968:	e008      	b.n	800597c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800596a:	f7fe f923 	bl	8003bb4 <HAL_GetTick>
 800596e:	0002      	movs	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e09d      	b.n	8005ab8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800597c:	4b50      	ldr	r3, [pc, #320]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	2380      	movs	r3, #128	; 0x80
 8005982:	049b      	lsls	r3, r3, #18
 8005984:	4013      	ands	r3, r2
 8005986:	d1f0      	bne.n	800596a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005988:	4b4d      	ldr	r3, [pc, #308]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	4a51      	ldr	r2, [pc, #324]	; (8005ad4 <HAL_RCC_OscConfig+0x62c>)
 800598e:	4013      	ands	r3, r2
 8005990:	0019      	movs	r1, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1a      	ldr	r2, [r3, #32]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a0:	021b      	lsls	r3, r3, #8
 80059a2:	431a      	orrs	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a8:	431a      	orrs	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b4:	431a      	orrs	r2, r3
 80059b6:	4b42      	ldr	r3, [pc, #264]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 80059b8:	430a      	orrs	r2, r1
 80059ba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059bc:	4b40      	ldr	r3, [pc, #256]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	4b3f      	ldr	r3, [pc, #252]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 80059c2:	2180      	movs	r1, #128	; 0x80
 80059c4:	0449      	lsls	r1, r1, #17
 80059c6:	430a      	orrs	r2, r1
 80059c8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80059ca:	4b3d      	ldr	r3, [pc, #244]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 80059cc:	68da      	ldr	r2, [r3, #12]
 80059ce:	4b3c      	ldr	r3, [pc, #240]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 80059d0:	2180      	movs	r1, #128	; 0x80
 80059d2:	0549      	lsls	r1, r1, #21
 80059d4:	430a      	orrs	r2, r1
 80059d6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d8:	f7fe f8ec 	bl	8003bb4 <HAL_GetTick>
 80059dc:	0003      	movs	r3, r0
 80059de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059e0:	e008      	b.n	80059f4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e2:	f7fe f8e7 	bl	8003bb4 <HAL_GetTick>
 80059e6:	0002      	movs	r2, r0
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e061      	b.n	8005ab8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059f4:	4b32      	ldr	r3, [pc, #200]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	2380      	movs	r3, #128	; 0x80
 80059fa:	049b      	lsls	r3, r3, #18
 80059fc:	4013      	ands	r3, r2
 80059fe:	d0f0      	beq.n	80059e2 <HAL_RCC_OscConfig+0x53a>
 8005a00:	e059      	b.n	8005ab6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a02:	4b2f      	ldr	r3, [pc, #188]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	4b2e      	ldr	r3, [pc, #184]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 8005a08:	4931      	ldr	r1, [pc, #196]	; (8005ad0 <HAL_RCC_OscConfig+0x628>)
 8005a0a:	400a      	ands	r2, r1
 8005a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0e:	f7fe f8d1 	bl	8003bb4 <HAL_GetTick>
 8005a12:	0003      	movs	r3, r0
 8005a14:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a18:	f7fe f8cc 	bl	8003bb4 <HAL_GetTick>
 8005a1c:	0002      	movs	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e046      	b.n	8005ab8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a2a:	4b25      	ldr	r3, [pc, #148]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	2380      	movs	r3, #128	; 0x80
 8005a30:	049b      	lsls	r3, r3, #18
 8005a32:	4013      	ands	r3, r2
 8005a34:	d1f0      	bne.n	8005a18 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005a36:	4b22      	ldr	r3, [pc, #136]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	4b21      	ldr	r3, [pc, #132]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 8005a3c:	4926      	ldr	r1, [pc, #152]	; (8005ad8 <HAL_RCC_OscConfig+0x630>)
 8005a3e:	400a      	ands	r2, r1
 8005a40:	60da      	str	r2, [r3, #12]
 8005a42:	e038      	b.n	8005ab6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d101      	bne.n	8005a50 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e033      	b.n	8005ab8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005a50:	4b1b      	ldr	r3, [pc, #108]	; (8005ac0 <HAL_RCC_OscConfig+0x618>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2203      	movs	r2, #3
 8005a5a:	401a      	ands	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a1b      	ldr	r3, [r3, #32]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d126      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	2270      	movs	r2, #112	; 0x70
 8005a68:	401a      	ands	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d11f      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	23fe      	movs	r3, #254	; 0xfe
 8005a76:	01db      	lsls	r3, r3, #7
 8005a78:	401a      	ands	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d116      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	23f8      	movs	r3, #248	; 0xf8
 8005a88:	039b      	lsls	r3, r3, #14
 8005a8a:	401a      	ands	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d10e      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	23e0      	movs	r3, #224	; 0xe0
 8005a98:	051b      	lsls	r3, r3, #20
 8005a9a:	401a      	ands	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d106      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	0f5b      	lsrs	r3, r3, #29
 8005aa8:	075a      	lsls	r2, r3, #29
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d001      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e000      	b.n	8005ab8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	0018      	movs	r0, r3
 8005aba:	46bd      	mov	sp, r7
 8005abc:	b008      	add	sp, #32
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	40007000 	.word	0x40007000
 8005ac8:	00001388 	.word	0x00001388
 8005acc:	efffffff 	.word	0xefffffff
 8005ad0:	feffffff 	.word	0xfeffffff
 8005ad4:	11c1808c 	.word	0x11c1808c
 8005ad8:	eefefffc 	.word	0xeefefffc

08005adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e0e9      	b.n	8005cc4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005af0:	4b76      	ldr	r3, [pc, #472]	; (8005ccc <HAL_RCC_ClockConfig+0x1f0>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2207      	movs	r2, #7
 8005af6:	4013      	ands	r3, r2
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d91e      	bls.n	8005b3c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005afe:	4b73      	ldr	r3, [pc, #460]	; (8005ccc <HAL_RCC_ClockConfig+0x1f0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2207      	movs	r2, #7
 8005b04:	4393      	bics	r3, r2
 8005b06:	0019      	movs	r1, r3
 8005b08:	4b70      	ldr	r3, [pc, #448]	; (8005ccc <HAL_RCC_ClockConfig+0x1f0>)
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b10:	f7fe f850 	bl	8003bb4 <HAL_GetTick>
 8005b14:	0003      	movs	r3, r0
 8005b16:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b18:	e009      	b.n	8005b2e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b1a:	f7fe f84b 	bl	8003bb4 <HAL_GetTick>
 8005b1e:	0002      	movs	r2, r0
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	4a6a      	ldr	r2, [pc, #424]	; (8005cd0 <HAL_RCC_ClockConfig+0x1f4>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e0ca      	b.n	8005cc4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b2e:	4b67      	ldr	r3, [pc, #412]	; (8005ccc <HAL_RCC_ClockConfig+0x1f0>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2207      	movs	r2, #7
 8005b34:	4013      	ands	r3, r2
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d1ee      	bne.n	8005b1a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2202      	movs	r2, #2
 8005b42:	4013      	ands	r3, r2
 8005b44:	d015      	beq.n	8005b72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2204      	movs	r2, #4
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	d006      	beq.n	8005b5e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005b50:	4b60      	ldr	r3, [pc, #384]	; (8005cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	4b5f      	ldr	r3, [pc, #380]	; (8005cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8005b56:	21e0      	movs	r1, #224	; 0xe0
 8005b58:	01c9      	lsls	r1, r1, #7
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b5e:	4b5d      	ldr	r3, [pc, #372]	; (8005cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	4a5d      	ldr	r2, [pc, #372]	; (8005cd8 <HAL_RCC_ClockConfig+0x1fc>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	0019      	movs	r1, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	4b59      	ldr	r3, [pc, #356]	; (8005cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2201      	movs	r2, #1
 8005b78:	4013      	ands	r3, r2
 8005b7a:	d057      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d107      	bne.n	8005b94 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b84:	4b53      	ldr	r3, [pc, #332]	; (8005cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	2380      	movs	r3, #128	; 0x80
 8005b8a:	029b      	lsls	r3, r3, #10
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	d12b      	bne.n	8005be8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e097      	b.n	8005cc4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d107      	bne.n	8005bac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b9c:	4b4d      	ldr	r3, [pc, #308]	; (8005cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	2380      	movs	r3, #128	; 0x80
 8005ba2:	049b      	lsls	r3, r3, #18
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	d11f      	bne.n	8005be8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e08b      	b.n	8005cc4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d107      	bne.n	8005bc4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bb4:	4b47      	ldr	r3, [pc, #284]	; (8005cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	2380      	movs	r3, #128	; 0x80
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	d113      	bne.n	8005be8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e07f      	b.n	8005cc4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2b03      	cmp	r3, #3
 8005bca:	d106      	bne.n	8005bda <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bcc:	4b41      	ldr	r3, [pc, #260]	; (8005cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8005bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd0:	2202      	movs	r2, #2
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	d108      	bne.n	8005be8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e074      	b.n	8005cc4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bda:	4b3e      	ldr	r3, [pc, #248]	; (8005cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8005bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bde:	2202      	movs	r2, #2
 8005be0:	4013      	ands	r3, r2
 8005be2:	d101      	bne.n	8005be8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e06d      	b.n	8005cc4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005be8:	4b3a      	ldr	r3, [pc, #232]	; (8005cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	2207      	movs	r2, #7
 8005bee:	4393      	bics	r3, r2
 8005bf0:	0019      	movs	r1, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	4b37      	ldr	r3, [pc, #220]	; (8005cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bfc:	f7fd ffda 	bl	8003bb4 <HAL_GetTick>
 8005c00:	0003      	movs	r3, r0
 8005c02:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c04:	e009      	b.n	8005c1a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c06:	f7fd ffd5 	bl	8003bb4 <HAL_GetTick>
 8005c0a:	0002      	movs	r2, r0
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	4a2f      	ldr	r2, [pc, #188]	; (8005cd0 <HAL_RCC_ClockConfig+0x1f4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e054      	b.n	8005cc4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c1a:	4b2e      	ldr	r3, [pc, #184]	; (8005cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	2238      	movs	r2, #56	; 0x38
 8005c20:	401a      	ands	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d1ec      	bne.n	8005c06 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c2c:	4b27      	ldr	r3, [pc, #156]	; (8005ccc <HAL_RCC_ClockConfig+0x1f0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2207      	movs	r2, #7
 8005c32:	4013      	ands	r3, r2
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d21e      	bcs.n	8005c78 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c3a:	4b24      	ldr	r3, [pc, #144]	; (8005ccc <HAL_RCC_ClockConfig+0x1f0>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2207      	movs	r2, #7
 8005c40:	4393      	bics	r3, r2
 8005c42:	0019      	movs	r1, r3
 8005c44:	4b21      	ldr	r3, [pc, #132]	; (8005ccc <HAL_RCC_ClockConfig+0x1f0>)
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c4c:	f7fd ffb2 	bl	8003bb4 <HAL_GetTick>
 8005c50:	0003      	movs	r3, r0
 8005c52:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c54:	e009      	b.n	8005c6a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c56:	f7fd ffad 	bl	8003bb4 <HAL_GetTick>
 8005c5a:	0002      	movs	r2, r0
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	4a1b      	ldr	r2, [pc, #108]	; (8005cd0 <HAL_RCC_ClockConfig+0x1f4>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e02c      	b.n	8005cc4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c6a:	4b18      	ldr	r3, [pc, #96]	; (8005ccc <HAL_RCC_ClockConfig+0x1f0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2207      	movs	r2, #7
 8005c70:	4013      	ands	r3, r2
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d1ee      	bne.n	8005c56 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2204      	movs	r2, #4
 8005c7e:	4013      	ands	r3, r2
 8005c80:	d009      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005c82:	4b14      	ldr	r3, [pc, #80]	; (8005cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	4a15      	ldr	r2, [pc, #84]	; (8005cdc <HAL_RCC_ClockConfig+0x200>)
 8005c88:	4013      	ands	r3, r2
 8005c8a:	0019      	movs	r1, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	4b10      	ldr	r3, [pc, #64]	; (8005cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8005c92:	430a      	orrs	r2, r1
 8005c94:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005c96:	f000 f829 	bl	8005cec <HAL_RCC_GetSysClockFreq>
 8005c9a:	0001      	movs	r1, r0
 8005c9c:	4b0d      	ldr	r3, [pc, #52]	; (8005cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	0a1b      	lsrs	r3, r3, #8
 8005ca2:	220f      	movs	r2, #15
 8005ca4:	401a      	ands	r2, r3
 8005ca6:	4b0e      	ldr	r3, [pc, #56]	; (8005ce0 <HAL_RCC_ClockConfig+0x204>)
 8005ca8:	0092      	lsls	r2, r2, #2
 8005caa:	58d3      	ldr	r3, [r2, r3]
 8005cac:	221f      	movs	r2, #31
 8005cae:	4013      	ands	r3, r2
 8005cb0:	000a      	movs	r2, r1
 8005cb2:	40da      	lsrs	r2, r3
 8005cb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <HAL_RCC_ClockConfig+0x208>)
 8005cb6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005cb8:	4b0b      	ldr	r3, [pc, #44]	; (8005ce8 <HAL_RCC_ClockConfig+0x20c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	0018      	movs	r0, r3
 8005cbe:	f7fd fe05 	bl	80038cc <HAL_InitTick>
 8005cc2:	0003      	movs	r3, r0
}
 8005cc4:	0018      	movs	r0, r3
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	b004      	add	sp, #16
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	40022000 	.word	0x40022000
 8005cd0:	00001388 	.word	0x00001388
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	fffff0ff 	.word	0xfffff0ff
 8005cdc:	ffff8fff 	.word	0xffff8fff
 8005ce0:	08009a70 	.word	0x08009a70
 8005ce4:	20000000 	.word	0x20000000
 8005ce8:	20000004 	.word	0x20000004

08005cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cf2:	4b3c      	ldr	r3, [pc, #240]	; (8005de4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	2238      	movs	r2, #56	; 0x38
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	d10f      	bne.n	8005d1c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005cfc:	4b39      	ldr	r3, [pc, #228]	; (8005de4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	0adb      	lsrs	r3, r3, #11
 8005d02:	2207      	movs	r2, #7
 8005d04:	4013      	ands	r3, r2
 8005d06:	2201      	movs	r2, #1
 8005d08:	409a      	lsls	r2, r3
 8005d0a:	0013      	movs	r3, r2
 8005d0c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005d0e:	6839      	ldr	r1, [r7, #0]
 8005d10:	4835      	ldr	r0, [pc, #212]	; (8005de8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005d12:	f7fa f9f7 	bl	8000104 <__udivsi3>
 8005d16:	0003      	movs	r3, r0
 8005d18:	613b      	str	r3, [r7, #16]
 8005d1a:	e05d      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d1c:	4b31      	ldr	r3, [pc, #196]	; (8005de4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	2238      	movs	r2, #56	; 0x38
 8005d22:	4013      	ands	r3, r2
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d102      	bne.n	8005d2e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d28:	4b30      	ldr	r3, [pc, #192]	; (8005dec <HAL_RCC_GetSysClockFreq+0x100>)
 8005d2a:	613b      	str	r3, [r7, #16]
 8005d2c:	e054      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d2e:	4b2d      	ldr	r3, [pc, #180]	; (8005de4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	2238      	movs	r2, #56	; 0x38
 8005d34:	4013      	ands	r3, r2
 8005d36:	2b10      	cmp	r3, #16
 8005d38:	d138      	bne.n	8005dac <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005d3a:	4b2a      	ldr	r3, [pc, #168]	; (8005de4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	2203      	movs	r2, #3
 8005d40:	4013      	ands	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d44:	4b27      	ldr	r3, [pc, #156]	; (8005de4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	091b      	lsrs	r3, r3, #4
 8005d4a:	2207      	movs	r2, #7
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	3301      	adds	r3, #1
 8005d50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d10d      	bne.n	8005d74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d58:	68b9      	ldr	r1, [r7, #8]
 8005d5a:	4824      	ldr	r0, [pc, #144]	; (8005dec <HAL_RCC_GetSysClockFreq+0x100>)
 8005d5c:	f7fa f9d2 	bl	8000104 <__udivsi3>
 8005d60:	0003      	movs	r3, r0
 8005d62:	0019      	movs	r1, r3
 8005d64:	4b1f      	ldr	r3, [pc, #124]	; (8005de4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	0a1b      	lsrs	r3, r3, #8
 8005d6a:	227f      	movs	r2, #127	; 0x7f
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	434b      	muls	r3, r1
 8005d70:	617b      	str	r3, [r7, #20]
        break;
 8005d72:	e00d      	b.n	8005d90 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005d74:	68b9      	ldr	r1, [r7, #8]
 8005d76:	481c      	ldr	r0, [pc, #112]	; (8005de8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005d78:	f7fa f9c4 	bl	8000104 <__udivsi3>
 8005d7c:	0003      	movs	r3, r0
 8005d7e:	0019      	movs	r1, r3
 8005d80:	4b18      	ldr	r3, [pc, #96]	; (8005de4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	0a1b      	lsrs	r3, r3, #8
 8005d86:	227f      	movs	r2, #127	; 0x7f
 8005d88:	4013      	ands	r3, r2
 8005d8a:	434b      	muls	r3, r1
 8005d8c:	617b      	str	r3, [r7, #20]
        break;
 8005d8e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005d90:	4b14      	ldr	r3, [pc, #80]	; (8005de4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	0f5b      	lsrs	r3, r3, #29
 8005d96:	2207      	movs	r2, #7
 8005d98:	4013      	ands	r3, r2
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	6978      	ldr	r0, [r7, #20]
 8005da2:	f7fa f9af 	bl	8000104 <__udivsi3>
 8005da6:	0003      	movs	r3, r0
 8005da8:	613b      	str	r3, [r7, #16]
 8005daa:	e015      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005dac:	4b0d      	ldr	r3, [pc, #52]	; (8005de4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	2238      	movs	r2, #56	; 0x38
 8005db2:	4013      	ands	r3, r2
 8005db4:	2b20      	cmp	r3, #32
 8005db6:	d103      	bne.n	8005dc0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005db8:	2380      	movs	r3, #128	; 0x80
 8005dba:	021b      	lsls	r3, r3, #8
 8005dbc:	613b      	str	r3, [r7, #16]
 8005dbe:	e00b      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005dc0:	4b08      	ldr	r3, [pc, #32]	; (8005de4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	2238      	movs	r2, #56	; 0x38
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	2b18      	cmp	r3, #24
 8005dca:	d103      	bne.n	8005dd4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005dcc:	23fa      	movs	r3, #250	; 0xfa
 8005dce:	01db      	lsls	r3, r3, #7
 8005dd0:	613b      	str	r3, [r7, #16]
 8005dd2:	e001      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005dd8:	693b      	ldr	r3, [r7, #16]
}
 8005dda:	0018      	movs	r0, r3
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	b006      	add	sp, #24
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	46c0      	nop			; (mov r8, r8)
 8005de4:	40021000 	.word	0x40021000
 8005de8:	00f42400 	.word	0x00f42400
 8005dec:	007a1200 	.word	0x007a1200

08005df0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005df4:	4b02      	ldr	r3, [pc, #8]	; (8005e00 <HAL_RCC_GetHCLKFreq+0x10>)
 8005df6:	681b      	ldr	r3, [r3, #0]
}
 8005df8:	0018      	movs	r0, r3
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	20000000 	.word	0x20000000

08005e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e04:	b5b0      	push	{r4, r5, r7, lr}
 8005e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005e08:	f7ff fff2 	bl	8005df0 <HAL_RCC_GetHCLKFreq>
 8005e0c:	0004      	movs	r4, r0
 8005e0e:	f7ff fb3f 	bl	8005490 <LL_RCC_GetAPB1Prescaler>
 8005e12:	0003      	movs	r3, r0
 8005e14:	0b1a      	lsrs	r2, r3, #12
 8005e16:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e18:	0092      	lsls	r2, r2, #2
 8005e1a:	58d3      	ldr	r3, [r2, r3]
 8005e1c:	221f      	movs	r2, #31
 8005e1e:	4013      	ands	r3, r2
 8005e20:	40dc      	lsrs	r4, r3
 8005e22:	0023      	movs	r3, r4
}
 8005e24:	0018      	movs	r0, r3
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bdb0      	pop	{r4, r5, r7, pc}
 8005e2a:	46c0      	nop			; (mov r8, r8)
 8005e2c:	08009ab0 	.word	0x08009ab0

08005e30 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2207      	movs	r2, #7
 8005e3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e40:	4b0e      	ldr	r3, [pc, #56]	; (8005e7c <HAL_RCC_GetClockConfig+0x4c>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	2207      	movs	r2, #7
 8005e46:	401a      	ands	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e4c:	4b0b      	ldr	r3, [pc, #44]	; (8005e7c <HAL_RCC_GetClockConfig+0x4c>)
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	23f0      	movs	r3, #240	; 0xf0
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	401a      	ands	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8005e5a:	4b08      	ldr	r3, [pc, #32]	; (8005e7c <HAL_RCC_GetClockConfig+0x4c>)
 8005e5c:	689a      	ldr	r2, [r3, #8]
 8005e5e:	23e0      	movs	r3, #224	; 0xe0
 8005e60:	01db      	lsls	r3, r3, #7
 8005e62:	401a      	ands	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e68:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <HAL_RCC_GetClockConfig+0x50>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2207      	movs	r2, #7
 8005e6e:	401a      	ands	r2, r3
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	601a      	str	r2, [r3, #0]
}
 8005e74:	46c0      	nop			; (mov r8, r8)
 8005e76:	46bd      	mov	sp, r7
 8005e78:	b002      	add	sp, #8
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	40021000 	.word	0x40021000
 8005e80:	40022000 	.word	0x40022000

08005e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005e8c:	2313      	movs	r3, #19
 8005e8e:	18fb      	adds	r3, r7, r3
 8005e90:	2200      	movs	r2, #0
 8005e92:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e94:	2312      	movs	r3, #18
 8005e96:	18fb      	adds	r3, r7, r3
 8005e98:	2200      	movs	r2, #0
 8005e9a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	2380      	movs	r3, #128	; 0x80
 8005ea2:	029b      	lsls	r3, r3, #10
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d100      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005ea8:	e0a3      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eaa:	2011      	movs	r0, #17
 8005eac:	183b      	adds	r3, r7, r0
 8005eae:	2200      	movs	r2, #0
 8005eb0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eb2:	4bc3      	ldr	r3, [pc, #780]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005eb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eb6:	2380      	movs	r3, #128	; 0x80
 8005eb8:	055b      	lsls	r3, r3, #21
 8005eba:	4013      	ands	r3, r2
 8005ebc:	d110      	bne.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ebe:	4bc0      	ldr	r3, [pc, #768]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ec0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ec2:	4bbf      	ldr	r3, [pc, #764]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ec4:	2180      	movs	r1, #128	; 0x80
 8005ec6:	0549      	lsls	r1, r1, #21
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	63da      	str	r2, [r3, #60]	; 0x3c
 8005ecc:	4bbc      	ldr	r3, [pc, #752]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ece:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ed0:	2380      	movs	r3, #128	; 0x80
 8005ed2:	055b      	lsls	r3, r3, #21
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	60bb      	str	r3, [r7, #8]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eda:	183b      	adds	r3, r7, r0
 8005edc:	2201      	movs	r2, #1
 8005ede:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ee0:	4bb8      	ldr	r3, [pc, #736]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	4bb7      	ldr	r3, [pc, #732]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005ee6:	2180      	movs	r1, #128	; 0x80
 8005ee8:	0049      	lsls	r1, r1, #1
 8005eea:	430a      	orrs	r2, r1
 8005eec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005eee:	f7fd fe61 	bl	8003bb4 <HAL_GetTick>
 8005ef2:	0003      	movs	r3, r0
 8005ef4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ef6:	e00b      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ef8:	f7fd fe5c 	bl	8003bb4 <HAL_GetTick>
 8005efc:	0002      	movs	r2, r0
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d904      	bls.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005f06:	2313      	movs	r3, #19
 8005f08:	18fb      	adds	r3, r7, r3
 8005f0a:	2203      	movs	r2, #3
 8005f0c:	701a      	strb	r2, [r3, #0]
        break;
 8005f0e:	e005      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f10:	4bac      	ldr	r3, [pc, #688]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	2380      	movs	r3, #128	; 0x80
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	4013      	ands	r3, r2
 8005f1a:	d0ed      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005f1c:	2313      	movs	r3, #19
 8005f1e:	18fb      	adds	r3, r7, r3
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d154      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f26:	4ba6      	ldr	r3, [pc, #664]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f2a:	23c0      	movs	r3, #192	; 0xc0
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4013      	ands	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d019      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d014      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f42:	4b9f      	ldr	r3, [pc, #636]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f46:	4aa0      	ldr	r2, [pc, #640]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005f48:	4013      	ands	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f4c:	4b9c      	ldr	r3, [pc, #624]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f50:	4b9b      	ldr	r3, [pc, #620]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f52:	2180      	movs	r1, #128	; 0x80
 8005f54:	0249      	lsls	r1, r1, #9
 8005f56:	430a      	orrs	r2, r1
 8005f58:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f5a:	4b99      	ldr	r3, [pc, #612]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f5e:	4b98      	ldr	r3, [pc, #608]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f60:	499a      	ldr	r1, [pc, #616]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005f62:	400a      	ands	r2, r1
 8005f64:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f66:	4b96      	ldr	r3, [pc, #600]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	4013      	ands	r3, r2
 8005f72:	d016      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f74:	f7fd fe1e 	bl	8003bb4 <HAL_GetTick>
 8005f78:	0003      	movs	r3, r0
 8005f7a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f7c:	e00c      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f7e:	f7fd fe19 	bl	8003bb4 <HAL_GetTick>
 8005f82:	0002      	movs	r2, r0
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	4a91      	ldr	r2, [pc, #580]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d904      	bls.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005f8e:	2313      	movs	r3, #19
 8005f90:	18fb      	adds	r3, r7, r3
 8005f92:	2203      	movs	r2, #3
 8005f94:	701a      	strb	r2, [r3, #0]
            break;
 8005f96:	e004      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f98:	4b89      	ldr	r3, [pc, #548]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	d0ed      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005fa2:	2313      	movs	r3, #19
 8005fa4:	18fb      	adds	r3, r7, r3
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10a      	bne.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fac:	4b84      	ldr	r3, [pc, #528]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb0:	4a85      	ldr	r2, [pc, #532]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	0019      	movs	r1, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fba:	4b81      	ldr	r3, [pc, #516]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	65da      	str	r2, [r3, #92]	; 0x5c
 8005fc0:	e00c      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fc2:	2312      	movs	r3, #18
 8005fc4:	18fb      	adds	r3, r7, r3
 8005fc6:	2213      	movs	r2, #19
 8005fc8:	18ba      	adds	r2, r7, r2
 8005fca:	7812      	ldrb	r2, [r2, #0]
 8005fcc:	701a      	strb	r2, [r3, #0]
 8005fce:	e005      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd0:	2312      	movs	r3, #18
 8005fd2:	18fb      	adds	r3, r7, r3
 8005fd4:	2213      	movs	r2, #19
 8005fd6:	18ba      	adds	r2, r7, r2
 8005fd8:	7812      	ldrb	r2, [r2, #0]
 8005fda:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005fdc:	2311      	movs	r3, #17
 8005fde:	18fb      	adds	r3, r7, r3
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d105      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fe6:	4b76      	ldr	r3, [pc, #472]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fea:	4b75      	ldr	r3, [pc, #468]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fec:	4979      	ldr	r1, [pc, #484]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005fee:	400a      	ands	r2, r1
 8005ff0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	d009      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ffc:	4b70      	ldr	r3, [pc, #448]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006000:	2203      	movs	r2, #3
 8006002:	4393      	bics	r3, r2
 8006004:	0019      	movs	r1, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	4b6d      	ldr	r3, [pc, #436]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800600c:	430a      	orrs	r2, r1
 800600e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2202      	movs	r2, #2
 8006016:	4013      	ands	r3, r2
 8006018:	d009      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800601a:	4b69      	ldr	r3, [pc, #420]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800601c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601e:	220c      	movs	r2, #12
 8006020:	4393      	bics	r3, r2
 8006022:	0019      	movs	r1, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	4b65      	ldr	r3, [pc, #404]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800602a:	430a      	orrs	r2, r1
 800602c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2210      	movs	r2, #16
 8006034:	4013      	ands	r3, r2
 8006036:	d009      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006038:	4b61      	ldr	r3, [pc, #388]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800603a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603c:	4a66      	ldr	r2, [pc, #408]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800603e:	4013      	ands	r3, r2
 8006040:	0019      	movs	r1, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	4b5e      	ldr	r3, [pc, #376]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006048:	430a      	orrs	r2, r1
 800604a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	2380      	movs	r3, #128	; 0x80
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4013      	ands	r3, r2
 8006056:	d009      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006058:	4b59      	ldr	r3, [pc, #356]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800605a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605c:	4a5f      	ldr	r2, [pc, #380]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800605e:	4013      	ands	r3, r2
 8006060:	0019      	movs	r1, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	699a      	ldr	r2, [r3, #24]
 8006066:	4b56      	ldr	r3, [pc, #344]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006068:	430a      	orrs	r2, r1
 800606a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	2380      	movs	r3, #128	; 0x80
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	4013      	ands	r3, r2
 8006076:	d009      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006078:	4b51      	ldr	r3, [pc, #324]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800607a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607c:	4a58      	ldr	r2, [pc, #352]	; (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800607e:	4013      	ands	r3, r2
 8006080:	0019      	movs	r1, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	69da      	ldr	r2, [r3, #28]
 8006086:	4b4e      	ldr	r3, [pc, #312]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006088:	430a      	orrs	r2, r1
 800608a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2220      	movs	r2, #32
 8006092:	4013      	ands	r3, r2
 8006094:	d009      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006096:	4b4a      	ldr	r3, [pc, #296]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609a:	4a52      	ldr	r2, [pc, #328]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800609c:	4013      	ands	r3, r2
 800609e:	0019      	movs	r1, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	4b46      	ldr	r3, [pc, #280]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060a6:	430a      	orrs	r2, r1
 80060a8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	2380      	movs	r3, #128	; 0x80
 80060b0:	01db      	lsls	r3, r3, #7
 80060b2:	4013      	ands	r3, r2
 80060b4:	d015      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060b6:	4b42      	ldr	r3, [pc, #264]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	0899      	lsrs	r1, r3, #2
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1a      	ldr	r2, [r3, #32]
 80060c2:	4b3f      	ldr	r3, [pc, #252]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060c4:	430a      	orrs	r2, r1
 80060c6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1a      	ldr	r2, [r3, #32]
 80060cc:	2380      	movs	r3, #128	; 0x80
 80060ce:	05db      	lsls	r3, r3, #23
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d106      	bne.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80060d4:	4b3a      	ldr	r3, [pc, #232]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	4b39      	ldr	r3, [pc, #228]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060da:	2180      	movs	r1, #128	; 0x80
 80060dc:	0249      	lsls	r1, r1, #9
 80060de:	430a      	orrs	r2, r1
 80060e0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	2380      	movs	r3, #128	; 0x80
 80060e8:	031b      	lsls	r3, r3, #12
 80060ea:	4013      	ands	r3, r2
 80060ec:	d009      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80060ee:	4b34      	ldr	r3, [pc, #208]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f2:	2240      	movs	r2, #64	; 0x40
 80060f4:	4393      	bics	r3, r2
 80060f6:	0019      	movs	r1, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060fc:	4b30      	ldr	r3, [pc, #192]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060fe:	430a      	orrs	r2, r1
 8006100:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	2380      	movs	r3, #128	; 0x80
 8006108:	039b      	lsls	r3, r3, #14
 800610a:	4013      	ands	r3, r2
 800610c:	d016      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800610e:	4b2c      	ldr	r3, [pc, #176]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006112:	4a35      	ldr	r2, [pc, #212]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006114:	4013      	ands	r3, r2
 8006116:	0019      	movs	r1, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800611c:	4b28      	ldr	r3, [pc, #160]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800611e:	430a      	orrs	r2, r1
 8006120:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006126:	2380      	movs	r3, #128	; 0x80
 8006128:	03db      	lsls	r3, r3, #15
 800612a:	429a      	cmp	r2, r3
 800612c:	d106      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800612e:	4b24      	ldr	r3, [pc, #144]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	4b23      	ldr	r3, [pc, #140]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006134:	2180      	movs	r1, #128	; 0x80
 8006136:	0449      	lsls	r1, r1, #17
 8006138:	430a      	orrs	r2, r1
 800613a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	2380      	movs	r3, #128	; 0x80
 8006142:	03db      	lsls	r3, r3, #15
 8006144:	4013      	ands	r3, r2
 8006146:	d016      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006148:	4b1d      	ldr	r3, [pc, #116]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800614a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614c:	4a27      	ldr	r2, [pc, #156]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800614e:	4013      	ands	r3, r2
 8006150:	0019      	movs	r1, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006156:	4b1a      	ldr	r3, [pc, #104]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006158:	430a      	orrs	r2, r1
 800615a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006160:	2380      	movs	r3, #128	; 0x80
 8006162:	045b      	lsls	r3, r3, #17
 8006164:	429a      	cmp	r2, r3
 8006166:	d106      	bne.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006168:	4b15      	ldr	r3, [pc, #84]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800616a:	68da      	ldr	r2, [r3, #12]
 800616c:	4b14      	ldr	r3, [pc, #80]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800616e:	2180      	movs	r1, #128	; 0x80
 8006170:	0449      	lsls	r1, r1, #17
 8006172:	430a      	orrs	r2, r1
 8006174:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	2380      	movs	r3, #128	; 0x80
 800617c:	011b      	lsls	r3, r3, #4
 800617e:	4013      	ands	r3, r2
 8006180:	d016      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006182:	4b0f      	ldr	r3, [pc, #60]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006186:	4a1a      	ldr	r2, [pc, #104]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8006188:	4013      	ands	r3, r2
 800618a:	0019      	movs	r1, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	695a      	ldr	r2, [r3, #20]
 8006190:	4b0b      	ldr	r3, [pc, #44]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006192:	430a      	orrs	r2, r1
 8006194:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	695a      	ldr	r2, [r3, #20]
 800619a:	2380      	movs	r3, #128	; 0x80
 800619c:	01db      	lsls	r3, r3, #7
 800619e:	429a      	cmp	r2, r3
 80061a0:	d106      	bne.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80061a2:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	4b06      	ldr	r3, [pc, #24]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061a8:	2180      	movs	r1, #128	; 0x80
 80061aa:	0249      	lsls	r1, r1, #9
 80061ac:	430a      	orrs	r2, r1
 80061ae:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80061b0:	2312      	movs	r3, #18
 80061b2:	18fb      	adds	r3, r7, r3
 80061b4:	781b      	ldrb	r3, [r3, #0]
}
 80061b6:	0018      	movs	r0, r3
 80061b8:	46bd      	mov	sp, r7
 80061ba:	b006      	add	sp, #24
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	46c0      	nop			; (mov r8, r8)
 80061c0:	40021000 	.word	0x40021000
 80061c4:	40007000 	.word	0x40007000
 80061c8:	fffffcff 	.word	0xfffffcff
 80061cc:	fffeffff 	.word	0xfffeffff
 80061d0:	00001388 	.word	0x00001388
 80061d4:	efffffff 	.word	0xefffffff
 80061d8:	fffff3ff 	.word	0xfffff3ff
 80061dc:	fff3ffff 	.word	0xfff3ffff
 80061e0:	ffcfffff 	.word	0xffcfffff
 80061e4:	ffffcfff 	.word	0xffffcfff
 80061e8:	ffbfffff 	.word	0xffbfffff
 80061ec:	feffffff 	.word	0xfeffffff
 80061f0:	ffff3fff 	.word	0xffff3fff

080061f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e056      	b.n	80062b4 <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	223d      	movs	r2, #61	; 0x3d
 800620a:	5c9b      	ldrb	r3, [r3, r2]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d113      	bne.n	800623a <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	223c      	movs	r2, #60	; 0x3c
 8006216:	2100      	movs	r1, #0
 8006218:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	0018      	movs	r0, r3
 800621e:	f001 f9cd 	bl	80075bc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006226:	2b00      	cmp	r3, #0
 8006228:	d102      	bne.n	8006230 <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a23      	ldr	r2, [pc, #140]	; (80062bc <HAL_TIM_Base_Init+0xc8>)
 800622e:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	0010      	movs	r0, r2
 8006238:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	223d      	movs	r2, #61	; 0x3d
 800623e:	2102      	movs	r1, #2
 8006240:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	3304      	adds	r3, #4
 800624a:	0019      	movs	r1, r3
 800624c:	0010      	movs	r0, r2
 800624e:	f000 fdb1 	bl	8006db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2248      	movs	r2, #72	; 0x48
 8006256:	2101      	movs	r1, #1
 8006258:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	223e      	movs	r2, #62	; 0x3e
 800625e:	2101      	movs	r1, #1
 8006260:	5499      	strb	r1, [r3, r2]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	223f      	movs	r2, #63	; 0x3f
 8006266:	2101      	movs	r1, #1
 8006268:	5499      	strb	r1, [r3, r2]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2240      	movs	r2, #64	; 0x40
 800626e:	2101      	movs	r1, #1
 8006270:	5499      	strb	r1, [r3, r2]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2241      	movs	r2, #65	; 0x41
 8006276:	2101      	movs	r1, #1
 8006278:	5499      	strb	r1, [r3, r2]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2242      	movs	r2, #66	; 0x42
 800627e:	2101      	movs	r1, #1
 8006280:	5499      	strb	r1, [r3, r2]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2243      	movs	r2, #67	; 0x43
 8006286:	2101      	movs	r1, #1
 8006288:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2244      	movs	r2, #68	; 0x44
 800628e:	2101      	movs	r1, #1
 8006290:	5499      	strb	r1, [r3, r2]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2245      	movs	r2, #69	; 0x45
 8006296:	2101      	movs	r1, #1
 8006298:	5499      	strb	r1, [r3, r2]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2246      	movs	r2, #70	; 0x46
 800629e:	2101      	movs	r1, #1
 80062a0:	5499      	strb	r1, [r3, r2]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2247      	movs	r2, #71	; 0x47
 80062a6:	2101      	movs	r1, #1
 80062a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	223d      	movs	r2, #61	; 0x3d
 80062ae:	2101      	movs	r1, #1
 80062b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	0018      	movs	r0, r3
 80062b6:	46bd      	mov	sp, r7
 80062b8:	b002      	add	sp, #8
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	0800373d 	.word	0x0800373d

080062c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	223d      	movs	r2, #61	; 0x3d
 80062cc:	5c9b      	ldrb	r3, [r3, r2]
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d001      	beq.n	80062d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e03a      	b.n	800634e <HAL_TIM_Base_Start+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	223d      	movs	r2, #61	; 0x3d
 80062dc:	2102      	movs	r1, #2
 80062de:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a1c      	ldr	r2, [pc, #112]	; (8006358 <HAL_TIM_Base_Start+0x98>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d00f      	beq.n	800630a <HAL_TIM_Base_Start+0x4a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	2380      	movs	r3, #128	; 0x80
 80062f0:	05db      	lsls	r3, r3, #23
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d009      	beq.n	800630a <HAL_TIM_Base_Start+0x4a>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a18      	ldr	r2, [pc, #96]	; (800635c <HAL_TIM_Base_Start+0x9c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d004      	beq.n	800630a <HAL_TIM_Base_Start+0x4a>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a16      	ldr	r2, [pc, #88]	; (8006360 <HAL_TIM_Base_Start+0xa0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d116      	bne.n	8006338 <HAL_TIM_Base_Start+0x78>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	4a14      	ldr	r2, [pc, #80]	; (8006364 <HAL_TIM_Base_Start+0xa4>)
 8006312:	4013      	ands	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b06      	cmp	r3, #6
 800631a:	d016      	beq.n	800634a <HAL_TIM_Base_Start+0x8a>
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	2380      	movs	r3, #128	; 0x80
 8006320:	025b      	lsls	r3, r3, #9
 8006322:	429a      	cmp	r2, r3
 8006324:	d011      	beq.n	800634a <HAL_TIM_Base_Start+0x8a>
    {
      __HAL_TIM_ENABLE(htim);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2101      	movs	r1, #1
 8006332:	430a      	orrs	r2, r1
 8006334:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006336:	e008      	b.n	800634a <HAL_TIM_Base_Start+0x8a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2101      	movs	r1, #1
 8006344:	430a      	orrs	r2, r1
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	e000      	b.n	800634c <HAL_TIM_Base_Start+0x8c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800634a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	0018      	movs	r0, r3
 8006350:	46bd      	mov	sp, r7
 8006352:	b004      	add	sp, #16
 8006354:	bd80      	pop	{r7, pc}
 8006356:	46c0      	nop			; (mov r8, r8)
 8006358:	40012c00 	.word	0x40012c00
 800635c:	40000400 	.word	0x40000400
 8006360:	40014000 	.word	0x40014000
 8006364:	00010007 	.word	0x00010007

08006368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	223d      	movs	r2, #61	; 0x3d
 8006374:	5c9b      	ldrb	r3, [r3, r2]
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b01      	cmp	r3, #1
 800637a:	d001      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e042      	b.n	8006406 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	223d      	movs	r2, #61	; 0x3d
 8006384:	2102      	movs	r1, #2
 8006386:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2101      	movs	r1, #1
 8006394:	430a      	orrs	r2, r1
 8006396:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a1c      	ldr	r2, [pc, #112]	; (8006410 <HAL_TIM_Base_Start_IT+0xa8>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d00f      	beq.n	80063c2 <HAL_TIM_Base_Start_IT+0x5a>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	2380      	movs	r3, #128	; 0x80
 80063a8:	05db      	lsls	r3, r3, #23
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d009      	beq.n	80063c2 <HAL_TIM_Base_Start_IT+0x5a>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a18      	ldr	r2, [pc, #96]	; (8006414 <HAL_TIM_Base_Start_IT+0xac>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d004      	beq.n	80063c2 <HAL_TIM_Base_Start_IT+0x5a>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a16      	ldr	r2, [pc, #88]	; (8006418 <HAL_TIM_Base_Start_IT+0xb0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d116      	bne.n	80063f0 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	4a14      	ldr	r2, [pc, #80]	; (800641c <HAL_TIM_Base_Start_IT+0xb4>)
 80063ca:	4013      	ands	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2b06      	cmp	r3, #6
 80063d2:	d016      	beq.n	8006402 <HAL_TIM_Base_Start_IT+0x9a>
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	2380      	movs	r3, #128	; 0x80
 80063d8:	025b      	lsls	r3, r3, #9
 80063da:	429a      	cmp	r2, r3
 80063dc:	d011      	beq.n	8006402 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2101      	movs	r1, #1
 80063ea:	430a      	orrs	r2, r1
 80063ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ee:	e008      	b.n	8006402 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2101      	movs	r1, #1
 80063fc:	430a      	orrs	r2, r1
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	e000      	b.n	8006404 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006402:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	0018      	movs	r0, r3
 8006408:	46bd      	mov	sp, r7
 800640a:	b004      	add	sp, #16
 800640c:	bd80      	pop	{r7, pc}
 800640e:	46c0      	nop			; (mov r8, r8)
 8006410:	40012c00 	.word	0x40012c00
 8006414:	40000400 	.word	0x40000400
 8006418:	40014000 	.word	0x40014000
 800641c:	00010007 	.word	0x00010007

08006420 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e056      	b.n	80064e0 <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	223d      	movs	r2, #61	; 0x3d
 8006436:	5c9b      	ldrb	r3, [r3, r2]
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d113      	bne.n	8006466 <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	223c      	movs	r2, #60	; 0x3c
 8006442:	2100      	movs	r1, #0
 8006444:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	0018      	movs	r0, r3
 800644a:	f001 f8b7 	bl	80075bc <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006452:	2b00      	cmp	r3, #0
 8006454:	d102      	bne.n	800645c <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a23      	ldr	r2, [pc, #140]	; (80064e8 <HAL_TIM_PWM_Init+0xc8>)
 800645a:	665a      	str	r2, [r3, #100]	; 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	0010      	movs	r0, r2
 8006464:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	223d      	movs	r2, #61	; 0x3d
 800646a:	2102      	movs	r1, #2
 800646c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3304      	adds	r3, #4
 8006476:	0019      	movs	r1, r3
 8006478:	0010      	movs	r0, r2
 800647a:	f000 fc9b 	bl	8006db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2248      	movs	r2, #72	; 0x48
 8006482:	2101      	movs	r1, #1
 8006484:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	223e      	movs	r2, #62	; 0x3e
 800648a:	2101      	movs	r1, #1
 800648c:	5499      	strb	r1, [r3, r2]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	223f      	movs	r2, #63	; 0x3f
 8006492:	2101      	movs	r1, #1
 8006494:	5499      	strb	r1, [r3, r2]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2240      	movs	r2, #64	; 0x40
 800649a:	2101      	movs	r1, #1
 800649c:	5499      	strb	r1, [r3, r2]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2241      	movs	r2, #65	; 0x41
 80064a2:	2101      	movs	r1, #1
 80064a4:	5499      	strb	r1, [r3, r2]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2242      	movs	r2, #66	; 0x42
 80064aa:	2101      	movs	r1, #1
 80064ac:	5499      	strb	r1, [r3, r2]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2243      	movs	r2, #67	; 0x43
 80064b2:	2101      	movs	r1, #1
 80064b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2244      	movs	r2, #68	; 0x44
 80064ba:	2101      	movs	r1, #1
 80064bc:	5499      	strb	r1, [r3, r2]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2245      	movs	r2, #69	; 0x45
 80064c2:	2101      	movs	r1, #1
 80064c4:	5499      	strb	r1, [r3, r2]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2246      	movs	r2, #70	; 0x46
 80064ca:	2101      	movs	r1, #1
 80064cc:	5499      	strb	r1, [r3, r2]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2247      	movs	r2, #71	; 0x47
 80064d2:	2101      	movs	r1, #1
 80064d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	223d      	movs	r2, #61	; 0x3d
 80064da:	2101      	movs	r1, #1
 80064dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	0018      	movs	r0, r3
 80064e2:	46bd      	mov	sp, r7
 80064e4:	b002      	add	sp, #8
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	080064ed 	.word	0x080064ed

080064ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80064f4:	46c0      	nop			; (mov r8, r8)
 80064f6:	46bd      	mov	sp, r7
 80064f8:	b002      	add	sp, #8
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d108      	bne.n	800651e <HAL_TIM_PWM_Start+0x22>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	223e      	movs	r2, #62	; 0x3e
 8006510:	5c9b      	ldrb	r3, [r3, r2]
 8006512:	b2db      	uxtb	r3, r3
 8006514:	3b01      	subs	r3, #1
 8006516:	1e5a      	subs	r2, r3, #1
 8006518:	4193      	sbcs	r3, r2
 800651a:	b2db      	uxtb	r3, r3
 800651c:	e037      	b.n	800658e <HAL_TIM_PWM_Start+0x92>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b04      	cmp	r3, #4
 8006522:	d108      	bne.n	8006536 <HAL_TIM_PWM_Start+0x3a>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	223f      	movs	r2, #63	; 0x3f
 8006528:	5c9b      	ldrb	r3, [r3, r2]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	3b01      	subs	r3, #1
 800652e:	1e5a      	subs	r2, r3, #1
 8006530:	4193      	sbcs	r3, r2
 8006532:	b2db      	uxtb	r3, r3
 8006534:	e02b      	b.n	800658e <HAL_TIM_PWM_Start+0x92>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b08      	cmp	r3, #8
 800653a:	d108      	bne.n	800654e <HAL_TIM_PWM_Start+0x52>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2240      	movs	r2, #64	; 0x40
 8006540:	5c9b      	ldrb	r3, [r3, r2]
 8006542:	b2db      	uxtb	r3, r3
 8006544:	3b01      	subs	r3, #1
 8006546:	1e5a      	subs	r2, r3, #1
 8006548:	4193      	sbcs	r3, r2
 800654a:	b2db      	uxtb	r3, r3
 800654c:	e01f      	b.n	800658e <HAL_TIM_PWM_Start+0x92>
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b0c      	cmp	r3, #12
 8006552:	d108      	bne.n	8006566 <HAL_TIM_PWM_Start+0x6a>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2241      	movs	r2, #65	; 0x41
 8006558:	5c9b      	ldrb	r3, [r3, r2]
 800655a:	b2db      	uxtb	r3, r3
 800655c:	3b01      	subs	r3, #1
 800655e:	1e5a      	subs	r2, r3, #1
 8006560:	4193      	sbcs	r3, r2
 8006562:	b2db      	uxtb	r3, r3
 8006564:	e013      	b.n	800658e <HAL_TIM_PWM_Start+0x92>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b10      	cmp	r3, #16
 800656a:	d108      	bne.n	800657e <HAL_TIM_PWM_Start+0x82>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2242      	movs	r2, #66	; 0x42
 8006570:	5c9b      	ldrb	r3, [r3, r2]
 8006572:	b2db      	uxtb	r3, r3
 8006574:	3b01      	subs	r3, #1
 8006576:	1e5a      	subs	r2, r3, #1
 8006578:	4193      	sbcs	r3, r2
 800657a:	b2db      	uxtb	r3, r3
 800657c:	e007      	b.n	800658e <HAL_TIM_PWM_Start+0x92>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2243      	movs	r2, #67	; 0x43
 8006582:	5c9b      	ldrb	r3, [r3, r2]
 8006584:	b2db      	uxtb	r3, r3
 8006586:	3b01      	subs	r3, #1
 8006588:	1e5a      	subs	r2, r3, #1
 800658a:	4193      	sbcs	r3, r2
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e08b      	b.n	80066ae <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d104      	bne.n	80065a6 <HAL_TIM_PWM_Start+0xaa>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	223e      	movs	r2, #62	; 0x3e
 80065a0:	2102      	movs	r1, #2
 80065a2:	5499      	strb	r1, [r3, r2]
 80065a4:	e023      	b.n	80065ee <HAL_TIM_PWM_Start+0xf2>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b04      	cmp	r3, #4
 80065aa:	d104      	bne.n	80065b6 <HAL_TIM_PWM_Start+0xba>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	223f      	movs	r2, #63	; 0x3f
 80065b0:	2102      	movs	r1, #2
 80065b2:	5499      	strb	r1, [r3, r2]
 80065b4:	e01b      	b.n	80065ee <HAL_TIM_PWM_Start+0xf2>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d104      	bne.n	80065c6 <HAL_TIM_PWM_Start+0xca>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2240      	movs	r2, #64	; 0x40
 80065c0:	2102      	movs	r1, #2
 80065c2:	5499      	strb	r1, [r3, r2]
 80065c4:	e013      	b.n	80065ee <HAL_TIM_PWM_Start+0xf2>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b0c      	cmp	r3, #12
 80065ca:	d104      	bne.n	80065d6 <HAL_TIM_PWM_Start+0xda>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2241      	movs	r2, #65	; 0x41
 80065d0:	2102      	movs	r1, #2
 80065d2:	5499      	strb	r1, [r3, r2]
 80065d4:	e00b      	b.n	80065ee <HAL_TIM_PWM_Start+0xf2>
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b10      	cmp	r3, #16
 80065da:	d104      	bne.n	80065e6 <HAL_TIM_PWM_Start+0xea>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2242      	movs	r2, #66	; 0x42
 80065e0:	2102      	movs	r1, #2
 80065e2:	5499      	strb	r1, [r3, r2]
 80065e4:	e003      	b.n	80065ee <HAL_TIM_PWM_Start+0xf2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2243      	movs	r2, #67	; 0x43
 80065ea:	2102      	movs	r1, #2
 80065ec:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	2201      	movs	r2, #1
 80065f6:	0018      	movs	r0, r3
 80065f8:	f000 ffbc 	bl	8007574 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a2d      	ldr	r2, [pc, #180]	; (80066b8 <HAL_TIM_PWM_Start+0x1bc>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d00e      	beq.n	8006624 <HAL_TIM_PWM_Start+0x128>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a2c      	ldr	r2, [pc, #176]	; (80066bc <HAL_TIM_PWM_Start+0x1c0>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d009      	beq.n	8006624 <HAL_TIM_PWM_Start+0x128>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a2a      	ldr	r2, [pc, #168]	; (80066c0 <HAL_TIM_PWM_Start+0x1c4>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d004      	beq.n	8006624 <HAL_TIM_PWM_Start+0x128>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a29      	ldr	r2, [pc, #164]	; (80066c4 <HAL_TIM_PWM_Start+0x1c8>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d101      	bne.n	8006628 <HAL_TIM_PWM_Start+0x12c>
 8006624:	2301      	movs	r3, #1
 8006626:	e000      	b.n	800662a <HAL_TIM_PWM_Start+0x12e>
 8006628:	2300      	movs	r3, #0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d008      	beq.n	8006640 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2180      	movs	r1, #128	; 0x80
 800663a:	0209      	lsls	r1, r1, #8
 800663c:	430a      	orrs	r2, r1
 800663e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a1c      	ldr	r2, [pc, #112]	; (80066b8 <HAL_TIM_PWM_Start+0x1bc>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d00f      	beq.n	800666a <HAL_TIM_PWM_Start+0x16e>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	2380      	movs	r3, #128	; 0x80
 8006650:	05db      	lsls	r3, r3, #23
 8006652:	429a      	cmp	r2, r3
 8006654:	d009      	beq.n	800666a <HAL_TIM_PWM_Start+0x16e>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a1b      	ldr	r2, [pc, #108]	; (80066c8 <HAL_TIM_PWM_Start+0x1cc>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d004      	beq.n	800666a <HAL_TIM_PWM_Start+0x16e>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a15      	ldr	r2, [pc, #84]	; (80066bc <HAL_TIM_PWM_Start+0x1c0>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d116      	bne.n	8006698 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	4a16      	ldr	r2, [pc, #88]	; (80066cc <HAL_TIM_PWM_Start+0x1d0>)
 8006672:	4013      	ands	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b06      	cmp	r3, #6
 800667a:	d016      	beq.n	80066aa <HAL_TIM_PWM_Start+0x1ae>
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	2380      	movs	r3, #128	; 0x80
 8006680:	025b      	lsls	r3, r3, #9
 8006682:	429a      	cmp	r2, r3
 8006684:	d011      	beq.n	80066aa <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2101      	movs	r1, #1
 8006692:	430a      	orrs	r2, r1
 8006694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006696:	e008      	b.n	80066aa <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2101      	movs	r1, #1
 80066a4:	430a      	orrs	r2, r1
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	e000      	b.n	80066ac <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066aa:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	0018      	movs	r0, r3
 80066b0:	46bd      	mov	sp, r7
 80066b2:	b004      	add	sp, #16
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	46c0      	nop			; (mov r8, r8)
 80066b8:	40012c00 	.word	0x40012c00
 80066bc:	40014000 	.word	0x40014000
 80066c0:	40014400 	.word	0x40014400
 80066c4:	40014800 	.word	0x40014800
 80066c8:	40000400 	.word	0x40000400
 80066cc:	00010007 	.word	0x00010007

080066d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	2202      	movs	r2, #2
 80066e0:	4013      	ands	r3, r2
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d12a      	bne.n	800673c <HAL_TIM_IRQHandler+0x6c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	2202      	movs	r2, #2
 80066ee:	4013      	ands	r3, r2
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d123      	bne.n	800673c <HAL_TIM_IRQHandler+0x6c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2203      	movs	r2, #3
 80066fa:	4252      	negs	r2, r2
 80066fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	2203      	movs	r2, #3
 800670c:	4013      	ands	r3, r2
 800670e:	d006      	beq.n	800671e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2294      	movs	r2, #148	; 0x94
 8006714:	589b      	ldr	r3, [r3, r2]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	0010      	movs	r0, r2
 800671a:	4798      	blx	r3
 800671c:	e00b      	b.n	8006736 <HAL_TIM_IRQHandler+0x66>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	229c      	movs	r2, #156	; 0x9c
 8006722:	589b      	ldr	r3, [r3, r2]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	0010      	movs	r0, r2
 8006728:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	22a0      	movs	r2, #160	; 0xa0
 800672e:	589b      	ldr	r3, [r3, r2]
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	0010      	movs	r0, r2
 8006734:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	2204      	movs	r2, #4
 8006744:	4013      	ands	r3, r2
 8006746:	2b04      	cmp	r3, #4
 8006748:	d12b      	bne.n	80067a2 <HAL_TIM_IRQHandler+0xd2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	2204      	movs	r2, #4
 8006752:	4013      	ands	r3, r2
 8006754:	2b04      	cmp	r3, #4
 8006756:	d124      	bne.n	80067a2 <HAL_TIM_IRQHandler+0xd2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2205      	movs	r2, #5
 800675e:	4252      	negs	r2, r2
 8006760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2202      	movs	r2, #2
 8006766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	699a      	ldr	r2, [r3, #24]
 800676e:	23c0      	movs	r3, #192	; 0xc0
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4013      	ands	r3, r2
 8006774:	d006      	beq.n	8006784 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2294      	movs	r2, #148	; 0x94
 800677a:	589b      	ldr	r3, [r3, r2]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	0010      	movs	r0, r2
 8006780:	4798      	blx	r3
 8006782:	e00b      	b.n	800679c <HAL_TIM_IRQHandler+0xcc>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	229c      	movs	r2, #156	; 0x9c
 8006788:	589b      	ldr	r3, [r3, r2]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	0010      	movs	r0, r2
 800678e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	22a0      	movs	r2, #160	; 0xa0
 8006794:	589b      	ldr	r3, [r3, r2]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	0010      	movs	r0, r2
 800679a:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	2208      	movs	r2, #8
 80067aa:	4013      	ands	r3, r2
 80067ac:	2b08      	cmp	r3, #8
 80067ae:	d12a      	bne.n	8006806 <HAL_TIM_IRQHandler+0x136>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	2208      	movs	r2, #8
 80067b8:	4013      	ands	r3, r2
 80067ba:	2b08      	cmp	r3, #8
 80067bc:	d123      	bne.n	8006806 <HAL_TIM_IRQHandler+0x136>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2209      	movs	r2, #9
 80067c4:	4252      	negs	r2, r2
 80067c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2204      	movs	r2, #4
 80067cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	2203      	movs	r2, #3
 80067d6:	4013      	ands	r3, r2
 80067d8:	d006      	beq.n	80067e8 <HAL_TIM_IRQHandler+0x118>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2294      	movs	r2, #148	; 0x94
 80067de:	589b      	ldr	r3, [r3, r2]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	0010      	movs	r0, r2
 80067e4:	4798      	blx	r3
 80067e6:	e00b      	b.n	8006800 <HAL_TIM_IRQHandler+0x130>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	229c      	movs	r2, #156	; 0x9c
 80067ec:	589b      	ldr	r3, [r3, r2]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	0010      	movs	r0, r2
 80067f2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	22a0      	movs	r2, #160	; 0xa0
 80067f8:	589b      	ldr	r3, [r3, r2]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	0010      	movs	r0, r2
 80067fe:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	2210      	movs	r2, #16
 800680e:	4013      	ands	r3, r2
 8006810:	2b10      	cmp	r3, #16
 8006812:	d12b      	bne.n	800686c <HAL_TIM_IRQHandler+0x19c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	2210      	movs	r2, #16
 800681c:	4013      	ands	r3, r2
 800681e:	2b10      	cmp	r3, #16
 8006820:	d124      	bne.n	800686c <HAL_TIM_IRQHandler+0x19c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2211      	movs	r2, #17
 8006828:	4252      	negs	r2, r2
 800682a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2208      	movs	r2, #8
 8006830:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	69da      	ldr	r2, [r3, #28]
 8006838:	23c0      	movs	r3, #192	; 0xc0
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4013      	ands	r3, r2
 800683e:	d006      	beq.n	800684e <HAL_TIM_IRQHandler+0x17e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2294      	movs	r2, #148	; 0x94
 8006844:	589b      	ldr	r3, [r3, r2]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	0010      	movs	r0, r2
 800684a:	4798      	blx	r3
 800684c:	e00b      	b.n	8006866 <HAL_TIM_IRQHandler+0x196>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	229c      	movs	r2, #156	; 0x9c
 8006852:	589b      	ldr	r3, [r3, r2]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	0010      	movs	r0, r2
 8006858:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	22a0      	movs	r2, #160	; 0xa0
 800685e:	589b      	ldr	r3, [r3, r2]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	0010      	movs	r0, r2
 8006864:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	2201      	movs	r2, #1
 8006874:	4013      	ands	r3, r2
 8006876:	2b01      	cmp	r3, #1
 8006878:	d111      	bne.n	800689e <HAL_TIM_IRQHandler+0x1ce>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	2201      	movs	r2, #1
 8006882:	4013      	ands	r3, r2
 8006884:	2b01      	cmp	r3, #1
 8006886:	d10a      	bne.n	800689e <HAL_TIM_IRQHandler+0x1ce>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2202      	movs	r2, #2
 800688e:	4252      	negs	r2, r2
 8006890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2284      	movs	r2, #132	; 0x84
 8006896:	589b      	ldr	r3, [r3, r2]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	0010      	movs	r0, r2
 800689c:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	2280      	movs	r2, #128	; 0x80
 80068a6:	4013      	ands	r3, r2
 80068a8:	2b80      	cmp	r3, #128	; 0x80
 80068aa:	d111      	bne.n	80068d0 <HAL_TIM_IRQHandler+0x200>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	2280      	movs	r2, #128	; 0x80
 80068b4:	4013      	ands	r3, r2
 80068b6:	2b80      	cmp	r3, #128	; 0x80
 80068b8:	d10a      	bne.n	80068d0 <HAL_TIM_IRQHandler+0x200>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2281      	movs	r2, #129	; 0x81
 80068c0:	4252      	negs	r2, r2
 80068c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	22b4      	movs	r2, #180	; 0xb4
 80068c8:	589b      	ldr	r3, [r3, r2]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	0010      	movs	r0, r2
 80068ce:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	691a      	ldr	r2, [r3, #16]
 80068d6:	2380      	movs	r3, #128	; 0x80
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	401a      	ands	r2, r3
 80068dc:	2380      	movs	r3, #128	; 0x80
 80068de:	005b      	lsls	r3, r3, #1
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d110      	bne.n	8006906 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	2280      	movs	r2, #128	; 0x80
 80068ec:	4013      	ands	r3, r2
 80068ee:	2b80      	cmp	r3, #128	; 0x80
 80068f0:	d109      	bne.n	8006906 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a1f      	ldr	r2, [pc, #124]	; (8006974 <HAL_TIM_IRQHandler+0x2a4>)
 80068f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	22b8      	movs	r2, #184	; 0xb8
 80068fe:	589b      	ldr	r3, [r3, r2]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	0010      	movs	r0, r2
 8006904:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	2240      	movs	r2, #64	; 0x40
 800690e:	4013      	ands	r3, r2
 8006910:	2b40      	cmp	r3, #64	; 0x40
 8006912:	d111      	bne.n	8006938 <HAL_TIM_IRQHandler+0x268>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	2240      	movs	r2, #64	; 0x40
 800691c:	4013      	ands	r3, r2
 800691e:	2b40      	cmp	r3, #64	; 0x40
 8006920:	d10a      	bne.n	8006938 <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2241      	movs	r2, #65	; 0x41
 8006928:	4252      	negs	r2, r2
 800692a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	228c      	movs	r2, #140	; 0x8c
 8006930:	589b      	ldr	r3, [r3, r2]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	0010      	movs	r0, r2
 8006936:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	2220      	movs	r2, #32
 8006940:	4013      	ands	r3, r2
 8006942:	2b20      	cmp	r3, #32
 8006944:	d111      	bne.n	800696a <HAL_TIM_IRQHandler+0x29a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	2220      	movs	r2, #32
 800694e:	4013      	ands	r3, r2
 8006950:	2b20      	cmp	r3, #32
 8006952:	d10a      	bne.n	800696a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2221      	movs	r2, #33	; 0x21
 800695a:	4252      	negs	r2, r2
 800695c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	22ac      	movs	r2, #172	; 0xac
 8006962:	589b      	ldr	r3, [r3, r2]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	0010      	movs	r0, r2
 8006968:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800696a:	46c0      	nop			; (mov r8, r8)
 800696c:	46bd      	mov	sp, r7
 800696e:	b002      	add	sp, #8
 8006970:	bd80      	pop	{r7, pc}
 8006972:	46c0      	nop			; (mov r8, r8)
 8006974:	fffffeff 	.word	0xfffffeff

08006978 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006984:	2317      	movs	r3, #23
 8006986:	18fb      	adds	r3, r7, r3
 8006988:	2200      	movs	r2, #0
 800698a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	223c      	movs	r2, #60	; 0x3c
 8006990:	5c9b      	ldrb	r3, [r3, r2]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d101      	bne.n	800699a <HAL_TIM_PWM_ConfigChannel+0x22>
 8006996:	2302      	movs	r3, #2
 8006998:	e0e5      	b.n	8006b66 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	223c      	movs	r2, #60	; 0x3c
 800699e:	2101      	movs	r1, #1
 80069a0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b14      	cmp	r3, #20
 80069a6:	d900      	bls.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x32>
 80069a8:	e0d1      	b.n	8006b4e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	009a      	lsls	r2, r3, #2
 80069ae:	4b70      	ldr	r3, [pc, #448]	; (8006b70 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80069b0:	18d3      	adds	r3, r2, r3
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	0011      	movs	r1, r2
 80069be:	0018      	movs	r0, r3
 80069c0:	f000 fa78 	bl	8006eb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699a      	ldr	r2, [r3, #24]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2108      	movs	r1, #8
 80069d0:	430a      	orrs	r2, r1
 80069d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	699a      	ldr	r2, [r3, #24]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2104      	movs	r1, #4
 80069e0:	438a      	bics	r2, r1
 80069e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6999      	ldr	r1, [r3, #24]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	691a      	ldr	r2, [r3, #16]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	619a      	str	r2, [r3, #24]
      break;
 80069f6:	e0af      	b.n	8006b58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	0011      	movs	r1, r2
 8006a00:	0018      	movs	r0, r3
 8006a02:	f000 fae1 	bl	8006fc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	699a      	ldr	r2, [r3, #24]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2180      	movs	r1, #128	; 0x80
 8006a12:	0109      	lsls	r1, r1, #4
 8006a14:	430a      	orrs	r2, r1
 8006a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	699a      	ldr	r2, [r3, #24]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4954      	ldr	r1, [pc, #336]	; (8006b74 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006a24:	400a      	ands	r2, r1
 8006a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6999      	ldr	r1, [r3, #24]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	021a      	lsls	r2, r3, #8
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	619a      	str	r2, [r3, #24]
      break;
 8006a3c:	e08c      	b.n	8006b58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	0011      	movs	r1, r2
 8006a46:	0018      	movs	r0, r3
 8006a48:	f000 fb42 	bl	80070d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	69da      	ldr	r2, [r3, #28]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2108      	movs	r1, #8
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	69da      	ldr	r2, [r3, #28]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2104      	movs	r1, #4
 8006a68:	438a      	bics	r2, r1
 8006a6a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	69d9      	ldr	r1, [r3, #28]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	691a      	ldr	r2, [r3, #16]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	61da      	str	r2, [r3, #28]
      break;
 8006a7e:	e06b      	b.n	8006b58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	0011      	movs	r1, r2
 8006a88:	0018      	movs	r0, r3
 8006a8a:	f000 fba9 	bl	80071e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69da      	ldr	r2, [r3, #28]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2180      	movs	r1, #128	; 0x80
 8006a9a:	0109      	lsls	r1, r1, #4
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	69da      	ldr	r2, [r3, #28]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4932      	ldr	r1, [pc, #200]	; (8006b74 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006aac:	400a      	ands	r2, r1
 8006aae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	69d9      	ldr	r1, [r3, #28]
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	021a      	lsls	r2, r3, #8
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	61da      	str	r2, [r3, #28]
      break;
 8006ac4:	e048      	b.n	8006b58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	0011      	movs	r1, r2
 8006ace:	0018      	movs	r0, r3
 8006ad0:	f000 fbf0 	bl	80072b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2108      	movs	r1, #8
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2104      	movs	r1, #4
 8006af0:	438a      	bics	r2, r1
 8006af2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	691a      	ldr	r2, [r3, #16]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	430a      	orrs	r2, r1
 8006b04:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b06:	e027      	b.n	8006b58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	0011      	movs	r1, r2
 8006b10:	0018      	movs	r0, r3
 8006b12:	f000 fc2f 	bl	8007374 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2180      	movs	r1, #128	; 0x80
 8006b22:	0109      	lsls	r1, r1, #4
 8006b24:	430a      	orrs	r2, r1
 8006b26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4910      	ldr	r1, [pc, #64]	; (8006b74 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006b34:	400a      	ands	r2, r1
 8006b36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	021a      	lsls	r2, r3, #8
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b4c:	e004      	b.n	8006b58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8006b4e:	2317      	movs	r3, #23
 8006b50:	18fb      	adds	r3, r7, r3
 8006b52:	2201      	movs	r2, #1
 8006b54:	701a      	strb	r2, [r3, #0]
      break;
 8006b56:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	223c      	movs	r2, #60	; 0x3c
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	5499      	strb	r1, [r3, r2]

  return status;
 8006b60:	2317      	movs	r3, #23
 8006b62:	18fb      	adds	r3, r7, r3
 8006b64:	781b      	ldrb	r3, [r3, #0]
}
 8006b66:	0018      	movs	r0, r3
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	b006      	add	sp, #24
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	46c0      	nop			; (mov r8, r8)
 8006b70:	08009ad0 	.word	0x08009ad0
 8006b74:	fffffbff 	.word	0xfffffbff

08006b78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b82:	230f      	movs	r3, #15
 8006b84:	18fb      	adds	r3, r7, r3
 8006b86:	2200      	movs	r2, #0
 8006b88:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	223c      	movs	r2, #60	; 0x3c
 8006b8e:	5c9b      	ldrb	r3, [r3, r2]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_TIM_ConfigClockSource+0x20>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e0bc      	b.n	8006d12 <HAL_TIM_ConfigClockSource+0x19a>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	223c      	movs	r2, #60	; 0x3c
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	223d      	movs	r2, #61	; 0x3d
 8006ba4:	2102      	movs	r1, #2
 8006ba6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	4a5a      	ldr	r2, [pc, #360]	; (8006d1c <HAL_TIM_ConfigClockSource+0x1a4>)
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4a59      	ldr	r2, [pc, #356]	; (8006d20 <HAL_TIM_ConfigClockSource+0x1a8>)
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2280      	movs	r2, #128	; 0x80
 8006bce:	0192      	lsls	r2, r2, #6
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d040      	beq.n	8006c56 <HAL_TIM_ConfigClockSource+0xde>
 8006bd4:	2280      	movs	r2, #128	; 0x80
 8006bd6:	0192      	lsls	r2, r2, #6
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d900      	bls.n	8006bde <HAL_TIM_ConfigClockSource+0x66>
 8006bdc:	e088      	b.n	8006cf0 <HAL_TIM_ConfigClockSource+0x178>
 8006bde:	2280      	movs	r2, #128	; 0x80
 8006be0:	0152      	lsls	r2, r2, #5
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d100      	bne.n	8006be8 <HAL_TIM_ConfigClockSource+0x70>
 8006be6:	e088      	b.n	8006cfa <HAL_TIM_ConfigClockSource+0x182>
 8006be8:	2280      	movs	r2, #128	; 0x80
 8006bea:	0152      	lsls	r2, r2, #5
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d900      	bls.n	8006bf2 <HAL_TIM_ConfigClockSource+0x7a>
 8006bf0:	e07e      	b.n	8006cf0 <HAL_TIM_ConfigClockSource+0x178>
 8006bf2:	2b70      	cmp	r3, #112	; 0x70
 8006bf4:	d018      	beq.n	8006c28 <HAL_TIM_ConfigClockSource+0xb0>
 8006bf6:	d900      	bls.n	8006bfa <HAL_TIM_ConfigClockSource+0x82>
 8006bf8:	e07a      	b.n	8006cf0 <HAL_TIM_ConfigClockSource+0x178>
 8006bfa:	2b60      	cmp	r3, #96	; 0x60
 8006bfc:	d04f      	beq.n	8006c9e <HAL_TIM_ConfigClockSource+0x126>
 8006bfe:	d900      	bls.n	8006c02 <HAL_TIM_ConfigClockSource+0x8a>
 8006c00:	e076      	b.n	8006cf0 <HAL_TIM_ConfigClockSource+0x178>
 8006c02:	2b50      	cmp	r3, #80	; 0x50
 8006c04:	d03b      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x106>
 8006c06:	d900      	bls.n	8006c0a <HAL_TIM_ConfigClockSource+0x92>
 8006c08:	e072      	b.n	8006cf0 <HAL_TIM_ConfigClockSource+0x178>
 8006c0a:	2b40      	cmp	r3, #64	; 0x40
 8006c0c:	d057      	beq.n	8006cbe <HAL_TIM_ConfigClockSource+0x146>
 8006c0e:	d900      	bls.n	8006c12 <HAL_TIM_ConfigClockSource+0x9a>
 8006c10:	e06e      	b.n	8006cf0 <HAL_TIM_ConfigClockSource+0x178>
 8006c12:	2b30      	cmp	r3, #48	; 0x30
 8006c14:	d063      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0x166>
 8006c16:	d86b      	bhi.n	8006cf0 <HAL_TIM_ConfigClockSource+0x178>
 8006c18:	2b20      	cmp	r3, #32
 8006c1a:	d060      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0x166>
 8006c1c:	d868      	bhi.n	8006cf0 <HAL_TIM_ConfigClockSource+0x178>
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d05d      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0x166>
 8006c22:	2b10      	cmp	r3, #16
 8006c24:	d05b      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0x166>
 8006c26:	e063      	b.n	8006cf0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c38:	f000 fc7c 	bl	8007534 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2277      	movs	r2, #119	; 0x77
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	609a      	str	r2, [r3, #8]
      break;
 8006c54:	e052      	b.n	8006cfc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c66:	f000 fc65 	bl	8007534 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2180      	movs	r1, #128	; 0x80
 8006c76:	01c9      	lsls	r1, r1, #7
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	609a      	str	r2, [r3, #8]
      break;
 8006c7c:	e03e      	b.n	8006cfc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c8a:	001a      	movs	r2, r3
 8006c8c:	f000 fbd6 	bl	800743c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2150      	movs	r1, #80	; 0x50
 8006c96:	0018      	movs	r0, r3
 8006c98:	f000 fc30 	bl	80074fc <TIM_ITRx_SetConfig>
      break;
 8006c9c:	e02e      	b.n	8006cfc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006caa:	001a      	movs	r2, r3
 8006cac:	f000 fbf4 	bl	8007498 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2160      	movs	r1, #96	; 0x60
 8006cb6:	0018      	movs	r0, r3
 8006cb8:	f000 fc20 	bl	80074fc <TIM_ITRx_SetConfig>
      break;
 8006cbc:	e01e      	b.n	8006cfc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cca:	001a      	movs	r2, r3
 8006ccc:	f000 fbb6 	bl	800743c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2140      	movs	r1, #64	; 0x40
 8006cd6:	0018      	movs	r0, r3
 8006cd8:	f000 fc10 	bl	80074fc <TIM_ITRx_SetConfig>
      break;
 8006cdc:	e00e      	b.n	8006cfc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	0019      	movs	r1, r3
 8006ce8:	0010      	movs	r0, r2
 8006cea:	f000 fc07 	bl	80074fc <TIM_ITRx_SetConfig>
      break;
 8006cee:	e005      	b.n	8006cfc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006cf0:	230f      	movs	r3, #15
 8006cf2:	18fb      	adds	r3, r7, r3
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	701a      	strb	r2, [r3, #0]
      break;
 8006cf8:	e000      	b.n	8006cfc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006cfa:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	223d      	movs	r2, #61	; 0x3d
 8006d00:	2101      	movs	r1, #1
 8006d02:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	223c      	movs	r2, #60	; 0x3c
 8006d08:	2100      	movs	r1, #0
 8006d0a:	5499      	strb	r1, [r3, r2]

  return status;
 8006d0c:	230f      	movs	r3, #15
 8006d0e:	18fb      	adds	r3, r7, r3
 8006d10:	781b      	ldrb	r3, [r3, #0]
}
 8006d12:	0018      	movs	r0, r3
 8006d14:	46bd      	mov	sp, r7
 8006d16:	b004      	add	sp, #16
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	46c0      	nop			; (mov r8, r8)
 8006d1c:	ffceff88 	.word	0xffceff88
 8006d20:	ffff00ff 	.word	0xffff00ff

08006d24 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006d2c:	46c0      	nop			; (mov r8, r8)
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	b002      	add	sp, #8
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d3c:	46c0      	nop			; (mov r8, r8)
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	b002      	add	sp, #8
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d4c:	46c0      	nop			; (mov r8, r8)
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	b002      	add	sp, #8
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006d5c:	46c0      	nop			; (mov r8, r8)
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	b002      	add	sp, #8
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d6c:	46c0      	nop			; (mov r8, r8)
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	b002      	add	sp, #8
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006d7c:	46c0      	nop			; (mov r8, r8)
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	b002      	add	sp, #8
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d8c:	46c0      	nop			; (mov r8, r8)
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	b002      	add	sp, #8
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006d9c:	46c0      	nop			; (mov r8, r8)
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	b002      	add	sp, #8
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006dac:	46c0      	nop			; (mov r8, r8)
 8006dae:	46bd      	mov	sp, r7
 8006db0:	b002      	add	sp, #8
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a34      	ldr	r2, [pc, #208]	; (8006e98 <TIM_Base_SetConfig+0xe4>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d008      	beq.n	8006dde <TIM_Base_SetConfig+0x2a>
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	2380      	movs	r3, #128	; 0x80
 8006dd0:	05db      	lsls	r3, r3, #23
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d003      	beq.n	8006dde <TIM_Base_SetConfig+0x2a>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a30      	ldr	r2, [pc, #192]	; (8006e9c <TIM_Base_SetConfig+0xe8>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d108      	bne.n	8006df0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2270      	movs	r2, #112	; 0x70
 8006de2:	4393      	bics	r3, r2
 8006de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a29      	ldr	r2, [pc, #164]	; (8006e98 <TIM_Base_SetConfig+0xe4>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d018      	beq.n	8006e2a <TIM_Base_SetConfig+0x76>
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	2380      	movs	r3, #128	; 0x80
 8006dfc:	05db      	lsls	r3, r3, #23
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d013      	beq.n	8006e2a <TIM_Base_SetConfig+0x76>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a25      	ldr	r2, [pc, #148]	; (8006e9c <TIM_Base_SetConfig+0xe8>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d00f      	beq.n	8006e2a <TIM_Base_SetConfig+0x76>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a24      	ldr	r2, [pc, #144]	; (8006ea0 <TIM_Base_SetConfig+0xec>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d00b      	beq.n	8006e2a <TIM_Base_SetConfig+0x76>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a23      	ldr	r2, [pc, #140]	; (8006ea4 <TIM_Base_SetConfig+0xf0>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d007      	beq.n	8006e2a <TIM_Base_SetConfig+0x76>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a22      	ldr	r2, [pc, #136]	; (8006ea8 <TIM_Base_SetConfig+0xf4>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d003      	beq.n	8006e2a <TIM_Base_SetConfig+0x76>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a21      	ldr	r2, [pc, #132]	; (8006eac <TIM_Base_SetConfig+0xf8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d108      	bne.n	8006e3c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	4a20      	ldr	r2, [pc, #128]	; (8006eb0 <TIM_Base_SetConfig+0xfc>)
 8006e2e:	4013      	ands	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2280      	movs	r2, #128	; 0x80
 8006e40:	4393      	bics	r3, r2
 8006e42:	001a      	movs	r2, r3
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	689a      	ldr	r2, [r3, #8]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a0c      	ldr	r2, [pc, #48]	; (8006e98 <TIM_Base_SetConfig+0xe4>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d00b      	beq.n	8006e82 <TIM_Base_SetConfig+0xce>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a0d      	ldr	r2, [pc, #52]	; (8006ea4 <TIM_Base_SetConfig+0xf0>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d007      	beq.n	8006e82 <TIM_Base_SetConfig+0xce>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a0c      	ldr	r2, [pc, #48]	; (8006ea8 <TIM_Base_SetConfig+0xf4>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d003      	beq.n	8006e82 <TIM_Base_SetConfig+0xce>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a0b      	ldr	r2, [pc, #44]	; (8006eac <TIM_Base_SetConfig+0xf8>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d103      	bne.n	8006e8a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	691a      	ldr	r2, [r3, #16]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	615a      	str	r2, [r3, #20]
}
 8006e90:	46c0      	nop			; (mov r8, r8)
 8006e92:	46bd      	mov	sp, r7
 8006e94:	b004      	add	sp, #16
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	40012c00 	.word	0x40012c00
 8006e9c:	40000400 	.word	0x40000400
 8006ea0:	40002000 	.word	0x40002000
 8006ea4:	40014000 	.word	0x40014000
 8006ea8:	40014400 	.word	0x40014400
 8006eac:	40014800 	.word	0x40014800
 8006eb0:	fffffcff 	.word	0xfffffcff

08006eb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	4393      	bics	r3, r2
 8006ec6:	001a      	movs	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	4a32      	ldr	r2, [pc, #200]	; (8006fac <TIM_OC1_SetConfig+0xf8>)
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2203      	movs	r2, #3
 8006eea:	4393      	bics	r3, r2
 8006eec:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	2202      	movs	r2, #2
 8006efc:	4393      	bics	r3, r2
 8006efe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a28      	ldr	r2, [pc, #160]	; (8006fb0 <TIM_OC1_SetConfig+0xfc>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d00b      	beq.n	8006f2a <TIM_OC1_SetConfig+0x76>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a27      	ldr	r2, [pc, #156]	; (8006fb4 <TIM_OC1_SetConfig+0x100>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d007      	beq.n	8006f2a <TIM_OC1_SetConfig+0x76>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a26      	ldr	r2, [pc, #152]	; (8006fb8 <TIM_OC1_SetConfig+0x104>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d003      	beq.n	8006f2a <TIM_OC1_SetConfig+0x76>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a25      	ldr	r2, [pc, #148]	; (8006fbc <TIM_OC1_SetConfig+0x108>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d10c      	bne.n	8006f44 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2208      	movs	r2, #8
 8006f2e:	4393      	bics	r3, r2
 8006f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	2204      	movs	r2, #4
 8006f40:	4393      	bics	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a1a      	ldr	r2, [pc, #104]	; (8006fb0 <TIM_OC1_SetConfig+0xfc>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d00b      	beq.n	8006f64 <TIM_OC1_SetConfig+0xb0>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a19      	ldr	r2, [pc, #100]	; (8006fb4 <TIM_OC1_SetConfig+0x100>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d007      	beq.n	8006f64 <TIM_OC1_SetConfig+0xb0>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a18      	ldr	r2, [pc, #96]	; (8006fb8 <TIM_OC1_SetConfig+0x104>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d003      	beq.n	8006f64 <TIM_OC1_SetConfig+0xb0>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a17      	ldr	r2, [pc, #92]	; (8006fbc <TIM_OC1_SetConfig+0x108>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d111      	bne.n	8006f88 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	4a16      	ldr	r2, [pc, #88]	; (8006fc0 <TIM_OC1_SetConfig+0x10c>)
 8006f68:	4013      	ands	r3, r2
 8006f6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	4a15      	ldr	r2, [pc, #84]	; (8006fc4 <TIM_OC1_SetConfig+0x110>)
 8006f70:	4013      	ands	r3, r2
 8006f72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	695b      	ldr	r3, [r3, #20]
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	621a      	str	r2, [r3, #32]
}
 8006fa2:	46c0      	nop			; (mov r8, r8)
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	b006      	add	sp, #24
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	46c0      	nop			; (mov r8, r8)
 8006fac:	fffeff8f 	.word	0xfffeff8f
 8006fb0:	40012c00 	.word	0x40012c00
 8006fb4:	40014000 	.word	0x40014000
 8006fb8:	40014400 	.word	0x40014400
 8006fbc:	40014800 	.word	0x40014800
 8006fc0:	fffffeff 	.word	0xfffffeff
 8006fc4:	fffffdff 	.word	0xfffffdff

08006fc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	2210      	movs	r2, #16
 8006fd8:	4393      	bics	r3, r2
 8006fda:	001a      	movs	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	4a2e      	ldr	r2, [pc, #184]	; (80070b0 <TIM_OC2_SetConfig+0xe8>)
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	4a2d      	ldr	r2, [pc, #180]	; (80070b4 <TIM_OC2_SetConfig+0xec>)
 8006ffe:	4013      	ands	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	021b      	lsls	r3, r3, #8
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	2220      	movs	r2, #32
 8007012:	4393      	bics	r3, r2
 8007014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	011b      	lsls	r3, r3, #4
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	4313      	orrs	r3, r2
 8007020:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a24      	ldr	r2, [pc, #144]	; (80070b8 <TIM_OC2_SetConfig+0xf0>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d10d      	bne.n	8007046 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2280      	movs	r2, #128	; 0x80
 800702e:	4393      	bics	r3, r2
 8007030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	011b      	lsls	r3, r3, #4
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	4313      	orrs	r3, r2
 800703c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	2240      	movs	r2, #64	; 0x40
 8007042:	4393      	bics	r3, r2
 8007044:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a1b      	ldr	r2, [pc, #108]	; (80070b8 <TIM_OC2_SetConfig+0xf0>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d00b      	beq.n	8007066 <TIM_OC2_SetConfig+0x9e>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a1a      	ldr	r2, [pc, #104]	; (80070bc <TIM_OC2_SetConfig+0xf4>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d007      	beq.n	8007066 <TIM_OC2_SetConfig+0x9e>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a19      	ldr	r2, [pc, #100]	; (80070c0 <TIM_OC2_SetConfig+0xf8>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d003      	beq.n	8007066 <TIM_OC2_SetConfig+0x9e>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a18      	ldr	r2, [pc, #96]	; (80070c4 <TIM_OC2_SetConfig+0xfc>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d113      	bne.n	800708e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	4a17      	ldr	r2, [pc, #92]	; (80070c8 <TIM_OC2_SetConfig+0x100>)
 800706a:	4013      	ands	r3, r2
 800706c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	4a16      	ldr	r2, [pc, #88]	; (80070cc <TIM_OC2_SetConfig+0x104>)
 8007072:	4013      	ands	r3, r2
 8007074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	4313      	orrs	r3, r2
 8007080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	4313      	orrs	r3, r2
 800708c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	621a      	str	r2, [r3, #32]
}
 80070a8:	46c0      	nop			; (mov r8, r8)
 80070aa:	46bd      	mov	sp, r7
 80070ac:	b006      	add	sp, #24
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	feff8fff 	.word	0xfeff8fff
 80070b4:	fffffcff 	.word	0xfffffcff
 80070b8:	40012c00 	.word	0x40012c00
 80070bc:	40014000 	.word	0x40014000
 80070c0:	40014400 	.word	0x40014400
 80070c4:	40014800 	.word	0x40014800
 80070c8:	fffffbff 	.word	0xfffffbff
 80070cc:	fffff7ff 	.word	0xfffff7ff

080070d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	4a35      	ldr	r2, [pc, #212]	; (80071b4 <TIM_OC3_SetConfig+0xe4>)
 80070e0:	401a      	ands	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	4a2f      	ldr	r2, [pc, #188]	; (80071b8 <TIM_OC3_SetConfig+0xe8>)
 80070fc:	4013      	ands	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2203      	movs	r2, #3
 8007104:	4393      	bics	r3, r2
 8007106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	4a29      	ldr	r2, [pc, #164]	; (80071bc <TIM_OC3_SetConfig+0xec>)
 8007116:	4013      	ands	r3, r2
 8007118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	021b      	lsls	r3, r3, #8
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	4313      	orrs	r3, r2
 8007124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a25      	ldr	r2, [pc, #148]	; (80071c0 <TIM_OC3_SetConfig+0xf0>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d10d      	bne.n	800714a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	4a24      	ldr	r2, [pc, #144]	; (80071c4 <TIM_OC3_SetConfig+0xf4>)
 8007132:	4013      	ands	r3, r2
 8007134:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	021b      	lsls	r3, r3, #8
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	4313      	orrs	r3, r2
 8007140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	4a20      	ldr	r2, [pc, #128]	; (80071c8 <TIM_OC3_SetConfig+0xf8>)
 8007146:	4013      	ands	r3, r2
 8007148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a1c      	ldr	r2, [pc, #112]	; (80071c0 <TIM_OC3_SetConfig+0xf0>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d00b      	beq.n	800716a <TIM_OC3_SetConfig+0x9a>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a1d      	ldr	r2, [pc, #116]	; (80071cc <TIM_OC3_SetConfig+0xfc>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d007      	beq.n	800716a <TIM_OC3_SetConfig+0x9a>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a1c      	ldr	r2, [pc, #112]	; (80071d0 <TIM_OC3_SetConfig+0x100>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d003      	beq.n	800716a <TIM_OC3_SetConfig+0x9a>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a1b      	ldr	r2, [pc, #108]	; (80071d4 <TIM_OC3_SetConfig+0x104>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d113      	bne.n	8007192 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	4a1a      	ldr	r2, [pc, #104]	; (80071d8 <TIM_OC3_SetConfig+0x108>)
 800716e:	4013      	ands	r3, r2
 8007170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	4a19      	ldr	r2, [pc, #100]	; (80071dc <TIM_OC3_SetConfig+0x10c>)
 8007176:	4013      	ands	r3, r2
 8007178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	011b      	lsls	r3, r3, #4
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	4313      	orrs	r3, r2
 8007184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	011b      	lsls	r3, r3, #4
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	4313      	orrs	r3, r2
 8007190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	621a      	str	r2, [r3, #32]
}
 80071ac:	46c0      	nop			; (mov r8, r8)
 80071ae:	46bd      	mov	sp, r7
 80071b0:	b006      	add	sp, #24
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	fffffeff 	.word	0xfffffeff
 80071b8:	fffeff8f 	.word	0xfffeff8f
 80071bc:	fffffdff 	.word	0xfffffdff
 80071c0:	40012c00 	.word	0x40012c00
 80071c4:	fffff7ff 	.word	0xfffff7ff
 80071c8:	fffffbff 	.word	0xfffffbff
 80071cc:	40014000 	.word	0x40014000
 80071d0:	40014400 	.word	0x40014400
 80071d4:	40014800 	.word	0x40014800
 80071d8:	ffffefff 	.word	0xffffefff
 80071dc:	ffffdfff 	.word	0xffffdfff

080071e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	4a28      	ldr	r2, [pc, #160]	; (8007290 <TIM_OC4_SetConfig+0xb0>)
 80071f0:	401a      	ands	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4a22      	ldr	r2, [pc, #136]	; (8007294 <TIM_OC4_SetConfig+0xb4>)
 800720c:	4013      	ands	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	4a21      	ldr	r2, [pc, #132]	; (8007298 <TIM_OC4_SetConfig+0xb8>)
 8007214:	4013      	ands	r3, r2
 8007216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	021b      	lsls	r3, r3, #8
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	4313      	orrs	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	4a1d      	ldr	r2, [pc, #116]	; (800729c <TIM_OC4_SetConfig+0xbc>)
 8007228:	4013      	ands	r3, r2
 800722a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	031b      	lsls	r3, r3, #12
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	4313      	orrs	r3, r2
 8007236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a19      	ldr	r2, [pc, #100]	; (80072a0 <TIM_OC4_SetConfig+0xc0>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d00b      	beq.n	8007258 <TIM_OC4_SetConfig+0x78>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a18      	ldr	r2, [pc, #96]	; (80072a4 <TIM_OC4_SetConfig+0xc4>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d007      	beq.n	8007258 <TIM_OC4_SetConfig+0x78>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a17      	ldr	r2, [pc, #92]	; (80072a8 <TIM_OC4_SetConfig+0xc8>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d003      	beq.n	8007258 <TIM_OC4_SetConfig+0x78>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a16      	ldr	r2, [pc, #88]	; (80072ac <TIM_OC4_SetConfig+0xcc>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d109      	bne.n	800726c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	4a15      	ldr	r2, [pc, #84]	; (80072b0 <TIM_OC4_SetConfig+0xd0>)
 800725c:	4013      	ands	r3, r2
 800725e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	019b      	lsls	r3, r3, #6
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	4313      	orrs	r3, r2
 800726a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	621a      	str	r2, [r3, #32]
}
 8007286:	46c0      	nop			; (mov r8, r8)
 8007288:	46bd      	mov	sp, r7
 800728a:	b006      	add	sp, #24
 800728c:	bd80      	pop	{r7, pc}
 800728e:	46c0      	nop			; (mov r8, r8)
 8007290:	ffffefff 	.word	0xffffefff
 8007294:	feff8fff 	.word	0xfeff8fff
 8007298:	fffffcff 	.word	0xfffffcff
 800729c:	ffffdfff 	.word	0xffffdfff
 80072a0:	40012c00 	.word	0x40012c00
 80072a4:	40014000 	.word	0x40014000
 80072a8:	40014400 	.word	0x40014400
 80072ac:	40014800 	.word	0x40014800
 80072b0:	ffffbfff 	.word	0xffffbfff

080072b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	4a25      	ldr	r2, [pc, #148]	; (8007358 <TIM_OC5_SetConfig+0xa4>)
 80072c4:	401a      	ands	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4a1f      	ldr	r2, [pc, #124]	; (800735c <TIM_OC5_SetConfig+0xa8>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	4a1b      	ldr	r2, [pc, #108]	; (8007360 <TIM_OC5_SetConfig+0xac>)
 80072f2:	4013      	ands	r3, r2
 80072f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	041b      	lsls	r3, r3, #16
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	4313      	orrs	r3, r2
 8007300:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a17      	ldr	r2, [pc, #92]	; (8007364 <TIM_OC5_SetConfig+0xb0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d00b      	beq.n	8007322 <TIM_OC5_SetConfig+0x6e>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a16      	ldr	r2, [pc, #88]	; (8007368 <TIM_OC5_SetConfig+0xb4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d007      	beq.n	8007322 <TIM_OC5_SetConfig+0x6e>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a15      	ldr	r2, [pc, #84]	; (800736c <TIM_OC5_SetConfig+0xb8>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d003      	beq.n	8007322 <TIM_OC5_SetConfig+0x6e>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a14      	ldr	r2, [pc, #80]	; (8007370 <TIM_OC5_SetConfig+0xbc>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d109      	bne.n	8007336 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	4a0c      	ldr	r2, [pc, #48]	; (8007358 <TIM_OC5_SetConfig+0xa4>)
 8007326:	4013      	ands	r3, r2
 8007328:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	021b      	lsls	r3, r3, #8
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	4313      	orrs	r3, r2
 8007334:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	621a      	str	r2, [r3, #32]
}
 8007350:	46c0      	nop			; (mov r8, r8)
 8007352:	46bd      	mov	sp, r7
 8007354:	b006      	add	sp, #24
 8007356:	bd80      	pop	{r7, pc}
 8007358:	fffeffff 	.word	0xfffeffff
 800735c:	fffeff8f 	.word	0xfffeff8f
 8007360:	fffdffff 	.word	0xfffdffff
 8007364:	40012c00 	.word	0x40012c00
 8007368:	40014000 	.word	0x40014000
 800736c:	40014400 	.word	0x40014400
 8007370:	40014800 	.word	0x40014800

08007374 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	4a26      	ldr	r2, [pc, #152]	; (800741c <TIM_OC6_SetConfig+0xa8>)
 8007384:	401a      	ands	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800739a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4a20      	ldr	r2, [pc, #128]	; (8007420 <TIM_OC6_SetConfig+0xac>)
 80073a0:	4013      	ands	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	021b      	lsls	r3, r3, #8
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	4a1c      	ldr	r2, [pc, #112]	; (8007424 <TIM_OC6_SetConfig+0xb0>)
 80073b4:	4013      	ands	r3, r2
 80073b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	051b      	lsls	r3, r3, #20
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a18      	ldr	r2, [pc, #96]	; (8007428 <TIM_OC6_SetConfig+0xb4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d00b      	beq.n	80073e4 <TIM_OC6_SetConfig+0x70>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a17      	ldr	r2, [pc, #92]	; (800742c <TIM_OC6_SetConfig+0xb8>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d007      	beq.n	80073e4 <TIM_OC6_SetConfig+0x70>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a16      	ldr	r2, [pc, #88]	; (8007430 <TIM_OC6_SetConfig+0xbc>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d003      	beq.n	80073e4 <TIM_OC6_SetConfig+0x70>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a15      	ldr	r2, [pc, #84]	; (8007434 <TIM_OC6_SetConfig+0xc0>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d109      	bne.n	80073f8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	4a14      	ldr	r2, [pc, #80]	; (8007438 <TIM_OC6_SetConfig+0xc4>)
 80073e8:	4013      	ands	r3, r2
 80073ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	029b      	lsls	r3, r3, #10
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	621a      	str	r2, [r3, #32]
}
 8007412:	46c0      	nop			; (mov r8, r8)
 8007414:	46bd      	mov	sp, r7
 8007416:	b006      	add	sp, #24
 8007418:	bd80      	pop	{r7, pc}
 800741a:	46c0      	nop			; (mov r8, r8)
 800741c:	ffefffff 	.word	0xffefffff
 8007420:	feff8fff 	.word	0xfeff8fff
 8007424:	ffdfffff 	.word	0xffdfffff
 8007428:	40012c00 	.word	0x40012c00
 800742c:	40014000 	.word	0x40014000
 8007430:	40014400 	.word	0x40014400
 8007434:	40014800 	.word	0x40014800
 8007438:	fffbffff 	.word	0xfffbffff

0800743c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	2201      	movs	r2, #1
 8007454:	4393      	bics	r3, r2
 8007456:	001a      	movs	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	22f0      	movs	r2, #240	; 0xf0
 8007466:	4393      	bics	r3, r2
 8007468:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	011b      	lsls	r3, r3, #4
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	4313      	orrs	r3, r2
 8007472:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	220a      	movs	r2, #10
 8007478:	4393      	bics	r3, r2
 800747a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	4313      	orrs	r3, r2
 8007482:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	621a      	str	r2, [r3, #32]
}
 8007490:	46c0      	nop			; (mov r8, r8)
 8007492:	46bd      	mov	sp, r7
 8007494:	b006      	add	sp, #24
 8007496:	bd80      	pop	{r7, pc}

08007498 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	2210      	movs	r2, #16
 80074aa:	4393      	bics	r3, r2
 80074ac:	001a      	movs	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	4a0d      	ldr	r2, [pc, #52]	; (80074f8 <TIM_TI2_ConfigInputStage+0x60>)
 80074c2:	4013      	ands	r3, r2
 80074c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	031b      	lsls	r3, r3, #12
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	22a0      	movs	r2, #160	; 0xa0
 80074d4:	4393      	bics	r3, r2
 80074d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	011b      	lsls	r3, r3, #4
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	4313      	orrs	r3, r2
 80074e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	697a      	ldr	r2, [r7, #20]
 80074e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	621a      	str	r2, [r3, #32]
}
 80074ee:	46c0      	nop			; (mov r8, r8)
 80074f0:	46bd      	mov	sp, r7
 80074f2:	b006      	add	sp, #24
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	46c0      	nop			; (mov r8, r8)
 80074f8:	ffff0fff 	.word	0xffff0fff

080074fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	4a08      	ldr	r2, [pc, #32]	; (8007530 <TIM_ITRx_SetConfig+0x34>)
 8007510:	4013      	ands	r3, r2
 8007512:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	4313      	orrs	r3, r2
 800751a:	2207      	movs	r2, #7
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	609a      	str	r2, [r3, #8]
}
 8007526:	46c0      	nop			; (mov r8, r8)
 8007528:	46bd      	mov	sp, r7
 800752a:	b004      	add	sp, #16
 800752c:	bd80      	pop	{r7, pc}
 800752e:	46c0      	nop			; (mov r8, r8)
 8007530:	ffcfff8f 	.word	0xffcfff8f

08007534 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
 8007540:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	4a09      	ldr	r2, [pc, #36]	; (8007570 <TIM_ETR_SetConfig+0x3c>)
 800754c:	4013      	ands	r3, r2
 800754e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	021a      	lsls	r2, r3, #8
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	431a      	orrs	r2, r3
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4313      	orrs	r3, r2
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	4313      	orrs	r3, r2
 8007560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	609a      	str	r2, [r3, #8]
}
 8007568:	46c0      	nop			; (mov r8, r8)
 800756a:	46bd      	mov	sp, r7
 800756c:	b006      	add	sp, #24
 800756e:	bd80      	pop	{r7, pc}
 8007570:	ffff00ff 	.word	0xffff00ff

08007574 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	221f      	movs	r2, #31
 8007584:	4013      	ands	r3, r2
 8007586:	2201      	movs	r2, #1
 8007588:	409a      	lsls	r2, r3
 800758a:	0013      	movs	r3, r2
 800758c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	43d2      	mvns	r2, r2
 8007596:	401a      	ands	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a1a      	ldr	r2, [r3, #32]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	211f      	movs	r1, #31
 80075a4:	400b      	ands	r3, r1
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	4099      	lsls	r1, r3
 80075aa:	000b      	movs	r3, r1
 80075ac:	431a      	orrs	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	621a      	str	r2, [r3, #32]
}
 80075b2:	46c0      	nop			; (mov r8, r8)
 80075b4:	46bd      	mov	sp, r7
 80075b6:	b006      	add	sp, #24
 80075b8:	bd80      	pop	{r7, pc}
	...

080075bc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2184      	movs	r1, #132	; 0x84
 80075c8:	4a1c      	ldr	r2, [pc, #112]	; (800763c <TIM_ResetCallback+0x80>)
 80075ca:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2188      	movs	r1, #136	; 0x88
 80075d0:	4a1b      	ldr	r2, [pc, #108]	; (8007640 <TIM_ResetCallback+0x84>)
 80075d2:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	218c      	movs	r1, #140	; 0x8c
 80075d8:	4a1a      	ldr	r2, [pc, #104]	; (8007644 <TIM_ResetCallback+0x88>)
 80075da:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2190      	movs	r1, #144	; 0x90
 80075e0:	4a19      	ldr	r2, [pc, #100]	; (8007648 <TIM_ResetCallback+0x8c>)
 80075e2:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2194      	movs	r1, #148	; 0x94
 80075e8:	4a18      	ldr	r2, [pc, #96]	; (800764c <TIM_ResetCallback+0x90>)
 80075ea:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2198      	movs	r1, #152	; 0x98
 80075f0:	4a17      	ldr	r2, [pc, #92]	; (8007650 <TIM_ResetCallback+0x94>)
 80075f2:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	219c      	movs	r1, #156	; 0x9c
 80075f8:	4a16      	ldr	r2, [pc, #88]	; (8007654 <TIM_ResetCallback+0x98>)
 80075fa:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	21a0      	movs	r1, #160	; 0xa0
 8007600:	4a15      	ldr	r2, [pc, #84]	; (8007658 <TIM_ResetCallback+0x9c>)
 8007602:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	21a4      	movs	r1, #164	; 0xa4
 8007608:	4a14      	ldr	r2, [pc, #80]	; (800765c <TIM_ResetCallback+0xa0>)
 800760a:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	21a8      	movs	r1, #168	; 0xa8
 8007610:	4a13      	ldr	r2, [pc, #76]	; (8007660 <TIM_ResetCallback+0xa4>)
 8007612:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	21ac      	movs	r1, #172	; 0xac
 8007618:	4a12      	ldr	r2, [pc, #72]	; (8007664 <TIM_ResetCallback+0xa8>)
 800761a:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	21b0      	movs	r1, #176	; 0xb0
 8007620:	4a11      	ldr	r2, [pc, #68]	; (8007668 <TIM_ResetCallback+0xac>)
 8007622:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	21b4      	movs	r1, #180	; 0xb4
 8007628:	4a10      	ldr	r2, [pc, #64]	; (800766c <TIM_ResetCallback+0xb0>)
 800762a:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	21b8      	movs	r1, #184	; 0xb8
 8007630:	4a0f      	ldr	r2, [pc, #60]	; (8007670 <TIM_ResetCallback+0xb4>)
 8007632:	505a      	str	r2, [r3, r1]
}
 8007634:	46c0      	nop			; (mov r8, r8)
 8007636:	46bd      	mov	sp, r7
 8007638:	b002      	add	sp, #8
 800763a:	bd80      	pop	{r7, pc}
 800763c:	0800344d 	.word	0x0800344d
 8007640:	08006d25 	.word	0x08006d25
 8007644:	08006d85 	.word	0x08006d85
 8007648:	08006d95 	.word	0x08006d95
 800764c:	08006d45 	.word	0x08006d45
 8007650:	08006d55 	.word	0x08006d55
 8007654:	08006d35 	.word	0x08006d35
 8007658:	08006d65 	.word	0x08006d65
 800765c:	08006d75 	.word	0x08006d75
 8007660:	08006da5 	.word	0x08006da5
 8007664:	080079e5 	.word	0x080079e5
 8007668:	080079f5 	.word	0x080079f5
 800766c:	08007a05 	.word	0x08007a05
 8007670:	08007a15 	.word	0x08007a15

08007674 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d108      	bne.n	8007696 <HAL_TIMEx_PWMN_Start+0x22>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2244      	movs	r2, #68	; 0x44
 8007688:	5c9b      	ldrb	r3, [r3, r2]
 800768a:	b2db      	uxtb	r3, r3
 800768c:	3b01      	subs	r3, #1
 800768e:	1e5a      	subs	r2, r3, #1
 8007690:	4193      	sbcs	r3, r2
 8007692:	b2db      	uxtb	r3, r3
 8007694:	e01f      	b.n	80076d6 <HAL_TIMEx_PWMN_Start+0x62>
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	2b04      	cmp	r3, #4
 800769a:	d108      	bne.n	80076ae <HAL_TIMEx_PWMN_Start+0x3a>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2245      	movs	r2, #69	; 0x45
 80076a0:	5c9b      	ldrb	r3, [r3, r2]
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	3b01      	subs	r3, #1
 80076a6:	1e5a      	subs	r2, r3, #1
 80076a8:	4193      	sbcs	r3, r2
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	e013      	b.n	80076d6 <HAL_TIMEx_PWMN_Start+0x62>
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b08      	cmp	r3, #8
 80076b2:	d108      	bne.n	80076c6 <HAL_TIMEx_PWMN_Start+0x52>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2246      	movs	r2, #70	; 0x46
 80076b8:	5c9b      	ldrb	r3, [r3, r2]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	3b01      	subs	r3, #1
 80076be:	1e5a      	subs	r2, r3, #1
 80076c0:	4193      	sbcs	r3, r2
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	e007      	b.n	80076d6 <HAL_TIMEx_PWMN_Start+0x62>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2247      	movs	r2, #71	; 0x47
 80076ca:	5c9b      	ldrb	r3, [r3, r2]
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	3b01      	subs	r3, #1
 80076d0:	1e5a      	subs	r2, r3, #1
 80076d2:	4193      	sbcs	r3, r2
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e062      	b.n	80077a4 <HAL_TIMEx_PWMN_Start+0x130>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d104      	bne.n	80076ee <HAL_TIMEx_PWMN_Start+0x7a>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2244      	movs	r2, #68	; 0x44
 80076e8:	2102      	movs	r1, #2
 80076ea:	5499      	strb	r1, [r3, r2]
 80076ec:	e013      	b.n	8007716 <HAL_TIMEx_PWMN_Start+0xa2>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2b04      	cmp	r3, #4
 80076f2:	d104      	bne.n	80076fe <HAL_TIMEx_PWMN_Start+0x8a>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2245      	movs	r2, #69	; 0x45
 80076f8:	2102      	movs	r1, #2
 80076fa:	5499      	strb	r1, [r3, r2]
 80076fc:	e00b      	b.n	8007716 <HAL_TIMEx_PWMN_Start+0xa2>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b08      	cmp	r3, #8
 8007702:	d104      	bne.n	800770e <HAL_TIMEx_PWMN_Start+0x9a>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2246      	movs	r2, #70	; 0x46
 8007708:	2102      	movs	r1, #2
 800770a:	5499      	strb	r1, [r3, r2]
 800770c:	e003      	b.n	8007716 <HAL_TIMEx_PWMN_Start+0xa2>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2247      	movs	r2, #71	; 0x47
 8007712:	2102      	movs	r1, #2
 8007714:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	2204      	movs	r2, #4
 800771e:	0018      	movs	r0, r3
 8007720:	f000 f980 	bl	8007a24 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2180      	movs	r1, #128	; 0x80
 8007730:	0209      	lsls	r1, r1, #8
 8007732:	430a      	orrs	r2, r1
 8007734:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a1c      	ldr	r2, [pc, #112]	; (80077ac <HAL_TIMEx_PWMN_Start+0x138>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d00f      	beq.n	8007760 <HAL_TIMEx_PWMN_Start+0xec>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	2380      	movs	r3, #128	; 0x80
 8007746:	05db      	lsls	r3, r3, #23
 8007748:	429a      	cmp	r2, r3
 800774a:	d009      	beq.n	8007760 <HAL_TIMEx_PWMN_Start+0xec>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a17      	ldr	r2, [pc, #92]	; (80077b0 <HAL_TIMEx_PWMN_Start+0x13c>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d004      	beq.n	8007760 <HAL_TIMEx_PWMN_Start+0xec>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a16      	ldr	r2, [pc, #88]	; (80077b4 <HAL_TIMEx_PWMN_Start+0x140>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d116      	bne.n	800778e <HAL_TIMEx_PWMN_Start+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	4a14      	ldr	r2, [pc, #80]	; (80077b8 <HAL_TIMEx_PWMN_Start+0x144>)
 8007768:	4013      	ands	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2b06      	cmp	r3, #6
 8007770:	d016      	beq.n	80077a0 <HAL_TIMEx_PWMN_Start+0x12c>
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	2380      	movs	r3, #128	; 0x80
 8007776:	025b      	lsls	r3, r3, #9
 8007778:	429a      	cmp	r2, r3
 800777a:	d011      	beq.n	80077a0 <HAL_TIMEx_PWMN_Start+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2101      	movs	r1, #1
 8007788:	430a      	orrs	r2, r1
 800778a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800778c:	e008      	b.n	80077a0 <HAL_TIMEx_PWMN_Start+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2101      	movs	r1, #1
 800779a:	430a      	orrs	r2, r1
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	e000      	b.n	80077a2 <HAL_TIMEx_PWMN_Start+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	0018      	movs	r0, r3
 80077a6:	46bd      	mov	sp, r7
 80077a8:	b004      	add	sp, #16
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	40012c00 	.word	0x40012c00
 80077b0:	40000400 	.word	0x40000400
 80077b4:	40014000 	.word	0x40014000
 80077b8:	00010007 	.word	0x00010007

080077bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	223c      	movs	r2, #60	; 0x3c
 80077ca:	5c9b      	ldrb	r3, [r3, r2]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d101      	bne.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077d0:	2302      	movs	r3, #2
 80077d2:	e055      	b.n	8007880 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	223c      	movs	r2, #60	; 0x3c
 80077d8:	2101      	movs	r1, #1
 80077da:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	223d      	movs	r2, #61	; 0x3d
 80077e0:	2102      	movs	r1, #2
 80077e2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a23      	ldr	r2, [pc, #140]	; (8007888 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d108      	bne.n	8007810 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	4a22      	ldr	r2, [pc, #136]	; (800788c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007802:	4013      	ands	r3, r2
 8007804:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	4313      	orrs	r3, r2
 800780e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2270      	movs	r2, #112	; 0x70
 8007814:	4393      	bics	r3, r2
 8007816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	4313      	orrs	r3, r2
 8007820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a16      	ldr	r2, [pc, #88]	; (8007888 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d00f      	beq.n	8007854 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	2380      	movs	r3, #128	; 0x80
 800783a:	05db      	lsls	r3, r3, #23
 800783c:	429a      	cmp	r2, r3
 800783e:	d009      	beq.n	8007854 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a12      	ldr	r2, [pc, #72]	; (8007890 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d004      	beq.n	8007854 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a11      	ldr	r2, [pc, #68]	; (8007894 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d10c      	bne.n	800786e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2280      	movs	r2, #128	; 0x80
 8007858:	4393      	bics	r3, r2
 800785a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	4313      	orrs	r3, r2
 8007864:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	223d      	movs	r2, #61	; 0x3d
 8007872:	2101      	movs	r1, #1
 8007874:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	223c      	movs	r2, #60	; 0x3c
 800787a:	2100      	movs	r1, #0
 800787c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	0018      	movs	r0, r3
 8007882:	46bd      	mov	sp, r7
 8007884:	b004      	add	sp, #16
 8007886:	bd80      	pop	{r7, pc}
 8007888:	40012c00 	.word	0x40012c00
 800788c:	ff0fffff 	.word	0xff0fffff
 8007890:	40000400 	.word	0x40000400
 8007894:	40014000 	.word	0x40014000

08007898 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	223c      	movs	r2, #60	; 0x3c
 80078aa:	5c9b      	ldrb	r3, [r3, r2]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d101      	bne.n	80078b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80078b0:	2302      	movs	r3, #2
 80078b2:	e079      	b.n	80079a8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	223c      	movs	r2, #60	; 0x3c
 80078b8:	2101      	movs	r1, #1
 80078ba:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	22ff      	movs	r2, #255	; 0xff
 80078c0:	4393      	bics	r3, r2
 80078c2:	001a      	movs	r2, r3
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4a38      	ldr	r2, [pc, #224]	; (80079b0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80078d0:	401a      	ands	r2, r3
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	4a35      	ldr	r2, [pc, #212]	; (80079b4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80078de:	401a      	ands	r2, r3
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4a33      	ldr	r2, [pc, #204]	; (80079b8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80078ec:	401a      	ands	r2, r3
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4a30      	ldr	r2, [pc, #192]	; (80079bc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80078fa:	401a      	ands	r2, r3
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	4313      	orrs	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	4a2e      	ldr	r2, [pc, #184]	; (80079c0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8007908:	401a      	ands	r2, r3
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	4a2b      	ldr	r2, [pc, #172]	; (80079c4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8007916:	401a      	ands	r2, r3
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791c:	4313      	orrs	r3, r2
 800791e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	4a29      	ldr	r2, [pc, #164]	; (80079c8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8007924:	401a      	ands	r2, r3
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	041b      	lsls	r3, r3, #16
 800792c:	4313      	orrs	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a25      	ldr	r2, [pc, #148]	; (80079cc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d106      	bne.n	8007948 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	4a24      	ldr	r2, [pc, #144]	; (80079d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800793e:	401a      	ands	r2, r3
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	4313      	orrs	r3, r2
 8007946:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a1f      	ldr	r2, [pc, #124]	; (80079cc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d121      	bne.n	8007996 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	4a1f      	ldr	r2, [pc, #124]	; (80079d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007956:	401a      	ands	r2, r3
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795c:	051b      	lsls	r3, r3, #20
 800795e:	4313      	orrs	r3, r2
 8007960:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	4a1c      	ldr	r2, [pc, #112]	; (80079d8 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8007966:	401a      	ands	r2, r3
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	6a1b      	ldr	r3, [r3, #32]
 800796c:	4313      	orrs	r3, r2
 800796e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4a1a      	ldr	r2, [pc, #104]	; (80079dc <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8007974:	401a      	ands	r2, r3
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797a:	4313      	orrs	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a12      	ldr	r2, [pc, #72]	; (80079cc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d106      	bne.n	8007996 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4a15      	ldr	r2, [pc, #84]	; (80079e0 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800798c:	401a      	ands	r2, r3
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007992:	4313      	orrs	r3, r2
 8007994:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	223c      	movs	r2, #60	; 0x3c
 80079a2:	2100      	movs	r1, #0
 80079a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	0018      	movs	r0, r3
 80079aa:	46bd      	mov	sp, r7
 80079ac:	b004      	add	sp, #16
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	fffffcff 	.word	0xfffffcff
 80079b4:	fffffbff 	.word	0xfffffbff
 80079b8:	fffff7ff 	.word	0xfffff7ff
 80079bc:	ffffefff 	.word	0xffffefff
 80079c0:	ffffdfff 	.word	0xffffdfff
 80079c4:	ffffbfff 	.word	0xffffbfff
 80079c8:	fff0ffff 	.word	0xfff0ffff
 80079cc:	40012c00 	.word	0x40012c00
 80079d0:	efffffff 	.word	0xefffffff
 80079d4:	ff0fffff 	.word	0xff0fffff
 80079d8:	feffffff 	.word	0xfeffffff
 80079dc:	fdffffff 	.word	0xfdffffff
 80079e0:	dfffffff 	.word	0xdfffffff

080079e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079ec:	46c0      	nop			; (mov r8, r8)
 80079ee:	46bd      	mov	sp, r7
 80079f0:	b002      	add	sp, #8
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80079fc:	46c0      	nop			; (mov r8, r8)
 80079fe:	46bd      	mov	sp, r7
 8007a00:	b002      	add	sp, #8
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a0c:	46c0      	nop			; (mov r8, r8)
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	b002      	add	sp, #8
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a1c:	46c0      	nop			; (mov r8, r8)
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	b002      	add	sp, #8
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	221f      	movs	r2, #31
 8007a34:	4013      	ands	r3, r2
 8007a36:	2204      	movs	r2, #4
 8007a38:	409a      	lsls	r2, r3
 8007a3a:	0013      	movs	r3, r2
 8007a3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	43d2      	mvns	r2, r2
 8007a46:	401a      	ands	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a1a      	ldr	r2, [r3, #32]
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	211f      	movs	r1, #31
 8007a54:	400b      	ands	r3, r1
 8007a56:	6879      	ldr	r1, [r7, #4]
 8007a58:	4099      	lsls	r1, r3
 8007a5a:	000b      	movs	r3, r1
 8007a5c:	431a      	orrs	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	621a      	str	r2, [r3, #32]
}
 8007a62:	46c0      	nop			; (mov r8, r8)
 8007a64:	46bd      	mov	sp, r7
 8007a66:	b006      	add	sp, #24
 8007a68:	bd80      	pop	{r7, pc}
	...

08007a6c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e05d      	b.n	8007b3a <HAL_HalfDuplex_Init+0xce>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2288      	movs	r2, #136	; 0x88
 8007a82:	589b      	ldr	r3, [r3, r2]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d116      	bne.n	8007ab6 <HAL_HalfDuplex_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2284      	movs	r2, #132	; 0x84
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	0018      	movs	r0, r3
 8007a94:	f000 fc2c 	bl	80082f0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	22c4      	movs	r2, #196	; 0xc4
 8007a9c:	589b      	ldr	r3, [r3, r2]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d103      	bne.n	8007aaa <HAL_HalfDuplex_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	21c4      	movs	r1, #196	; 0xc4
 8007aa6:	4a27      	ldr	r2, [pc, #156]	; (8007b44 <HAL_HalfDuplex_Init+0xd8>)
 8007aa8:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	22c4      	movs	r2, #196	; 0xc4
 8007aae:	589b      	ldr	r3, [r3, r2]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	0010      	movs	r0, r2
 8007ab4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2288      	movs	r2, #136	; 0x88
 8007aba:	2124      	movs	r1, #36	; 0x24
 8007abc:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2101      	movs	r1, #1
 8007aca:	438a      	bics	r2, r1
 8007acc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	0018      	movs	r0, r3
 8007ad2:	f000 fc5d 	bl	8008390 <UART_SetConfig>
 8007ad6:	0003      	movs	r3, r0
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d101      	bne.n	8007ae0 <HAL_HalfDuplex_Init+0x74>
  {
    return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e02c      	b.n	8007b3a <HAL_HalfDuplex_Init+0xce>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d003      	beq.n	8007af0 <HAL_HalfDuplex_Init+0x84>
  {
    UART_AdvFeatureConfig(huart);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	0018      	movs	r0, r3
 8007aec:	f000 ff0e 	bl	800890c <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685a      	ldr	r2, [r3, #4]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4913      	ldr	r1, [pc, #76]	; (8007b48 <HAL_HalfDuplex_Init+0xdc>)
 8007afc:	400a      	ands	r2, r1
 8007afe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689a      	ldr	r2, [r3, #8]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2122      	movs	r1, #34	; 0x22
 8007b0c:	438a      	bics	r2, r1
 8007b0e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	689a      	ldr	r2, [r3, #8]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2108      	movs	r1, #8
 8007b1c:	430a      	orrs	r2, r1
 8007b1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	0018      	movs	r0, r3
 8007b34:	f000 ff9e 	bl	8008a74 <UART_CheckIdleState>
 8007b38:	0003      	movs	r3, r0
}
 8007b3a:	0018      	movs	r0, r3
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	b002      	add	sp, #8
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	46c0      	nop			; (mov r8, r8)
 8007b44:	080035b1 	.word	0x080035b1
 8007b48:	ffffb7ff 	.word	0xffffb7ff

08007b4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b4c:	b5b0      	push	{r4, r5, r7, lr}
 8007b4e:	b0aa      	sub	sp, #168	; 0xa8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	69db      	ldr	r3, [r3, #28]
 8007b5a:	22a4      	movs	r2, #164	; 0xa4
 8007b5c:	18b9      	adds	r1, r7, r2
 8007b5e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	20a0      	movs	r0, #160	; 0xa0
 8007b68:	1839      	adds	r1, r7, r0
 8007b6a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	249c      	movs	r4, #156	; 0x9c
 8007b74:	1939      	adds	r1, r7, r4
 8007b76:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b78:	0011      	movs	r1, r2
 8007b7a:	18bb      	adds	r3, r7, r2
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4aa5      	ldr	r2, [pc, #660]	; (8007e14 <HAL_UART_IRQHandler+0x2c8>)
 8007b80:	4013      	ands	r3, r2
 8007b82:	2298      	movs	r2, #152	; 0x98
 8007b84:	18bd      	adds	r5, r7, r2
 8007b86:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8007b88:	18bb      	adds	r3, r7, r2
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d11a      	bne.n	8007bc6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b90:	187b      	adds	r3, r7, r1
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2220      	movs	r2, #32
 8007b96:	4013      	ands	r3, r2
 8007b98:	d015      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b9a:	183b      	adds	r3, r7, r0
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	d105      	bne.n	8007bb0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ba4:	193b      	adds	r3, r7, r4
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	2380      	movs	r3, #128	; 0x80
 8007baa:	055b      	lsls	r3, r3, #21
 8007bac:	4013      	ands	r3, r2
 8007bae:	d00a      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d100      	bne.n	8007bba <HAL_UART_IRQHandler+0x6e>
 8007bb8:	e2ea      	b.n	8008190 <HAL_UART_IRQHandler+0x644>
      {
        huart->RxISR(huart);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	0010      	movs	r0, r2
 8007bc2:	4798      	blx	r3
      }
      return;
 8007bc4:	e2e4      	b.n	8008190 <HAL_UART_IRQHandler+0x644>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007bc6:	2398      	movs	r3, #152	; 0x98
 8007bc8:	18fb      	adds	r3, r7, r3
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d100      	bne.n	8007bd2 <HAL_UART_IRQHandler+0x86>
 8007bd0:	e128      	b.n	8007e24 <HAL_UART_IRQHandler+0x2d8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007bd2:	239c      	movs	r3, #156	; 0x9c
 8007bd4:	18fb      	adds	r3, r7, r3
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a8f      	ldr	r2, [pc, #572]	; (8007e18 <HAL_UART_IRQHandler+0x2cc>)
 8007bda:	4013      	ands	r3, r2
 8007bdc:	d106      	bne.n	8007bec <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007bde:	23a0      	movs	r3, #160	; 0xa0
 8007be0:	18fb      	adds	r3, r7, r3
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a8d      	ldr	r2, [pc, #564]	; (8007e1c <HAL_UART_IRQHandler+0x2d0>)
 8007be6:	4013      	ands	r3, r2
 8007be8:	d100      	bne.n	8007bec <HAL_UART_IRQHandler+0xa0>
 8007bea:	e11b      	b.n	8007e24 <HAL_UART_IRQHandler+0x2d8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007bec:	23a4      	movs	r3, #164	; 0xa4
 8007bee:	18fb      	adds	r3, r7, r3
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	d012      	beq.n	8007c1e <HAL_UART_IRQHandler+0xd2>
 8007bf8:	23a0      	movs	r3, #160	; 0xa0
 8007bfa:	18fb      	adds	r3, r7, r3
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	2380      	movs	r3, #128	; 0x80
 8007c00:	005b      	lsls	r3, r3, #1
 8007c02:	4013      	ands	r3, r2
 8007c04:	d00b      	beq.n	8007c1e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2290      	movs	r2, #144	; 0x90
 8007c12:	589b      	ldr	r3, [r3, r2]
 8007c14:	2201      	movs	r2, #1
 8007c16:	431a      	orrs	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2190      	movs	r1, #144	; 0x90
 8007c1c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c1e:	23a4      	movs	r3, #164	; 0xa4
 8007c20:	18fb      	adds	r3, r7, r3
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2202      	movs	r2, #2
 8007c26:	4013      	ands	r3, r2
 8007c28:	d011      	beq.n	8007c4e <HAL_UART_IRQHandler+0x102>
 8007c2a:	239c      	movs	r3, #156	; 0x9c
 8007c2c:	18fb      	adds	r3, r7, r3
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2201      	movs	r2, #1
 8007c32:	4013      	ands	r3, r2
 8007c34:	d00b      	beq.n	8007c4e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2290      	movs	r2, #144	; 0x90
 8007c42:	589b      	ldr	r3, [r3, r2]
 8007c44:	2204      	movs	r2, #4
 8007c46:	431a      	orrs	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2190      	movs	r1, #144	; 0x90
 8007c4c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c4e:	23a4      	movs	r3, #164	; 0xa4
 8007c50:	18fb      	adds	r3, r7, r3
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2204      	movs	r2, #4
 8007c56:	4013      	ands	r3, r2
 8007c58:	d011      	beq.n	8007c7e <HAL_UART_IRQHandler+0x132>
 8007c5a:	239c      	movs	r3, #156	; 0x9c
 8007c5c:	18fb      	adds	r3, r7, r3
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2201      	movs	r2, #1
 8007c62:	4013      	ands	r3, r2
 8007c64:	d00b      	beq.n	8007c7e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2204      	movs	r2, #4
 8007c6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2290      	movs	r2, #144	; 0x90
 8007c72:	589b      	ldr	r3, [r3, r2]
 8007c74:	2202      	movs	r2, #2
 8007c76:	431a      	orrs	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2190      	movs	r1, #144	; 0x90
 8007c7c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c7e:	23a4      	movs	r3, #164	; 0xa4
 8007c80:	18fb      	adds	r3, r7, r3
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2208      	movs	r2, #8
 8007c86:	4013      	ands	r3, r2
 8007c88:	d017      	beq.n	8007cba <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c8a:	23a0      	movs	r3, #160	; 0xa0
 8007c8c:	18fb      	adds	r3, r7, r3
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2220      	movs	r2, #32
 8007c92:	4013      	ands	r3, r2
 8007c94:	d105      	bne.n	8007ca2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007c96:	239c      	movs	r3, #156	; 0x9c
 8007c98:	18fb      	adds	r3, r7, r3
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a5e      	ldr	r2, [pc, #376]	; (8007e18 <HAL_UART_IRQHandler+0x2cc>)
 8007c9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ca0:	d00b      	beq.n	8007cba <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2208      	movs	r2, #8
 8007ca8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2290      	movs	r2, #144	; 0x90
 8007cae:	589b      	ldr	r3, [r3, r2]
 8007cb0:	2208      	movs	r2, #8
 8007cb2:	431a      	orrs	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2190      	movs	r1, #144	; 0x90
 8007cb8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007cba:	23a4      	movs	r3, #164	; 0xa4
 8007cbc:	18fb      	adds	r3, r7, r3
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	2380      	movs	r3, #128	; 0x80
 8007cc2:	011b      	lsls	r3, r3, #4
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	d013      	beq.n	8007cf0 <HAL_UART_IRQHandler+0x1a4>
 8007cc8:	23a0      	movs	r3, #160	; 0xa0
 8007cca:	18fb      	adds	r3, r7, r3
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	2380      	movs	r3, #128	; 0x80
 8007cd0:	04db      	lsls	r3, r3, #19
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	d00c      	beq.n	8007cf0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2280      	movs	r2, #128	; 0x80
 8007cdc:	0112      	lsls	r2, r2, #4
 8007cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2290      	movs	r2, #144	; 0x90
 8007ce4:	589b      	ldr	r3, [r3, r2]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2190      	movs	r1, #144	; 0x90
 8007cee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2290      	movs	r2, #144	; 0x90
 8007cf4:	589b      	ldr	r3, [r3, r2]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d100      	bne.n	8007cfc <HAL_UART_IRQHandler+0x1b0>
 8007cfa:	e24b      	b.n	8008194 <HAL_UART_IRQHandler+0x648>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007cfc:	23a4      	movs	r3, #164	; 0xa4
 8007cfe:	18fb      	adds	r3, r7, r3
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2220      	movs	r2, #32
 8007d04:	4013      	ands	r3, r2
 8007d06:	d015      	beq.n	8007d34 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d08:	23a0      	movs	r3, #160	; 0xa0
 8007d0a:	18fb      	adds	r3, r7, r3
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	4013      	ands	r3, r2
 8007d12:	d106      	bne.n	8007d22 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d14:	239c      	movs	r3, #156	; 0x9c
 8007d16:	18fb      	adds	r3, r7, r3
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	2380      	movs	r3, #128	; 0x80
 8007d1c:	055b      	lsls	r3, r3, #21
 8007d1e:	4013      	ands	r3, r2
 8007d20:	d008      	beq.n	8007d34 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d004      	beq.n	8007d34 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	0010      	movs	r0, r2
 8007d32:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2290      	movs	r2, #144	; 0x90
 8007d38:	589b      	ldr	r3, [r3, r2]
 8007d3a:	2194      	movs	r1, #148	; 0x94
 8007d3c:	187a      	adds	r2, r7, r1
 8007d3e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	2240      	movs	r2, #64	; 0x40
 8007d48:	4013      	ands	r3, r2
 8007d4a:	2b40      	cmp	r3, #64	; 0x40
 8007d4c:	d004      	beq.n	8007d58 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007d4e:	187b      	adds	r3, r7, r1
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2228      	movs	r2, #40	; 0x28
 8007d54:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d56:	d050      	beq.n	8007dfa <HAL_UART_IRQHandler+0x2ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	0018      	movs	r0, r3
 8007d5c:	f001 f886 	bl	8008e6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	2240      	movs	r2, #64	; 0x40
 8007d68:	4013      	ands	r3, r2
 8007d6a:	2b40      	cmp	r3, #64	; 0x40
 8007d6c:	d13e      	bne.n	8007dec <HAL_UART_IRQHandler+0x2a0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d72:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007d74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d76:	2090      	movs	r0, #144	; 0x90
 8007d78:	183a      	adds	r2, r7, r0
 8007d7a:	6013      	str	r3, [r2, #0]
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d82:	f383 8810 	msr	PRIMASK, r3
}
 8007d86:	46c0      	nop			; (mov r8, r8)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	689a      	ldr	r2, [r3, #8]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2140      	movs	r1, #64	; 0x40
 8007d94:	438a      	bics	r2, r1
 8007d96:	609a      	str	r2, [r3, #8]
 8007d98:	183b      	adds	r3, r7, r0
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007da0:	f383 8810 	msr	PRIMASK, r3
}
 8007da4:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2280      	movs	r2, #128	; 0x80
 8007daa:	589b      	ldr	r3, [r3, r2]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d016      	beq.n	8007dde <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2280      	movs	r2, #128	; 0x80
 8007db4:	589b      	ldr	r3, [r3, r2]
 8007db6:	4a1a      	ldr	r2, [pc, #104]	; (8007e20 <HAL_UART_IRQHandler+0x2d4>)
 8007db8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2280      	movs	r2, #128	; 0x80
 8007dbe:	589b      	ldr	r3, [r3, r2]
 8007dc0:	0018      	movs	r0, r3
 8007dc2:	f7fc fff7 	bl	8004db4 <HAL_DMA_Abort_IT>
 8007dc6:	1e03      	subs	r3, r0, #0
 8007dc8:	d022      	beq.n	8007e10 <HAL_UART_IRQHandler+0x2c4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2280      	movs	r2, #128	; 0x80
 8007dce:	589b      	ldr	r3, [r3, r2]
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	2180      	movs	r1, #128	; 0x80
 8007dd6:	5852      	ldr	r2, [r2, r1]
 8007dd8:	0010      	movs	r0, r2
 8007dda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ddc:	e018      	b.n	8007e10 <HAL_UART_IRQHandler+0x2c4>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	22a4      	movs	r2, #164	; 0xa4
 8007de2:	589b      	ldr	r3, [r3, r2]
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	0010      	movs	r0, r2
 8007de8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dea:	e011      	b.n	8007e10 <HAL_UART_IRQHandler+0x2c4>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	22a4      	movs	r2, #164	; 0xa4
 8007df0:	589b      	ldr	r3, [r3, r2]
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	0010      	movs	r0, r2
 8007df6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007df8:	e00a      	b.n	8007e10 <HAL_UART_IRQHandler+0x2c4>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	22a4      	movs	r2, #164	; 0xa4
 8007dfe:	589b      	ldr	r3, [r3, r2]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	0010      	movs	r0, r2
 8007e04:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2290      	movs	r2, #144	; 0x90
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007e0e:	e1c1      	b.n	8008194 <HAL_UART_IRQHandler+0x648>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e10:	46c0      	nop			; (mov r8, r8)
    return;
 8007e12:	e1bf      	b.n	8008194 <HAL_UART_IRQHandler+0x648>
 8007e14:	0000080f 	.word	0x0000080f
 8007e18:	10000001 	.word	0x10000001
 8007e1c:	04000120 	.word	0x04000120
 8007e20:	0800913f 	.word	0x0800913f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d000      	beq.n	8007e2e <HAL_UART_IRQHandler+0x2e2>
 8007e2c:	e140      	b.n	80080b0 <HAL_UART_IRQHandler+0x564>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007e2e:	23a4      	movs	r3, #164	; 0xa4
 8007e30:	18fb      	adds	r3, r7, r3
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2210      	movs	r2, #16
 8007e36:	4013      	ands	r3, r2
 8007e38:	d100      	bne.n	8007e3c <HAL_UART_IRQHandler+0x2f0>
 8007e3a:	e139      	b.n	80080b0 <HAL_UART_IRQHandler+0x564>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007e3c:	23a0      	movs	r3, #160	; 0xa0
 8007e3e:	18fb      	adds	r3, r7, r3
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2210      	movs	r2, #16
 8007e44:	4013      	ands	r3, r2
 8007e46:	d100      	bne.n	8007e4a <HAL_UART_IRQHandler+0x2fe>
 8007e48:	e132      	b.n	80080b0 <HAL_UART_IRQHandler+0x564>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2210      	movs	r2, #16
 8007e50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	2240      	movs	r2, #64	; 0x40
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	2b40      	cmp	r3, #64	; 0x40
 8007e5e:	d000      	beq.n	8007e62 <HAL_UART_IRQHandler+0x316>
 8007e60:	e0a5      	b.n	8007fae <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2280      	movs	r2, #128	; 0x80
 8007e66:	589b      	ldr	r3, [r3, r2]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	217e      	movs	r1, #126	; 0x7e
 8007e6e:	187b      	adds	r3, r7, r1
 8007e70:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007e72:	187b      	adds	r3, r7, r1
 8007e74:	881b      	ldrh	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d100      	bne.n	8007e7c <HAL_UART_IRQHandler+0x330>
 8007e7a:	e18d      	b.n	8008198 <HAL_UART_IRQHandler+0x64c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	225c      	movs	r2, #92	; 0x5c
 8007e80:	5a9b      	ldrh	r3, [r3, r2]
 8007e82:	187a      	adds	r2, r7, r1
 8007e84:	8812      	ldrh	r2, [r2, #0]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d300      	bcc.n	8007e8c <HAL_UART_IRQHandler+0x340>
 8007e8a:	e185      	b.n	8008198 <HAL_UART_IRQHandler+0x64c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	187a      	adds	r2, r7, r1
 8007e90:	215e      	movs	r1, #94	; 0x5e
 8007e92:	8812      	ldrh	r2, [r2, #0]
 8007e94:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2280      	movs	r2, #128	; 0x80
 8007e9a:	589b      	ldr	r3, [r3, r2]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2220      	movs	r2, #32
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	d170      	bne.n	8007f88 <HAL_UART_IRQHandler+0x43c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8007eaa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007eae:	67bb      	str	r3, [r7, #120]	; 0x78
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb6:	f383 8810 	msr	PRIMASK, r3
}
 8007eba:	46c0      	nop			; (mov r8, r8)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	49b8      	ldr	r1, [pc, #736]	; (80081a8 <HAL_UART_IRQHandler+0x65c>)
 8007ec8:	400a      	ands	r2, r1
 8007eca:	601a      	str	r2, [r3, #0]
 8007ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ece:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed2:	f383 8810 	msr	PRIMASK, r3
}
 8007ed6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8007edc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ee0:	677b      	str	r3, [r7, #116]	; 0x74
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ee8:	f383 8810 	msr	PRIMASK, r3
}
 8007eec:	46c0      	nop			; (mov r8, r8)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	689a      	ldr	r2, [r3, #8]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2101      	movs	r1, #1
 8007efa:	438a      	bics	r2, r1
 8007efc:	609a      	str	r2, [r3, #8]
 8007efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f00:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f04:	f383 8810 	msr	PRIMASK, r3
}
 8007f08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f0e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f12:	673b      	str	r3, [r7, #112]	; 0x70
 8007f14:	2301      	movs	r3, #1
 8007f16:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f1a:	f383 8810 	msr	PRIMASK, r3
}
 8007f1e:	46c0      	nop			; (mov r8, r8)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689a      	ldr	r2, [r3, #8]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2140      	movs	r1, #64	; 0x40
 8007f2c:	438a      	bics	r2, r1
 8007f2e:	609a      	str	r2, [r3, #8]
 8007f30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f32:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f36:	f383 8810 	msr	PRIMASK, r3
}
 8007f3a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	228c      	movs	r2, #140	; 0x8c
 8007f40:	2120      	movs	r1, #32
 8007f42:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f4e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f54:	2301      	movs	r3, #1
 8007f56:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f5a:	f383 8810 	msr	PRIMASK, r3
}
 8007f5e:	46c0      	nop			; (mov r8, r8)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2110      	movs	r1, #16
 8007f6c:	438a      	bics	r2, r1
 8007f6e:	601a      	str	r2, [r3, #0]
 8007f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f72:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f76:	f383 8810 	msr	PRIMASK, r3
}
 8007f7a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2280      	movs	r2, #128	; 0x80
 8007f80:	589b      	ldr	r3, [r3, r2]
 8007f82:	0018      	movs	r0, r3
 8007f84:	f7fc feb4 	bl	8004cf0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	22c0      	movs	r2, #192	; 0xc0
 8007f92:	589b      	ldr	r3, [r3, r2]
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	215c      	movs	r1, #92	; 0x5c
 8007f98:	5a51      	ldrh	r1, [r2, r1]
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	205e      	movs	r0, #94	; 0x5e
 8007f9e:	5a12      	ldrh	r2, [r2, r0]
 8007fa0:	b292      	uxth	r2, r2
 8007fa2:	1a8a      	subs	r2, r1, r2
 8007fa4:	b291      	uxth	r1, r2
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	0010      	movs	r0, r2
 8007faa:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007fac:	e0f4      	b.n	8008198 <HAL_UART_IRQHandler+0x64c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	225c      	movs	r2, #92	; 0x5c
 8007fb2:	5a99      	ldrh	r1, [r3, r2]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	225e      	movs	r2, #94	; 0x5e
 8007fb8:	5a9b      	ldrh	r3, [r3, r2]
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	208e      	movs	r0, #142	; 0x8e
 8007fbe:	183b      	adds	r3, r7, r0
 8007fc0:	1a8a      	subs	r2, r1, r2
 8007fc2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	225e      	movs	r2, #94	; 0x5e
 8007fc8:	5a9b      	ldrh	r3, [r3, r2]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d100      	bne.n	8007fd2 <HAL_UART_IRQHandler+0x486>
 8007fd0:	e0e4      	b.n	800819c <HAL_UART_IRQHandler+0x650>
          && (nb_rx_data > 0U))
 8007fd2:	183b      	adds	r3, r7, r0
 8007fd4:	881b      	ldrh	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d100      	bne.n	8007fdc <HAL_UART_IRQHandler+0x490>
 8007fda:	e0df      	b.n	800819c <HAL_UART_IRQHandler+0x650>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fdc:	f3ef 8310 	mrs	r3, PRIMASK
 8007fe0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fe4:	2488      	movs	r4, #136	; 0x88
 8007fe6:	193a      	adds	r2, r7, r4
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	2301      	movs	r3, #1
 8007fec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	f383 8810 	msr	PRIMASK, r3
}
 8007ff4:	46c0      	nop			; (mov r8, r8)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	496a      	ldr	r1, [pc, #424]	; (80081ac <HAL_UART_IRQHandler+0x660>)
 8008002:	400a      	ands	r2, r1
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	193b      	adds	r3, r7, r4
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	f383 8810 	msr	PRIMASK, r3
}
 8008012:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008014:	f3ef 8310 	mrs	r3, PRIMASK
 8008018:	61bb      	str	r3, [r7, #24]
  return(result);
 800801a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800801c:	2484      	movs	r4, #132	; 0x84
 800801e:	193a      	adds	r2, r7, r4
 8008020:	6013      	str	r3, [r2, #0]
 8008022:	2301      	movs	r3, #1
 8008024:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	f383 8810 	msr	PRIMASK, r3
}
 800802c:	46c0      	nop			; (mov r8, r8)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689a      	ldr	r2, [r3, #8]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	495d      	ldr	r1, [pc, #372]	; (80081b0 <HAL_UART_IRQHandler+0x664>)
 800803a:	400a      	ands	r2, r1
 800803c:	609a      	str	r2, [r3, #8]
 800803e:	193b      	adds	r3, r7, r4
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008044:	6a3b      	ldr	r3, [r7, #32]
 8008046:	f383 8810 	msr	PRIMASK, r3
}
 800804a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	228c      	movs	r2, #140	; 0x8c
 8008050:	2120      	movs	r1, #32
 8008052:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008060:	f3ef 8310 	mrs	r3, PRIMASK
 8008064:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008066:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008068:	2480      	movs	r4, #128	; 0x80
 800806a:	193a      	adds	r2, r7, r4
 800806c:	6013      	str	r3, [r2, #0]
 800806e:	2301      	movs	r3, #1
 8008070:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008074:	f383 8810 	msr	PRIMASK, r3
}
 8008078:	46c0      	nop			; (mov r8, r8)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2110      	movs	r1, #16
 8008086:	438a      	bics	r2, r1
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	193b      	adds	r3, r7, r4
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008092:	f383 8810 	msr	PRIMASK, r3
}
 8008096:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2202      	movs	r2, #2
 800809c:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	22c0      	movs	r2, #192	; 0xc0
 80080a2:	589b      	ldr	r3, [r3, r2]
 80080a4:	183a      	adds	r2, r7, r0
 80080a6:	8811      	ldrh	r1, [r2, #0]
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	0010      	movs	r0, r2
 80080ac:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80080ae:	e075      	b.n	800819c <HAL_UART_IRQHandler+0x650>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80080b0:	23a4      	movs	r3, #164	; 0xa4
 80080b2:	18fb      	adds	r3, r7, r3
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	2380      	movs	r3, #128	; 0x80
 80080b8:	035b      	lsls	r3, r3, #13
 80080ba:	4013      	ands	r3, r2
 80080bc:	d012      	beq.n	80080e4 <HAL_UART_IRQHandler+0x598>
 80080be:	239c      	movs	r3, #156	; 0x9c
 80080c0:	18fb      	adds	r3, r7, r3
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	2380      	movs	r3, #128	; 0x80
 80080c6:	03db      	lsls	r3, r3, #15
 80080c8:	4013      	ands	r3, r2
 80080ca:	d00b      	beq.n	80080e4 <HAL_UART_IRQHandler+0x598>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2280      	movs	r2, #128	; 0x80
 80080d2:	0352      	lsls	r2, r2, #13
 80080d4:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	22b4      	movs	r2, #180	; 0xb4
 80080da:	589b      	ldr	r3, [r3, r2]
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	0010      	movs	r0, r2
 80080e0:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080e2:	e05e      	b.n	80081a2 <HAL_UART_IRQHandler+0x656>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80080e4:	23a4      	movs	r3, #164	; 0xa4
 80080e6:	18fb      	adds	r3, r7, r3
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2280      	movs	r2, #128	; 0x80
 80080ec:	4013      	ands	r3, r2
 80080ee:	d016      	beq.n	800811e <HAL_UART_IRQHandler+0x5d2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80080f0:	23a0      	movs	r3, #160	; 0xa0
 80080f2:	18fb      	adds	r3, r7, r3
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2280      	movs	r2, #128	; 0x80
 80080f8:	4013      	ands	r3, r2
 80080fa:	d106      	bne.n	800810a <HAL_UART_IRQHandler+0x5be>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80080fc:	239c      	movs	r3, #156	; 0x9c
 80080fe:	18fb      	adds	r3, r7, r3
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	2380      	movs	r3, #128	; 0x80
 8008104:	041b      	lsls	r3, r3, #16
 8008106:	4013      	ands	r3, r2
 8008108:	d009      	beq.n	800811e <HAL_UART_IRQHandler+0x5d2>
  {
    if (huart->TxISR != NULL)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800810e:	2b00      	cmp	r3, #0
 8008110:	d046      	beq.n	80081a0 <HAL_UART_IRQHandler+0x654>
    {
      huart->TxISR(huart);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	0010      	movs	r0, r2
 800811a:	4798      	blx	r3
    }
    return;
 800811c:	e040      	b.n	80081a0 <HAL_UART_IRQHandler+0x654>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800811e:	23a4      	movs	r3, #164	; 0xa4
 8008120:	18fb      	adds	r3, r7, r3
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2240      	movs	r2, #64	; 0x40
 8008126:	4013      	ands	r3, r2
 8008128:	d00a      	beq.n	8008140 <HAL_UART_IRQHandler+0x5f4>
 800812a:	23a0      	movs	r3, #160	; 0xa0
 800812c:	18fb      	adds	r3, r7, r3
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2240      	movs	r2, #64	; 0x40
 8008132:	4013      	ands	r3, r2
 8008134:	d004      	beq.n	8008140 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	0018      	movs	r0, r3
 800813a:	f001 f819 	bl	8009170 <UART_EndTransmit_IT>
    return;
 800813e:	e030      	b.n	80081a2 <HAL_UART_IRQHandler+0x656>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008140:	23a4      	movs	r3, #164	; 0xa4
 8008142:	18fb      	adds	r3, r7, r3
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	2380      	movs	r3, #128	; 0x80
 8008148:	041b      	lsls	r3, r3, #16
 800814a:	4013      	ands	r3, r2
 800814c:	d00d      	beq.n	800816a <HAL_UART_IRQHandler+0x61e>
 800814e:	23a0      	movs	r3, #160	; 0xa0
 8008150:	18fb      	adds	r3, r7, r3
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	2380      	movs	r3, #128	; 0x80
 8008156:	05db      	lsls	r3, r3, #23
 8008158:	4013      	ands	r3, r2
 800815a:	d006      	beq.n	800816a <HAL_UART_IRQHandler+0x61e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	22bc      	movs	r2, #188	; 0xbc
 8008160:	589b      	ldr	r3, [r3, r2]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	0010      	movs	r0, r2
 8008166:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008168:	e01b      	b.n	80081a2 <HAL_UART_IRQHandler+0x656>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800816a:	23a4      	movs	r3, #164	; 0xa4
 800816c:	18fb      	adds	r3, r7, r3
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	2380      	movs	r3, #128	; 0x80
 8008172:	045b      	lsls	r3, r3, #17
 8008174:	4013      	ands	r3, r2
 8008176:	d014      	beq.n	80081a2 <HAL_UART_IRQHandler+0x656>
 8008178:	23a0      	movs	r3, #160	; 0xa0
 800817a:	18fb      	adds	r3, r7, r3
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	da0f      	bge.n	80081a2 <HAL_UART_IRQHandler+0x656>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	22b8      	movs	r2, #184	; 0xb8
 8008186:	589b      	ldr	r3, [r3, r2]
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	0010      	movs	r0, r2
 800818c:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800818e:	e008      	b.n	80081a2 <HAL_UART_IRQHandler+0x656>
      return;
 8008190:	46c0      	nop			; (mov r8, r8)
 8008192:	e006      	b.n	80081a2 <HAL_UART_IRQHandler+0x656>
    return;
 8008194:	46c0      	nop			; (mov r8, r8)
 8008196:	e004      	b.n	80081a2 <HAL_UART_IRQHandler+0x656>
      return;
 8008198:	46c0      	nop			; (mov r8, r8)
 800819a:	e002      	b.n	80081a2 <HAL_UART_IRQHandler+0x656>
      return;
 800819c:	46c0      	nop			; (mov r8, r8)
 800819e:	e000      	b.n	80081a2 <HAL_UART_IRQHandler+0x656>
    return;
 80081a0:	46c0      	nop			; (mov r8, r8)
  }
}
 80081a2:	46bd      	mov	sp, r7
 80081a4:	b02a      	add	sp, #168	; 0xa8
 80081a6:	bdb0      	pop	{r4, r5, r7, pc}
 80081a8:	fffffeff 	.word	0xfffffeff
 80081ac:	fffffedf 	.word	0xfffffedf
 80081b0:	effffffe 	.word	0xeffffffe

080081b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80081bc:	46c0      	nop			; (mov r8, r8)
 80081be:	46bd      	mov	sp, r7
 80081c0:	b002      	add	sp, #8
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80081cc:	46c0      	nop			; (mov r8, r8)
 80081ce:	46bd      	mov	sp, r7
 80081d0:	b002      	add	sp, #8
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80081dc:	46c0      	nop			; (mov r8, r8)
 80081de:	46bd      	mov	sp, r7
 80081e0:	b002      	add	sp, #8
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80081ec:	46c0      	nop			; (mov r8, r8)
 80081ee:	46bd      	mov	sp, r7
 80081f0:	b002      	add	sp, #8
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80081fc:	46c0      	nop			; (mov r8, r8)
 80081fe:	46bd      	mov	sp, r7
 8008200:	b002      	add	sp, #8
 8008202:	bd80      	pop	{r7, pc}

08008204 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800820c:	46c0      	nop			; (mov r8, r8)
 800820e:	46bd      	mov	sp, r7
 8008210:	b002      	add	sp, #8
 8008212:	bd80      	pop	{r7, pc}

08008214 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800821c:	46c0      	nop			; (mov r8, r8)
 800821e:	46bd      	mov	sp, r7
 8008220:	b002      	add	sp, #8
 8008222:	bd80      	pop	{r7, pc}

08008224 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800822c:	46c0      	nop			; (mov r8, r8)
 800822e:	46bd      	mov	sp, r7
 8008230:	b002      	add	sp, #8
 8008232:	bd80      	pop	{r7, pc}

08008234 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	000a      	movs	r2, r1
 800823e:	1cbb      	adds	r3, r7, #2
 8008240:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008242:	46c0      	nop			; (mov r8, r8)
 8008244:	46bd      	mov	sp, r7
 8008246:	b002      	add	sp, #8
 8008248:	bd80      	pop	{r7, pc}

0800824a <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b08a      	sub	sp, #40	; 0x28
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2284      	movs	r2, #132	; 0x84
 8008256:	5c9b      	ldrb	r3, [r3, r2]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d101      	bne.n	8008260 <HAL_HalfDuplex_EnableReceiver+0x16>
 800825c:	2302      	movs	r3, #2
 800825e:	e042      	b.n	80082e6 <HAL_HalfDuplex_EnableReceiver+0x9c>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2284      	movs	r2, #132	; 0x84
 8008264:	2101      	movs	r1, #1
 8008266:	5499      	strb	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_BUSY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2288      	movs	r2, #136	; 0x88
 800826c:	2124      	movs	r1, #36	; 0x24
 800826e:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008270:	f3ef 8310 	mrs	r3, PRIMASK
 8008274:	60bb      	str	r3, [r7, #8]
  return(result);
 8008276:	68bb      	ldr	r3, [r7, #8]

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8008278:	627b      	str	r3, [r7, #36]	; 0x24
 800827a:	2301      	movs	r3, #1
 800827c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f383 8810 	msr	PRIMASK, r3
}
 8008284:	46c0      	nop			; (mov r8, r8)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	210c      	movs	r1, #12
 8008292:	438a      	bics	r2, r1
 8008294:	601a      	str	r2, [r3, #0]
 8008296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008298:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f383 8810 	msr	PRIMASK, r3
}
 80082a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082a2:	f3ef 8310 	mrs	r3, PRIMASK
 80082a6:	617b      	str	r3, [r7, #20]
  return(result);
 80082a8:	697b      	ldr	r3, [r7, #20]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 80082aa:	623b      	str	r3, [r7, #32]
 80082ac:	2301      	movs	r3, #1
 80082ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	f383 8810 	msr	PRIMASK, r3
}
 80082b6:	46c0      	nop			; (mov r8, r8)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2104      	movs	r1, #4
 80082c4:	430a      	orrs	r2, r1
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	6a3b      	ldr	r3, [r7, #32]
 80082ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	f383 8810 	msr	PRIMASK, r3
}
 80082d2:	46c0      	nop			; (mov r8, r8)

  huart->gState = HAL_UART_STATE_READY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2288      	movs	r2, #136	; 0x88
 80082d8:	2120      	movs	r1, #32
 80082da:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2284      	movs	r2, #132	; 0x84
 80082e0:	2100      	movs	r1, #0
 80082e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	0018      	movs	r0, r3
 80082e8:	46bd      	mov	sp, r7
 80082ea:	b00a      	add	sp, #40	; 0x28
 80082ec:	bd80      	pop	{r7, pc}
	...

080082f0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2194      	movs	r1, #148	; 0x94
 80082fc:	4a18      	ldr	r2, [pc, #96]	; (8008360 <UART_InitCallbacksToDefault+0x70>)
 80082fe:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2198      	movs	r1, #152	; 0x98
 8008304:	4a17      	ldr	r2, [pc, #92]	; (8008364 <UART_InitCallbacksToDefault+0x74>)
 8008306:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	219c      	movs	r1, #156	; 0x9c
 800830c:	4a16      	ldr	r2, [pc, #88]	; (8008368 <UART_InitCallbacksToDefault+0x78>)
 800830e:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	21a0      	movs	r1, #160	; 0xa0
 8008314:	4a15      	ldr	r2, [pc, #84]	; (800836c <UART_InitCallbacksToDefault+0x7c>)
 8008316:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	21a4      	movs	r1, #164	; 0xa4
 800831c:	4a14      	ldr	r2, [pc, #80]	; (8008370 <UART_InitCallbacksToDefault+0x80>)
 800831e:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	21a8      	movs	r1, #168	; 0xa8
 8008324:	4a13      	ldr	r2, [pc, #76]	; (8008374 <UART_InitCallbacksToDefault+0x84>)
 8008326:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	21ac      	movs	r1, #172	; 0xac
 800832c:	4a12      	ldr	r2, [pc, #72]	; (8008378 <UART_InitCallbacksToDefault+0x88>)
 800832e:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	21b0      	movs	r1, #176	; 0xb0
 8008334:	4a11      	ldr	r2, [pc, #68]	; (800837c <UART_InitCallbacksToDefault+0x8c>)
 8008336:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	21b4      	movs	r1, #180	; 0xb4
 800833c:	4a10      	ldr	r2, [pc, #64]	; (8008380 <UART_InitCallbacksToDefault+0x90>)
 800833e:	505a      	str	r2, [r3, r1]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	21b8      	movs	r1, #184	; 0xb8
 8008344:	4a0f      	ldr	r2, [pc, #60]	; (8008384 <UART_InitCallbacksToDefault+0x94>)
 8008346:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	21bc      	movs	r1, #188	; 0xbc
 800834c:	4a0e      	ldr	r2, [pc, #56]	; (8008388 <UART_InitCallbacksToDefault+0x98>)
 800834e:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	21c0      	movs	r1, #192	; 0xc0
 8008354:	4a0d      	ldr	r2, [pc, #52]	; (800838c <UART_InitCallbacksToDefault+0x9c>)
 8008356:	505a      	str	r2, [r3, r1]

}
 8008358:	46c0      	nop			; (mov r8, r8)
 800835a:	46bd      	mov	sp, r7
 800835c:	b002      	add	sp, #8
 800835e:	bd80      	pop	{r7, pc}
 8008360:	080081c5 	.word	0x080081c5
 8008364:	080081b5 	.word	0x080081b5
 8008368:	080081e5 	.word	0x080081e5
 800836c:	080081d5 	.word	0x080081d5
 8008370:	080081f5 	.word	0x080081f5
 8008374:	08008205 	.word	0x08008205
 8008378:	08008215 	.word	0x08008215
 800837c:	08008225 	.word	0x08008225
 8008380:	080091cd 	.word	0x080091cd
 8008384:	080091dd 	.word	0x080091dd
 8008388:	080091ed 	.word	0x080091ed
 800838c:	08008235 	.word	0x08008235

08008390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008390:	b5b0      	push	{r4, r5, r7, lr}
 8008392:	b090      	sub	sp, #64	; 0x40
 8008394:	af00      	add	r7, sp, #0
 8008396:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008398:	231a      	movs	r3, #26
 800839a:	2220      	movs	r2, #32
 800839c:	189b      	adds	r3, r3, r2
 800839e:	19db      	adds	r3, r3, r7
 80083a0:	2200      	movs	r2, #0
 80083a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	689a      	ldr	r2, [r3, #8]
 80083a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	431a      	orrs	r2, r3
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	431a      	orrs	r2, r3
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	69db      	ldr	r3, [r3, #28]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4aaf      	ldr	r2, [pc, #700]	; (8008680 <UART_SetConfig+0x2f0>)
 80083c4:	4013      	ands	r3, r2
 80083c6:	0019      	movs	r1, r3
 80083c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ce:	430b      	orrs	r3, r1
 80083d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	4aaa      	ldr	r2, [pc, #680]	; (8008684 <UART_SetConfig+0x2f4>)
 80083da:	4013      	ands	r3, r2
 80083dc:	0018      	movs	r0, r3
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	68d9      	ldr	r1, [r3, #12]
 80083e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	0003      	movs	r3, r0
 80083e8:	430b      	orrs	r3, r1
 80083ea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80083f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4aa4      	ldr	r2, [pc, #656]	; (8008688 <UART_SetConfig+0x2f8>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d004      	beq.n	8008406 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80083fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fe:	6a1b      	ldr	r3, [r3, #32]
 8008400:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008402:	4313      	orrs	r3, r2
 8008404:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	4a9f      	ldr	r2, [pc, #636]	; (800868c <UART_SetConfig+0x2fc>)
 800840e:	4013      	ands	r3, r2
 8008410:	0019      	movs	r1, r3
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008418:	430b      	orrs	r3, r1
 800841a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008422:	220f      	movs	r2, #15
 8008424:	4393      	bics	r3, r2
 8008426:	0018      	movs	r0, r3
 8008428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	0003      	movs	r3, r0
 8008432:	430b      	orrs	r3, r1
 8008434:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a95      	ldr	r2, [pc, #596]	; (8008690 <UART_SetConfig+0x300>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d131      	bne.n	80084a4 <UART_SetConfig+0x114>
 8008440:	4b94      	ldr	r3, [pc, #592]	; (8008694 <UART_SetConfig+0x304>)
 8008442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008444:	2203      	movs	r2, #3
 8008446:	4013      	ands	r3, r2
 8008448:	2b03      	cmp	r3, #3
 800844a:	d01d      	beq.n	8008488 <UART_SetConfig+0xf8>
 800844c:	d823      	bhi.n	8008496 <UART_SetConfig+0x106>
 800844e:	2b02      	cmp	r3, #2
 8008450:	d00c      	beq.n	800846c <UART_SetConfig+0xdc>
 8008452:	d820      	bhi.n	8008496 <UART_SetConfig+0x106>
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <UART_SetConfig+0xce>
 8008458:	2b01      	cmp	r3, #1
 800845a:	d00e      	beq.n	800847a <UART_SetConfig+0xea>
 800845c:	e01b      	b.n	8008496 <UART_SetConfig+0x106>
 800845e:	231b      	movs	r3, #27
 8008460:	2220      	movs	r2, #32
 8008462:	189b      	adds	r3, r3, r2
 8008464:	19db      	adds	r3, r3, r7
 8008466:	2200      	movs	r2, #0
 8008468:	701a      	strb	r2, [r3, #0]
 800846a:	e0b4      	b.n	80085d6 <UART_SetConfig+0x246>
 800846c:	231b      	movs	r3, #27
 800846e:	2220      	movs	r2, #32
 8008470:	189b      	adds	r3, r3, r2
 8008472:	19db      	adds	r3, r3, r7
 8008474:	2202      	movs	r2, #2
 8008476:	701a      	strb	r2, [r3, #0]
 8008478:	e0ad      	b.n	80085d6 <UART_SetConfig+0x246>
 800847a:	231b      	movs	r3, #27
 800847c:	2220      	movs	r2, #32
 800847e:	189b      	adds	r3, r3, r2
 8008480:	19db      	adds	r3, r3, r7
 8008482:	2204      	movs	r2, #4
 8008484:	701a      	strb	r2, [r3, #0]
 8008486:	e0a6      	b.n	80085d6 <UART_SetConfig+0x246>
 8008488:	231b      	movs	r3, #27
 800848a:	2220      	movs	r2, #32
 800848c:	189b      	adds	r3, r3, r2
 800848e:	19db      	adds	r3, r3, r7
 8008490:	2208      	movs	r2, #8
 8008492:	701a      	strb	r2, [r3, #0]
 8008494:	e09f      	b.n	80085d6 <UART_SetConfig+0x246>
 8008496:	231b      	movs	r3, #27
 8008498:	2220      	movs	r2, #32
 800849a:	189b      	adds	r3, r3, r2
 800849c:	19db      	adds	r3, r3, r7
 800849e:	2210      	movs	r2, #16
 80084a0:	701a      	strb	r2, [r3, #0]
 80084a2:	e098      	b.n	80085d6 <UART_SetConfig+0x246>
 80084a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a7b      	ldr	r2, [pc, #492]	; (8008698 <UART_SetConfig+0x308>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d131      	bne.n	8008512 <UART_SetConfig+0x182>
 80084ae:	4b79      	ldr	r3, [pc, #484]	; (8008694 <UART_SetConfig+0x304>)
 80084b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b2:	220c      	movs	r2, #12
 80084b4:	4013      	ands	r3, r2
 80084b6:	2b0c      	cmp	r3, #12
 80084b8:	d01d      	beq.n	80084f6 <UART_SetConfig+0x166>
 80084ba:	d823      	bhi.n	8008504 <UART_SetConfig+0x174>
 80084bc:	2b08      	cmp	r3, #8
 80084be:	d00c      	beq.n	80084da <UART_SetConfig+0x14a>
 80084c0:	d820      	bhi.n	8008504 <UART_SetConfig+0x174>
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <UART_SetConfig+0x13c>
 80084c6:	2b04      	cmp	r3, #4
 80084c8:	d00e      	beq.n	80084e8 <UART_SetConfig+0x158>
 80084ca:	e01b      	b.n	8008504 <UART_SetConfig+0x174>
 80084cc:	231b      	movs	r3, #27
 80084ce:	2220      	movs	r2, #32
 80084d0:	189b      	adds	r3, r3, r2
 80084d2:	19db      	adds	r3, r3, r7
 80084d4:	2200      	movs	r2, #0
 80084d6:	701a      	strb	r2, [r3, #0]
 80084d8:	e07d      	b.n	80085d6 <UART_SetConfig+0x246>
 80084da:	231b      	movs	r3, #27
 80084dc:	2220      	movs	r2, #32
 80084de:	189b      	adds	r3, r3, r2
 80084e0:	19db      	adds	r3, r3, r7
 80084e2:	2202      	movs	r2, #2
 80084e4:	701a      	strb	r2, [r3, #0]
 80084e6:	e076      	b.n	80085d6 <UART_SetConfig+0x246>
 80084e8:	231b      	movs	r3, #27
 80084ea:	2220      	movs	r2, #32
 80084ec:	189b      	adds	r3, r3, r2
 80084ee:	19db      	adds	r3, r3, r7
 80084f0:	2204      	movs	r2, #4
 80084f2:	701a      	strb	r2, [r3, #0]
 80084f4:	e06f      	b.n	80085d6 <UART_SetConfig+0x246>
 80084f6:	231b      	movs	r3, #27
 80084f8:	2220      	movs	r2, #32
 80084fa:	189b      	adds	r3, r3, r2
 80084fc:	19db      	adds	r3, r3, r7
 80084fe:	2208      	movs	r2, #8
 8008500:	701a      	strb	r2, [r3, #0]
 8008502:	e068      	b.n	80085d6 <UART_SetConfig+0x246>
 8008504:	231b      	movs	r3, #27
 8008506:	2220      	movs	r2, #32
 8008508:	189b      	adds	r3, r3, r2
 800850a:	19db      	adds	r3, r3, r7
 800850c:	2210      	movs	r2, #16
 800850e:	701a      	strb	r2, [r3, #0]
 8008510:	e061      	b.n	80085d6 <UART_SetConfig+0x246>
 8008512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a61      	ldr	r2, [pc, #388]	; (800869c <UART_SetConfig+0x30c>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d106      	bne.n	800852a <UART_SetConfig+0x19a>
 800851c:	231b      	movs	r3, #27
 800851e:	2220      	movs	r2, #32
 8008520:	189b      	adds	r3, r3, r2
 8008522:	19db      	adds	r3, r3, r7
 8008524:	2200      	movs	r2, #0
 8008526:	701a      	strb	r2, [r3, #0]
 8008528:	e055      	b.n	80085d6 <UART_SetConfig+0x246>
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a5c      	ldr	r2, [pc, #368]	; (80086a0 <UART_SetConfig+0x310>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d106      	bne.n	8008542 <UART_SetConfig+0x1b2>
 8008534:	231b      	movs	r3, #27
 8008536:	2220      	movs	r2, #32
 8008538:	189b      	adds	r3, r3, r2
 800853a:	19db      	adds	r3, r3, r7
 800853c:	2200      	movs	r2, #0
 800853e:	701a      	strb	r2, [r3, #0]
 8008540:	e049      	b.n	80085d6 <UART_SetConfig+0x246>
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a50      	ldr	r2, [pc, #320]	; (8008688 <UART_SetConfig+0x2f8>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d13e      	bne.n	80085ca <UART_SetConfig+0x23a>
 800854c:	4b51      	ldr	r3, [pc, #324]	; (8008694 <UART_SetConfig+0x304>)
 800854e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008550:	23c0      	movs	r3, #192	; 0xc0
 8008552:	011b      	lsls	r3, r3, #4
 8008554:	4013      	ands	r3, r2
 8008556:	22c0      	movs	r2, #192	; 0xc0
 8008558:	0112      	lsls	r2, r2, #4
 800855a:	4293      	cmp	r3, r2
 800855c:	d027      	beq.n	80085ae <UART_SetConfig+0x21e>
 800855e:	22c0      	movs	r2, #192	; 0xc0
 8008560:	0112      	lsls	r2, r2, #4
 8008562:	4293      	cmp	r3, r2
 8008564:	d82a      	bhi.n	80085bc <UART_SetConfig+0x22c>
 8008566:	2280      	movs	r2, #128	; 0x80
 8008568:	0112      	lsls	r2, r2, #4
 800856a:	4293      	cmp	r3, r2
 800856c:	d011      	beq.n	8008592 <UART_SetConfig+0x202>
 800856e:	2280      	movs	r2, #128	; 0x80
 8008570:	0112      	lsls	r2, r2, #4
 8008572:	4293      	cmp	r3, r2
 8008574:	d822      	bhi.n	80085bc <UART_SetConfig+0x22c>
 8008576:	2b00      	cmp	r3, #0
 8008578:	d004      	beq.n	8008584 <UART_SetConfig+0x1f4>
 800857a:	2280      	movs	r2, #128	; 0x80
 800857c:	00d2      	lsls	r2, r2, #3
 800857e:	4293      	cmp	r3, r2
 8008580:	d00e      	beq.n	80085a0 <UART_SetConfig+0x210>
 8008582:	e01b      	b.n	80085bc <UART_SetConfig+0x22c>
 8008584:	231b      	movs	r3, #27
 8008586:	2220      	movs	r2, #32
 8008588:	189b      	adds	r3, r3, r2
 800858a:	19db      	adds	r3, r3, r7
 800858c:	2200      	movs	r2, #0
 800858e:	701a      	strb	r2, [r3, #0]
 8008590:	e021      	b.n	80085d6 <UART_SetConfig+0x246>
 8008592:	231b      	movs	r3, #27
 8008594:	2220      	movs	r2, #32
 8008596:	189b      	adds	r3, r3, r2
 8008598:	19db      	adds	r3, r3, r7
 800859a:	2202      	movs	r2, #2
 800859c:	701a      	strb	r2, [r3, #0]
 800859e:	e01a      	b.n	80085d6 <UART_SetConfig+0x246>
 80085a0:	231b      	movs	r3, #27
 80085a2:	2220      	movs	r2, #32
 80085a4:	189b      	adds	r3, r3, r2
 80085a6:	19db      	adds	r3, r3, r7
 80085a8:	2204      	movs	r2, #4
 80085aa:	701a      	strb	r2, [r3, #0]
 80085ac:	e013      	b.n	80085d6 <UART_SetConfig+0x246>
 80085ae:	231b      	movs	r3, #27
 80085b0:	2220      	movs	r2, #32
 80085b2:	189b      	adds	r3, r3, r2
 80085b4:	19db      	adds	r3, r3, r7
 80085b6:	2208      	movs	r2, #8
 80085b8:	701a      	strb	r2, [r3, #0]
 80085ba:	e00c      	b.n	80085d6 <UART_SetConfig+0x246>
 80085bc:	231b      	movs	r3, #27
 80085be:	2220      	movs	r2, #32
 80085c0:	189b      	adds	r3, r3, r2
 80085c2:	19db      	adds	r3, r3, r7
 80085c4:	2210      	movs	r2, #16
 80085c6:	701a      	strb	r2, [r3, #0]
 80085c8:	e005      	b.n	80085d6 <UART_SetConfig+0x246>
 80085ca:	231b      	movs	r3, #27
 80085cc:	2220      	movs	r2, #32
 80085ce:	189b      	adds	r3, r3, r2
 80085d0:	19db      	adds	r3, r3, r7
 80085d2:	2210      	movs	r2, #16
 80085d4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a2b      	ldr	r2, [pc, #172]	; (8008688 <UART_SetConfig+0x2f8>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d000      	beq.n	80085e2 <UART_SetConfig+0x252>
 80085e0:	e0a9      	b.n	8008736 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085e2:	231b      	movs	r3, #27
 80085e4:	2220      	movs	r2, #32
 80085e6:	189b      	adds	r3, r3, r2
 80085e8:	19db      	adds	r3, r3, r7
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	2b08      	cmp	r3, #8
 80085ee:	d015      	beq.n	800861c <UART_SetConfig+0x28c>
 80085f0:	dc18      	bgt.n	8008624 <UART_SetConfig+0x294>
 80085f2:	2b04      	cmp	r3, #4
 80085f4:	d00d      	beq.n	8008612 <UART_SetConfig+0x282>
 80085f6:	dc15      	bgt.n	8008624 <UART_SetConfig+0x294>
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d002      	beq.n	8008602 <UART_SetConfig+0x272>
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d005      	beq.n	800860c <UART_SetConfig+0x27c>
 8008600:	e010      	b.n	8008624 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008602:	f7fd fbff 	bl	8005e04 <HAL_RCC_GetPCLK1Freq>
 8008606:	0003      	movs	r3, r0
 8008608:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800860a:	e014      	b.n	8008636 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800860c:	4b25      	ldr	r3, [pc, #148]	; (80086a4 <UART_SetConfig+0x314>)
 800860e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008610:	e011      	b.n	8008636 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008612:	f7fd fb6b 	bl	8005cec <HAL_RCC_GetSysClockFreq>
 8008616:	0003      	movs	r3, r0
 8008618:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800861a:	e00c      	b.n	8008636 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800861c:	2380      	movs	r3, #128	; 0x80
 800861e:	021b      	lsls	r3, r3, #8
 8008620:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008622:	e008      	b.n	8008636 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8008624:	2300      	movs	r3, #0
 8008626:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008628:	231a      	movs	r3, #26
 800862a:	2220      	movs	r2, #32
 800862c:	189b      	adds	r3, r3, r2
 800862e:	19db      	adds	r3, r3, r7
 8008630:	2201      	movs	r2, #1
 8008632:	701a      	strb	r2, [r3, #0]
        break;
 8008634:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008638:	2b00      	cmp	r3, #0
 800863a:	d100      	bne.n	800863e <UART_SetConfig+0x2ae>
 800863c:	e14b      	b.n	80088d6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800863e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008642:	4b19      	ldr	r3, [pc, #100]	; (80086a8 <UART_SetConfig+0x318>)
 8008644:	0052      	lsls	r2, r2, #1
 8008646:	5ad3      	ldrh	r3, [r2, r3]
 8008648:	0019      	movs	r1, r3
 800864a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800864c:	f7f7 fd5a 	bl	8000104 <__udivsi3>
 8008650:	0003      	movs	r3, r0
 8008652:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	0013      	movs	r3, r2
 800865a:	005b      	lsls	r3, r3, #1
 800865c:	189b      	adds	r3, r3, r2
 800865e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008660:	429a      	cmp	r2, r3
 8008662:	d305      	bcc.n	8008670 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800866a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800866c:	429a      	cmp	r2, r3
 800866e:	d91d      	bls.n	80086ac <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8008670:	231a      	movs	r3, #26
 8008672:	2220      	movs	r2, #32
 8008674:	189b      	adds	r3, r3, r2
 8008676:	19db      	adds	r3, r3, r7
 8008678:	2201      	movs	r2, #1
 800867a:	701a      	strb	r2, [r3, #0]
 800867c:	e12b      	b.n	80088d6 <UART_SetConfig+0x546>
 800867e:	46c0      	nop			; (mov r8, r8)
 8008680:	cfff69f3 	.word	0xcfff69f3
 8008684:	ffffcfff 	.word	0xffffcfff
 8008688:	40008000 	.word	0x40008000
 800868c:	11fff4ff 	.word	0x11fff4ff
 8008690:	40013800 	.word	0x40013800
 8008694:	40021000 	.word	0x40021000
 8008698:	40004400 	.word	0x40004400
 800869c:	40004800 	.word	0x40004800
 80086a0:	40004c00 	.word	0x40004c00
 80086a4:	00f42400 	.word	0x00f42400
 80086a8:	08009b24 	.word	0x08009b24
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ae:	61bb      	str	r3, [r7, #24]
 80086b0:	2300      	movs	r3, #0
 80086b2:	61fb      	str	r3, [r7, #28]
 80086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086b8:	4b92      	ldr	r3, [pc, #584]	; (8008904 <UART_SetConfig+0x574>)
 80086ba:	0052      	lsls	r2, r2, #1
 80086bc:	5ad3      	ldrh	r3, [r2, r3]
 80086be:	613b      	str	r3, [r7, #16]
 80086c0:	2300      	movs	r3, #0
 80086c2:	617b      	str	r3, [r7, #20]
 80086c4:	693a      	ldr	r2, [r7, #16]
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	69b8      	ldr	r0, [r7, #24]
 80086ca:	69f9      	ldr	r1, [r7, #28]
 80086cc:	f7f7 feca 	bl	8000464 <__aeabi_uldivmod>
 80086d0:	0002      	movs	r2, r0
 80086d2:	000b      	movs	r3, r1
 80086d4:	0e11      	lsrs	r1, r2, #24
 80086d6:	021d      	lsls	r5, r3, #8
 80086d8:	430d      	orrs	r5, r1
 80086da:	0214      	lsls	r4, r2, #8
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	085b      	lsrs	r3, r3, #1
 80086e2:	60bb      	str	r3, [r7, #8]
 80086e4:	2300      	movs	r3, #0
 80086e6:	60fb      	str	r3, [r7, #12]
 80086e8:	68b8      	ldr	r0, [r7, #8]
 80086ea:	68f9      	ldr	r1, [r7, #12]
 80086ec:	1900      	adds	r0, r0, r4
 80086ee:	4169      	adcs	r1, r5
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	603b      	str	r3, [r7, #0]
 80086f6:	2300      	movs	r3, #0
 80086f8:	607b      	str	r3, [r7, #4]
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f7f7 feb1 	bl	8000464 <__aeabi_uldivmod>
 8008702:	0002      	movs	r2, r0
 8008704:	000b      	movs	r3, r1
 8008706:	0013      	movs	r3, r2
 8008708:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800870a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800870c:	23c0      	movs	r3, #192	; 0xc0
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	429a      	cmp	r2, r3
 8008712:	d309      	bcc.n	8008728 <UART_SetConfig+0x398>
 8008714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008716:	2380      	movs	r3, #128	; 0x80
 8008718:	035b      	lsls	r3, r3, #13
 800871a:	429a      	cmp	r2, r3
 800871c:	d204      	bcs.n	8008728 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008724:	60da      	str	r2, [r3, #12]
 8008726:	e0d6      	b.n	80088d6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8008728:	231a      	movs	r3, #26
 800872a:	2220      	movs	r2, #32
 800872c:	189b      	adds	r3, r3, r2
 800872e:	19db      	adds	r3, r3, r7
 8008730:	2201      	movs	r2, #1
 8008732:	701a      	strb	r2, [r3, #0]
 8008734:	e0cf      	b.n	80088d6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008738:	69da      	ldr	r2, [r3, #28]
 800873a:	2380      	movs	r3, #128	; 0x80
 800873c:	021b      	lsls	r3, r3, #8
 800873e:	429a      	cmp	r2, r3
 8008740:	d000      	beq.n	8008744 <UART_SetConfig+0x3b4>
 8008742:	e070      	b.n	8008826 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8008744:	231b      	movs	r3, #27
 8008746:	2220      	movs	r2, #32
 8008748:	189b      	adds	r3, r3, r2
 800874a:	19db      	adds	r3, r3, r7
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	2b08      	cmp	r3, #8
 8008750:	d015      	beq.n	800877e <UART_SetConfig+0x3ee>
 8008752:	dc18      	bgt.n	8008786 <UART_SetConfig+0x3f6>
 8008754:	2b04      	cmp	r3, #4
 8008756:	d00d      	beq.n	8008774 <UART_SetConfig+0x3e4>
 8008758:	dc15      	bgt.n	8008786 <UART_SetConfig+0x3f6>
 800875a:	2b00      	cmp	r3, #0
 800875c:	d002      	beq.n	8008764 <UART_SetConfig+0x3d4>
 800875e:	2b02      	cmp	r3, #2
 8008760:	d005      	beq.n	800876e <UART_SetConfig+0x3de>
 8008762:	e010      	b.n	8008786 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008764:	f7fd fb4e 	bl	8005e04 <HAL_RCC_GetPCLK1Freq>
 8008768:	0003      	movs	r3, r0
 800876a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800876c:	e014      	b.n	8008798 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800876e:	4b66      	ldr	r3, [pc, #408]	; (8008908 <UART_SetConfig+0x578>)
 8008770:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008772:	e011      	b.n	8008798 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008774:	f7fd faba 	bl	8005cec <HAL_RCC_GetSysClockFreq>
 8008778:	0003      	movs	r3, r0
 800877a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800877c:	e00c      	b.n	8008798 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800877e:	2380      	movs	r3, #128	; 0x80
 8008780:	021b      	lsls	r3, r3, #8
 8008782:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008784:	e008      	b.n	8008798 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8008786:	2300      	movs	r3, #0
 8008788:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800878a:	231a      	movs	r3, #26
 800878c:	2220      	movs	r2, #32
 800878e:	189b      	adds	r3, r3, r2
 8008790:	19db      	adds	r3, r3, r7
 8008792:	2201      	movs	r2, #1
 8008794:	701a      	strb	r2, [r3, #0]
        break;
 8008796:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800879a:	2b00      	cmp	r3, #0
 800879c:	d100      	bne.n	80087a0 <UART_SetConfig+0x410>
 800879e:	e09a      	b.n	80088d6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087a4:	4b57      	ldr	r3, [pc, #348]	; (8008904 <UART_SetConfig+0x574>)
 80087a6:	0052      	lsls	r2, r2, #1
 80087a8:	5ad3      	ldrh	r3, [r2, r3]
 80087aa:	0019      	movs	r1, r3
 80087ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80087ae:	f7f7 fca9 	bl	8000104 <__udivsi3>
 80087b2:	0003      	movs	r3, r0
 80087b4:	005a      	lsls	r2, r3, #1
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	085b      	lsrs	r3, r3, #1
 80087bc:	18d2      	adds	r2, r2, r3
 80087be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	0019      	movs	r1, r3
 80087c4:	0010      	movs	r0, r2
 80087c6:	f7f7 fc9d 	bl	8000104 <__udivsi3>
 80087ca:	0003      	movs	r3, r0
 80087cc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d0:	2b0f      	cmp	r3, #15
 80087d2:	d921      	bls.n	8008818 <UART_SetConfig+0x488>
 80087d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087d6:	2380      	movs	r3, #128	; 0x80
 80087d8:	025b      	lsls	r3, r3, #9
 80087da:	429a      	cmp	r2, r3
 80087dc:	d21c      	bcs.n	8008818 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	200e      	movs	r0, #14
 80087e4:	2420      	movs	r4, #32
 80087e6:	1903      	adds	r3, r0, r4
 80087e8:	19db      	adds	r3, r3, r7
 80087ea:	210f      	movs	r1, #15
 80087ec:	438a      	bics	r2, r1
 80087ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f2:	085b      	lsrs	r3, r3, #1
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	2207      	movs	r2, #7
 80087f8:	4013      	ands	r3, r2
 80087fa:	b299      	uxth	r1, r3
 80087fc:	1903      	adds	r3, r0, r4
 80087fe:	19db      	adds	r3, r3, r7
 8008800:	1902      	adds	r2, r0, r4
 8008802:	19d2      	adds	r2, r2, r7
 8008804:	8812      	ldrh	r2, [r2, #0]
 8008806:	430a      	orrs	r2, r1
 8008808:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	1902      	adds	r2, r0, r4
 8008810:	19d2      	adds	r2, r2, r7
 8008812:	8812      	ldrh	r2, [r2, #0]
 8008814:	60da      	str	r2, [r3, #12]
 8008816:	e05e      	b.n	80088d6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8008818:	231a      	movs	r3, #26
 800881a:	2220      	movs	r2, #32
 800881c:	189b      	adds	r3, r3, r2
 800881e:	19db      	adds	r3, r3, r7
 8008820:	2201      	movs	r2, #1
 8008822:	701a      	strb	r2, [r3, #0]
 8008824:	e057      	b.n	80088d6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008826:	231b      	movs	r3, #27
 8008828:	2220      	movs	r2, #32
 800882a:	189b      	adds	r3, r3, r2
 800882c:	19db      	adds	r3, r3, r7
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	2b08      	cmp	r3, #8
 8008832:	d015      	beq.n	8008860 <UART_SetConfig+0x4d0>
 8008834:	dc18      	bgt.n	8008868 <UART_SetConfig+0x4d8>
 8008836:	2b04      	cmp	r3, #4
 8008838:	d00d      	beq.n	8008856 <UART_SetConfig+0x4c6>
 800883a:	dc15      	bgt.n	8008868 <UART_SetConfig+0x4d8>
 800883c:	2b00      	cmp	r3, #0
 800883e:	d002      	beq.n	8008846 <UART_SetConfig+0x4b6>
 8008840:	2b02      	cmp	r3, #2
 8008842:	d005      	beq.n	8008850 <UART_SetConfig+0x4c0>
 8008844:	e010      	b.n	8008868 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008846:	f7fd fadd 	bl	8005e04 <HAL_RCC_GetPCLK1Freq>
 800884a:	0003      	movs	r3, r0
 800884c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800884e:	e014      	b.n	800887a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008850:	4b2d      	ldr	r3, [pc, #180]	; (8008908 <UART_SetConfig+0x578>)
 8008852:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008854:	e011      	b.n	800887a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008856:	f7fd fa49 	bl	8005cec <HAL_RCC_GetSysClockFreq>
 800885a:	0003      	movs	r3, r0
 800885c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800885e:	e00c      	b.n	800887a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008860:	2380      	movs	r3, #128	; 0x80
 8008862:	021b      	lsls	r3, r3, #8
 8008864:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008866:	e008      	b.n	800887a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8008868:	2300      	movs	r3, #0
 800886a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800886c:	231a      	movs	r3, #26
 800886e:	2220      	movs	r2, #32
 8008870:	189b      	adds	r3, r3, r2
 8008872:	19db      	adds	r3, r3, r7
 8008874:	2201      	movs	r2, #1
 8008876:	701a      	strb	r2, [r3, #0]
        break;
 8008878:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800887a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887c:	2b00      	cmp	r3, #0
 800887e:	d02a      	beq.n	80088d6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008884:	4b1f      	ldr	r3, [pc, #124]	; (8008904 <UART_SetConfig+0x574>)
 8008886:	0052      	lsls	r2, r2, #1
 8008888:	5ad3      	ldrh	r3, [r2, r3]
 800888a:	0019      	movs	r1, r3
 800888c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800888e:	f7f7 fc39 	bl	8000104 <__udivsi3>
 8008892:	0003      	movs	r3, r0
 8008894:	001a      	movs	r2, r3
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	085b      	lsrs	r3, r3, #1
 800889c:	18d2      	adds	r2, r2, r3
 800889e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	0019      	movs	r1, r3
 80088a4:	0010      	movs	r0, r2
 80088a6:	f7f7 fc2d 	bl	8000104 <__udivsi3>
 80088aa:	0003      	movs	r3, r0
 80088ac:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b0:	2b0f      	cmp	r3, #15
 80088b2:	d90a      	bls.n	80088ca <UART_SetConfig+0x53a>
 80088b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088b6:	2380      	movs	r3, #128	; 0x80
 80088b8:	025b      	lsls	r3, r3, #9
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d205      	bcs.n	80088ca <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	60da      	str	r2, [r3, #12]
 80088c8:	e005      	b.n	80088d6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80088ca:	231a      	movs	r3, #26
 80088cc:	2220      	movs	r2, #32
 80088ce:	189b      	adds	r3, r3, r2
 80088d0:	19db      	adds	r3, r3, r7
 80088d2:	2201      	movs	r2, #1
 80088d4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d8:	226a      	movs	r2, #106	; 0x6a
 80088da:	2101      	movs	r1, #1
 80088dc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80088de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e0:	2268      	movs	r2, #104	; 0x68
 80088e2:	2101      	movs	r1, #1
 80088e4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e8:	2200      	movs	r2, #0
 80088ea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80088ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ee:	2200      	movs	r2, #0
 80088f0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80088f2:	231a      	movs	r3, #26
 80088f4:	2220      	movs	r2, #32
 80088f6:	189b      	adds	r3, r3, r2
 80088f8:	19db      	adds	r3, r3, r7
 80088fa:	781b      	ldrb	r3, [r3, #0]
}
 80088fc:	0018      	movs	r0, r3
 80088fe:	46bd      	mov	sp, r7
 8008900:	b010      	add	sp, #64	; 0x40
 8008902:	bdb0      	pop	{r4, r5, r7, pc}
 8008904:	08009b24 	.word	0x08009b24
 8008908:	00f42400 	.word	0x00f42400

0800890c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008918:	2201      	movs	r2, #1
 800891a:	4013      	ands	r3, r2
 800891c:	d00b      	beq.n	8008936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	4a4a      	ldr	r2, [pc, #296]	; (8008a50 <UART_AdvFeatureConfig+0x144>)
 8008926:	4013      	ands	r3, r2
 8008928:	0019      	movs	r1, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	430a      	orrs	r2, r1
 8008934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893a:	2202      	movs	r2, #2
 800893c:	4013      	ands	r3, r2
 800893e:	d00b      	beq.n	8008958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	4a43      	ldr	r2, [pc, #268]	; (8008a54 <UART_AdvFeatureConfig+0x148>)
 8008948:	4013      	ands	r3, r2
 800894a:	0019      	movs	r1, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	430a      	orrs	r2, r1
 8008956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895c:	2204      	movs	r2, #4
 800895e:	4013      	ands	r3, r2
 8008960:	d00b      	beq.n	800897a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	4a3b      	ldr	r2, [pc, #236]	; (8008a58 <UART_AdvFeatureConfig+0x14c>)
 800896a:	4013      	ands	r3, r2
 800896c:	0019      	movs	r1, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	430a      	orrs	r2, r1
 8008978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897e:	2208      	movs	r2, #8
 8008980:	4013      	ands	r3, r2
 8008982:	d00b      	beq.n	800899c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	4a34      	ldr	r2, [pc, #208]	; (8008a5c <UART_AdvFeatureConfig+0x150>)
 800898c:	4013      	ands	r3, r2
 800898e:	0019      	movs	r1, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	430a      	orrs	r2, r1
 800899a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a0:	2210      	movs	r2, #16
 80089a2:	4013      	ands	r3, r2
 80089a4:	d00b      	beq.n	80089be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	4a2c      	ldr	r2, [pc, #176]	; (8008a60 <UART_AdvFeatureConfig+0x154>)
 80089ae:	4013      	ands	r3, r2
 80089b0:	0019      	movs	r1, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	430a      	orrs	r2, r1
 80089bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c2:	2220      	movs	r2, #32
 80089c4:	4013      	ands	r3, r2
 80089c6:	d00b      	beq.n	80089e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	4a25      	ldr	r2, [pc, #148]	; (8008a64 <UART_AdvFeatureConfig+0x158>)
 80089d0:	4013      	ands	r3, r2
 80089d2:	0019      	movs	r1, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	430a      	orrs	r2, r1
 80089de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e4:	2240      	movs	r2, #64	; 0x40
 80089e6:	4013      	ands	r3, r2
 80089e8:	d01d      	beq.n	8008a26 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	4a1d      	ldr	r2, [pc, #116]	; (8008a68 <UART_AdvFeatureConfig+0x15c>)
 80089f2:	4013      	ands	r3, r2
 80089f4:	0019      	movs	r1, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	430a      	orrs	r2, r1
 8008a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a06:	2380      	movs	r3, #128	; 0x80
 8008a08:	035b      	lsls	r3, r3, #13
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d10b      	bne.n	8008a26 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	4a15      	ldr	r2, [pc, #84]	; (8008a6c <UART_AdvFeatureConfig+0x160>)
 8008a16:	4013      	ands	r3, r2
 8008a18:	0019      	movs	r1, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a2a:	2280      	movs	r2, #128	; 0x80
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	d00b      	beq.n	8008a48 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	4a0e      	ldr	r2, [pc, #56]	; (8008a70 <UART_AdvFeatureConfig+0x164>)
 8008a38:	4013      	ands	r3, r2
 8008a3a:	0019      	movs	r1, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	430a      	orrs	r2, r1
 8008a46:	605a      	str	r2, [r3, #4]
  }
}
 8008a48:	46c0      	nop			; (mov r8, r8)
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	b002      	add	sp, #8
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	fffdffff 	.word	0xfffdffff
 8008a54:	fffeffff 	.word	0xfffeffff
 8008a58:	fffbffff 	.word	0xfffbffff
 8008a5c:	ffff7fff 	.word	0xffff7fff
 8008a60:	ffffefff 	.word	0xffffefff
 8008a64:	ffffdfff 	.word	0xffffdfff
 8008a68:	ffefffff 	.word	0xffefffff
 8008a6c:	ff9fffff 	.word	0xff9fffff
 8008a70:	fff7ffff 	.word	0xfff7ffff

08008a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af02      	add	r7, sp, #8
 8008a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2290      	movs	r2, #144	; 0x90
 8008a80:	2100      	movs	r1, #0
 8008a82:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a84:	f7fb f896 	bl	8003bb4 <HAL_GetTick>
 8008a88:	0003      	movs	r3, r0
 8008a8a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2208      	movs	r2, #8
 8008a94:	4013      	ands	r3, r2
 8008a96:	2b08      	cmp	r3, #8
 8008a98:	d10c      	bne.n	8008ab4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2280      	movs	r2, #128	; 0x80
 8008a9e:	0391      	lsls	r1, r2, #14
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	4a1a      	ldr	r2, [pc, #104]	; (8008b0c <UART_CheckIdleState+0x98>)
 8008aa4:	9200      	str	r2, [sp, #0]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f000 f832 	bl	8008b10 <UART_WaitOnFlagUntilTimeout>
 8008aac:	1e03      	subs	r3, r0, #0
 8008aae:	d001      	beq.n	8008ab4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e026      	b.n	8008b02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2204      	movs	r2, #4
 8008abc:	4013      	ands	r3, r2
 8008abe:	2b04      	cmp	r3, #4
 8008ac0:	d10c      	bne.n	8008adc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2280      	movs	r2, #128	; 0x80
 8008ac6:	03d1      	lsls	r1, r2, #15
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	4a10      	ldr	r2, [pc, #64]	; (8008b0c <UART_CheckIdleState+0x98>)
 8008acc:	9200      	str	r2, [sp, #0]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f000 f81e 	bl	8008b10 <UART_WaitOnFlagUntilTimeout>
 8008ad4:	1e03      	subs	r3, r0, #0
 8008ad6:	d001      	beq.n	8008adc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	e012      	b.n	8008b02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2288      	movs	r2, #136	; 0x88
 8008ae0:	2120      	movs	r1, #32
 8008ae2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	228c      	movs	r2, #140	; 0x8c
 8008ae8:	2120      	movs	r1, #32
 8008aea:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2284      	movs	r2, #132	; 0x84
 8008afc:	2100      	movs	r1, #0
 8008afe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	0018      	movs	r0, r3
 8008b04:	46bd      	mov	sp, r7
 8008b06:	b004      	add	sp, #16
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	46c0      	nop			; (mov r8, r8)
 8008b0c:	01ffffff 	.word	0x01ffffff

08008b10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b094      	sub	sp, #80	; 0x50
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	603b      	str	r3, [r7, #0]
 8008b1c:	1dfb      	adds	r3, r7, #7
 8008b1e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b20:	e0a7      	b.n	8008c72 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b24:	3301      	adds	r3, #1
 8008b26:	d100      	bne.n	8008b2a <UART_WaitOnFlagUntilTimeout+0x1a>
 8008b28:	e0a3      	b.n	8008c72 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b2a:	f7fb f843 	bl	8003bb4 <HAL_GetTick>
 8008b2e:	0002      	movs	r2, r0
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d302      	bcc.n	8008b40 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d13f      	bne.n	8008bc0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b40:	f3ef 8310 	mrs	r3, PRIMASK
 8008b44:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b48:	647b      	str	r3, [r7, #68]	; 0x44
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b50:	f383 8810 	msr	PRIMASK, r3
}
 8008b54:	46c0      	nop			; (mov r8, r8)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	494e      	ldr	r1, [pc, #312]	; (8008c9c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008b62:	400a      	ands	r2, r1
 8008b64:	601a      	str	r2, [r3, #0]
 8008b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b68:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6c:	f383 8810 	msr	PRIMASK, r3
}
 8008b70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b72:	f3ef 8310 	mrs	r3, PRIMASK
 8008b76:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b7a:	643b      	str	r3, [r7, #64]	; 0x40
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b82:	f383 8810 	msr	PRIMASK, r3
}
 8008b86:	46c0      	nop			; (mov r8, r8)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	689a      	ldr	r2, [r3, #8]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2101      	movs	r1, #1
 8008b94:	438a      	bics	r2, r1
 8008b96:	609a      	str	r2, [r3, #8]
 8008b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9e:	f383 8810 	msr	PRIMASK, r3
}
 8008ba2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2288      	movs	r2, #136	; 0x88
 8008ba8:	2120      	movs	r1, #32
 8008baa:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	228c      	movs	r2, #140	; 0x8c
 8008bb0:	2120      	movs	r1, #32
 8008bb2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2284      	movs	r2, #132	; 0x84
 8008bb8:	2100      	movs	r1, #0
 8008bba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e069      	b.n	8008c94 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2204      	movs	r2, #4
 8008bc8:	4013      	ands	r3, r2
 8008bca:	d052      	beq.n	8008c72 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	69da      	ldr	r2, [r3, #28]
 8008bd2:	2380      	movs	r3, #128	; 0x80
 8008bd4:	011b      	lsls	r3, r3, #4
 8008bd6:	401a      	ands	r2, r3
 8008bd8:	2380      	movs	r3, #128	; 0x80
 8008bda:	011b      	lsls	r3, r3, #4
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d148      	bne.n	8008c72 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2280      	movs	r2, #128	; 0x80
 8008be6:	0112      	lsls	r2, r2, #4
 8008be8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bea:	f3ef 8310 	mrs	r3, PRIMASK
 8008bee:	613b      	str	r3, [r7, #16]
  return(result);
 8008bf0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	f383 8810 	msr	PRIMASK, r3
}
 8008bfe:	46c0      	nop			; (mov r8, r8)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4924      	ldr	r1, [pc, #144]	; (8008c9c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008c0c:	400a      	ands	r2, r1
 8008c0e:	601a      	str	r2, [r3, #0]
 8008c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c12:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	f383 8810 	msr	PRIMASK, r3
}
 8008c1a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8008c20:	61fb      	str	r3, [r7, #28]
  return(result);
 8008c22:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c24:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c26:	2301      	movs	r3, #1
 8008c28:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c2a:	6a3b      	ldr	r3, [r7, #32]
 8008c2c:	f383 8810 	msr	PRIMASK, r3
}
 8008c30:	46c0      	nop			; (mov r8, r8)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	689a      	ldr	r2, [r3, #8]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2101      	movs	r1, #1
 8008c3e:	438a      	bics	r2, r1
 8008c40:	609a      	str	r2, [r3, #8]
 8008c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c44:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c48:	f383 8810 	msr	PRIMASK, r3
}
 8008c4c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2288      	movs	r2, #136	; 0x88
 8008c52:	2120      	movs	r1, #32
 8008c54:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	228c      	movs	r2, #140	; 0x8c
 8008c5a:	2120      	movs	r1, #32
 8008c5c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2290      	movs	r2, #144	; 0x90
 8008c62:	2120      	movs	r1, #32
 8008c64:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2284      	movs	r2, #132	; 0x84
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e010      	b.n	8008c94 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	69db      	ldr	r3, [r3, #28]
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	425a      	negs	r2, r3
 8008c82:	4153      	adcs	r3, r2
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	001a      	movs	r2, r3
 8008c88:	1dfb      	adds	r3, r7, #7
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d100      	bne.n	8008c92 <UART_WaitOnFlagUntilTimeout+0x182>
 8008c90:	e747      	b.n	8008b22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	0018      	movs	r0, r3
 8008c96:	46bd      	mov	sp, r7
 8008c98:	b014      	add	sp, #80	; 0x50
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	fffffe5f 	.word	0xfffffe5f

08008ca0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b090      	sub	sp, #64	; 0x40
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	1dbb      	adds	r3, r7, #6
 8008cac:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	1dba      	adds	r2, r7, #6
 8008cb8:	215c      	movs	r1, #92	; 0x5c
 8008cba:	8812      	ldrh	r2, [r2, #0]
 8008cbc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2290      	movs	r2, #144	; 0x90
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	228c      	movs	r2, #140	; 0x8c
 8008cca:	2122      	movs	r1, #34	; 0x22
 8008ccc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2280      	movs	r2, #128	; 0x80
 8008cd2:	589b      	ldr	r3, [r3, r2]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d02d      	beq.n	8008d34 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2280      	movs	r2, #128	; 0x80
 8008cdc:	589b      	ldr	r3, [r3, r2]
 8008cde:	4a40      	ldr	r2, [pc, #256]	; (8008de0 <UART_Start_Receive_DMA+0x140>)
 8008ce0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2280      	movs	r2, #128	; 0x80
 8008ce6:	589b      	ldr	r3, [r3, r2]
 8008ce8:	4a3e      	ldr	r2, [pc, #248]	; (8008de4 <UART_Start_Receive_DMA+0x144>)
 8008cea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2280      	movs	r2, #128	; 0x80
 8008cf0:	589b      	ldr	r3, [r3, r2]
 8008cf2:	4a3d      	ldr	r2, [pc, #244]	; (8008de8 <UART_Start_Receive_DMA+0x148>)
 8008cf4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2280      	movs	r2, #128	; 0x80
 8008cfa:	589b      	ldr	r3, [r3, r2]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2280      	movs	r2, #128	; 0x80
 8008d04:	5898      	ldr	r0, [r3, r2]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3324      	adds	r3, #36	; 0x24
 8008d0c:	0019      	movs	r1, r3
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d12:	001a      	movs	r2, r3
 8008d14:	1dbb      	adds	r3, r7, #6
 8008d16:	881b      	ldrh	r3, [r3, #0]
 8008d18:	f7fb ff64 	bl	8004be4 <HAL_DMA_Start_IT>
 8008d1c:	1e03      	subs	r3, r0, #0
 8008d1e:	d009      	beq.n	8008d34 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2290      	movs	r2, #144	; 0x90
 8008d24:	2110      	movs	r1, #16
 8008d26:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	228c      	movs	r2, #140	; 0x8c
 8008d2c:	2120      	movs	r1, #32
 8008d2e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e050      	b.n	8008dd6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d019      	beq.n	8008d70 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8008d40:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d46:	2301      	movs	r3, #1
 8008d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4c:	f383 8810 	msr	PRIMASK, r3
}
 8008d50:	46c0      	nop			; (mov r8, r8)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2180      	movs	r1, #128	; 0x80
 8008d5e:	0049      	lsls	r1, r1, #1
 8008d60:	430a      	orrs	r2, r1
 8008d62:	601a      	str	r2, [r3, #0]
 8008d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d66:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6a:	f383 8810 	msr	PRIMASK, r3
}
 8008d6e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d70:	f3ef 8310 	mrs	r3, PRIMASK
 8008d74:	613b      	str	r3, [r7, #16]
  return(result);
 8008d76:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d78:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f383 8810 	msr	PRIMASK, r3
}
 8008d84:	46c0      	nop			; (mov r8, r8)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	689a      	ldr	r2, [r3, #8]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2101      	movs	r1, #1
 8008d92:	430a      	orrs	r2, r1
 8008d94:	609a      	str	r2, [r3, #8]
 8008d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	f383 8810 	msr	PRIMASK, r3
}
 8008da0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008da2:	f3ef 8310 	mrs	r3, PRIMASK
 8008da6:	61fb      	str	r3, [r7, #28]
  return(result);
 8008da8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008daa:	637b      	str	r3, [r7, #52]	; 0x34
 8008dac:	2301      	movs	r3, #1
 8008dae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008db0:	6a3b      	ldr	r3, [r7, #32]
 8008db2:	f383 8810 	msr	PRIMASK, r3
}
 8008db6:	46c0      	nop			; (mov r8, r8)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	689a      	ldr	r2, [r3, #8]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2140      	movs	r1, #64	; 0x40
 8008dc4:	430a      	orrs	r2, r1
 8008dc6:	609a      	str	r2, [r3, #8]
 8008dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dce:	f383 8810 	msr	PRIMASK, r3
}
 8008dd2:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	0018      	movs	r0, r3
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	b010      	add	sp, #64	; 0x40
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	46c0      	nop			; (mov r8, r8)
 8008de0:	08008f39 	.word	0x08008f39
 8008de4:	0800906d 	.word	0x0800906d
 8008de8:	080090b5 	.word	0x080090b5

08008dec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b08a      	sub	sp, #40	; 0x28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008df4:	f3ef 8310 	mrs	r3, PRIMASK
 8008df8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008dfa:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8008dfe:	2301      	movs	r3, #1
 8008e00:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f383 8810 	msr	PRIMASK, r3
}
 8008e08:	46c0      	nop			; (mov r8, r8)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	21c0      	movs	r1, #192	; 0xc0
 8008e16:	438a      	bics	r2, r1
 8008e18:	601a      	str	r2, [r3, #0]
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	f383 8810 	msr	PRIMASK, r3
}
 8008e24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e26:	f3ef 8310 	mrs	r3, PRIMASK
 8008e2a:	617b      	str	r3, [r7, #20]
  return(result);
 8008e2c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008e2e:	623b      	str	r3, [r7, #32]
 8008e30:	2301      	movs	r3, #1
 8008e32:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	f383 8810 	msr	PRIMASK, r3
}
 8008e3a:	46c0      	nop			; (mov r8, r8)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	689a      	ldr	r2, [r3, #8]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4908      	ldr	r1, [pc, #32]	; (8008e68 <UART_EndTxTransfer+0x7c>)
 8008e48:	400a      	ands	r2, r1
 8008e4a:	609a      	str	r2, [r3, #8]
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	f383 8810 	msr	PRIMASK, r3
}
 8008e56:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2288      	movs	r2, #136	; 0x88
 8008e5c:	2120      	movs	r1, #32
 8008e5e:	5099      	str	r1, [r3, r2]
}
 8008e60:	46c0      	nop			; (mov r8, r8)
 8008e62:	46bd      	mov	sp, r7
 8008e64:	b00a      	add	sp, #40	; 0x28
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	ff7fffff 	.word	0xff7fffff

08008e6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b08e      	sub	sp, #56	; 0x38
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e74:	f3ef 8310 	mrs	r3, PRIMASK
 8008e78:	617b      	str	r3, [r7, #20]
  return(result);
 8008e7a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e7e:	2301      	movs	r3, #1
 8008e80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	f383 8810 	msr	PRIMASK, r3
}
 8008e88:	46c0      	nop			; (mov r8, r8)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4926      	ldr	r1, [pc, #152]	; (8008f30 <UART_EndRxTransfer+0xc4>)
 8008e96:	400a      	ands	r2, r1
 8008e98:	601a      	str	r2, [r3, #0]
 8008e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	f383 8810 	msr	PRIMASK, r3
}
 8008ea4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8008eaa:	623b      	str	r3, [r7, #32]
  return(result);
 8008eac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008eae:	633b      	str	r3, [r7, #48]	; 0x30
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	f383 8810 	msr	PRIMASK, r3
}
 8008eba:	46c0      	nop			; (mov r8, r8)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	689a      	ldr	r2, [r3, #8]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	491b      	ldr	r1, [pc, #108]	; (8008f34 <UART_EndRxTransfer+0xc8>)
 8008ec8:	400a      	ands	r2, r1
 8008eca:	609a      	str	r2, [r3, #8]
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ece:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed2:	f383 8810 	msr	PRIMASK, r3
}
 8008ed6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d118      	bne.n	8008f12 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ee4:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ee6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eea:	2301      	movs	r3, #1
 8008eec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f383 8810 	msr	PRIMASK, r3
}
 8008ef4:	46c0      	nop			; (mov r8, r8)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2110      	movs	r1, #16
 8008f02:	438a      	bics	r2, r1
 8008f04:	601a      	str	r2, [r3, #0]
 8008f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	f383 8810 	msr	PRIMASK, r3
}
 8008f10:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	228c      	movs	r2, #140	; 0x8c
 8008f16:	2120      	movs	r1, #32
 8008f18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008f26:	46c0      	nop			; (mov r8, r8)
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	b00e      	add	sp, #56	; 0x38
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	46c0      	nop			; (mov r8, r8)
 8008f30:	fffffedf 	.word	0xfffffedf
 8008f34:	effffffe 	.word	0xeffffffe

08008f38 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b094      	sub	sp, #80	; 0x50
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f44:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2220      	movs	r2, #32
 8008f4e:	4013      	ands	r3, r2
 8008f50:	d16f      	bne.n	8009032 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8008f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f54:	225e      	movs	r2, #94	; 0x5e
 8008f56:	2100      	movs	r1, #0
 8008f58:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8008f5e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f60:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f62:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f64:	2301      	movs	r3, #1
 8008f66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	f383 8810 	msr	PRIMASK, r3
}
 8008f6e:	46c0      	nop			; (mov r8, r8)
 8008f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	493b      	ldr	r1, [pc, #236]	; (8009068 <UART_DMAReceiveCplt+0x130>)
 8008f7c:	400a      	ands	r2, r1
 8008f7e:	601a      	str	r2, [r3, #0]
 8008f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	f383 8810 	msr	PRIMASK, r3
}
 8008f8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8008f90:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f94:	647b      	str	r3, [r7, #68]	; 0x44
 8008f96:	2301      	movs	r3, #1
 8008f98:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9c:	f383 8810 	msr	PRIMASK, r3
}
 8008fa0:	46c0      	nop			; (mov r8, r8)
 8008fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	689a      	ldr	r2, [r3, #8]
 8008fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2101      	movs	r1, #1
 8008fae:	438a      	bics	r2, r1
 8008fb0:	609a      	str	r2, [r3, #8]
 8008fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb8:	f383 8810 	msr	PRIMASK, r3
}
 8008fbc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fbe:	f3ef 8310 	mrs	r3, PRIMASK
 8008fc2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fc6:	643b      	str	r3, [r7, #64]	; 0x40
 8008fc8:	2301      	movs	r3, #1
 8008fca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fce:	f383 8810 	msr	PRIMASK, r3
}
 8008fd2:	46c0      	nop			; (mov r8, r8)
 8008fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	689a      	ldr	r2, [r3, #8]
 8008fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2140      	movs	r1, #64	; 0x40
 8008fe0:	438a      	bics	r2, r1
 8008fe2:	609a      	str	r2, [r3, #8]
 8008fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fe6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fea:	f383 8810 	msr	PRIMASK, r3
}
 8008fee:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ff2:	228c      	movs	r2, #140	; 0x8c
 8008ff4:	2120      	movs	r1, #32
 8008ff6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d118      	bne.n	8009032 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009000:	f3ef 8310 	mrs	r3, PRIMASK
 8009004:	60fb      	str	r3, [r7, #12]
  return(result);
 8009006:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009008:	63fb      	str	r3, [r7, #60]	; 0x3c
 800900a:	2301      	movs	r3, #1
 800900c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	f383 8810 	msr	PRIMASK, r3
}
 8009014:	46c0      	nop			; (mov r8, r8)
 8009016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2110      	movs	r1, #16
 8009022:	438a      	bics	r2, r1
 8009024:	601a      	str	r2, [r3, #0]
 8009026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009028:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f383 8810 	msr	PRIMASK, r3
}
 8009030:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009034:	2200      	movs	r2, #0
 8009036:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800903a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800903c:	2b01      	cmp	r3, #1
 800903e:	d109      	bne.n	8009054 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8009040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009042:	22c0      	movs	r2, #192	; 0xc0
 8009044:	589b      	ldr	r3, [r3, r2]
 8009046:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009048:	215c      	movs	r1, #92	; 0x5c
 800904a:	5a51      	ldrh	r1, [r2, r1]
 800904c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800904e:	0010      	movs	r0, r2
 8009050:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009052:	e005      	b.n	8009060 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8009054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009056:	22a0      	movs	r2, #160	; 0xa0
 8009058:	589b      	ldr	r3, [r3, r2]
 800905a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800905c:	0010      	movs	r0, r2
 800905e:	4798      	blx	r3
}
 8009060:	46c0      	nop			; (mov r8, r8)
 8009062:	46bd      	mov	sp, r7
 8009064:	b014      	add	sp, #80	; 0x50
 8009066:	bd80      	pop	{r7, pc}
 8009068:	fffffeff 	.word	0xfffffeff

0800906c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009078:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2201      	movs	r2, #1
 800907e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009084:	2b01      	cmp	r3, #1
 8009086:	d10b      	bne.n	80090a0 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	22c0      	movs	r2, #192	; 0xc0
 800908c:	589b      	ldr	r3, [r3, r2]
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	215c      	movs	r1, #92	; 0x5c
 8009092:	5a52      	ldrh	r2, [r2, r1]
 8009094:	0852      	lsrs	r2, r2, #1
 8009096:	b291      	uxth	r1, r2
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	0010      	movs	r0, r2
 800909c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800909e:	e005      	b.n	80090ac <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	229c      	movs	r2, #156	; 0x9c
 80090a4:	589b      	ldr	r3, [r3, r2]
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	0010      	movs	r0, r2
 80090aa:	4798      	blx	r3
}
 80090ac:	46c0      	nop			; (mov r8, r8)
 80090ae:	46bd      	mov	sp, r7
 80090b0:	b004      	add	sp, #16
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	2288      	movs	r2, #136	; 0x88
 80090c6:	589b      	ldr	r3, [r3, r2]
 80090c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	228c      	movs	r2, #140	; 0x8c
 80090ce:	589b      	ldr	r3, [r3, r2]
 80090d0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	2280      	movs	r2, #128	; 0x80
 80090da:	4013      	ands	r3, r2
 80090dc:	2b80      	cmp	r3, #128	; 0x80
 80090de:	d10a      	bne.n	80090f6 <UART_DMAError+0x42>
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	2b21      	cmp	r3, #33	; 0x21
 80090e4:	d107      	bne.n	80090f6 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	2256      	movs	r2, #86	; 0x56
 80090ea:	2100      	movs	r1, #0
 80090ec:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	0018      	movs	r0, r3
 80090f2:	f7ff fe7b 	bl	8008dec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	2240      	movs	r2, #64	; 0x40
 80090fe:	4013      	ands	r3, r2
 8009100:	2b40      	cmp	r3, #64	; 0x40
 8009102:	d10a      	bne.n	800911a <UART_DMAError+0x66>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2b22      	cmp	r3, #34	; 0x22
 8009108:	d107      	bne.n	800911a <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	225e      	movs	r2, #94	; 0x5e
 800910e:	2100      	movs	r1, #0
 8009110:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	0018      	movs	r0, r3
 8009116:	f7ff fea9 	bl	8008e6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2290      	movs	r2, #144	; 0x90
 800911e:	589b      	ldr	r3, [r3, r2]
 8009120:	2210      	movs	r2, #16
 8009122:	431a      	orrs	r2, r3
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	2190      	movs	r1, #144	; 0x90
 8009128:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	22a4      	movs	r2, #164	; 0xa4
 800912e:	589b      	ldr	r3, [r3, r2]
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	0010      	movs	r0, r2
 8009134:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009136:	46c0      	nop			; (mov r8, r8)
 8009138:	46bd      	mov	sp, r7
 800913a:	b006      	add	sp, #24
 800913c:	bd80      	pop	{r7, pc}

0800913e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b084      	sub	sp, #16
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	225e      	movs	r2, #94	; 0x5e
 8009150:	2100      	movs	r1, #0
 8009152:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2256      	movs	r2, #86	; 0x56
 8009158:	2100      	movs	r1, #0
 800915a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	22a4      	movs	r2, #164	; 0xa4
 8009160:	589b      	ldr	r3, [r3, r2]
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	0010      	movs	r0, r2
 8009166:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009168:	46c0      	nop			; (mov r8, r8)
 800916a:	46bd      	mov	sp, r7
 800916c:	b004      	add	sp, #16
 800916e:	bd80      	pop	{r7, pc}

08009170 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009178:	f3ef 8310 	mrs	r3, PRIMASK
 800917c:	60bb      	str	r3, [r7, #8]
  return(result);
 800917e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009180:	617b      	str	r3, [r7, #20]
 8009182:	2301      	movs	r3, #1
 8009184:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f383 8810 	msr	PRIMASK, r3
}
 800918c:	46c0      	nop			; (mov r8, r8)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2140      	movs	r1, #64	; 0x40
 800919a:	438a      	bics	r2, r1
 800919c:	601a      	str	r2, [r3, #0]
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	f383 8810 	msr	PRIMASK, r3
}
 80091a8:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2288      	movs	r2, #136	; 0x88
 80091ae:	2120      	movs	r1, #32
 80091b0:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	679a      	str	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2298      	movs	r2, #152	; 0x98
 80091bc:	589b      	ldr	r3, [r3, r2]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	0010      	movs	r0, r2
 80091c2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091c4:	46c0      	nop			; (mov r8, r8)
 80091c6:	46bd      	mov	sp, r7
 80091c8:	b006      	add	sp, #24
 80091ca:	bd80      	pop	{r7, pc}

080091cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80091d4:	46c0      	nop			; (mov r8, r8)
 80091d6:	46bd      	mov	sp, r7
 80091d8:	b002      	add	sp, #8
 80091da:	bd80      	pop	{r7, pc}

080091dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80091e4:	46c0      	nop			; (mov r8, r8)
 80091e6:	46bd      	mov	sp, r7
 80091e8:	b002      	add	sp, #8
 80091ea:	bd80      	pop	{r7, pc}

080091ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80091f4:	46c0      	nop			; (mov r8, r8)
 80091f6:	46bd      	mov	sp, r7
 80091f8:	b002      	add	sp, #8
 80091fa:	bd80      	pop	{r7, pc}

080091fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2284      	movs	r2, #132	; 0x84
 8009208:	5c9b      	ldrb	r3, [r3, r2]
 800920a:	2b01      	cmp	r3, #1
 800920c:	d101      	bne.n	8009212 <HAL_UARTEx_DisableFifoMode+0x16>
 800920e:	2302      	movs	r3, #2
 8009210:	e027      	b.n	8009262 <HAL_UARTEx_DisableFifoMode+0x66>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2284      	movs	r2, #132	; 0x84
 8009216:	2101      	movs	r1, #1
 8009218:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2288      	movs	r2, #136	; 0x88
 800921e:	2124      	movs	r1, #36	; 0x24
 8009220:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2101      	movs	r1, #1
 8009236:	438a      	bics	r2, r1
 8009238:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	4a0b      	ldr	r2, [pc, #44]	; (800926c <HAL_UARTEx_DisableFifoMode+0x70>)
 800923e:	4013      	ands	r3, r2
 8009240:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2288      	movs	r2, #136	; 0x88
 8009254:	2120      	movs	r1, #32
 8009256:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2284      	movs	r2, #132	; 0x84
 800925c:	2100      	movs	r1, #0
 800925e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	0018      	movs	r0, r3
 8009264:	46bd      	mov	sp, r7
 8009266:	b004      	add	sp, #16
 8009268:	bd80      	pop	{r7, pc}
 800926a:	46c0      	nop			; (mov r8, r8)
 800926c:	dfffffff 	.word	0xdfffffff

08009270 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2284      	movs	r2, #132	; 0x84
 800927e:	5c9b      	ldrb	r3, [r3, r2]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d101      	bne.n	8009288 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009284:	2302      	movs	r3, #2
 8009286:	e02e      	b.n	80092e6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2284      	movs	r2, #132	; 0x84
 800928c:	2101      	movs	r1, #1
 800928e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2288      	movs	r2, #136	; 0x88
 8009294:	2124      	movs	r1, #36	; 0x24
 8009296:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2101      	movs	r1, #1
 80092ac:	438a      	bics	r2, r1
 80092ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	00db      	lsls	r3, r3, #3
 80092b8:	08d9      	lsrs	r1, r3, #3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	430a      	orrs	r2, r1
 80092c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	0018      	movs	r0, r3
 80092c8:	f000 f8bc 	bl	8009444 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2288      	movs	r2, #136	; 0x88
 80092d8:	2120      	movs	r1, #32
 80092da:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2284      	movs	r2, #132	; 0x84
 80092e0:	2100      	movs	r1, #0
 80092e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	0018      	movs	r0, r3
 80092e8:	46bd      	mov	sp, r7
 80092ea:	b004      	add	sp, #16
 80092ec:	bd80      	pop	{r7, pc}
	...

080092f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2284      	movs	r2, #132	; 0x84
 80092fe:	5c9b      	ldrb	r3, [r3, r2]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d101      	bne.n	8009308 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009304:	2302      	movs	r3, #2
 8009306:	e02f      	b.n	8009368 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2284      	movs	r2, #132	; 0x84
 800930c:	2101      	movs	r1, #1
 800930e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2288      	movs	r2, #136	; 0x88
 8009314:	2124      	movs	r1, #36	; 0x24
 8009316:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2101      	movs	r1, #1
 800932c:	438a      	bics	r2, r1
 800932e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	4a0e      	ldr	r2, [pc, #56]	; (8009370 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009338:	4013      	ands	r3, r2
 800933a:	0019      	movs	r1, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	683a      	ldr	r2, [r7, #0]
 8009342:	430a      	orrs	r2, r1
 8009344:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	0018      	movs	r0, r3
 800934a:	f000 f87b 	bl	8009444 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2288      	movs	r2, #136	; 0x88
 800935a:	2120      	movs	r1, #32
 800935c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2284      	movs	r2, #132	; 0x84
 8009362:	2100      	movs	r1, #0
 8009364:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	0018      	movs	r0, r3
 800936a:	46bd      	mov	sp, r7
 800936c:	b004      	add	sp, #16
 800936e:	bd80      	pop	{r7, pc}
 8009370:	f1ffffff 	.word	0xf1ffffff

08009374 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009374:	b5b0      	push	{r4, r5, r7, lr}
 8009376:	b08a      	sub	sp, #40	; 0x28
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	1dbb      	adds	r3, r7, #6
 8009380:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	228c      	movs	r2, #140	; 0x8c
 8009386:	589b      	ldr	r3, [r3, r2]
 8009388:	2b20      	cmp	r3, #32
 800938a:	d156      	bne.n	800943a <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d003      	beq.n	800939a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009392:	1dbb      	adds	r3, r7, #6
 8009394:	881b      	ldrh	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e04e      	b.n	800943c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	689a      	ldr	r2, [r3, #8]
 80093a2:	2380      	movs	r3, #128	; 0x80
 80093a4:	015b      	lsls	r3, r3, #5
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d109      	bne.n	80093be <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d105      	bne.n	80093be <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	2201      	movs	r2, #1
 80093b6:	4013      	ands	r3, r2
 80093b8:	d001      	beq.n	80093be <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e03e      	b.n	800943c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2201      	movs	r2, #1
 80093c2:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2200      	movs	r2, #0
 80093c8:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80093ca:	2527      	movs	r5, #39	; 0x27
 80093cc:	197c      	adds	r4, r7, r5
 80093ce:	1dbb      	adds	r3, r7, #6
 80093d0:	881a      	ldrh	r2, [r3, #0]
 80093d2:	68b9      	ldr	r1, [r7, #8]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	0018      	movs	r0, r3
 80093d8:	f7ff fc62 	bl	8008ca0 <UART_Start_Receive_DMA>
 80093dc:	0003      	movs	r3, r0
 80093de:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80093e0:	197b      	adds	r3, r7, r5
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d124      	bne.n	8009432 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d11c      	bne.n	800942a <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2210      	movs	r2, #16
 80093f6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093f8:	f3ef 8310 	mrs	r3, PRIMASK
 80093fc:	617b      	str	r3, [r7, #20]
  return(result);
 80093fe:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009400:	623b      	str	r3, [r7, #32]
 8009402:	2301      	movs	r3, #1
 8009404:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	f383 8810 	msr	PRIMASK, r3
}
 800940c:	46c0      	nop			; (mov r8, r8)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2110      	movs	r1, #16
 800941a:	430a      	orrs	r2, r1
 800941c:	601a      	str	r2, [r3, #0]
 800941e:	6a3b      	ldr	r3, [r7, #32]
 8009420:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	f383 8810 	msr	PRIMASK, r3
}
 8009428:	e003      	b.n	8009432 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800942a:	2327      	movs	r3, #39	; 0x27
 800942c:	18fb      	adds	r3, r7, r3
 800942e:	2201      	movs	r2, #1
 8009430:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8009432:	2327      	movs	r3, #39	; 0x27
 8009434:	18fb      	adds	r3, r7, r3
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	e000      	b.n	800943c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800943a:	2302      	movs	r3, #2
  }
}
 800943c:	0018      	movs	r0, r3
 800943e:	46bd      	mov	sp, r7
 8009440:	b00a      	add	sp, #40	; 0x28
 8009442:	bdb0      	pop	{r4, r5, r7, pc}

08009444 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009450:	2b00      	cmp	r3, #0
 8009452:	d108      	bne.n	8009466 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	226a      	movs	r2, #106	; 0x6a
 8009458:	2101      	movs	r1, #1
 800945a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2268      	movs	r2, #104	; 0x68
 8009460:	2101      	movs	r1, #1
 8009462:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009464:	e043      	b.n	80094ee <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009466:	260f      	movs	r6, #15
 8009468:	19bb      	adds	r3, r7, r6
 800946a:	2208      	movs	r2, #8
 800946c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800946e:	200e      	movs	r0, #14
 8009470:	183b      	adds	r3, r7, r0
 8009472:	2208      	movs	r2, #8
 8009474:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	0e5b      	lsrs	r3, r3, #25
 800947e:	b2da      	uxtb	r2, r3
 8009480:	240d      	movs	r4, #13
 8009482:	193b      	adds	r3, r7, r4
 8009484:	2107      	movs	r1, #7
 8009486:	400a      	ands	r2, r1
 8009488:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	0f5b      	lsrs	r3, r3, #29
 8009492:	b2da      	uxtb	r2, r3
 8009494:	250c      	movs	r5, #12
 8009496:	197b      	adds	r3, r7, r5
 8009498:	2107      	movs	r1, #7
 800949a:	400a      	ands	r2, r1
 800949c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800949e:	183b      	adds	r3, r7, r0
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	197a      	adds	r2, r7, r5
 80094a4:	7812      	ldrb	r2, [r2, #0]
 80094a6:	4914      	ldr	r1, [pc, #80]	; (80094f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80094a8:	5c8a      	ldrb	r2, [r1, r2]
 80094aa:	435a      	muls	r2, r3
 80094ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80094ae:	197b      	adds	r3, r7, r5
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	4a12      	ldr	r2, [pc, #72]	; (80094fc <UARTEx_SetNbDataToProcess+0xb8>)
 80094b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094b6:	0019      	movs	r1, r3
 80094b8:	f7f6 feae 	bl	8000218 <__divsi3>
 80094bc:	0003      	movs	r3, r0
 80094be:	b299      	uxth	r1, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	226a      	movs	r2, #106	; 0x6a
 80094c4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094c6:	19bb      	adds	r3, r7, r6
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	193a      	adds	r2, r7, r4
 80094cc:	7812      	ldrb	r2, [r2, #0]
 80094ce:	490a      	ldr	r1, [pc, #40]	; (80094f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80094d0:	5c8a      	ldrb	r2, [r1, r2]
 80094d2:	435a      	muls	r2, r3
 80094d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80094d6:	193b      	adds	r3, r7, r4
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	4a08      	ldr	r2, [pc, #32]	; (80094fc <UARTEx_SetNbDataToProcess+0xb8>)
 80094dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094de:	0019      	movs	r1, r3
 80094e0:	f7f6 fe9a 	bl	8000218 <__divsi3>
 80094e4:	0003      	movs	r3, r0
 80094e6:	b299      	uxth	r1, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2268      	movs	r2, #104	; 0x68
 80094ec:	5299      	strh	r1, [r3, r2]
}
 80094ee:	46c0      	nop			; (mov r8, r8)
 80094f0:	46bd      	mov	sp, r7
 80094f2:	b005      	add	sp, #20
 80094f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094f6:	46c0      	nop			; (mov r8, r8)
 80094f8:	08009b3c 	.word	0x08009b3c
 80094fc:	08009b44 	.word	0x08009b44

08009500 <_ZdlPvj>:
 8009500:	b510      	push	{r4, lr}
 8009502:	f000 f811 	bl	8009528 <_ZdlPv>
 8009506:	bd10      	pop	{r4, pc}

08009508 <__cxa_guard_acquire>:
 8009508:	2301      	movs	r3, #1
 800950a:	6802      	ldr	r2, [r0, #0]
 800950c:	421a      	tst	r2, r3
 800950e:	d106      	bne.n	800951e <__cxa_guard_acquire+0x16>
 8009510:	7842      	ldrb	r2, [r0, #1]
 8009512:	2a00      	cmp	r2, #0
 8009514:	d000      	beq.n	8009518 <__cxa_guard_acquire+0x10>
 8009516:	deff      	udf	#255	; 0xff
 8009518:	7043      	strb	r3, [r0, #1]
 800951a:	0018      	movs	r0, r3
 800951c:	4770      	bx	lr
 800951e:	2000      	movs	r0, #0
 8009520:	e7fc      	b.n	800951c <__cxa_guard_acquire+0x14>

08009522 <__cxa_guard_release>:
 8009522:	2301      	movs	r3, #1
 8009524:	6003      	str	r3, [r0, #0]
 8009526:	4770      	bx	lr

08009528 <_ZdlPv>:
 8009528:	b510      	push	{r4, lr}
 800952a:	f000 f813 	bl	8009554 <free>
 800952e:	bd10      	pop	{r4, pc}

08009530 <atexit>:
 8009530:	2300      	movs	r3, #0
 8009532:	b510      	push	{r4, lr}
 8009534:	0001      	movs	r1, r0
 8009536:	001a      	movs	r2, r3
 8009538:	0018      	movs	r0, r3
 800953a:	f000 f90f 	bl	800975c <__register_exitproc>
 800953e:	bd10      	pop	{r4, pc}

08009540 <malloc>:
 8009540:	b510      	push	{r4, lr}
 8009542:	4b03      	ldr	r3, [pc, #12]	; (8009550 <malloc+0x10>)
 8009544:	0001      	movs	r1, r0
 8009546:	6818      	ldr	r0, [r3, #0]
 8009548:	f000 f830 	bl	80095ac <_malloc_r>
 800954c:	bd10      	pop	{r4, pc}
 800954e:	46c0      	nop			; (mov r8, r8)
 8009550:	20000058 	.word	0x20000058

08009554 <free>:
 8009554:	b510      	push	{r4, lr}
 8009556:	4b03      	ldr	r3, [pc, #12]	; (8009564 <free+0x10>)
 8009558:	0001      	movs	r1, r0
 800955a:	6818      	ldr	r0, [r3, #0]
 800955c:	f000 f95e 	bl	800981c <_free_r>
 8009560:	bd10      	pop	{r4, pc}
 8009562:	46c0      	nop			; (mov r8, r8)
 8009564:	20000058 	.word	0x20000058

08009568 <sbrk_aligned>:
 8009568:	b570      	push	{r4, r5, r6, lr}
 800956a:	4e0f      	ldr	r6, [pc, #60]	; (80095a8 <sbrk_aligned+0x40>)
 800956c:	000d      	movs	r5, r1
 800956e:	6831      	ldr	r1, [r6, #0]
 8009570:	0004      	movs	r4, r0
 8009572:	2900      	cmp	r1, #0
 8009574:	d102      	bne.n	800957c <sbrk_aligned+0x14>
 8009576:	f000 f8b3 	bl	80096e0 <_sbrk_r>
 800957a:	6030      	str	r0, [r6, #0]
 800957c:	0029      	movs	r1, r5
 800957e:	0020      	movs	r0, r4
 8009580:	f000 f8ae 	bl	80096e0 <_sbrk_r>
 8009584:	1c43      	adds	r3, r0, #1
 8009586:	d00a      	beq.n	800959e <sbrk_aligned+0x36>
 8009588:	2303      	movs	r3, #3
 800958a:	1cc5      	adds	r5, r0, #3
 800958c:	439d      	bics	r5, r3
 800958e:	42a8      	cmp	r0, r5
 8009590:	d007      	beq.n	80095a2 <sbrk_aligned+0x3a>
 8009592:	1a29      	subs	r1, r5, r0
 8009594:	0020      	movs	r0, r4
 8009596:	f000 f8a3 	bl	80096e0 <_sbrk_r>
 800959a:	3001      	adds	r0, #1
 800959c:	d101      	bne.n	80095a2 <sbrk_aligned+0x3a>
 800959e:	2501      	movs	r5, #1
 80095a0:	426d      	negs	r5, r5
 80095a2:	0028      	movs	r0, r5
 80095a4:	bd70      	pop	{r4, r5, r6, pc}
 80095a6:	46c0      	nop			; (mov r8, r8)
 80095a8:	20000a20 	.word	0x20000a20

080095ac <_malloc_r>:
 80095ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095ae:	2203      	movs	r2, #3
 80095b0:	1ccb      	adds	r3, r1, #3
 80095b2:	4393      	bics	r3, r2
 80095b4:	3308      	adds	r3, #8
 80095b6:	0006      	movs	r6, r0
 80095b8:	001f      	movs	r7, r3
 80095ba:	2b0c      	cmp	r3, #12
 80095bc:	d238      	bcs.n	8009630 <_malloc_r+0x84>
 80095be:	270c      	movs	r7, #12
 80095c0:	42b9      	cmp	r1, r7
 80095c2:	d837      	bhi.n	8009634 <_malloc_r+0x88>
 80095c4:	0030      	movs	r0, r6
 80095c6:	f000 f873 	bl	80096b0 <__malloc_lock>
 80095ca:	4b38      	ldr	r3, [pc, #224]	; (80096ac <_malloc_r+0x100>)
 80095cc:	9300      	str	r3, [sp, #0]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	001c      	movs	r4, r3
 80095d2:	2c00      	cmp	r4, #0
 80095d4:	d133      	bne.n	800963e <_malloc_r+0x92>
 80095d6:	0039      	movs	r1, r7
 80095d8:	0030      	movs	r0, r6
 80095da:	f7ff ffc5 	bl	8009568 <sbrk_aligned>
 80095de:	0004      	movs	r4, r0
 80095e0:	1c43      	adds	r3, r0, #1
 80095e2:	d15e      	bne.n	80096a2 <_malloc_r+0xf6>
 80095e4:	9b00      	ldr	r3, [sp, #0]
 80095e6:	681c      	ldr	r4, [r3, #0]
 80095e8:	0025      	movs	r5, r4
 80095ea:	2d00      	cmp	r5, #0
 80095ec:	d14e      	bne.n	800968c <_malloc_r+0xe0>
 80095ee:	2c00      	cmp	r4, #0
 80095f0:	d051      	beq.n	8009696 <_malloc_r+0xea>
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	0029      	movs	r1, r5
 80095f6:	18e3      	adds	r3, r4, r3
 80095f8:	0030      	movs	r0, r6
 80095fa:	9301      	str	r3, [sp, #4]
 80095fc:	f000 f870 	bl	80096e0 <_sbrk_r>
 8009600:	9b01      	ldr	r3, [sp, #4]
 8009602:	4283      	cmp	r3, r0
 8009604:	d147      	bne.n	8009696 <_malloc_r+0xea>
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	0030      	movs	r0, r6
 800960a:	1aff      	subs	r7, r7, r3
 800960c:	0039      	movs	r1, r7
 800960e:	f7ff ffab 	bl	8009568 <sbrk_aligned>
 8009612:	3001      	adds	r0, #1
 8009614:	d03f      	beq.n	8009696 <_malloc_r+0xea>
 8009616:	6823      	ldr	r3, [r4, #0]
 8009618:	19db      	adds	r3, r3, r7
 800961a:	6023      	str	r3, [r4, #0]
 800961c:	9b00      	ldr	r3, [sp, #0]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d040      	beq.n	80096a6 <_malloc_r+0xfa>
 8009624:	685a      	ldr	r2, [r3, #4]
 8009626:	42a2      	cmp	r2, r4
 8009628:	d133      	bne.n	8009692 <_malloc_r+0xe6>
 800962a:	2200      	movs	r2, #0
 800962c:	605a      	str	r2, [r3, #4]
 800962e:	e014      	b.n	800965a <_malloc_r+0xae>
 8009630:	2b00      	cmp	r3, #0
 8009632:	dac5      	bge.n	80095c0 <_malloc_r+0x14>
 8009634:	230c      	movs	r3, #12
 8009636:	2500      	movs	r5, #0
 8009638:	6033      	str	r3, [r6, #0]
 800963a:	0028      	movs	r0, r5
 800963c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800963e:	6821      	ldr	r1, [r4, #0]
 8009640:	1bc9      	subs	r1, r1, r7
 8009642:	d420      	bmi.n	8009686 <_malloc_r+0xda>
 8009644:	290b      	cmp	r1, #11
 8009646:	d918      	bls.n	800967a <_malloc_r+0xce>
 8009648:	19e2      	adds	r2, r4, r7
 800964a:	6027      	str	r7, [r4, #0]
 800964c:	42a3      	cmp	r3, r4
 800964e:	d112      	bne.n	8009676 <_malloc_r+0xca>
 8009650:	9b00      	ldr	r3, [sp, #0]
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	6863      	ldr	r3, [r4, #4]
 8009656:	6011      	str	r1, [r2, #0]
 8009658:	6053      	str	r3, [r2, #4]
 800965a:	0030      	movs	r0, r6
 800965c:	0025      	movs	r5, r4
 800965e:	f000 f82f 	bl	80096c0 <__malloc_unlock>
 8009662:	2207      	movs	r2, #7
 8009664:	350b      	adds	r5, #11
 8009666:	1d23      	adds	r3, r4, #4
 8009668:	4395      	bics	r5, r2
 800966a:	1aea      	subs	r2, r5, r3
 800966c:	429d      	cmp	r5, r3
 800966e:	d0e4      	beq.n	800963a <_malloc_r+0x8e>
 8009670:	1b5b      	subs	r3, r3, r5
 8009672:	50a3      	str	r3, [r4, r2]
 8009674:	e7e1      	b.n	800963a <_malloc_r+0x8e>
 8009676:	605a      	str	r2, [r3, #4]
 8009678:	e7ec      	b.n	8009654 <_malloc_r+0xa8>
 800967a:	6862      	ldr	r2, [r4, #4]
 800967c:	42a3      	cmp	r3, r4
 800967e:	d1d5      	bne.n	800962c <_malloc_r+0x80>
 8009680:	9b00      	ldr	r3, [sp, #0]
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	e7e9      	b.n	800965a <_malloc_r+0xae>
 8009686:	0023      	movs	r3, r4
 8009688:	6864      	ldr	r4, [r4, #4]
 800968a:	e7a2      	b.n	80095d2 <_malloc_r+0x26>
 800968c:	002c      	movs	r4, r5
 800968e:	686d      	ldr	r5, [r5, #4]
 8009690:	e7ab      	b.n	80095ea <_malloc_r+0x3e>
 8009692:	0013      	movs	r3, r2
 8009694:	e7c4      	b.n	8009620 <_malloc_r+0x74>
 8009696:	230c      	movs	r3, #12
 8009698:	0030      	movs	r0, r6
 800969a:	6033      	str	r3, [r6, #0]
 800969c:	f000 f810 	bl	80096c0 <__malloc_unlock>
 80096a0:	e7cb      	b.n	800963a <_malloc_r+0x8e>
 80096a2:	6027      	str	r7, [r4, #0]
 80096a4:	e7d9      	b.n	800965a <_malloc_r+0xae>
 80096a6:	605b      	str	r3, [r3, #4]
 80096a8:	deff      	udf	#255	; 0xff
 80096aa:	46c0      	nop			; (mov r8, r8)
 80096ac:	20000a1c 	.word	0x20000a1c

080096b0 <__malloc_lock>:
 80096b0:	b510      	push	{r4, lr}
 80096b2:	4802      	ldr	r0, [pc, #8]	; (80096bc <__malloc_lock+0xc>)
 80096b4:	f000 f850 	bl	8009758 <__retarget_lock_acquire_recursive>
 80096b8:	bd10      	pop	{r4, pc}
 80096ba:	46c0      	nop			; (mov r8, r8)
 80096bc:	20000b61 	.word	0x20000b61

080096c0 <__malloc_unlock>:
 80096c0:	b510      	push	{r4, lr}
 80096c2:	4802      	ldr	r0, [pc, #8]	; (80096cc <__malloc_unlock+0xc>)
 80096c4:	f000 f849 	bl	800975a <__retarget_lock_release_recursive>
 80096c8:	bd10      	pop	{r4, pc}
 80096ca:	46c0      	nop			; (mov r8, r8)
 80096cc:	20000b61 	.word	0x20000b61

080096d0 <memset>:
 80096d0:	0003      	movs	r3, r0
 80096d2:	1882      	adds	r2, r0, r2
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d100      	bne.n	80096da <memset+0xa>
 80096d8:	4770      	bx	lr
 80096da:	7019      	strb	r1, [r3, #0]
 80096dc:	3301      	adds	r3, #1
 80096de:	e7f9      	b.n	80096d4 <memset+0x4>

080096e0 <_sbrk_r>:
 80096e0:	2300      	movs	r3, #0
 80096e2:	b570      	push	{r4, r5, r6, lr}
 80096e4:	4d06      	ldr	r5, [pc, #24]	; (8009700 <_sbrk_r+0x20>)
 80096e6:	0004      	movs	r4, r0
 80096e8:	0008      	movs	r0, r1
 80096ea:	602b      	str	r3, [r5, #0]
 80096ec:	f7fa f9ca 	bl	8003a84 <_sbrk>
 80096f0:	1c43      	adds	r3, r0, #1
 80096f2:	d103      	bne.n	80096fc <_sbrk_r+0x1c>
 80096f4:	682b      	ldr	r3, [r5, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d000      	beq.n	80096fc <_sbrk_r+0x1c>
 80096fa:	6023      	str	r3, [r4, #0]
 80096fc:	bd70      	pop	{r4, r5, r6, pc}
 80096fe:	46c0      	nop			; (mov r8, r8)
 8009700:	20000b5c 	.word	0x20000b5c

08009704 <__errno>:
 8009704:	4b01      	ldr	r3, [pc, #4]	; (800970c <__errno+0x8>)
 8009706:	6818      	ldr	r0, [r3, #0]
 8009708:	4770      	bx	lr
 800970a:	46c0      	nop			; (mov r8, r8)
 800970c:	20000058 	.word	0x20000058

08009710 <__libc_init_array>:
 8009710:	b570      	push	{r4, r5, r6, lr}
 8009712:	2600      	movs	r6, #0
 8009714:	4c0c      	ldr	r4, [pc, #48]	; (8009748 <__libc_init_array+0x38>)
 8009716:	4d0d      	ldr	r5, [pc, #52]	; (800974c <__libc_init_array+0x3c>)
 8009718:	1b64      	subs	r4, r4, r5
 800971a:	10a4      	asrs	r4, r4, #2
 800971c:	42a6      	cmp	r6, r4
 800971e:	d109      	bne.n	8009734 <__libc_init_array+0x24>
 8009720:	2600      	movs	r6, #0
 8009722:	f000 f8c5 	bl	80098b0 <_init>
 8009726:	4c0a      	ldr	r4, [pc, #40]	; (8009750 <__libc_init_array+0x40>)
 8009728:	4d0a      	ldr	r5, [pc, #40]	; (8009754 <__libc_init_array+0x44>)
 800972a:	1b64      	subs	r4, r4, r5
 800972c:	10a4      	asrs	r4, r4, #2
 800972e:	42a6      	cmp	r6, r4
 8009730:	d105      	bne.n	800973e <__libc_init_array+0x2e>
 8009732:	bd70      	pop	{r4, r5, r6, pc}
 8009734:	00b3      	lsls	r3, r6, #2
 8009736:	58eb      	ldr	r3, [r5, r3]
 8009738:	4798      	blx	r3
 800973a:	3601      	adds	r6, #1
 800973c:	e7ee      	b.n	800971c <__libc_init_array+0xc>
 800973e:	00b3      	lsls	r3, r6, #2
 8009740:	58eb      	ldr	r3, [r5, r3]
 8009742:	4798      	blx	r3
 8009744:	3601      	adds	r6, #1
 8009746:	e7f2      	b.n	800972e <__libc_init_array+0x1e>
 8009748:	08009b54 	.word	0x08009b54
 800974c:	08009b54 	.word	0x08009b54
 8009750:	08009b60 	.word	0x08009b60
 8009754:	08009b54 	.word	0x08009b54

08009758 <__retarget_lock_acquire_recursive>:
 8009758:	4770      	bx	lr

0800975a <__retarget_lock_release_recursive>:
 800975a:	4770      	bx	lr

0800975c <__register_exitproc>:
 800975c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800975e:	4d2a      	ldr	r5, [pc, #168]	; (8009808 <__register_exitproc+0xac>)
 8009760:	b085      	sub	sp, #20
 8009762:	0006      	movs	r6, r0
 8009764:	6828      	ldr	r0, [r5, #0]
 8009766:	9303      	str	r3, [sp, #12]
 8009768:	9101      	str	r1, [sp, #4]
 800976a:	9202      	str	r2, [sp, #8]
 800976c:	f7ff fff4 	bl	8009758 <__retarget_lock_acquire_recursive>
 8009770:	4b26      	ldr	r3, [pc, #152]	; (800980c <__register_exitproc+0xb0>)
 8009772:	681c      	ldr	r4, [r3, #0]
 8009774:	2c00      	cmp	r4, #0
 8009776:	d108      	bne.n	800978a <__register_exitproc+0x2e>
 8009778:	4c25      	ldr	r4, [pc, #148]	; (8009810 <__register_exitproc+0xb4>)
 800977a:	601c      	str	r4, [r3, #0]
 800977c:	4b25      	ldr	r3, [pc, #148]	; (8009814 <__register_exitproc+0xb8>)
 800977e:	2b00      	cmp	r3, #0
 8009780:	d003      	beq.n	800978a <__register_exitproc+0x2e>
 8009782:	0022      	movs	r2, r4
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3288      	adds	r2, #136	; 0x88
 8009788:	6013      	str	r3, [r2, #0]
 800978a:	6863      	ldr	r3, [r4, #4]
 800978c:	2b1f      	cmp	r3, #31
 800978e:	dd06      	ble.n	800979e <__register_exitproc+0x42>
 8009790:	6828      	ldr	r0, [r5, #0]
 8009792:	f7ff ffe2 	bl	800975a <__retarget_lock_release_recursive>
 8009796:	2001      	movs	r0, #1
 8009798:	4240      	negs	r0, r0
 800979a:	b005      	add	sp, #20
 800979c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800979e:	2e00      	cmp	r6, #0
 80097a0:	d025      	beq.n	80097ee <__register_exitproc+0x92>
 80097a2:	0027      	movs	r7, r4
 80097a4:	3788      	adds	r7, #136	; 0x88
 80097a6:	6838      	ldr	r0, [r7, #0]
 80097a8:	2800      	cmp	r0, #0
 80097aa:	d10e      	bne.n	80097ca <__register_exitproc+0x6e>
 80097ac:	4b1a      	ldr	r3, [pc, #104]	; (8009818 <__register_exitproc+0xbc>)
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d0ee      	beq.n	8009790 <__register_exitproc+0x34>
 80097b2:	2084      	movs	r0, #132	; 0x84
 80097b4:	0040      	lsls	r0, r0, #1
 80097b6:	f7ff fec3 	bl	8009540 <malloc>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	d0e8      	beq.n	8009790 <__register_exitproc+0x34>
 80097be:	0003      	movs	r3, r0
 80097c0:	2200      	movs	r2, #0
 80097c2:	33fc      	adds	r3, #252	; 0xfc
 80097c4:	605a      	str	r2, [r3, #4]
 80097c6:	609a      	str	r2, [r3, #8]
 80097c8:	6038      	str	r0, [r7, #0]
 80097ca:	6861      	ldr	r1, [r4, #4]
 80097cc:	9a02      	ldr	r2, [sp, #8]
 80097ce:	008b      	lsls	r3, r1, #2
 80097d0:	18c3      	adds	r3, r0, r3
 80097d2:	c304      	stmia	r3!, {r2}
 80097d4:	2201      	movs	r2, #1
 80097d6:	408a      	lsls	r2, r1
 80097d8:	30fc      	adds	r0, #252	; 0xfc
 80097da:	6841      	ldr	r1, [r0, #4]
 80097dc:	4311      	orrs	r1, r2
 80097de:	6041      	str	r1, [r0, #4]
 80097e0:	9903      	ldr	r1, [sp, #12]
 80097e2:	67d9      	str	r1, [r3, #124]	; 0x7c
 80097e4:	2e02      	cmp	r6, #2
 80097e6:	d102      	bne.n	80097ee <__register_exitproc+0x92>
 80097e8:	6883      	ldr	r3, [r0, #8]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	6083      	str	r3, [r0, #8]
 80097ee:	6863      	ldr	r3, [r4, #4]
 80097f0:	6828      	ldr	r0, [r5, #0]
 80097f2:	1c5a      	adds	r2, r3, #1
 80097f4:	6062      	str	r2, [r4, #4]
 80097f6:	3302      	adds	r3, #2
 80097f8:	9a01      	ldr	r2, [sp, #4]
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	511a      	str	r2, [r3, r4]
 80097fe:	f7ff ffac 	bl	800975a <__retarget_lock_release_recursive>
 8009802:	2000      	movs	r0, #0
 8009804:	e7c9      	b.n	800979a <__register_exitproc+0x3e>
 8009806:	46c0      	nop			; (mov r8, r8)
 8009808:	2000005c 	.word	0x2000005c
 800980c:	20000bf0 	.word	0x20000bf0
 8009810:	20000b64 	.word	0x20000b64
 8009814:	00000000 	.word	0x00000000
 8009818:	08009541 	.word	0x08009541

0800981c <_free_r>:
 800981c:	b570      	push	{r4, r5, r6, lr}
 800981e:	0005      	movs	r5, r0
 8009820:	2900      	cmp	r1, #0
 8009822:	d010      	beq.n	8009846 <_free_r+0x2a>
 8009824:	1f0c      	subs	r4, r1, #4
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	da00      	bge.n	800982e <_free_r+0x12>
 800982c:	18e4      	adds	r4, r4, r3
 800982e:	0028      	movs	r0, r5
 8009830:	f7ff ff3e 	bl	80096b0 <__malloc_lock>
 8009834:	4a1d      	ldr	r2, [pc, #116]	; (80098ac <_free_r+0x90>)
 8009836:	6813      	ldr	r3, [r2, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d105      	bne.n	8009848 <_free_r+0x2c>
 800983c:	6063      	str	r3, [r4, #4]
 800983e:	6014      	str	r4, [r2, #0]
 8009840:	0028      	movs	r0, r5
 8009842:	f7ff ff3d 	bl	80096c0 <__malloc_unlock>
 8009846:	bd70      	pop	{r4, r5, r6, pc}
 8009848:	42a3      	cmp	r3, r4
 800984a:	d908      	bls.n	800985e <_free_r+0x42>
 800984c:	6820      	ldr	r0, [r4, #0]
 800984e:	1821      	adds	r1, r4, r0
 8009850:	428b      	cmp	r3, r1
 8009852:	d1f3      	bne.n	800983c <_free_r+0x20>
 8009854:	6819      	ldr	r1, [r3, #0]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	1809      	adds	r1, r1, r0
 800985a:	6021      	str	r1, [r4, #0]
 800985c:	e7ee      	b.n	800983c <_free_r+0x20>
 800985e:	001a      	movs	r2, r3
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d001      	beq.n	800986a <_free_r+0x4e>
 8009866:	42a3      	cmp	r3, r4
 8009868:	d9f9      	bls.n	800985e <_free_r+0x42>
 800986a:	6811      	ldr	r1, [r2, #0]
 800986c:	1850      	adds	r0, r2, r1
 800986e:	42a0      	cmp	r0, r4
 8009870:	d10b      	bne.n	800988a <_free_r+0x6e>
 8009872:	6820      	ldr	r0, [r4, #0]
 8009874:	1809      	adds	r1, r1, r0
 8009876:	1850      	adds	r0, r2, r1
 8009878:	6011      	str	r1, [r2, #0]
 800987a:	4283      	cmp	r3, r0
 800987c:	d1e0      	bne.n	8009840 <_free_r+0x24>
 800987e:	6818      	ldr	r0, [r3, #0]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	1841      	adds	r1, r0, r1
 8009884:	6011      	str	r1, [r2, #0]
 8009886:	6053      	str	r3, [r2, #4]
 8009888:	e7da      	b.n	8009840 <_free_r+0x24>
 800988a:	42a0      	cmp	r0, r4
 800988c:	d902      	bls.n	8009894 <_free_r+0x78>
 800988e:	230c      	movs	r3, #12
 8009890:	602b      	str	r3, [r5, #0]
 8009892:	e7d5      	b.n	8009840 <_free_r+0x24>
 8009894:	6820      	ldr	r0, [r4, #0]
 8009896:	1821      	adds	r1, r4, r0
 8009898:	428b      	cmp	r3, r1
 800989a:	d103      	bne.n	80098a4 <_free_r+0x88>
 800989c:	6819      	ldr	r1, [r3, #0]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	1809      	adds	r1, r1, r0
 80098a2:	6021      	str	r1, [r4, #0]
 80098a4:	6063      	str	r3, [r4, #4]
 80098a6:	6054      	str	r4, [r2, #4]
 80098a8:	e7ca      	b.n	8009840 <_free_r+0x24>
 80098aa:	46c0      	nop			; (mov r8, r8)
 80098ac:	20000a1c 	.word	0x20000a1c

080098b0 <_init>:
 80098b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b2:	46c0      	nop			; (mov r8, r8)
 80098b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098b6:	bc08      	pop	{r3}
 80098b8:	469e      	mov	lr, r3
 80098ba:	4770      	bx	lr

080098bc <_fini>:
 80098bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098be:	46c0      	nop			; (mov r8, r8)
 80098c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098c2:	bc08      	pop	{r3}
 80098c4:	469e      	mov	lr, r3
 80098c6:	4770      	bx	lr
