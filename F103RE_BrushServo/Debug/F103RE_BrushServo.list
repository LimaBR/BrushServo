
F103RE_BrushServo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004910  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004af4  08004af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bbc  08004bbc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004bbc  08004bbc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bbc  08004bbc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004bbc  08004bbc  00014bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bc4  08004bc4  00014bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000070  08004c38  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08004c38  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efba  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026b7  00000000  00000000  0002f053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00031710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  00032508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cdb7  00000000  00000000  00033208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101fe  00000000  00000000  0004ffbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0861  00000000  00000000  000601bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100a1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d74  00000000  00000000  00100a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08004adc 	.word	0x08004adc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08004adc 	.word	0x08004adc

08000224 <_ZN8BTS7960BC1EPVmS1_P12GPIO_TypeDeftS3_t>:
 *      Author: Gabriel
 */

#include "BTS7960B.hpp"

BTS7960B::BTS7960B(__IO uint32_t* ina_ccr, __IO uint32_t* inb_ccr, GPIO_TypeDef* inha_gpio_port, uint16_t inha_gpio_pin, GPIO_TypeDef* inhb_gpio_port, uint16_t inhb_gpio_pin)
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
 8000230:	603b      	str	r3, [r7, #0]
 : ina(ina_ccr), inb(inb_ccr), inha_port(inha_gpio_port), inha_pin(inha_gpio_pin), inhb_port(inhb_gpio_port), inhb_pin(inhb_gpio_pin){
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	8b3a      	ldrh	r2, [r7, #24]
 8000248:	819a      	strh	r2, [r3, #12]
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	69fa      	ldr	r2, [r7, #28]
 800024e:	611a      	str	r2, [r3, #16]
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	8c3a      	ldrh	r2, [r7, #32]
 8000254:	829a      	strh	r2, [r3, #20]

}
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	4618      	mov	r0, r3
 800025a:	3714      	adds	r7, #20
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr

08000262 <_ZN8BTS7960B8setSpeedEl>:

void BTS7960B::setSpeed(int32_t speed){
 8000262:	b580      	push	{r7, lr}
 8000264:	b082      	sub	sp, #8
 8000266:	af00      	add	r7, sp, #0
 8000268:	6078      	str	r0, [r7, #4]
 800026a:	6039      	str	r1, [r7, #0]

	if(speed > 0){
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	2b00      	cmp	r3, #0
 8000270:	dd18      	ble.n	80002a4 <_ZN8BTS7960B8setSpeedEl+0x42>
		HAL_GPIO_WritePin(inha_port, inha_pin, GPIO_PIN_SET);
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	6898      	ldr	r0, [r3, #8]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	899b      	ldrh	r3, [r3, #12]
 800027a:	2201      	movs	r2, #1
 800027c:	4619      	mov	r1, r3
 800027e:	f001 ff23 	bl	80020c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(inhb_port, inhb_pin, GPIO_PIN_SET);
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	6918      	ldr	r0, [r3, #16]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	8a9b      	ldrh	r3, [r3, #20]
 800028a:	2201      	movs	r2, #1
 800028c:	4619      	mov	r1, r3
 800028e:	f001 ff1b 	bl	80020c8 <HAL_GPIO_WritePin>
		*ina = speed;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	683a      	ldr	r2, [r7, #0]
 8000298:	601a      	str	r2, [r3, #0]
		*inb = 0;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
		*inb = -speed;
	}else{
		HAL_GPIO_WritePin(inha_port, inha_pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(inhb_port, inhb_pin, GPIO_PIN_RESET);
	}
}
 80002a2:	e02c      	b.n	80002fe <_ZN8BTS7960B8setSpeedEl+0x9c>
	}else if(speed < 0){
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	da19      	bge.n	80002de <_ZN8BTS7960B8setSpeedEl+0x7c>
		HAL_GPIO_WritePin(inha_port, inha_pin, GPIO_PIN_SET);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	6898      	ldr	r0, [r3, #8]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	899b      	ldrh	r3, [r3, #12]
 80002b2:	2201      	movs	r2, #1
 80002b4:	4619      	mov	r1, r3
 80002b6:	f001 ff07 	bl	80020c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(inhb_port, inhb_pin, GPIO_PIN_SET);
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	6918      	ldr	r0, [r3, #16]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	8a9b      	ldrh	r3, [r3, #20]
 80002c2:	2201      	movs	r2, #1
 80002c4:	4619      	mov	r1, r3
 80002c6:	f001 feff 	bl	80020c8 <HAL_GPIO_WritePin>
		*ina = 0;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
		*inb = -speed;
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	425a      	negs	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	601a      	str	r2, [r3, #0]
}
 80002dc:	e00f      	b.n	80002fe <_ZN8BTS7960B8setSpeedEl+0x9c>
		HAL_GPIO_WritePin(inha_port, inha_pin, GPIO_PIN_RESET);
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6898      	ldr	r0, [r3, #8]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	899b      	ldrh	r3, [r3, #12]
 80002e6:	2200      	movs	r2, #0
 80002e8:	4619      	mov	r1, r3
 80002ea:	f001 feed 	bl	80020c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(inhb_port, inhb_pin, GPIO_PIN_RESET);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	6918      	ldr	r0, [r3, #16]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	8a9b      	ldrh	r3, [r3, #20]
 80002f6:	2200      	movs	r2, #0
 80002f8:	4619      	mov	r1, r3
 80002fa:	f001 fee5 	bl	80020c8 <HAL_GPIO_WritePin>
}
 80002fe:	bf00      	nop
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}

08000306 <_ZN11SerialDebugC1EP20__UART_HandleTypeDef>:
 */

#include "SerialDebug.hpp"
#include "StaticFIFO.hpp"

SerialDebug::SerialDebug(UART_HandleTypeDef* huartptr)
 8000306:	b480      	push	{r7}
 8000308:	b083      	sub	sp, #12
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
 800030e:	6039      	str	r1, [r7, #0]
: huartptr(huartptr)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	683a      	ldr	r2, [r7, #0]
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2203      	movs	r2, #3
 800031a:	645a      	str	r2, [r3, #68]	; 0x44
{

}
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4618      	mov	r0, r3
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr

08000328 <_ZN11SerialDebug8setLevelEm>:

void SerialDebug::setLevel(uint32_t level)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	6039      	str	r1, [r7, #0]
	debugLevel = level;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	683a      	ldr	r2, [r7, #0]
 8000336:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
	...

08000344 <_ZN11SerialDebug5debugEPKc>:

void SerialDebug::debug(const char* data){
 8000344:	b590      	push	{r4, r7, lr}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	6039      	str	r1, [r7, #0]
	if (debugLevel <= DEBUG_LEVEL_DEBUG){
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000352:	2b00      	cmp	r3, #0
 8000354:	d116      	bne.n	8000384 <_ZN11SerialDebug5debugEPKc+0x40>
		int numChars;
		//while (huartptr->gState != HAL_UART_STATE_READY);	//Trava se estiver ocupado durante um interrupt que manda debug
		numChars = sprintf((char*)uartBuf, "[%13lu] DBG: %.42s\r\n", HAL_GetTick(), data);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	1d1c      	adds	r4, r3, #4
 800035a:	f000 fd3f 	bl	8000ddc <HAL_GetTick>
 800035e:	4602      	mov	r2, r0
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	490a      	ldr	r1, [pc, #40]	; (800038c <_ZN11SerialDebug5debugEPKc+0x48>)
 8000364:	4620      	mov	r0, r4
 8000366:	f004 f839 	bl	80043dc <siprintf>
 800036a:	60f8      	str	r0, [r7, #12]
		if(numChars > 0){
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	2b00      	cmp	r3, #0
 8000370:	dd08      	ble.n	8000384 <_ZN11SerialDebug5debugEPKc+0x40>
			HAL_UART_Transmit_DMA(huartptr, uartBuf, (uint16_t)numChars);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	6818      	ldr	r0, [r3, #0]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	3304      	adds	r3, #4
 800037a:	68fa      	ldr	r2, [r7, #12]
 800037c:	b292      	uxth	r2, r2
 800037e:	4619      	mov	r1, r3
 8000380:	f003 fa46 	bl	8003810 <HAL_UART_Transmit_DMA>
		}
	}
}
 8000384:	bf00      	nop
 8000386:	3714      	adds	r7, #20
 8000388:	46bd      	mov	sp, r7
 800038a:	bd90      	pop	{r4, r7, pc}
 800038c:	08004af4 	.word	0x08004af4

08000390 <Start>:
extern UART_HandleTypeDef huart1;

SerialDebug debug(&huart1);
BTS7960B motor0(&(TIM3->CCR1), &(TIM3->CCR2), GPIOA, GPIO_PIN_4, GPIOA, GPIO_PIN_5);

void Start(){
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	debug.setLevel(SerialDebug::DEBUG_LEVEL_DEBUG);
 8000394:	2100      	movs	r1, #0
 8000396:	480e      	ldr	r0, [pc, #56]	; (80003d0 <Start+0x40>)
 8000398:	f7ff ffc6 	bl	8000328 <_ZN11SerialDebug8setLevelEm>
	while(true){
		debug.debug("512");
 800039c:	490d      	ldr	r1, [pc, #52]	; (80003d4 <Start+0x44>)
 800039e:	480c      	ldr	r0, [pc, #48]	; (80003d0 <Start+0x40>)
 80003a0:	f7ff ffd0 	bl	8000344 <_ZN11SerialDebug5debugEPKc>
		motor0.setSpeed(512);
 80003a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a8:	480b      	ldr	r0, [pc, #44]	; (80003d8 <Start+0x48>)
 80003aa:	f7ff ff5a 	bl	8000262 <_ZN8BTS7960B8setSpeedEl>
		HAL_Delay(500);
 80003ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003b2:	f000 fd1d 	bl	8000df0 <HAL_Delay>
		debug.debug("-512");
 80003b6:	4909      	ldr	r1, [pc, #36]	; (80003dc <Start+0x4c>)
 80003b8:	4805      	ldr	r0, [pc, #20]	; (80003d0 <Start+0x40>)
 80003ba:	f7ff ffc3 	bl	8000344 <_ZN11SerialDebug5debugEPKc>
		motor0.setSpeed(-512);
 80003be:	4908      	ldr	r1, [pc, #32]	; (80003e0 <Start+0x50>)
 80003c0:	4805      	ldr	r0, [pc, #20]	; (80003d8 <Start+0x48>)
 80003c2:	f7ff ff4e 	bl	8000262 <_ZN8BTS7960B8setSpeedEl>
		HAL_Delay(500);
 80003c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ca:	f000 fd11 	bl	8000df0 <HAL_Delay>
		debug.debug("512");
 80003ce:	e7e5      	b.n	800039c <Start+0xc>
 80003d0:	2000008c 	.word	0x2000008c
 80003d4:	08004b54 	.word	0x08004b54
 80003d8:	200000d4 	.word	0x200000d4
 80003dc:	08004b58 	.word	0x08004b58
 80003e0:	fffffe00 	.word	0xfffffe00

080003e4 <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b086      	sub	sp, #24
 80003e8:	af04      	add	r7, sp, #16
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	6039      	str	r1, [r7, #0]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d114      	bne.n	800041e <_Z41__static_initialization_and_destruction_0ii+0x3a>
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d10f      	bne.n	800041e <_Z41__static_initialization_and_destruction_0ii+0x3a>
SerialDebug debug(&huart1);
 80003fe:	490a      	ldr	r1, [pc, #40]	; (8000428 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000400:	480a      	ldr	r0, [pc, #40]	; (800042c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8000402:	f7ff ff80 	bl	8000306 <_ZN11SerialDebugC1EP20__UART_HandleTypeDef>
BTS7960B motor0(&(TIM3->CCR1), &(TIM3->CCR2), GPIOA, GPIO_PIN_4, GPIOA, GPIO_PIN_5);
 8000406:	2320      	movs	r3, #32
 8000408:	9302      	str	r3, [sp, #8]
 800040a:	4b09      	ldr	r3, [pc, #36]	; (8000430 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800040c:	9301      	str	r3, [sp, #4]
 800040e:	2310      	movs	r3, #16
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	4b07      	ldr	r3, [pc, #28]	; (8000430 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000414:	4a07      	ldr	r2, [pc, #28]	; (8000434 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000416:	4908      	ldr	r1, [pc, #32]	; (8000438 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8000418:	4808      	ldr	r0, [pc, #32]	; (800043c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800041a:	f7ff ff03 	bl	8000224 <_ZN8BTS7960BC1EPVmS1_P12GPIO_TypeDeftS3_t>
}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	200001ac 	.word	0x200001ac
 800042c:	2000008c 	.word	0x2000008c
 8000430:	40010800 	.word	0x40010800
 8000434:	40000438 	.word	0x40000438
 8000438:	40000434 	.word	0x40000434
 800043c:	200000d4 	.word	0x200000d4

08000440 <_GLOBAL__sub_I_debug>:
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
 8000444:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000448:	2001      	movs	r0, #1
 800044a:	f7ff ffcb 	bl	80003e4 <_Z41__static_initialization_and_destruction_0ii>
 800044e:	bd80      	pop	{r7, pc}

08000450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000454:	f000 fc6a 	bl	8000d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000458:	f000 f81e 	bl	8000498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800045c:	f000 f9c4 	bl	80007e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000460:	f000 f9a4 	bl	80007ac <MX_DMA_Init>
  MX_TIM3_Init();
 8000464:	f000 f8b4 	bl	80005d0 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000468:	f000 f916 	bl	8000698 <MX_TIM6_Init>
  MX_ADC1_Init();
 800046c:	f000 f872 	bl	8000554 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000470:	f000 f948 	bl	8000704 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000474:	f000 f970 	bl	8000758 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000478:	4806      	ldr	r0, [pc, #24]	; (8000494 <main+0x44>)
 800047a:	f002 fb5d 	bl	8002b38 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800047e:	2100      	movs	r1, #0
 8000480:	4804      	ldr	r0, [pc, #16]	; (8000494 <main+0x44>)
 8000482:	f002 fc01 	bl	8002c88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000486:	2104      	movs	r1, #4
 8000488:	4802      	ldr	r0, [pc, #8]	; (8000494 <main+0x44>)
 800048a:	f002 fbfd 	bl	8002c88 <HAL_TIM_PWM_Start>
  Start();
 800048e:	f7ff ff7f 	bl	8000390 <Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000492:	e7fe      	b.n	8000492 <main+0x42>
 8000494:	2000011c 	.word	0x2000011c

08000498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b096      	sub	sp, #88	; 0x58
 800049c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004a2:	2228      	movs	r2, #40	; 0x28
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f003 fea4 	bl	80041f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ac:	f107 031c 	add.w	r3, r7, #28
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	605a      	str	r2, [r3, #4]
 80004b6:	609a      	str	r2, [r3, #8]
 80004b8:	60da      	str	r2, [r3, #12]
 80004ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
 80004c8:	611a      	str	r2, [r3, #16]
 80004ca:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004cc:	2301      	movs	r3, #1
 80004ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004d6:	2300      	movs	r3, #0
 80004d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004da:	2301      	movs	r3, #1
 80004dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004de:	2302      	movs	r3, #2
 80004e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004f2:	4618      	mov	r0, r3
 80004f4:	f001 fe00 	bl	80020f8 <HAL_RCC_OscConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80004fe:	f000 f9c9 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000502:	230f      	movs	r3, #15
 8000504:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000506:	2302      	movs	r3, #2
 8000508:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800050e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000512:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000514:	2300      	movs	r3, #0
 8000516:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000518:	f107 031c 	add.w	r3, r7, #28
 800051c:	2102      	movs	r1, #2
 800051e:	4618      	mov	r0, r3
 8000520:	f002 f86c 	bl	80025fc <HAL_RCC_ClockConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800052a:	f000 f9b3 	bl	8000894 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800052e:	2302      	movs	r3, #2
 8000530:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000536:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	4618      	mov	r0, r3
 800053c:	f002 f9f6 	bl	800292c <HAL_RCCEx_PeriphCLKConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000546:	f000 f9a5 	bl	8000894 <Error_Handler>
  }
}
 800054a:	bf00      	nop
 800054c:	3758      	adds	r7, #88	; 0x58
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_ADC1_Init+0x74>)
 8000566:	4a19      	ldr	r2, [pc, #100]	; (80005cc <MX_ADC1_Init+0x78>)
 8000568:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800056a:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <MX_ADC1_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000570:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <MX_ADC1_Init+0x74>)
 8000572:	2200      	movs	r2, #0
 8000574:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000576:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <MX_ADC1_Init+0x74>)
 8000578:	2200      	movs	r2, #0
 800057a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800057c:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <MX_ADC1_Init+0x74>)
 800057e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000582:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000584:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <MX_ADC1_Init+0x74>)
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <MX_ADC1_Init+0x74>)
 800058c:	2201      	movs	r2, #1
 800058e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <MX_ADC1_Init+0x74>)
 8000592:	f000 fc51 	bl	8000e38 <HAL_ADC_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800059c:	f000 f97a 	bl	8000894 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80005a0:	230a      	movs	r3, #10
 80005a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	; (80005c8 <MX_ADC1_Init+0x74>)
 80005b2:	f000 fd2b 	bl	800100c <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80005bc:	f000 f96a 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200000ec 	.word	0x200000ec
 80005cc:	40012400 	.word	0x40012400

080005d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]
 80005ee:	615a      	str	r2, [r3, #20]
 80005f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005f2:	4b27      	ldr	r3, [pc, #156]	; (8000690 <MX_TIM3_Init+0xc0>)
 80005f4:	4a27      	ldr	r2, [pc, #156]	; (8000694 <MX_TIM3_Init+0xc4>)
 80005f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6;
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <MX_TIM3_Init+0xc0>)
 80005fa:	2206      	movs	r2, #6
 80005fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005fe:	4b24      	ldr	r3, [pc, #144]	; (8000690 <MX_TIM3_Init+0xc0>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2047;
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <MX_TIM3_Init+0xc0>)
 8000606:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800060a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <MX_TIM3_Init+0xc0>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000612:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <MX_TIM3_Init+0xc0>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000618:	481d      	ldr	r0, [pc, #116]	; (8000690 <MX_TIM3_Init+0xc0>)
 800061a:	f002 fae5 	bl	8002be8 <HAL_TIM_PWM_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000624:	f000 f936 	bl	8000894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000628:	2300      	movs	r3, #0
 800062a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800062c:	2300      	movs	r3, #0
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	4619      	mov	r1, r3
 8000636:	4816      	ldr	r0, [pc, #88]	; (8000690 <MX_TIM3_Init+0xc0>)
 8000638:	f003 f81e 	bl	8003678 <HAL_TIMEx_MasterConfigSynchronization>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000642:	f000 f927 	bl	8000894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000646:	2360      	movs	r3, #96	; 0x60
 8000648:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2200      	movs	r2, #0
 800065a:	4619      	mov	r1, r3
 800065c:	480c      	ldr	r0, [pc, #48]	; (8000690 <MX_TIM3_Init+0xc0>)
 800065e:	f002 fcd5 	bl	800300c <HAL_TIM_PWM_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000668:	f000 f914 	bl	8000894 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2204      	movs	r2, #4
 8000670:	4619      	mov	r1, r3
 8000672:	4807      	ldr	r0, [pc, #28]	; (8000690 <MX_TIM3_Init+0xc0>)
 8000674:	f002 fcca 	bl	800300c <HAL_TIM_PWM_ConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800067e:	f000 f909 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000682:	4803      	ldr	r0, [pc, #12]	; (8000690 <MX_TIM3_Init+0xc0>)
 8000684:	f000 f9be 	bl	8000a04 <HAL_TIM_MspPostInit>

}
 8000688:	bf00      	nop
 800068a:	3728      	adds	r7, #40	; 0x28
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	2000011c 	.word	0x2000011c
 8000694:	40000400 	.word	0x40000400

08000698 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069e:	463b      	mov	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <MX_TIM6_Init+0x64>)
 80006a8:	4a15      	ldr	r2, [pc, #84]	; (8000700 <MX_TIM6_Init+0x68>)
 80006aa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_TIM6_Init+0x64>)
 80006ae:	2247      	movs	r2, #71	; 0x47
 80006b0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_TIM6_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80006b8:	4b10      	ldr	r3, [pc, #64]	; (80006fc <MX_TIM6_Init+0x64>)
 80006ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006be:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_TIM6_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006c6:	480d      	ldr	r0, [pc, #52]	; (80006fc <MX_TIM6_Init+0x64>)
 80006c8:	f002 f9e6 	bl	8002a98 <HAL_TIM_Base_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80006d2:	f000 f8df 	bl	8000894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006de:	463b      	mov	r3, r7
 80006e0:	4619      	mov	r1, r3
 80006e2:	4806      	ldr	r0, [pc, #24]	; (80006fc <MX_TIM6_Init+0x64>)
 80006e4:	f002 ffc8 	bl	8003678 <HAL_TIMEx_MasterConfigSynchronization>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80006ee:	f000 f8d1 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000164 	.word	0x20000164
 8000700:	40001000 	.word	0x40001000

08000704 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_USART1_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000710:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000714:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 800073c:	f003 f81a 	bl	8003774 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000746:	f000 f8a5 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200001ac 	.word	0x200001ac
 8000754:	40013800 	.word	0x40013800

08000758 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_USART3_UART_Init+0x4c>)
 800075e:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <MX_USART3_UART_Init+0x50>)
 8000760:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_USART3_UART_Init+0x4c>)
 8000764:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000768:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_USART3_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_USART3_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_USART3_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_USART3_UART_Init+0x4c>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_USART3_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_USART3_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_USART3_UART_Init+0x4c>)
 8000790:	f002 fff0 	bl	8003774 <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800079a:	f000 f87b 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200001f0 	.word	0x200001f0
 80007a8:	40004800 	.word	0x40004800

080007ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_DMA_Init+0x38>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <MX_DMA_Init+0x38>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6153      	str	r3, [r2, #20]
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_DMA_Init+0x38>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	200e      	movs	r0, #14
 80007d0:	f000 fe2d 	bl	800142e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80007d4:	200e      	movs	r0, #14
 80007d6:	f000 fe46 	bl	8001466 <HAL_NVIC_EnableIRQ>

}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fc:	4b23      	ldr	r3, [pc, #140]	; (800088c <MX_GPIO_Init+0xa4>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a22      	ldr	r2, [pc, #136]	; (800088c <MX_GPIO_Init+0xa4>)
 8000802:	f043 0310 	orr.w	r3, r3, #16
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_GPIO_Init+0xa4>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f003 0310 	and.w	r3, r3, #16
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000814:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_GPIO_Init+0xa4>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a1c      	ldr	r2, [pc, #112]	; (800088c <MX_GPIO_Init+0xa4>)
 800081a:	f043 0320 	orr.w	r3, r3, #32
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_GPIO_Init+0xa4>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0320 	and.w	r3, r3, #32
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_GPIO_Init+0xa4>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a16      	ldr	r2, [pc, #88]	; (800088c <MX_GPIO_Init+0xa4>)
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_GPIO_Init+0xa4>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0304 	and.w	r3, r3, #4
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_GPIO_Init+0xa4>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a10      	ldr	r2, [pc, #64]	; (800088c <MX_GPIO_Init+0xa4>)
 800084a:	f043 0308 	orr.w	r3, r3, #8
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_GPIO_Init+0xa4>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0308 	and.w	r3, r3, #8
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2130      	movs	r1, #48	; 0x30
 8000860:	480b      	ldr	r0, [pc, #44]	; (8000890 <MX_GPIO_Init+0xa8>)
 8000862:	f001 fc31 	bl	80020c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000866:	2330      	movs	r3, #48	; 0x30
 8000868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2302      	movs	r3, #2
 8000874:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	4619      	mov	r1, r3
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_GPIO_Init+0xa8>)
 800087e:	f001 fa8f 	bl	8001da0 <HAL_GPIO_Init>

}
 8000882:	bf00      	nop
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000
 8000890:	40010800 	.word	0x40010800

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0x8>
	...

080008a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <HAL_MspInit+0x5c>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	4a14      	ldr	r2, [pc, #80]	; (80008fc <HAL_MspInit+0x5c>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6193      	str	r3, [r2, #24]
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_MspInit+0x5c>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_MspInit+0x5c>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <HAL_MspInit+0x5c>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c8:	61d3      	str	r3, [r2, #28]
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <HAL_MspInit+0x5c>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <HAL_MspInit+0x60>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	4a04      	ldr	r2, [pc, #16]	; (8000900 <HAL_MspInit+0x60>)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	40021000 	.word	0x40021000
 8000900:	40010000 	.word	0x40010000

08000904 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a14      	ldr	r2, [pc, #80]	; (8000970 <HAL_ADC_MspInit+0x6c>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d121      	bne.n	8000968 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_ADC_MspInit+0x70>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a12      	ldr	r2, [pc, #72]	; (8000974 <HAL_ADC_MspInit+0x70>)
 800092a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_ADC_MspInit+0x70>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_ADC_MspInit+0x70>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <HAL_ADC_MspInit+0x70>)
 8000942:	f043 0310 	orr.w	r3, r3, #16
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_ADC_MspInit+0x70>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0310 	and.w	r3, r3, #16
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000954:	2301      	movs	r3, #1
 8000956:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000958:	2303      	movs	r3, #3
 800095a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4619      	mov	r1, r3
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <HAL_ADC_MspInit+0x74>)
 8000964:	f001 fa1c 	bl	8001da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000968:	bf00      	nop
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40012400 	.word	0x40012400
 8000974:	40021000 	.word	0x40021000
 8000978:	40011000 	.word	0x40011000

0800097c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <HAL_TIM_PWM_MspInit+0x44>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d113      	bne.n	80009b6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_TIM_PWM_MspInit+0x48>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	4a0c      	ldr	r2, [pc, #48]	; (80009c4 <HAL_TIM_PWM_MspInit+0x48>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	61d3      	str	r3, [r2, #28]
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <HAL_TIM_PWM_MspInit+0x48>)
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	201d      	movs	r0, #29
 80009ac:	f000 fd3f 	bl	800142e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009b0:	201d      	movs	r0, #29
 80009b2:	f000 fd58 	bl	8001466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40000400 	.word	0x40000400
 80009c4:	40021000 	.word	0x40021000

080009c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a09      	ldr	r2, [pc, #36]	; (80009fc <HAL_TIM_Base_MspInit+0x34>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d10b      	bne.n	80009f2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_TIM_Base_MspInit+0x38>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <HAL_TIM_Base_MspInit+0x38>)
 80009e0:	f043 0310 	orr.w	r3, r3, #16
 80009e4:	61d3      	str	r3, [r2, #28]
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_TIM_Base_MspInit+0x38>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	f003 0310 	and.w	r3, r3, #16
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80009f2:	bf00      	nop
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	40001000 	.word	0x40001000
 8000a00:	40021000 	.word	0x40021000

08000a04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a0f      	ldr	r2, [pc, #60]	; (8000a5c <HAL_TIM_MspPostInit+0x58>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d117      	bne.n	8000a54 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <HAL_TIM_MspPostInit+0x5c>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a0d      	ldr	r2, [pc, #52]	; (8000a60 <HAL_TIM_MspPostInit+0x5c>)
 8000a2a:	f043 0304 	orr.w	r3, r3, #4
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <HAL_TIM_MspPostInit+0x5c>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0304 	and.w	r3, r3, #4
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a3c:	23c0      	movs	r3, #192	; 0xc0
 8000a3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <HAL_TIM_MspPostInit+0x60>)
 8000a50:	f001 f9a6 	bl	8001da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a54:	bf00      	nop
 8000a56:	3720      	adds	r7, #32
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40000400 	.word	0x40000400
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40010800 	.word	0x40010800

08000a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0318 	add.w	r3, r7, #24
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a4f      	ldr	r2, [pc, #316]	; (8000bc0 <HAL_UART_MspInit+0x158>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d160      	bne.n	8000b4a <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a88:	4b4e      	ldr	r3, [pc, #312]	; (8000bc4 <HAL_UART_MspInit+0x15c>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a4d      	ldr	r2, [pc, #308]	; (8000bc4 <HAL_UART_MspInit+0x15c>)
 8000a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b4b      	ldr	r3, [pc, #300]	; (8000bc4 <HAL_UART_MspInit+0x15c>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	4b48      	ldr	r3, [pc, #288]	; (8000bc4 <HAL_UART_MspInit+0x15c>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4a47      	ldr	r2, [pc, #284]	; (8000bc4 <HAL_UART_MspInit+0x15c>)
 8000aa6:	f043 0304 	orr.w	r3, r3, #4
 8000aaa:	6193      	str	r3, [r2, #24]
 8000aac:	4b45      	ldr	r3, [pc, #276]	; (8000bc4 <HAL_UART_MspInit+0x15c>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f003 0304 	and.w	r3, r3, #4
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 0318 	add.w	r3, r7, #24
 8000aca:	4619      	mov	r1, r3
 8000acc:	483e      	ldr	r0, [pc, #248]	; (8000bc8 <HAL_UART_MspInit+0x160>)
 8000ace:	f001 f967 	bl	8001da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 0318 	add.w	r3, r7, #24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4838      	ldr	r0, [pc, #224]	; (8000bc8 <HAL_UART_MspInit+0x160>)
 8000ae8:	f001 f95a 	bl	8001da0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000aec:	4b37      	ldr	r3, [pc, #220]	; (8000bcc <HAL_UART_MspInit+0x164>)
 8000aee:	4a38      	ldr	r2, [pc, #224]	; (8000bd0 <HAL_UART_MspInit+0x168>)
 8000af0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000af2:	4b36      	ldr	r3, [pc, #216]	; (8000bcc <HAL_UART_MspInit+0x164>)
 8000af4:	2210      	movs	r2, #16
 8000af6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af8:	4b34      	ldr	r3, [pc, #208]	; (8000bcc <HAL_UART_MspInit+0x164>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000afe:	4b33      	ldr	r3, [pc, #204]	; (8000bcc <HAL_UART_MspInit+0x164>)
 8000b00:	2280      	movs	r2, #128	; 0x80
 8000b02:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b04:	4b31      	ldr	r3, [pc, #196]	; (8000bcc <HAL_UART_MspInit+0x164>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b0a:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <HAL_UART_MspInit+0x164>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000b10:	4b2e      	ldr	r3, [pc, #184]	; (8000bcc <HAL_UART_MspInit+0x164>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b16:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <HAL_UART_MspInit+0x164>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000b1c:	482b      	ldr	r0, [pc, #172]	; (8000bcc <HAL_UART_MspInit+0x164>)
 8000b1e:	f000 fcbd 	bl	800149c <HAL_DMA_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000b28:	f7ff feb4 	bl	8000894 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a27      	ldr	r2, [pc, #156]	; (8000bcc <HAL_UART_MspInit+0x164>)
 8000b30:	635a      	str	r2, [r3, #52]	; 0x34
 8000b32:	4a26      	ldr	r2, [pc, #152]	; (8000bcc <HAL_UART_MspInit+0x164>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2025      	movs	r0, #37	; 0x25
 8000b3e:	f000 fc76 	bl	800142e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b42:	2025      	movs	r0, #37	; 0x25
 8000b44:	f000 fc8f 	bl	8001466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b48:	e036      	b.n	8000bb8 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART3)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a21      	ldr	r2, [pc, #132]	; (8000bd4 <HAL_UART_MspInit+0x16c>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d131      	bne.n	8000bb8 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <HAL_UART_MspInit+0x15c>)
 8000b56:	69db      	ldr	r3, [r3, #28]
 8000b58:	4a1a      	ldr	r2, [pc, #104]	; (8000bc4 <HAL_UART_MspInit+0x15c>)
 8000b5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b5e:	61d3      	str	r3, [r2, #28]
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <HAL_UART_MspInit+0x15c>)
 8000b62:	69db      	ldr	r3, [r3, #28]
 8000b64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_UART_MspInit+0x15c>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <HAL_UART_MspInit+0x15c>)
 8000b72:	f043 0308 	orr.w	r3, r3, #8
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <HAL_UART_MspInit+0x15c>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0308 	and.w	r3, r3, #8
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b92:	f107 0318 	add.w	r3, r7, #24
 8000b96:	4619      	mov	r1, r3
 8000b98:	480f      	ldr	r0, [pc, #60]	; (8000bd8 <HAL_UART_MspInit+0x170>)
 8000b9a:	f001 f901 	bl	8001da0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	f107 0318 	add.w	r3, r7, #24
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <HAL_UART_MspInit+0x170>)
 8000bb4:	f001 f8f4 	bl	8001da0 <HAL_GPIO_Init>
}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	; 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40013800 	.word	0x40013800
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40010800 	.word	0x40010800
 8000bcc:	20000234 	.word	0x20000234
 8000bd0:	40020044 	.word	0x40020044
 8000bd4:	40004800 	.word	0x40004800
 8000bd8:	40010c00 	.word	0x40010c00

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <NMI_Handler+0x4>

08000be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <MemManage_Handler+0x4>

08000bee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr

08000c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr

08000c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c22:	f000 f8c9 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <DMA1_Channel4_IRQHandler+0x10>)
 8000c32:	f000 fe4b 	bl	80018cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000234 	.word	0x20000234

08000c40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <TIM3_IRQHandler+0x10>)
 8000c46:	f002 f8d9 	bl	8002dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000011c 	.word	0x2000011c

08000c54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <USART1_IRQHandler+0x10>)
 8000c5a:	f002 fe45 	bl	80038e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200001ac 	.word	0x200001ac

08000c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c70:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <_sbrk+0x5c>)
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <_sbrk+0x60>)
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d102      	bne.n	8000c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <_sbrk+0x64>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <_sbrk+0x68>)
 8000c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <_sbrk+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d207      	bcs.n	8000ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c98:	f003 fa74 	bl	8004184 <__errno>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca6:	e009      	b.n	8000cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <_sbrk+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <_sbrk+0x64>)
 8000cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cba:	68fb      	ldr	r3, [r7, #12]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20010000 	.word	0x20010000
 8000cc8:	00000400 	.word	0x00000400
 8000ccc:	20000278 	.word	0x20000278
 8000cd0:	20000290 	.word	0x20000290

08000cd4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce0:	480c      	ldr	r0, [pc, #48]	; (8000d14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ce2:	490d      	ldr	r1, [pc, #52]	; (8000d18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cf8:	4c0a      	ldr	r4, [pc, #40]	; (8000d24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d06:	f7ff ffe5 	bl	8000cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d0a:	f003 fa41 	bl	8004190 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d0e:	f7ff fb9f 	bl	8000450 <main>
  bx lr
 8000d12:	4770      	bx	lr
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d1c:	08004bc8 	.word	0x08004bc8
  ldr r2, =_sbss
 8000d20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d24:	20000290 	.word	0x20000290

08000d28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC1_2_IRQHandler>
	...

08000d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_Init+0x28>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_Init+0x28>)
 8000d36:	f043 0310 	orr.w	r3, r3, #16
 8000d3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 fb6b 	bl	8001418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	200f      	movs	r0, #15
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff fdaa 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40022000 	.word	0x40022000

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fb83 	bl	8001482 <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 fb4b 	bl	800142e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	; (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000004 	.word	0x20000004

08000db8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_IncTick+0x1c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a03      	ldr	r2, [pc, #12]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	2000027c 	.word	0x2000027c

08000ddc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b02      	ldr	r3, [pc, #8]	; (8000dec <HAL_GetTick+0x10>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	2000027c 	.word	0x2000027c

08000df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df8:	f7ff fff0 	bl	8000ddc <HAL_GetTick>
 8000dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e08:	d005      	beq.n	8000e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_Delay+0x44>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e16:	bf00      	nop
 8000e18:	f7ff ffe0 	bl	8000ddc <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d8f7      	bhi.n	8000e18 <HAL_Delay+0x28>
  {
  }
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008

08000e38 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e40:	2300      	movs	r3, #0
 8000e42:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e0ce      	b.n	8000ff8 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d109      	bne.n	8000e7c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff fd44 	bl	8000904 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f000 f9bd 	bl	80011fc <ADC_ConversionStop_Disable>
 8000e82:	4603      	mov	r3, r0
 8000e84:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8a:	f003 0310 	and.w	r3, r3, #16
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f040 80a9 	bne.w	8000fe6 <HAL_ADC_Init+0x1ae>
 8000e94:	7dfb      	ldrb	r3, [r7, #23]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f040 80a5 	bne.w	8000fe6 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ea4:	f023 0302 	bic.w	r3, r3, #2
 8000ea8:	f043 0202 	orr.w	r2, r3, #2
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4951      	ldr	r1, [pc, #324]	; (8001000 <HAL_ADC_Init+0x1c8>)
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d10a      	bne.n	8000ed4 <HAL_ADC_Init+0x9c>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000ec6:	d002      	beq.n	8000ece <HAL_ADC_Init+0x96>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	69db      	ldr	r3, [r3, #28]
 8000ecc:	e004      	b.n	8000ed8 <HAL_ADC_Init+0xa0>
 8000ece:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000ed2:	e001      	b.n	8000ed8 <HAL_ADC_Init+0xa0>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ed8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	7b1b      	ldrb	r3, [r3, #12]
 8000ede:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ee0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ef0:	d003      	beq.n	8000efa <HAL_ADC_Init+0xc2>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d102      	bne.n	8000f00 <HAL_ADC_Init+0xc8>
 8000efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efe:	e000      	b.n	8000f02 <HAL_ADC_Init+0xca>
 8000f00:	2300      	movs	r3, #0
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	7d1b      	ldrb	r3, [r3, #20]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d119      	bne.n	8000f44 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	7b1b      	ldrb	r3, [r3, #12]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d109      	bne.n	8000f2c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	035a      	lsls	r2, r3, #13
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	e00b      	b.n	8000f44 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f30:	f043 0220 	orr.w	r2, r3, #32
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3c:	f043 0201 	orr.w	r2, r3, #1
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	430a      	orrs	r2, r1
 8000f56:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	4b29      	ldr	r3, [pc, #164]	; (8001004 <HAL_ADC_Init+0x1cc>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	6812      	ldr	r2, [r2, #0]
 8000f66:	68b9      	ldr	r1, [r7, #8]
 8000f68:	430b      	orrs	r3, r1
 8000f6a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f74:	d003      	beq.n	8000f7e <HAL_ADC_Init+0x146>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d104      	bne.n	8000f88 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	051b      	lsls	r3, r3, #20
 8000f86:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_ADC_Init+0x1d0>)
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d10b      	bne.n	8000fc4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb6:	f023 0303 	bic.w	r3, r3, #3
 8000fba:	f043 0201 	orr.w	r2, r3, #1
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fc2:	e018      	b.n	8000ff6 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc8:	f023 0312 	bic.w	r3, r3, #18
 8000fcc:	f043 0210 	orr.w	r2, r3, #16
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd8:	f043 0201 	orr.w	r2, r3, #1
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fe4:	e007      	b.n	8000ff6 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fea:	f043 0210 	orr.w	r2, r3, #16
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40013c00 	.word	0x40013c00
 8001004:	ffe1f7fd 	.word	0xffe1f7fd
 8001008:	ff1f0efe 	.word	0xff1f0efe

0800100c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001024:	2b01      	cmp	r3, #1
 8001026:	d101      	bne.n	800102c <HAL_ADC_ConfigChannel+0x20>
 8001028:	2302      	movs	r3, #2
 800102a:	e0dc      	b.n	80011e6 <HAL_ADC_ConfigChannel+0x1da>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2201      	movs	r2, #1
 8001030:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b06      	cmp	r3, #6
 800103a:	d81c      	bhi.n	8001076 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	3b05      	subs	r3, #5
 800104e:	221f      	movs	r2, #31
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	4019      	ands	r1, r3
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	3b05      	subs	r3, #5
 8001068:	fa00 f203 	lsl.w	r2, r0, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	430a      	orrs	r2, r1
 8001072:	635a      	str	r2, [r3, #52]	; 0x34
 8001074:	e03c      	b.n	80010f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b0c      	cmp	r3, #12
 800107c:	d81c      	bhi.n	80010b8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685a      	ldr	r2, [r3, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	3b23      	subs	r3, #35	; 0x23
 8001090:	221f      	movs	r2, #31
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	4019      	ands	r1, r3
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	3b23      	subs	r3, #35	; 0x23
 80010aa:	fa00 f203 	lsl.w	r2, r0, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	430a      	orrs	r2, r1
 80010b4:	631a      	str	r2, [r3, #48]	; 0x30
 80010b6:	e01b      	b.n	80010f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	3b41      	subs	r3, #65	; 0x41
 80010ca:	221f      	movs	r2, #31
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	4019      	ands	r1, r3
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	3b41      	subs	r3, #65	; 0x41
 80010e4:	fa00 f203 	lsl.w	r2, r0, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	430a      	orrs	r2, r1
 80010ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b09      	cmp	r3, #9
 80010f6:	d91c      	bls.n	8001132 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68d9      	ldr	r1, [r3, #12]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	4613      	mov	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	3b1e      	subs	r3, #30
 800110a:	2207      	movs	r2, #7
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	4019      	ands	r1, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	6898      	ldr	r0, [r3, #8]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4613      	mov	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	4413      	add	r3, r2
 8001122:	3b1e      	subs	r3, #30
 8001124:	fa00 f203 	lsl.w	r2, r0, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	430a      	orrs	r2, r1
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	e019      	b.n	8001166 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6919      	ldr	r1, [r3, #16]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	2207      	movs	r2, #7
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	4019      	ands	r1, r3
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	6898      	ldr	r0, [r3, #8]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4613      	mov	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4413      	add	r3, r2
 800115a:	fa00 f203 	lsl.w	r2, r0, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	430a      	orrs	r2, r1
 8001164:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b10      	cmp	r3, #16
 800116c:	d003      	beq.n	8001176 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001172:	2b11      	cmp	r3, #17
 8001174:	d132      	bne.n	80011dc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a1d      	ldr	r2, [pc, #116]	; (80011f0 <HAL_ADC_ConfigChannel+0x1e4>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d125      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d126      	bne.n	80011dc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800119c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b10      	cmp	r3, #16
 80011a4:	d11a      	bne.n	80011dc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <HAL_ADC_ConfigChannel+0x1e8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a13      	ldr	r2, [pc, #76]	; (80011f8 <HAL_ADC_ConfigChannel+0x1ec>)
 80011ac:	fba2 2303 	umull	r2, r3, r2, r3
 80011b0:	0c9a      	lsrs	r2, r3, #18
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011bc:	e002      	b.n	80011c4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f9      	bne.n	80011be <HAL_ADC_ConfigChannel+0x1b2>
 80011ca:	e007      	b.n	80011dc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d0:	f043 0220 	orr.w	r2, r3, #32
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	40012400 	.word	0x40012400
 80011f4:	20000000 	.word	0x20000000
 80011f8:	431bde83 	.word	0x431bde83

080011fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b01      	cmp	r3, #1
 8001214:	d12e      	bne.n	8001274 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0201 	bic.w	r2, r2, #1
 8001224:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001226:	f7ff fdd9 	bl	8000ddc <HAL_GetTick>
 800122a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800122c:	e01b      	b.n	8001266 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800122e:	f7ff fdd5 	bl	8000ddc <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d914      	bls.n	8001266 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b01      	cmp	r3, #1
 8001248:	d10d      	bne.n	8001266 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124e:	f043 0210 	orr.w	r2, r3, #16
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125a:	f043 0201 	orr.w	r2, r3, #1
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e007      	b.n	8001276 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b01      	cmp	r3, #1
 8001272:	d0dc      	beq.n	800122e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b2:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	60d3      	str	r3, [r2, #12]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f003 0307 	and.w	r3, r3, #7
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	db0b      	blt.n	800130e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	f003 021f 	and.w	r2, r3, #31
 80012fc:	4906      	ldr	r1, [pc, #24]	; (8001318 <__NVIC_EnableIRQ+0x34>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	2001      	movs	r0, #1
 8001306:	fa00 f202 	lsl.w	r2, r0, r2
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	e000e100 	.word	0xe000e100

0800131c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db0a      	blt.n	8001346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	490c      	ldr	r1, [pc, #48]	; (8001368 <__NVIC_SetPriority+0x4c>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	0112      	lsls	r2, r2, #4
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	440b      	add	r3, r1
 8001340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001344:	e00a      	b.n	800135c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4908      	ldr	r1, [pc, #32]	; (800136c <__NVIC_SetPriority+0x50>)
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	3b04      	subs	r3, #4
 8001354:	0112      	lsls	r2, r2, #4
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	440b      	add	r3, r1
 800135a:	761a      	strb	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000e100 	.word	0xe000e100
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	; 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f1c3 0307 	rsb	r3, r3, #7
 800138a:	2b04      	cmp	r3, #4
 800138c:	bf28      	it	cs
 800138e:	2304      	movcs	r3, #4
 8001390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3304      	adds	r3, #4
 8001396:	2b06      	cmp	r3, #6
 8001398:	d902      	bls.n	80013a0 <NVIC_EncodePriority+0x30>
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3b03      	subs	r3, #3
 800139e:	e000      	b.n	80013a2 <NVIC_EncodePriority+0x32>
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43da      	mvns	r2, r3
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	401a      	ands	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b8:	f04f 31ff 	mov.w	r1, #4294967295
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	43d9      	mvns	r1, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	4313      	orrs	r3, r2
         );
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3724      	adds	r7, #36	; 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e4:	d301      	bcc.n	80013ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00f      	b.n	800140a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <SysTick_Config+0x40>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f2:	210f      	movs	r1, #15
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f7ff ff90 	bl	800131c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <SysTick_Config+0x40>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <SysTick_Config+0x40>)
 8001404:	2207      	movs	r2, #7
 8001406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	e000e010 	.word	0xe000e010

08001418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ff2d 	bl	8001280 <__NVIC_SetPriorityGrouping>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001440:	f7ff ff42 	bl	80012c8 <__NVIC_GetPriorityGrouping>
 8001444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	6978      	ldr	r0, [r7, #20]
 800144c:	f7ff ff90 	bl	8001370 <NVIC_EncodePriority>
 8001450:	4602      	mov	r2, r0
 8001452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff5f 	bl	800131c <__NVIC_SetPriority>
}
 800145e:	bf00      	nop
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff35 	bl	80012e4 <__NVIC_EnableIRQ>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ffa2 	bl	80013d4 <SysTick_Config>
 8001490:	4603      	mov	r3, r0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e059      	b.n	8001566 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <HAL_DMA_Init+0xd4>)
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d80f      	bhi.n	80014de <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <HAL_DMA_Init+0xd8>)
 80014c6:	4413      	add	r3, r2
 80014c8:	4a2b      	ldr	r2, [pc, #172]	; (8001578 <HAL_DMA_Init+0xdc>)
 80014ca:	fba2 2303 	umull	r2, r3, r2, r3
 80014ce:	091b      	lsrs	r3, r3, #4
 80014d0:	009a      	lsls	r2, r3, #2
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a28      	ldr	r2, [pc, #160]	; (800157c <HAL_DMA_Init+0xe0>)
 80014da:	63da      	str	r2, [r3, #60]	; 0x3c
 80014dc:	e00e      	b.n	80014fc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b26      	ldr	r3, [pc, #152]	; (8001580 <HAL_DMA_Init+0xe4>)
 80014e6:	4413      	add	r3, r2
 80014e8:	4a23      	ldr	r2, [pc, #140]	; (8001578 <HAL_DMA_Init+0xdc>)
 80014ea:	fba2 2303 	umull	r2, r3, r2, r3
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	009a      	lsls	r2, r3, #2
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a22      	ldr	r2, [pc, #136]	; (8001584 <HAL_DMA_Init+0xe8>)
 80014fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2202      	movs	r2, #2
 8001500:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001512:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001516:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001520:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800152c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001538:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	40020407 	.word	0x40020407
 8001574:	bffdfff8 	.word	0xbffdfff8
 8001578:	cccccccd 	.word	0xcccccccd
 800157c:	40020000 	.word	0x40020000
 8001580:	bffdfbf8 	.word	0xbffdfbf8
 8001584:	40020400 	.word	0x40020400

08001588 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d101      	bne.n	80015a8 <HAL_DMA_Start_IT+0x20>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e04a      	b.n	800163e <HAL_DMA_Start_IT+0xb6>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d13a      	bne.n	8001630 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2202      	movs	r2, #2
 80015be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0201 	bic.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f000 fbb0 	bl	8001d44 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d008      	beq.n	80015fe <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 020e 	orr.w	r2, r2, #14
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e00f      	b.n	800161e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0204 	bic.w	r2, r2, #4
 800160c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 020a 	orr.w	r2, r2, #10
 800161c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f042 0201 	orr.w	r2, r2, #1
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	e005      	b.n	800163c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001638:	2302      	movs	r3, #2
 800163a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800163c:	7dfb      	ldrb	r3, [r7, #23]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001646:	b480      	push	{r7}
 8001648:	b085      	sub	sp, #20
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001658:	2b02      	cmp	r3, #2
 800165a:	d008      	beq.n	800166e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2204      	movs	r2, #4
 8001660:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e020      	b.n	80016b0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 020e 	bic.w	r2, r2, #14
 800167c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0201 	bic.w	r2, r2, #1
 800168c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001696:	2101      	movs	r1, #1
 8001698:	fa01 f202 	lsl.w	r2, r1, r2
 800169c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
	...

080016bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d005      	beq.n	80016de <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2204      	movs	r2, #4
 80016d6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	e0d6      	b.n	800188c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 020e 	bic.w	r2, r2, #14
 80016ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0201 	bic.w	r2, r2, #1
 80016fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	4b64      	ldr	r3, [pc, #400]	; (8001898 <HAL_DMA_Abort_IT+0x1dc>)
 8001706:	429a      	cmp	r2, r3
 8001708:	d958      	bls.n	80017bc <HAL_DMA_Abort_IT+0x100>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a63      	ldr	r2, [pc, #396]	; (800189c <HAL_DMA_Abort_IT+0x1e0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d04f      	beq.n	80017b4 <HAL_DMA_Abort_IT+0xf8>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a61      	ldr	r2, [pc, #388]	; (80018a0 <HAL_DMA_Abort_IT+0x1e4>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d048      	beq.n	80017b0 <HAL_DMA_Abort_IT+0xf4>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a60      	ldr	r2, [pc, #384]	; (80018a4 <HAL_DMA_Abort_IT+0x1e8>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d040      	beq.n	80017aa <HAL_DMA_Abort_IT+0xee>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a5e      	ldr	r2, [pc, #376]	; (80018a8 <HAL_DMA_Abort_IT+0x1ec>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d038      	beq.n	80017a4 <HAL_DMA_Abort_IT+0xe8>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a5d      	ldr	r2, [pc, #372]	; (80018ac <HAL_DMA_Abort_IT+0x1f0>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d030      	beq.n	800179e <HAL_DMA_Abort_IT+0xe2>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a5b      	ldr	r2, [pc, #364]	; (80018b0 <HAL_DMA_Abort_IT+0x1f4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d028      	beq.n	8001798 <HAL_DMA_Abort_IT+0xdc>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a53      	ldr	r2, [pc, #332]	; (8001898 <HAL_DMA_Abort_IT+0x1dc>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d020      	beq.n	8001792 <HAL_DMA_Abort_IT+0xd6>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a57      	ldr	r2, [pc, #348]	; (80018b4 <HAL_DMA_Abort_IT+0x1f8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d019      	beq.n	800178e <HAL_DMA_Abort_IT+0xd2>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a56      	ldr	r2, [pc, #344]	; (80018b8 <HAL_DMA_Abort_IT+0x1fc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d012      	beq.n	800178a <HAL_DMA_Abort_IT+0xce>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a54      	ldr	r2, [pc, #336]	; (80018bc <HAL_DMA_Abort_IT+0x200>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d00a      	beq.n	8001784 <HAL_DMA_Abort_IT+0xc8>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a53      	ldr	r2, [pc, #332]	; (80018c0 <HAL_DMA_Abort_IT+0x204>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d102      	bne.n	800177e <HAL_DMA_Abort_IT+0xc2>
 8001778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177c:	e01b      	b.n	80017b6 <HAL_DMA_Abort_IT+0xfa>
 800177e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001782:	e018      	b.n	80017b6 <HAL_DMA_Abort_IT+0xfa>
 8001784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001788:	e015      	b.n	80017b6 <HAL_DMA_Abort_IT+0xfa>
 800178a:	2310      	movs	r3, #16
 800178c:	e013      	b.n	80017b6 <HAL_DMA_Abort_IT+0xfa>
 800178e:	2301      	movs	r3, #1
 8001790:	e011      	b.n	80017b6 <HAL_DMA_Abort_IT+0xfa>
 8001792:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001796:	e00e      	b.n	80017b6 <HAL_DMA_Abort_IT+0xfa>
 8001798:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800179c:	e00b      	b.n	80017b6 <HAL_DMA_Abort_IT+0xfa>
 800179e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a2:	e008      	b.n	80017b6 <HAL_DMA_Abort_IT+0xfa>
 80017a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a8:	e005      	b.n	80017b6 <HAL_DMA_Abort_IT+0xfa>
 80017aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ae:	e002      	b.n	80017b6 <HAL_DMA_Abort_IT+0xfa>
 80017b0:	2310      	movs	r3, #16
 80017b2:	e000      	b.n	80017b6 <HAL_DMA_Abort_IT+0xfa>
 80017b4:	2301      	movs	r3, #1
 80017b6:	4a43      	ldr	r2, [pc, #268]	; (80018c4 <HAL_DMA_Abort_IT+0x208>)
 80017b8:	6053      	str	r3, [r2, #4]
 80017ba:	e057      	b.n	800186c <HAL_DMA_Abort_IT+0x1b0>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a36      	ldr	r2, [pc, #216]	; (800189c <HAL_DMA_Abort_IT+0x1e0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d04f      	beq.n	8001866 <HAL_DMA_Abort_IT+0x1aa>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a35      	ldr	r2, [pc, #212]	; (80018a0 <HAL_DMA_Abort_IT+0x1e4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d048      	beq.n	8001862 <HAL_DMA_Abort_IT+0x1a6>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a33      	ldr	r2, [pc, #204]	; (80018a4 <HAL_DMA_Abort_IT+0x1e8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d040      	beq.n	800185c <HAL_DMA_Abort_IT+0x1a0>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a32      	ldr	r2, [pc, #200]	; (80018a8 <HAL_DMA_Abort_IT+0x1ec>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d038      	beq.n	8001856 <HAL_DMA_Abort_IT+0x19a>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a30      	ldr	r2, [pc, #192]	; (80018ac <HAL_DMA_Abort_IT+0x1f0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d030      	beq.n	8001850 <HAL_DMA_Abort_IT+0x194>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a2f      	ldr	r2, [pc, #188]	; (80018b0 <HAL_DMA_Abort_IT+0x1f4>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d028      	beq.n	800184a <HAL_DMA_Abort_IT+0x18e>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a26      	ldr	r2, [pc, #152]	; (8001898 <HAL_DMA_Abort_IT+0x1dc>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d020      	beq.n	8001844 <HAL_DMA_Abort_IT+0x188>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a2b      	ldr	r2, [pc, #172]	; (80018b4 <HAL_DMA_Abort_IT+0x1f8>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d019      	beq.n	8001840 <HAL_DMA_Abort_IT+0x184>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a29      	ldr	r2, [pc, #164]	; (80018b8 <HAL_DMA_Abort_IT+0x1fc>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d012      	beq.n	800183c <HAL_DMA_Abort_IT+0x180>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a28      	ldr	r2, [pc, #160]	; (80018bc <HAL_DMA_Abort_IT+0x200>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d00a      	beq.n	8001836 <HAL_DMA_Abort_IT+0x17a>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a26      	ldr	r2, [pc, #152]	; (80018c0 <HAL_DMA_Abort_IT+0x204>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d102      	bne.n	8001830 <HAL_DMA_Abort_IT+0x174>
 800182a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800182e:	e01b      	b.n	8001868 <HAL_DMA_Abort_IT+0x1ac>
 8001830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001834:	e018      	b.n	8001868 <HAL_DMA_Abort_IT+0x1ac>
 8001836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800183a:	e015      	b.n	8001868 <HAL_DMA_Abort_IT+0x1ac>
 800183c:	2310      	movs	r3, #16
 800183e:	e013      	b.n	8001868 <HAL_DMA_Abort_IT+0x1ac>
 8001840:	2301      	movs	r3, #1
 8001842:	e011      	b.n	8001868 <HAL_DMA_Abort_IT+0x1ac>
 8001844:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001848:	e00e      	b.n	8001868 <HAL_DMA_Abort_IT+0x1ac>
 800184a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800184e:	e00b      	b.n	8001868 <HAL_DMA_Abort_IT+0x1ac>
 8001850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001854:	e008      	b.n	8001868 <HAL_DMA_Abort_IT+0x1ac>
 8001856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185a:	e005      	b.n	8001868 <HAL_DMA_Abort_IT+0x1ac>
 800185c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001860:	e002      	b.n	8001868 <HAL_DMA_Abort_IT+0x1ac>
 8001862:	2310      	movs	r3, #16
 8001864:	e000      	b.n	8001868 <HAL_DMA_Abort_IT+0x1ac>
 8001866:	2301      	movs	r3, #1
 8001868:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <HAL_DMA_Abort_IT+0x20c>)
 800186a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	4798      	blx	r3
    } 
  }
  return status;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40020080 	.word	0x40020080
 800189c:	40020008 	.word	0x40020008
 80018a0:	4002001c 	.word	0x4002001c
 80018a4:	40020030 	.word	0x40020030
 80018a8:	40020044 	.word	0x40020044
 80018ac:	40020058 	.word	0x40020058
 80018b0:	4002006c 	.word	0x4002006c
 80018b4:	40020408 	.word	0x40020408
 80018b8:	4002041c 	.word	0x4002041c
 80018bc:	40020430 	.word	0x40020430
 80018c0:	40020444 	.word	0x40020444
 80018c4:	40020400 	.word	0x40020400
 80018c8:	40020000 	.word	0x40020000

080018cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	2204      	movs	r2, #4
 80018ea:	409a      	lsls	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 80f1 	beq.w	8001ad8 <HAL_DMA_IRQHandler+0x20c>
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 80eb 	beq.w	8001ad8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0320 	and.w	r3, r3, #32
 800190c:	2b00      	cmp	r3, #0
 800190e:	d107      	bne.n	8001920 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0204 	bic.w	r2, r2, #4
 800191e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4b5f      	ldr	r3, [pc, #380]	; (8001aa4 <HAL_DMA_IRQHandler+0x1d8>)
 8001928:	429a      	cmp	r2, r3
 800192a:	d958      	bls.n	80019de <HAL_DMA_IRQHandler+0x112>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a5d      	ldr	r2, [pc, #372]	; (8001aa8 <HAL_DMA_IRQHandler+0x1dc>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d04f      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x10a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a5c      	ldr	r2, [pc, #368]	; (8001aac <HAL_DMA_IRQHandler+0x1e0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d048      	beq.n	80019d2 <HAL_DMA_IRQHandler+0x106>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a5a      	ldr	r2, [pc, #360]	; (8001ab0 <HAL_DMA_IRQHandler+0x1e4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d040      	beq.n	80019cc <HAL_DMA_IRQHandler+0x100>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a59      	ldr	r2, [pc, #356]	; (8001ab4 <HAL_DMA_IRQHandler+0x1e8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d038      	beq.n	80019c6 <HAL_DMA_IRQHandler+0xfa>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a57      	ldr	r2, [pc, #348]	; (8001ab8 <HAL_DMA_IRQHandler+0x1ec>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d030      	beq.n	80019c0 <HAL_DMA_IRQHandler+0xf4>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a56      	ldr	r2, [pc, #344]	; (8001abc <HAL_DMA_IRQHandler+0x1f0>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d028      	beq.n	80019ba <HAL_DMA_IRQHandler+0xee>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a4d      	ldr	r2, [pc, #308]	; (8001aa4 <HAL_DMA_IRQHandler+0x1d8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d020      	beq.n	80019b4 <HAL_DMA_IRQHandler+0xe8>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a52      	ldr	r2, [pc, #328]	; (8001ac0 <HAL_DMA_IRQHandler+0x1f4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d019      	beq.n	80019b0 <HAL_DMA_IRQHandler+0xe4>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a50      	ldr	r2, [pc, #320]	; (8001ac4 <HAL_DMA_IRQHandler+0x1f8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d012      	beq.n	80019ac <HAL_DMA_IRQHandler+0xe0>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a4f      	ldr	r2, [pc, #316]	; (8001ac8 <HAL_DMA_IRQHandler+0x1fc>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d00a      	beq.n	80019a6 <HAL_DMA_IRQHandler+0xda>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a4d      	ldr	r2, [pc, #308]	; (8001acc <HAL_DMA_IRQHandler+0x200>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d102      	bne.n	80019a0 <HAL_DMA_IRQHandler+0xd4>
 800199a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800199e:	e01b      	b.n	80019d8 <HAL_DMA_IRQHandler+0x10c>
 80019a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019a4:	e018      	b.n	80019d8 <HAL_DMA_IRQHandler+0x10c>
 80019a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019aa:	e015      	b.n	80019d8 <HAL_DMA_IRQHandler+0x10c>
 80019ac:	2340      	movs	r3, #64	; 0x40
 80019ae:	e013      	b.n	80019d8 <HAL_DMA_IRQHandler+0x10c>
 80019b0:	2304      	movs	r3, #4
 80019b2:	e011      	b.n	80019d8 <HAL_DMA_IRQHandler+0x10c>
 80019b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019b8:	e00e      	b.n	80019d8 <HAL_DMA_IRQHandler+0x10c>
 80019ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019be:	e00b      	b.n	80019d8 <HAL_DMA_IRQHandler+0x10c>
 80019c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019c4:	e008      	b.n	80019d8 <HAL_DMA_IRQHandler+0x10c>
 80019c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019ca:	e005      	b.n	80019d8 <HAL_DMA_IRQHandler+0x10c>
 80019cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019d0:	e002      	b.n	80019d8 <HAL_DMA_IRQHandler+0x10c>
 80019d2:	2340      	movs	r3, #64	; 0x40
 80019d4:	e000      	b.n	80019d8 <HAL_DMA_IRQHandler+0x10c>
 80019d6:	2304      	movs	r3, #4
 80019d8:	4a3d      	ldr	r2, [pc, #244]	; (8001ad0 <HAL_DMA_IRQHandler+0x204>)
 80019da:	6053      	str	r3, [r2, #4]
 80019dc:	e057      	b.n	8001a8e <HAL_DMA_IRQHandler+0x1c2>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a31      	ldr	r2, [pc, #196]	; (8001aa8 <HAL_DMA_IRQHandler+0x1dc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d04f      	beq.n	8001a88 <HAL_DMA_IRQHandler+0x1bc>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a2f      	ldr	r2, [pc, #188]	; (8001aac <HAL_DMA_IRQHandler+0x1e0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d048      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x1b8>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a2e      	ldr	r2, [pc, #184]	; (8001ab0 <HAL_DMA_IRQHandler+0x1e4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d040      	beq.n	8001a7e <HAL_DMA_IRQHandler+0x1b2>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a2c      	ldr	r2, [pc, #176]	; (8001ab4 <HAL_DMA_IRQHandler+0x1e8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d038      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x1ac>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a2b      	ldr	r2, [pc, #172]	; (8001ab8 <HAL_DMA_IRQHandler+0x1ec>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d030      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x1a6>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a29      	ldr	r2, [pc, #164]	; (8001abc <HAL_DMA_IRQHandler+0x1f0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d028      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x1a0>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a21      	ldr	r2, [pc, #132]	; (8001aa4 <HAL_DMA_IRQHandler+0x1d8>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d020      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x19a>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a25      	ldr	r2, [pc, #148]	; (8001ac0 <HAL_DMA_IRQHandler+0x1f4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d019      	beq.n	8001a62 <HAL_DMA_IRQHandler+0x196>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a24      	ldr	r2, [pc, #144]	; (8001ac4 <HAL_DMA_IRQHandler+0x1f8>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d012      	beq.n	8001a5e <HAL_DMA_IRQHandler+0x192>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a22      	ldr	r2, [pc, #136]	; (8001ac8 <HAL_DMA_IRQHandler+0x1fc>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d00a      	beq.n	8001a58 <HAL_DMA_IRQHandler+0x18c>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a21      	ldr	r2, [pc, #132]	; (8001acc <HAL_DMA_IRQHandler+0x200>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d102      	bne.n	8001a52 <HAL_DMA_IRQHandler+0x186>
 8001a4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a50:	e01b      	b.n	8001a8a <HAL_DMA_IRQHandler+0x1be>
 8001a52:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a56:	e018      	b.n	8001a8a <HAL_DMA_IRQHandler+0x1be>
 8001a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a5c:	e015      	b.n	8001a8a <HAL_DMA_IRQHandler+0x1be>
 8001a5e:	2340      	movs	r3, #64	; 0x40
 8001a60:	e013      	b.n	8001a8a <HAL_DMA_IRQHandler+0x1be>
 8001a62:	2304      	movs	r3, #4
 8001a64:	e011      	b.n	8001a8a <HAL_DMA_IRQHandler+0x1be>
 8001a66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a6a:	e00e      	b.n	8001a8a <HAL_DMA_IRQHandler+0x1be>
 8001a6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a70:	e00b      	b.n	8001a8a <HAL_DMA_IRQHandler+0x1be>
 8001a72:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a76:	e008      	b.n	8001a8a <HAL_DMA_IRQHandler+0x1be>
 8001a78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a7c:	e005      	b.n	8001a8a <HAL_DMA_IRQHandler+0x1be>
 8001a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a82:	e002      	b.n	8001a8a <HAL_DMA_IRQHandler+0x1be>
 8001a84:	2340      	movs	r3, #64	; 0x40
 8001a86:	e000      	b.n	8001a8a <HAL_DMA_IRQHandler+0x1be>
 8001a88:	2304      	movs	r3, #4
 8001a8a:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <HAL_DMA_IRQHandler+0x208>)
 8001a8c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 8136 	beq.w	8001d04 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001aa0:	e130      	b.n	8001d04 <HAL_DMA_IRQHandler+0x438>
 8001aa2:	bf00      	nop
 8001aa4:	40020080 	.word	0x40020080
 8001aa8:	40020008 	.word	0x40020008
 8001aac:	4002001c 	.word	0x4002001c
 8001ab0:	40020030 	.word	0x40020030
 8001ab4:	40020044 	.word	0x40020044
 8001ab8:	40020058 	.word	0x40020058
 8001abc:	4002006c 	.word	0x4002006c
 8001ac0:	40020408 	.word	0x40020408
 8001ac4:	4002041c 	.word	0x4002041c
 8001ac8:	40020430 	.word	0x40020430
 8001acc:	40020444 	.word	0x40020444
 8001ad0:	40020400 	.word	0x40020400
 8001ad4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	2202      	movs	r2, #2
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80dd 	beq.w	8001ca4 <HAL_DMA_IRQHandler+0x3d8>
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80d7 	beq.w	8001ca4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0320 	and.w	r3, r3, #32
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10b      	bne.n	8001b1c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 020a 	bic.w	r2, r2, #10
 8001b12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b7b      	ldr	r3, [pc, #492]	; (8001d10 <HAL_DMA_IRQHandler+0x444>)
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d958      	bls.n	8001bda <HAL_DMA_IRQHandler+0x30e>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a79      	ldr	r2, [pc, #484]	; (8001d14 <HAL_DMA_IRQHandler+0x448>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d04f      	beq.n	8001bd2 <HAL_DMA_IRQHandler+0x306>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a78      	ldr	r2, [pc, #480]	; (8001d18 <HAL_DMA_IRQHandler+0x44c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d048      	beq.n	8001bce <HAL_DMA_IRQHandler+0x302>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a76      	ldr	r2, [pc, #472]	; (8001d1c <HAL_DMA_IRQHandler+0x450>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d040      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0x2fc>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a75      	ldr	r2, [pc, #468]	; (8001d20 <HAL_DMA_IRQHandler+0x454>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d038      	beq.n	8001bc2 <HAL_DMA_IRQHandler+0x2f6>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a73      	ldr	r2, [pc, #460]	; (8001d24 <HAL_DMA_IRQHandler+0x458>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d030      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x2f0>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a72      	ldr	r2, [pc, #456]	; (8001d28 <HAL_DMA_IRQHandler+0x45c>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d028      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0x2ea>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a69      	ldr	r2, [pc, #420]	; (8001d10 <HAL_DMA_IRQHandler+0x444>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d020      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x2e4>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a6e      	ldr	r2, [pc, #440]	; (8001d2c <HAL_DMA_IRQHandler+0x460>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d019      	beq.n	8001bac <HAL_DMA_IRQHandler+0x2e0>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a6c      	ldr	r2, [pc, #432]	; (8001d30 <HAL_DMA_IRQHandler+0x464>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d012      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x2dc>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a6b      	ldr	r2, [pc, #428]	; (8001d34 <HAL_DMA_IRQHandler+0x468>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d00a      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x2d6>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a69      	ldr	r2, [pc, #420]	; (8001d38 <HAL_DMA_IRQHandler+0x46c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d102      	bne.n	8001b9c <HAL_DMA_IRQHandler+0x2d0>
 8001b96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b9a:	e01b      	b.n	8001bd4 <HAL_DMA_IRQHandler+0x308>
 8001b9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ba0:	e018      	b.n	8001bd4 <HAL_DMA_IRQHandler+0x308>
 8001ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ba6:	e015      	b.n	8001bd4 <HAL_DMA_IRQHandler+0x308>
 8001ba8:	2320      	movs	r3, #32
 8001baa:	e013      	b.n	8001bd4 <HAL_DMA_IRQHandler+0x308>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e011      	b.n	8001bd4 <HAL_DMA_IRQHandler+0x308>
 8001bb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bb4:	e00e      	b.n	8001bd4 <HAL_DMA_IRQHandler+0x308>
 8001bb6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bba:	e00b      	b.n	8001bd4 <HAL_DMA_IRQHandler+0x308>
 8001bbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bc0:	e008      	b.n	8001bd4 <HAL_DMA_IRQHandler+0x308>
 8001bc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bc6:	e005      	b.n	8001bd4 <HAL_DMA_IRQHandler+0x308>
 8001bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bcc:	e002      	b.n	8001bd4 <HAL_DMA_IRQHandler+0x308>
 8001bce:	2320      	movs	r3, #32
 8001bd0:	e000      	b.n	8001bd4 <HAL_DMA_IRQHandler+0x308>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	4a59      	ldr	r2, [pc, #356]	; (8001d3c <HAL_DMA_IRQHandler+0x470>)
 8001bd6:	6053      	str	r3, [r2, #4]
 8001bd8:	e057      	b.n	8001c8a <HAL_DMA_IRQHandler+0x3be>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a4d      	ldr	r2, [pc, #308]	; (8001d14 <HAL_DMA_IRQHandler+0x448>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d04f      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x3b8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a4b      	ldr	r2, [pc, #300]	; (8001d18 <HAL_DMA_IRQHandler+0x44c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d048      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x3b4>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a4a      	ldr	r2, [pc, #296]	; (8001d1c <HAL_DMA_IRQHandler+0x450>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d040      	beq.n	8001c7a <HAL_DMA_IRQHandler+0x3ae>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a48      	ldr	r2, [pc, #288]	; (8001d20 <HAL_DMA_IRQHandler+0x454>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d038      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x3a8>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a47      	ldr	r2, [pc, #284]	; (8001d24 <HAL_DMA_IRQHandler+0x458>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d030      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x3a2>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a45      	ldr	r2, [pc, #276]	; (8001d28 <HAL_DMA_IRQHandler+0x45c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d028      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x39c>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a3d      	ldr	r2, [pc, #244]	; (8001d10 <HAL_DMA_IRQHandler+0x444>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d020      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x396>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a41      	ldr	r2, [pc, #260]	; (8001d2c <HAL_DMA_IRQHandler+0x460>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d019      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x392>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a40      	ldr	r2, [pc, #256]	; (8001d30 <HAL_DMA_IRQHandler+0x464>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d012      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x38e>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a3e      	ldr	r2, [pc, #248]	; (8001d34 <HAL_DMA_IRQHandler+0x468>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d00a      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x388>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a3d      	ldr	r2, [pc, #244]	; (8001d38 <HAL_DMA_IRQHandler+0x46c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d102      	bne.n	8001c4e <HAL_DMA_IRQHandler+0x382>
 8001c48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c4c:	e01b      	b.n	8001c86 <HAL_DMA_IRQHandler+0x3ba>
 8001c4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c52:	e018      	b.n	8001c86 <HAL_DMA_IRQHandler+0x3ba>
 8001c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c58:	e015      	b.n	8001c86 <HAL_DMA_IRQHandler+0x3ba>
 8001c5a:	2320      	movs	r3, #32
 8001c5c:	e013      	b.n	8001c86 <HAL_DMA_IRQHandler+0x3ba>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e011      	b.n	8001c86 <HAL_DMA_IRQHandler+0x3ba>
 8001c62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c66:	e00e      	b.n	8001c86 <HAL_DMA_IRQHandler+0x3ba>
 8001c68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c6c:	e00b      	b.n	8001c86 <HAL_DMA_IRQHandler+0x3ba>
 8001c6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c72:	e008      	b.n	8001c86 <HAL_DMA_IRQHandler+0x3ba>
 8001c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c78:	e005      	b.n	8001c86 <HAL_DMA_IRQHandler+0x3ba>
 8001c7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c7e:	e002      	b.n	8001c86 <HAL_DMA_IRQHandler+0x3ba>
 8001c80:	2320      	movs	r3, #32
 8001c82:	e000      	b.n	8001c86 <HAL_DMA_IRQHandler+0x3ba>
 8001c84:	2302      	movs	r3, #2
 8001c86:	4a2e      	ldr	r2, [pc, #184]	; (8001d40 <HAL_DMA_IRQHandler+0x474>)
 8001c88:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d034      	beq.n	8001d04 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ca2:	e02f      	b.n	8001d04 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	2208      	movs	r2, #8
 8001caa:	409a      	lsls	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d028      	beq.n	8001d06 <HAL_DMA_IRQHandler+0x43a>
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d023      	beq.n	8001d06 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 020e 	bic.w	r2, r2, #14
 8001ccc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cdc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d004      	beq.n	8001d06 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	4798      	blx	r3
    }
  }
  return;
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
}
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40020080 	.word	0x40020080
 8001d14:	40020008 	.word	0x40020008
 8001d18:	4002001c 	.word	0x4002001c
 8001d1c:	40020030 	.word	0x40020030
 8001d20:	40020044 	.word	0x40020044
 8001d24:	40020058 	.word	0x40020058
 8001d28:	4002006c 	.word	0x4002006c
 8001d2c:	40020408 	.word	0x40020408
 8001d30:	4002041c 	.word	0x4002041c
 8001d34:	40020430 	.word	0x40020430
 8001d38:	40020444 	.word	0x40020444
 8001d3c:	40020400 	.word	0x40020400
 8001d40:	40020000 	.word	0x40020000

08001d44 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d60:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b10      	cmp	r3, #16
 8001d70:	d108      	bne.n	8001d84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d82:	e007      	b.n	8001d94 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	60da      	str	r2, [r3, #12]
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr
	...

08001da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b08b      	sub	sp, #44	; 0x2c
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001daa:	2300      	movs	r3, #0
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dae:	2300      	movs	r3, #0
 8001db0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db2:	e179      	b.n	80020a8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001db4:	2201      	movs	r2, #1
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	f040 8168 	bne.w	80020a2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	4a96      	ldr	r2, [pc, #600]	; (8002030 <HAL_GPIO_Init+0x290>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d05e      	beq.n	8001e9a <HAL_GPIO_Init+0xfa>
 8001ddc:	4a94      	ldr	r2, [pc, #592]	; (8002030 <HAL_GPIO_Init+0x290>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d875      	bhi.n	8001ece <HAL_GPIO_Init+0x12e>
 8001de2:	4a94      	ldr	r2, [pc, #592]	; (8002034 <HAL_GPIO_Init+0x294>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d058      	beq.n	8001e9a <HAL_GPIO_Init+0xfa>
 8001de8:	4a92      	ldr	r2, [pc, #584]	; (8002034 <HAL_GPIO_Init+0x294>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d86f      	bhi.n	8001ece <HAL_GPIO_Init+0x12e>
 8001dee:	4a92      	ldr	r2, [pc, #584]	; (8002038 <HAL_GPIO_Init+0x298>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d052      	beq.n	8001e9a <HAL_GPIO_Init+0xfa>
 8001df4:	4a90      	ldr	r2, [pc, #576]	; (8002038 <HAL_GPIO_Init+0x298>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d869      	bhi.n	8001ece <HAL_GPIO_Init+0x12e>
 8001dfa:	4a90      	ldr	r2, [pc, #576]	; (800203c <HAL_GPIO_Init+0x29c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d04c      	beq.n	8001e9a <HAL_GPIO_Init+0xfa>
 8001e00:	4a8e      	ldr	r2, [pc, #568]	; (800203c <HAL_GPIO_Init+0x29c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d863      	bhi.n	8001ece <HAL_GPIO_Init+0x12e>
 8001e06:	4a8e      	ldr	r2, [pc, #568]	; (8002040 <HAL_GPIO_Init+0x2a0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d046      	beq.n	8001e9a <HAL_GPIO_Init+0xfa>
 8001e0c:	4a8c      	ldr	r2, [pc, #560]	; (8002040 <HAL_GPIO_Init+0x2a0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d85d      	bhi.n	8001ece <HAL_GPIO_Init+0x12e>
 8001e12:	2b12      	cmp	r3, #18
 8001e14:	d82a      	bhi.n	8001e6c <HAL_GPIO_Init+0xcc>
 8001e16:	2b12      	cmp	r3, #18
 8001e18:	d859      	bhi.n	8001ece <HAL_GPIO_Init+0x12e>
 8001e1a:	a201      	add	r2, pc, #4	; (adr r2, 8001e20 <HAL_GPIO_Init+0x80>)
 8001e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e20:	08001e9b 	.word	0x08001e9b
 8001e24:	08001e75 	.word	0x08001e75
 8001e28:	08001e87 	.word	0x08001e87
 8001e2c:	08001ec9 	.word	0x08001ec9
 8001e30:	08001ecf 	.word	0x08001ecf
 8001e34:	08001ecf 	.word	0x08001ecf
 8001e38:	08001ecf 	.word	0x08001ecf
 8001e3c:	08001ecf 	.word	0x08001ecf
 8001e40:	08001ecf 	.word	0x08001ecf
 8001e44:	08001ecf 	.word	0x08001ecf
 8001e48:	08001ecf 	.word	0x08001ecf
 8001e4c:	08001ecf 	.word	0x08001ecf
 8001e50:	08001ecf 	.word	0x08001ecf
 8001e54:	08001ecf 	.word	0x08001ecf
 8001e58:	08001ecf 	.word	0x08001ecf
 8001e5c:	08001ecf 	.word	0x08001ecf
 8001e60:	08001ecf 	.word	0x08001ecf
 8001e64:	08001e7d 	.word	0x08001e7d
 8001e68:	08001e91 	.word	0x08001e91
 8001e6c:	4a75      	ldr	r2, [pc, #468]	; (8002044 <HAL_GPIO_Init+0x2a4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e72:	e02c      	b.n	8001ece <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	623b      	str	r3, [r7, #32]
          break;
 8001e7a:	e029      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	3304      	adds	r3, #4
 8001e82:	623b      	str	r3, [r7, #32]
          break;
 8001e84:	e024      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	3308      	adds	r3, #8
 8001e8c:	623b      	str	r3, [r7, #32]
          break;
 8001e8e:	e01f      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	330c      	adds	r3, #12
 8001e96:	623b      	str	r3, [r7, #32]
          break;
 8001e98:	e01a      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d102      	bne.n	8001ea8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	623b      	str	r3, [r7, #32]
          break;
 8001ea6:	e013      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d105      	bne.n	8001ebc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb0:	2308      	movs	r3, #8
 8001eb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	611a      	str	r2, [r3, #16]
          break;
 8001eba:	e009      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ebc:	2308      	movs	r3, #8
 8001ebe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	615a      	str	r2, [r3, #20]
          break;
 8001ec6:	e003      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
          break;
 8001ecc:	e000      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
          break;
 8001ece:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	2bff      	cmp	r3, #255	; 0xff
 8001ed4:	d801      	bhi.n	8001eda <HAL_GPIO_Init+0x13a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	e001      	b.n	8001ede <HAL_GPIO_Init+0x13e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3304      	adds	r3, #4
 8001ede:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2bff      	cmp	r3, #255	; 0xff
 8001ee4:	d802      	bhi.n	8001eec <HAL_GPIO_Init+0x14c>
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	e002      	b.n	8001ef2 <HAL_GPIO_Init+0x152>
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	3b08      	subs	r3, #8
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	210f      	movs	r1, #15
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	401a      	ands	r2, r3
 8001f04:	6a39      	ldr	r1, [r7, #32]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 80c1 	beq.w	80020a2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f20:	4b49      	ldr	r3, [pc, #292]	; (8002048 <HAL_GPIO_Init+0x2a8>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4a48      	ldr	r2, [pc, #288]	; (8002048 <HAL_GPIO_Init+0x2a8>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6193      	str	r3, [r2, #24]
 8001f2c:	4b46      	ldr	r3, [pc, #280]	; (8002048 <HAL_GPIO_Init+0x2a8>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f38:	4a44      	ldr	r2, [pc, #272]	; (800204c <HAL_GPIO_Init+0x2ac>)
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	3302      	adds	r3, #2
 8001f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	220f      	movs	r2, #15
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a3c      	ldr	r2, [pc, #240]	; (8002050 <HAL_GPIO_Init+0x2b0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d01f      	beq.n	8001fa4 <HAL_GPIO_Init+0x204>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a3b      	ldr	r2, [pc, #236]	; (8002054 <HAL_GPIO_Init+0x2b4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d019      	beq.n	8001fa0 <HAL_GPIO_Init+0x200>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a3a      	ldr	r2, [pc, #232]	; (8002058 <HAL_GPIO_Init+0x2b8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d013      	beq.n	8001f9c <HAL_GPIO_Init+0x1fc>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a39      	ldr	r2, [pc, #228]	; (800205c <HAL_GPIO_Init+0x2bc>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00d      	beq.n	8001f98 <HAL_GPIO_Init+0x1f8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a38      	ldr	r2, [pc, #224]	; (8002060 <HAL_GPIO_Init+0x2c0>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d007      	beq.n	8001f94 <HAL_GPIO_Init+0x1f4>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a37      	ldr	r2, [pc, #220]	; (8002064 <HAL_GPIO_Init+0x2c4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d101      	bne.n	8001f90 <HAL_GPIO_Init+0x1f0>
 8001f8c:	2305      	movs	r3, #5
 8001f8e:	e00a      	b.n	8001fa6 <HAL_GPIO_Init+0x206>
 8001f90:	2306      	movs	r3, #6
 8001f92:	e008      	b.n	8001fa6 <HAL_GPIO_Init+0x206>
 8001f94:	2304      	movs	r3, #4
 8001f96:	e006      	b.n	8001fa6 <HAL_GPIO_Init+0x206>
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e004      	b.n	8001fa6 <HAL_GPIO_Init+0x206>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e002      	b.n	8001fa6 <HAL_GPIO_Init+0x206>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <HAL_GPIO_Init+0x206>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa8:	f002 0203 	and.w	r2, r2, #3
 8001fac:	0092      	lsls	r2, r2, #2
 8001fae:	4093      	lsls	r3, r2
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fb6:	4925      	ldr	r1, [pc, #148]	; (800204c <HAL_GPIO_Init+0x2ac>)
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	089b      	lsrs	r3, r3, #2
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fd0:	4b25      	ldr	r3, [pc, #148]	; (8002068 <HAL_GPIO_Init+0x2c8>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4924      	ldr	r1, [pc, #144]	; (8002068 <HAL_GPIO_Init+0x2c8>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	600b      	str	r3, [r1, #0]
 8001fdc:	e006      	b.n	8001fec <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fde:	4b22      	ldr	r3, [pc, #136]	; (8002068 <HAL_GPIO_Init+0x2c8>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	4920      	ldr	r1, [pc, #128]	; (8002068 <HAL_GPIO_Init+0x2c8>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d006      	beq.n	8002006 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_GPIO_Init+0x2c8>)
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	491a      	ldr	r1, [pc, #104]	; (8002068 <HAL_GPIO_Init+0x2c8>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
 8002004:	e006      	b.n	8002014 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002006:	4b18      	ldr	r3, [pc, #96]	; (8002068 <HAL_GPIO_Init+0x2c8>)
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	43db      	mvns	r3, r3
 800200e:	4916      	ldr	r1, [pc, #88]	; (8002068 <HAL_GPIO_Init+0x2c8>)
 8002010:	4013      	ands	r3, r2
 8002012:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d025      	beq.n	800206c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_GPIO_Init+0x2c8>)
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	4910      	ldr	r1, [pc, #64]	; (8002068 <HAL_GPIO_Init+0x2c8>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	608b      	str	r3, [r1, #8]
 800202c:	e025      	b.n	800207a <HAL_GPIO_Init+0x2da>
 800202e:	bf00      	nop
 8002030:	10320000 	.word	0x10320000
 8002034:	10310000 	.word	0x10310000
 8002038:	10220000 	.word	0x10220000
 800203c:	10210000 	.word	0x10210000
 8002040:	10120000 	.word	0x10120000
 8002044:	10110000 	.word	0x10110000
 8002048:	40021000 	.word	0x40021000
 800204c:	40010000 	.word	0x40010000
 8002050:	40010800 	.word	0x40010800
 8002054:	40010c00 	.word	0x40010c00
 8002058:	40011000 	.word	0x40011000
 800205c:	40011400 	.word	0x40011400
 8002060:	40011800 	.word	0x40011800
 8002064:	40011c00 	.word	0x40011c00
 8002068:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800206c:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <HAL_GPIO_Init+0x324>)
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	43db      	mvns	r3, r3
 8002074:	4913      	ldr	r1, [pc, #76]	; (80020c4 <HAL_GPIO_Init+0x324>)
 8002076:	4013      	ands	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d006      	beq.n	8002094 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002086:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <HAL_GPIO_Init+0x324>)
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	490e      	ldr	r1, [pc, #56]	; (80020c4 <HAL_GPIO_Init+0x324>)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	60cb      	str	r3, [r1, #12]
 8002092:	e006      	b.n	80020a2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_GPIO_Init+0x324>)
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	43db      	mvns	r3, r3
 800209c:	4909      	ldr	r1, [pc, #36]	; (80020c4 <HAL_GPIO_Init+0x324>)
 800209e:	4013      	ands	r3, r2
 80020a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	3301      	adds	r3, #1
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	fa22 f303 	lsr.w	r3, r2, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f47f ae7e 	bne.w	8001db4 <HAL_GPIO_Init+0x14>
  }
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	372c      	adds	r7, #44	; 0x2c
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr
 80020c4:	40010400 	.word	0x40010400

080020c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	807b      	strh	r3, [r7, #2]
 80020d4:	4613      	mov	r3, r2
 80020d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020d8:	787b      	ldrb	r3, [r7, #1]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020de:	887a      	ldrh	r2, [r7, #2]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020e4:	e003      	b.n	80020ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020e6:	887b      	ldrh	r3, [r7, #2]
 80020e8:	041a      	lsls	r2, r3, #16
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	611a      	str	r2, [r3, #16]
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e272      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8087 	beq.w	8002226 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002118:	4b92      	ldr	r3, [pc, #584]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b04      	cmp	r3, #4
 8002122:	d00c      	beq.n	800213e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002124:	4b8f      	ldr	r3, [pc, #572]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 030c 	and.w	r3, r3, #12
 800212c:	2b08      	cmp	r3, #8
 800212e:	d112      	bne.n	8002156 <HAL_RCC_OscConfig+0x5e>
 8002130:	4b8c      	ldr	r3, [pc, #560]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213c:	d10b      	bne.n	8002156 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213e:	4b89      	ldr	r3, [pc, #548]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d06c      	beq.n	8002224 <HAL_RCC_OscConfig+0x12c>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d168      	bne.n	8002224 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e24c      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215e:	d106      	bne.n	800216e <HAL_RCC_OscConfig+0x76>
 8002160:	4b80      	ldr	r3, [pc, #512]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a7f      	ldr	r2, [pc, #508]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	e02e      	b.n	80021cc <HAL_RCC_OscConfig+0xd4>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10c      	bne.n	8002190 <HAL_RCC_OscConfig+0x98>
 8002176:	4b7b      	ldr	r3, [pc, #492]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a7a      	ldr	r2, [pc, #488]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 800217c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b78      	ldr	r3, [pc, #480]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a77      	ldr	r2, [pc, #476]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e01d      	b.n	80021cc <HAL_RCC_OscConfig+0xd4>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0xbc>
 800219a:	4b72      	ldr	r3, [pc, #456]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a71      	ldr	r2, [pc, #452]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b6f      	ldr	r3, [pc, #444]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a6e      	ldr	r2, [pc, #440]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e00b      	b.n	80021cc <HAL_RCC_OscConfig+0xd4>
 80021b4:	4b6b      	ldr	r3, [pc, #428]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a6a      	ldr	r2, [pc, #424]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	4b68      	ldr	r3, [pc, #416]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a67      	ldr	r2, [pc, #412]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d013      	beq.n	80021fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7fe fe02 	bl	8000ddc <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7fe fdfe 	bl	8000ddc <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e200      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ee:	4b5d      	ldr	r3, [pc, #372]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0xe4>
 80021fa:	e014      	b.n	8002226 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7fe fdee 	bl	8000ddc <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002204:	f7fe fdea 	bl	8000ddc <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	; 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e1ec      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002216:	4b53      	ldr	r3, [pc, #332]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x10c>
 8002222:	e000      	b.n	8002226 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d063      	beq.n	80022fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002232:	4b4c      	ldr	r3, [pc, #304]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00b      	beq.n	8002256 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800223e:	4b49      	ldr	r3, [pc, #292]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b08      	cmp	r3, #8
 8002248:	d11c      	bne.n	8002284 <HAL_RCC_OscConfig+0x18c>
 800224a:	4b46      	ldr	r3, [pc, #280]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d116      	bne.n	8002284 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002256:	4b43      	ldr	r3, [pc, #268]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_RCC_OscConfig+0x176>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d001      	beq.n	800226e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e1c0      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226e:	4b3d      	ldr	r3, [pc, #244]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4939      	ldr	r1, [pc, #228]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002282:	e03a      	b.n	80022fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d020      	beq.n	80022ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800228c:	4b36      	ldr	r3, [pc, #216]	; (8002368 <HAL_RCC_OscConfig+0x270>)
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002292:	f7fe fda3 	bl	8000ddc <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800229a:	f7fe fd9f 	bl	8000ddc <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e1a1      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ac:	4b2d      	ldr	r3, [pc, #180]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f0      	beq.n	800229a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b8:	4b2a      	ldr	r3, [pc, #168]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4927      	ldr	r1, [pc, #156]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	600b      	str	r3, [r1, #0]
 80022cc:	e015      	b.n	80022fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ce:	4b26      	ldr	r3, [pc, #152]	; (8002368 <HAL_RCC_OscConfig+0x270>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7fe fd82 	bl	8000ddc <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022dc:	f7fe fd7e 	bl	8000ddc <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e180      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ee:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d03a      	beq.n	800237c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d019      	beq.n	8002342 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230e:	4b17      	ldr	r3, [pc, #92]	; (800236c <HAL_RCC_OscConfig+0x274>)
 8002310:	2201      	movs	r2, #1
 8002312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002314:	f7fe fd62 	bl	8000ddc <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800231c:	f7fe fd5e 	bl	8000ddc <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e160      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232e:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800233a:	2001      	movs	r0, #1
 800233c:	f000 fad8 	bl	80028f0 <RCC_Delay>
 8002340:	e01c      	b.n	800237c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_RCC_OscConfig+0x274>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002348:	f7fe fd48 	bl	8000ddc <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234e:	e00f      	b.n	8002370 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002350:	f7fe fd44 	bl	8000ddc <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d908      	bls.n	8002370 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e146      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
 8002362:	bf00      	nop
 8002364:	40021000 	.word	0x40021000
 8002368:	42420000 	.word	0x42420000
 800236c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002370:	4b92      	ldr	r3, [pc, #584]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1e9      	bne.n	8002350 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 80a6 	beq.w	80024d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238a:	2300      	movs	r3, #0
 800238c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238e:	4b8b      	ldr	r3, [pc, #556]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10d      	bne.n	80023b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	4b88      	ldr	r3, [pc, #544]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4a87      	ldr	r2, [pc, #540]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a4:	61d3      	str	r3, [r2, #28]
 80023a6:	4b85      	ldr	r3, [pc, #532]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b2:	2301      	movs	r3, #1
 80023b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	4b82      	ldr	r3, [pc, #520]	; (80025c0 <HAL_RCC_OscConfig+0x4c8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d118      	bne.n	80023f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c2:	4b7f      	ldr	r3, [pc, #508]	; (80025c0 <HAL_RCC_OscConfig+0x4c8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a7e      	ldr	r2, [pc, #504]	; (80025c0 <HAL_RCC_OscConfig+0x4c8>)
 80023c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ce:	f7fe fd05 	bl	8000ddc <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d6:	f7fe fd01 	bl	8000ddc <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b64      	cmp	r3, #100	; 0x64
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e103      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e8:	4b75      	ldr	r3, [pc, #468]	; (80025c0 <HAL_RCC_OscConfig+0x4c8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d106      	bne.n	800240a <HAL_RCC_OscConfig+0x312>
 80023fc:	4b6f      	ldr	r3, [pc, #444]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	4a6e      	ldr	r2, [pc, #440]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6213      	str	r3, [r2, #32]
 8002408:	e02d      	b.n	8002466 <HAL_RCC_OscConfig+0x36e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10c      	bne.n	800242c <HAL_RCC_OscConfig+0x334>
 8002412:	4b6a      	ldr	r3, [pc, #424]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4a69      	ldr	r2, [pc, #420]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	6213      	str	r3, [r2, #32]
 800241e:	4b67      	ldr	r3, [pc, #412]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4a66      	ldr	r2, [pc, #408]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002424:	f023 0304 	bic.w	r3, r3, #4
 8002428:	6213      	str	r3, [r2, #32]
 800242a:	e01c      	b.n	8002466 <HAL_RCC_OscConfig+0x36e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b05      	cmp	r3, #5
 8002432:	d10c      	bne.n	800244e <HAL_RCC_OscConfig+0x356>
 8002434:	4b61      	ldr	r3, [pc, #388]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4a60      	ldr	r2, [pc, #384]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800243a:	f043 0304 	orr.w	r3, r3, #4
 800243e:	6213      	str	r3, [r2, #32]
 8002440:	4b5e      	ldr	r3, [pc, #376]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	4a5d      	ldr	r2, [pc, #372]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6213      	str	r3, [r2, #32]
 800244c:	e00b      	b.n	8002466 <HAL_RCC_OscConfig+0x36e>
 800244e:	4b5b      	ldr	r3, [pc, #364]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4a5a      	ldr	r2, [pc, #360]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	6213      	str	r3, [r2, #32]
 800245a:	4b58      	ldr	r3, [pc, #352]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4a57      	ldr	r2, [pc, #348]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002460:	f023 0304 	bic.w	r3, r3, #4
 8002464:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d015      	beq.n	800249a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246e:	f7fe fcb5 	bl	8000ddc <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002474:	e00a      	b.n	800248c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002476:	f7fe fcb1 	bl	8000ddc <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	f241 3288 	movw	r2, #5000	; 0x1388
 8002484:	4293      	cmp	r3, r2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e0b1      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248c:	4b4b      	ldr	r3, [pc, #300]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0ee      	beq.n	8002476 <HAL_RCC_OscConfig+0x37e>
 8002498:	e014      	b.n	80024c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249a:	f7fe fc9f 	bl	8000ddc <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a0:	e00a      	b.n	80024b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a2:	f7fe fc9b 	bl	8000ddc <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e09b      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b8:	4b40      	ldr	r3, [pc, #256]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1ee      	bne.n	80024a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024c4:	7dfb      	ldrb	r3, [r7, #23]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d105      	bne.n	80024d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ca:	4b3c      	ldr	r3, [pc, #240]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4a3b      	ldr	r2, [pc, #236]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 8087 	beq.w	80025ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024e0:	4b36      	ldr	r3, [pc, #216]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d061      	beq.n	80025b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d146      	bne.n	8002582 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f4:	4b33      	ldr	r3, [pc, #204]	; (80025c4 <HAL_RCC_OscConfig+0x4cc>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fa:	f7fe fc6f 	bl	8000ddc <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002502:	f7fe fc6b 	bl	8000ddc <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e06d      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002514:	4b29      	ldr	r3, [pc, #164]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1f0      	bne.n	8002502 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002528:	d108      	bne.n	800253c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800252a:	4b24      	ldr	r3, [pc, #144]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	4921      	ldr	r1, [pc, #132]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800253c:	4b1f      	ldr	r3, [pc, #124]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a19      	ldr	r1, [r3, #32]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	430b      	orrs	r3, r1
 800254e:	491b      	ldr	r1, [pc, #108]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002550:	4313      	orrs	r3, r2
 8002552:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_RCC_OscConfig+0x4cc>)
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7fe fc3f 	bl	8000ddc <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002562:	f7fe fc3b 	bl	8000ddc <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e03d      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002574:	4b11      	ldr	r3, [pc, #68]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x46a>
 8002580:	e035      	b.n	80025ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <HAL_RCC_OscConfig+0x4cc>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7fe fc28 	bl	8000ddc <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002590:	f7fe fc24 	bl	8000ddc <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e026      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x498>
 80025ae:	e01e      	b.n	80025ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d107      	bne.n	80025c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e019      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40007000 	.word	0x40007000
 80025c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_RCC_OscConfig+0x500>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d106      	bne.n	80025ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d001      	beq.n	80025ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000

080025fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0d0      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002610:	4b6a      	ldr	r3, [pc, #424]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d910      	bls.n	8002640 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b67      	ldr	r3, [pc, #412]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 0207 	bic.w	r2, r3, #7
 8002626:	4965      	ldr	r1, [pc, #404]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b63      	ldr	r3, [pc, #396]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0b8      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d020      	beq.n	800268e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002658:	4b59      	ldr	r3, [pc, #356]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	4a58      	ldr	r2, [pc, #352]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002662:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002670:	4b53      	ldr	r3, [pc, #332]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4a52      	ldr	r2, [pc, #328]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800267a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800267c:	4b50      	ldr	r3, [pc, #320]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	494d      	ldr	r1, [pc, #308]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	4313      	orrs	r3, r2
 800268c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d040      	beq.n	800271c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	4b47      	ldr	r3, [pc, #284]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d115      	bne.n	80026da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e07f      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d107      	bne.n	80026ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ba:	4b41      	ldr	r3, [pc, #260]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d109      	bne.n	80026da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e073      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ca:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e06b      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026da:	4b39      	ldr	r3, [pc, #228]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f023 0203 	bic.w	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	4936      	ldr	r1, [pc, #216]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026ec:	f7fe fb76 	bl	8000ddc <HAL_GetTick>
 80026f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f2:	e00a      	b.n	800270a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f4:	f7fe fb72 	bl	8000ddc <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e053      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270a:	4b2d      	ldr	r3, [pc, #180]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 020c 	and.w	r2, r3, #12
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	429a      	cmp	r2, r3
 800271a:	d1eb      	bne.n	80026f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800271c:	4b27      	ldr	r3, [pc, #156]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d210      	bcs.n	800274c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b24      	ldr	r3, [pc, #144]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 0207 	bic.w	r2, r3, #7
 8002732:	4922      	ldr	r1, [pc, #136]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b20      	ldr	r3, [pc, #128]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e032      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4916      	ldr	r1, [pc, #88]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	4313      	orrs	r3, r2
 8002768:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	490e      	ldr	r1, [pc, #56]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800278a:	f000 f821 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 800278e:	4602      	mov	r2, r0
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	490a      	ldr	r1, [pc, #40]	; (80027c4 <HAL_RCC_ClockConfig+0x1c8>)
 800279c:	5ccb      	ldrb	r3, [r1, r3]
 800279e:	fa22 f303 	lsr.w	r3, r2, r3
 80027a2:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <HAL_RCC_ClockConfig+0x1cc>)
 80027a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_RCC_ClockConfig+0x1d0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe fad4 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40022000 	.word	0x40022000
 80027c0:	40021000 	.word	0x40021000
 80027c4:	08004b70 	.word	0x08004b70
 80027c8:	20000000 	.word	0x20000000
 80027cc:	20000004 	.word	0x20000004

080027d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d0:	b490      	push	{r4, r7}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027d6:	4b29      	ldr	r3, [pc, #164]	; (800287c <HAL_RCC_GetSysClockFreq+0xac>)
 80027d8:	1d3c      	adds	r4, r7, #4
 80027da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027e0:	f240 2301 	movw	r3, #513	; 0x201
 80027e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	2300      	movs	r3, #0
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027fa:	4b21      	ldr	r3, [pc, #132]	; (8002880 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b04      	cmp	r3, #4
 8002808:	d002      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0x40>
 800280a:	2b08      	cmp	r3, #8
 800280c:	d003      	beq.n	8002816 <HAL_RCC_GetSysClockFreq+0x46>
 800280e:	e02b      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002810:	4b1c      	ldr	r3, [pc, #112]	; (8002884 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002812:	623b      	str	r3, [r7, #32]
      break;
 8002814:	e02b      	b.n	800286e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	0c9b      	lsrs	r3, r3, #18
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	3328      	adds	r3, #40	; 0x28
 8002820:	443b      	add	r3, r7
 8002822:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002826:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d012      	beq.n	8002858 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	0c5b      	lsrs	r3, r3, #17
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	3328      	adds	r3, #40	; 0x28
 800283e:	443b      	add	r3, r7
 8002840:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002844:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <HAL_RCC_GetSysClockFreq+0xb4>)
 800284a:	fb03 f202 	mul.w	r2, r3, r2
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	fbb2 f3f3 	udiv	r3, r2, r3
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
 8002856:	e004      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	4a0b      	ldr	r2, [pc, #44]	; (8002888 <HAL_RCC_GetSysClockFreq+0xb8>)
 800285c:	fb02 f303 	mul.w	r3, r2, r3
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	623b      	str	r3, [r7, #32]
      break;
 8002866:	e002      	b.n	800286e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002868:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_RCC_GetSysClockFreq+0xb4>)
 800286a:	623b      	str	r3, [r7, #32]
      break;
 800286c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800286e:	6a3b      	ldr	r3, [r7, #32]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3728      	adds	r7, #40	; 0x28
 8002874:	46bd      	mov	sp, r7
 8002876:	bc90      	pop	{r4, r7}
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	08004b60 	.word	0x08004b60
 8002880:	40021000 	.word	0x40021000
 8002884:	007a1200 	.word	0x007a1200
 8002888:	003d0900 	.word	0x003d0900

0800288c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002890:	4b02      	ldr	r3, [pc, #8]	; (800289c <HAL_RCC_GetHCLKFreq+0x10>)
 8002892:	681b      	ldr	r3, [r3, #0]
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	20000000 	.word	0x20000000

080028a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028a4:	f7ff fff2 	bl	800288c <HAL_RCC_GetHCLKFreq>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	0a1b      	lsrs	r3, r3, #8
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	4903      	ldr	r1, [pc, #12]	; (80028c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028b6:	5ccb      	ldrb	r3, [r1, r3]
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028bc:	4618      	mov	r0, r3
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000
 80028c4:	08004b80 	.word	0x08004b80

080028c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028cc:	f7ff ffde 	bl	800288c <HAL_RCC_GetHCLKFreq>
 80028d0:	4602      	mov	r2, r0
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	0adb      	lsrs	r3, r3, #11
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	4903      	ldr	r1, [pc, #12]	; (80028ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80028de:	5ccb      	ldrb	r3, [r1, r3]
 80028e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40021000 	.word	0x40021000
 80028ec:	08004b80 	.word	0x08004b80

080028f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028f8:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <RCC_Delay+0x34>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <RCC_Delay+0x38>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	0a5b      	lsrs	r3, r3, #9
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800290c:	bf00      	nop
  }
  while (Delay --);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1e5a      	subs	r2, r3, #1
 8002912:	60fa      	str	r2, [r7, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f9      	bne.n	800290c <RCC_Delay+0x1c>
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	20000000 	.word	0x20000000
 8002928:	10624dd3 	.word	0x10624dd3

0800292c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d07d      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002948:	2300      	movs	r3, #0
 800294a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800294c:	4b4f      	ldr	r3, [pc, #316]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10d      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002958:	4b4c      	ldr	r3, [pc, #304]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	4a4b      	ldr	r2, [pc, #300]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002962:	61d3      	str	r3, [r2, #28]
 8002964:	4b49      	ldr	r3, [pc, #292]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002970:	2301      	movs	r3, #1
 8002972:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002974:	4b46      	ldr	r3, [pc, #280]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d118      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002980:	4b43      	ldr	r3, [pc, #268]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a42      	ldr	r2, [pc, #264]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298c:	f7fe fa26 	bl	8000ddc <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002992:	e008      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002994:	f7fe fa22 	bl	8000ddc <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b64      	cmp	r3, #100	; 0x64
 80029a0:	d901      	bls.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e06d      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a6:	4b3a      	ldr	r3, [pc, #232]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029b2:	4b36      	ldr	r3, [pc, #216]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d02e      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d027      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029d0:	4b2e      	ldr	r3, [pc, #184]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029da:	4b2e      	ldr	r3, [pc, #184]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029dc:	2201      	movs	r2, #1
 80029de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029e0:	4b2c      	ldr	r3, [pc, #176]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029e6:	4a29      	ldr	r2, [pc, #164]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d014      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f6:	f7fe f9f1 	bl	8000ddc <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fc:	e00a      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fe:	f7fe f9ed 	bl	8000ddc <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e036      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a14:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0ee      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a20:	4b1a      	ldr	r3, [pc, #104]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	4917      	ldr	r1, [pc, #92]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a32:	7dfb      	ldrb	r3, [r7, #23]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d105      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	4a13      	ldr	r2, [pc, #76]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a50:	4b0e      	ldr	r3, [pc, #56]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	490b      	ldr	r1, [pc, #44]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d008      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a6e:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	4904      	ldr	r1, [pc, #16]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40007000 	.word	0x40007000
 8002a94:	42420440 	.word	0x42420440

08002a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e041      	b.n	8002b2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fd ff82 	bl	80009c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	f000 fb84 	bl	80031e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d001      	beq.n	8002b50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e03c      	b.n	8002bca <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a1d      	ldr	r2, [pc, #116]	; (8002bd4 <HAL_TIM_Base_Start+0x9c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d018      	beq.n	8002b94 <HAL_TIM_Base_Start+0x5c>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1c      	ldr	r2, [pc, #112]	; (8002bd8 <HAL_TIM_Base_Start+0xa0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d013      	beq.n	8002b94 <HAL_TIM_Base_Start+0x5c>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b74:	d00e      	beq.n	8002b94 <HAL_TIM_Base_Start+0x5c>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a18      	ldr	r2, [pc, #96]	; (8002bdc <HAL_TIM_Base_Start+0xa4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d009      	beq.n	8002b94 <HAL_TIM_Base_Start+0x5c>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a16      	ldr	r2, [pc, #88]	; (8002be0 <HAL_TIM_Base_Start+0xa8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d004      	beq.n	8002b94 <HAL_TIM_Base_Start+0x5c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a15      	ldr	r2, [pc, #84]	; (8002be4 <HAL_TIM_Base_Start+0xac>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d111      	bne.n	8002bb8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2b06      	cmp	r3, #6
 8002ba4:	d010      	beq.n	8002bc8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 0201 	orr.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb6:	e007      	b.n	8002bc8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr
 8002bd4:	40012c00 	.word	0x40012c00
 8002bd8:	40013400 	.word	0x40013400
 8002bdc:	40000400 	.word	0x40000400
 8002be0:	40000800 	.word	0x40000800
 8002be4:	40000c00 	.word	0x40000c00

08002be8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e041      	b.n	8002c7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fd feb4 	bl	800097c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	4619      	mov	r1, r3
 8002c26:	4610      	mov	r0, r2
 8002c28:	f000 fadc 	bl	80031e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d109      	bne.n	8002cac <HAL_TIM_PWM_Start+0x24>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	bf14      	ite	ne
 8002ca4:	2301      	movne	r3, #1
 8002ca6:	2300      	moveq	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	e022      	b.n	8002cf2 <HAL_TIM_PWM_Start+0x6a>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d109      	bne.n	8002cc6 <HAL_TIM_PWM_Start+0x3e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	bf14      	ite	ne
 8002cbe:	2301      	movne	r3, #1
 8002cc0:	2300      	moveq	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	e015      	b.n	8002cf2 <HAL_TIM_PWM_Start+0x6a>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d109      	bne.n	8002ce0 <HAL_TIM_PWM_Start+0x58>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	bf14      	ite	ne
 8002cd8:	2301      	movne	r3, #1
 8002cda:	2300      	moveq	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	e008      	b.n	8002cf2 <HAL_TIM_PWM_Start+0x6a>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	bf14      	ite	ne
 8002cec:	2301      	movne	r3, #1
 8002cee:	2300      	moveq	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e072      	b.n	8002de0 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d104      	bne.n	8002d0a <HAL_TIM_PWM_Start+0x82>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d08:	e013      	b.n	8002d32 <HAL_TIM_PWM_Start+0xaa>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d104      	bne.n	8002d1a <HAL_TIM_PWM_Start+0x92>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d18:	e00b      	b.n	8002d32 <HAL_TIM_PWM_Start+0xaa>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d104      	bne.n	8002d2a <HAL_TIM_PWM_Start+0xa2>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d28:	e003      	b.n	8002d32 <HAL_TIM_PWM_Start+0xaa>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2201      	movs	r2, #1
 8002d38:	6839      	ldr	r1, [r7, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 fc78 	bl	8003630 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a28      	ldr	r2, [pc, #160]	; (8002de8 <HAL_TIM_PWM_Start+0x160>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d004      	beq.n	8002d54 <HAL_TIM_PWM_Start+0xcc>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a27      	ldr	r2, [pc, #156]	; (8002dec <HAL_TIM_PWM_Start+0x164>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d101      	bne.n	8002d58 <HAL_TIM_PWM_Start+0xd0>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <HAL_TIM_PWM_Start+0xd2>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d007      	beq.n	8002d6e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <HAL_TIM_PWM_Start+0x160>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d018      	beq.n	8002daa <HAL_TIM_PWM_Start+0x122>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1b      	ldr	r2, [pc, #108]	; (8002dec <HAL_TIM_PWM_Start+0x164>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d013      	beq.n	8002daa <HAL_TIM_PWM_Start+0x122>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8a:	d00e      	beq.n	8002daa <HAL_TIM_PWM_Start+0x122>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a17      	ldr	r2, [pc, #92]	; (8002df0 <HAL_TIM_PWM_Start+0x168>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d009      	beq.n	8002daa <HAL_TIM_PWM_Start+0x122>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a16      	ldr	r2, [pc, #88]	; (8002df4 <HAL_TIM_PWM_Start+0x16c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d004      	beq.n	8002daa <HAL_TIM_PWM_Start+0x122>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a14      	ldr	r2, [pc, #80]	; (8002df8 <HAL_TIM_PWM_Start+0x170>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d111      	bne.n	8002dce <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b06      	cmp	r3, #6
 8002dba:	d010      	beq.n	8002dde <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dcc:	e007      	b.n	8002dde <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0201 	orr.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40012c00 	.word	0x40012c00
 8002dec:	40013400 	.word	0x40013400
 8002df0:	40000400 	.word	0x40000400
 8002df4:	40000800 	.word	0x40000800
 8002df8:	40000c00 	.word	0x40000c00

08002dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d122      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d11b      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0202 	mvn.w	r2, #2
 8002e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f9b4 	bl	80031ac <HAL_TIM_IC_CaptureCallback>
 8002e44:	e005      	b.n	8002e52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f9a7 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f9b6 	bl	80031be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d122      	bne.n	8002eac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d11b      	bne.n	8002eac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0204 	mvn.w	r2, #4
 8002e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f98a 	bl	80031ac <HAL_TIM_IC_CaptureCallback>
 8002e98:	e005      	b.n	8002ea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f97d 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f98c 	bl	80031be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d122      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d11b      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0208 	mvn.w	r2, #8
 8002ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f960 	bl	80031ac <HAL_TIM_IC_CaptureCallback>
 8002eec:	e005      	b.n	8002efa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f953 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f962 	bl	80031be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d122      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d11b      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0210 	mvn.w	r2, #16
 8002f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2208      	movs	r2, #8
 8002f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f936 	bl	80031ac <HAL_TIM_IC_CaptureCallback>
 8002f40:	e005      	b.n	8002f4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f929 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f938 	bl	80031be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d10e      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d107      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0201 	mvn.w	r2, #1
 8002f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f904 	bl	8003188 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	2b80      	cmp	r3, #128	; 0x80
 8002f8c:	d10e      	bne.n	8002fac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f98:	2b80      	cmp	r3, #128	; 0x80
 8002f9a:	d107      	bne.n	8002fac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fbdb 	bl	8003762 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb6:	2b40      	cmp	r3, #64	; 0x40
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc4:	2b40      	cmp	r3, #64	; 0x40
 8002fc6:	d107      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f8fc 	bl	80031d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0320 	and.w	r3, r3, #32
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d10e      	bne.n	8003004 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d107      	bne.n	8003004 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0220 	mvn.w	r2, #32
 8002ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fba6 	bl	8003750 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003004:	bf00      	nop
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003022:	2302      	movs	r3, #2
 8003024:	e0ac      	b.n	8003180 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b0c      	cmp	r3, #12
 8003032:	f200 809f 	bhi.w	8003174 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003036:	a201      	add	r2, pc, #4	; (adr r2, 800303c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303c:	08003071 	.word	0x08003071
 8003040:	08003175 	.word	0x08003175
 8003044:	08003175 	.word	0x08003175
 8003048:	08003175 	.word	0x08003175
 800304c:	080030b1 	.word	0x080030b1
 8003050:	08003175 	.word	0x08003175
 8003054:	08003175 	.word	0x08003175
 8003058:	08003175 	.word	0x08003175
 800305c:	080030f3 	.word	0x080030f3
 8003060:	08003175 	.word	0x08003175
 8003064:	08003175 	.word	0x08003175
 8003068:	08003175 	.word	0x08003175
 800306c:	08003133 	.word	0x08003133
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f92e 	bl	80032d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0208 	orr.w	r2, r2, #8
 800308a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0204 	bic.w	r2, r2, #4
 800309a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6999      	ldr	r1, [r3, #24]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	619a      	str	r2, [r3, #24]
      break;
 80030ae:	e062      	b.n	8003176 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 f97e 	bl	80033b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699a      	ldr	r2, [r3, #24]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6999      	ldr	r1, [r3, #24]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	021a      	lsls	r2, r3, #8
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	619a      	str	r2, [r3, #24]
      break;
 80030f0:	e041      	b.n	8003176 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68b9      	ldr	r1, [r7, #8]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 f9d1 	bl	80034a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 0208 	orr.w	r2, r2, #8
 800310c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69da      	ldr	r2, [r3, #28]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0204 	bic.w	r2, r2, #4
 800311c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69d9      	ldr	r1, [r3, #28]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	61da      	str	r2, [r3, #28]
      break;
 8003130:	e021      	b.n	8003176 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fa25 	bl	8003588 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69da      	ldr	r2, [r3, #28]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800314c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69da      	ldr	r2, [r3, #28]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800315c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69d9      	ldr	r1, [r3, #28]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	021a      	lsls	r2, r3, #8
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	61da      	str	r2, [r3, #28]
      break;
 8003172:	e000      	b.n	8003176 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003174:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr

080031d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
	...

080031e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a33      	ldr	r2, [pc, #204]	; (80032c4 <TIM_Base_SetConfig+0xe0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d013      	beq.n	8003224 <TIM_Base_SetConfig+0x40>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a32      	ldr	r2, [pc, #200]	; (80032c8 <TIM_Base_SetConfig+0xe4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00f      	beq.n	8003224 <TIM_Base_SetConfig+0x40>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320a:	d00b      	beq.n	8003224 <TIM_Base_SetConfig+0x40>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a2f      	ldr	r2, [pc, #188]	; (80032cc <TIM_Base_SetConfig+0xe8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d007      	beq.n	8003224 <TIM_Base_SetConfig+0x40>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a2e      	ldr	r2, [pc, #184]	; (80032d0 <TIM_Base_SetConfig+0xec>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d003      	beq.n	8003224 <TIM_Base_SetConfig+0x40>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a2d      	ldr	r2, [pc, #180]	; (80032d4 <TIM_Base_SetConfig+0xf0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d108      	bne.n	8003236 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a22      	ldr	r2, [pc, #136]	; (80032c4 <TIM_Base_SetConfig+0xe0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d013      	beq.n	8003266 <TIM_Base_SetConfig+0x82>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a21      	ldr	r2, [pc, #132]	; (80032c8 <TIM_Base_SetConfig+0xe4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00f      	beq.n	8003266 <TIM_Base_SetConfig+0x82>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324c:	d00b      	beq.n	8003266 <TIM_Base_SetConfig+0x82>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a1e      	ldr	r2, [pc, #120]	; (80032cc <TIM_Base_SetConfig+0xe8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d007      	beq.n	8003266 <TIM_Base_SetConfig+0x82>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a1d      	ldr	r2, [pc, #116]	; (80032d0 <TIM_Base_SetConfig+0xec>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d003      	beq.n	8003266 <TIM_Base_SetConfig+0x82>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a1c      	ldr	r2, [pc, #112]	; (80032d4 <TIM_Base_SetConfig+0xf0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d108      	bne.n	8003278 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800326c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4313      	orrs	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	4313      	orrs	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a09      	ldr	r2, [pc, #36]	; (80032c4 <TIM_Base_SetConfig+0xe0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d003      	beq.n	80032ac <TIM_Base_SetConfig+0xc8>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a08      	ldr	r2, [pc, #32]	; (80032c8 <TIM_Base_SetConfig+0xe4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d103      	bne.n	80032b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	615a      	str	r2, [r3, #20]
}
 80032ba:	bf00      	nop
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr
 80032c4:	40012c00 	.word	0x40012c00
 80032c8:	40013400 	.word	0x40013400
 80032cc:	40000400 	.word	0x40000400
 80032d0:	40000800 	.word	0x40000800
 80032d4:	40000c00 	.word	0x40000c00

080032d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	f023 0201 	bic.w	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0303 	bic.w	r3, r3, #3
 800330e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f023 0302 	bic.w	r3, r3, #2
 8003320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a20      	ldr	r2, [pc, #128]	; (80033b0 <TIM_OC1_SetConfig+0xd8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d003      	beq.n	800333c <TIM_OC1_SetConfig+0x64>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a1f      	ldr	r2, [pc, #124]	; (80033b4 <TIM_OC1_SetConfig+0xdc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d10c      	bne.n	8003356 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f023 0308 	bic.w	r3, r3, #8
 8003342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f023 0304 	bic.w	r3, r3, #4
 8003354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a15      	ldr	r2, [pc, #84]	; (80033b0 <TIM_OC1_SetConfig+0xd8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d003      	beq.n	8003366 <TIM_OC1_SetConfig+0x8e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a14      	ldr	r2, [pc, #80]	; (80033b4 <TIM_OC1_SetConfig+0xdc>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d111      	bne.n	800338a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800336c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	621a      	str	r2, [r3, #32]
}
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40012c00 	.word	0x40012c00
 80033b4:	40013400 	.word	0x40013400

080033b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	f023 0210 	bic.w	r2, r3, #16
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f023 0320 	bic.w	r3, r3, #32
 8003402:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a21      	ldr	r2, [pc, #132]	; (8003498 <TIM_OC2_SetConfig+0xe0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d003      	beq.n	8003420 <TIM_OC2_SetConfig+0x68>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a20      	ldr	r2, [pc, #128]	; (800349c <TIM_OC2_SetConfig+0xe4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d10d      	bne.n	800343c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800343a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a16      	ldr	r2, [pc, #88]	; (8003498 <TIM_OC2_SetConfig+0xe0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d003      	beq.n	800344c <TIM_OC2_SetConfig+0x94>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a15      	ldr	r2, [pc, #84]	; (800349c <TIM_OC2_SetConfig+0xe4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d113      	bne.n	8003474 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003452:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800345a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	621a      	str	r2, [r3, #32]
}
 800348e:	bf00      	nop
 8003490:	371c      	adds	r7, #28
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr
 8003498:	40012c00 	.word	0x40012c00
 800349c:	40013400 	.word	0x40013400

080034a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0303 	bic.w	r3, r3, #3
 80034d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a21      	ldr	r2, [pc, #132]	; (8003580 <TIM_OC3_SetConfig+0xe0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d003      	beq.n	8003506 <TIM_OC3_SetConfig+0x66>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a20      	ldr	r2, [pc, #128]	; (8003584 <TIM_OC3_SetConfig+0xe4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d10d      	bne.n	8003522 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800350c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	021b      	lsls	r3, r3, #8
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a16      	ldr	r2, [pc, #88]	; (8003580 <TIM_OC3_SetConfig+0xe0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d003      	beq.n	8003532 <TIM_OC3_SetConfig+0x92>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a15      	ldr	r2, [pc, #84]	; (8003584 <TIM_OC3_SetConfig+0xe4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d113      	bne.n	800355a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	621a      	str	r2, [r3, #32]
}
 8003574:	bf00      	nop
 8003576:	371c      	adds	r7, #28
 8003578:	46bd      	mov	sp, r7
 800357a:	bc80      	pop	{r7}
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40012c00 	.word	0x40012c00
 8003584:	40013400 	.word	0x40013400

08003588 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	021b      	lsls	r3, r3, #8
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	031b      	lsls	r3, r3, #12
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a11      	ldr	r2, [pc, #68]	; (8003628 <TIM_OC4_SetConfig+0xa0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d003      	beq.n	80035f0 <TIM_OC4_SetConfig+0x68>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a10      	ldr	r2, [pc, #64]	; (800362c <TIM_OC4_SetConfig+0xa4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d109      	bne.n	8003604 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	019b      	lsls	r3, r3, #6
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	621a      	str	r2, [r3, #32]
}
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr
 8003628:	40012c00 	.word	0x40012c00
 800362c:	40013400 	.word	0x40013400

08003630 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	2201      	movs	r2, #1
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a1a      	ldr	r2, [r3, #32]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	43db      	mvns	r3, r3
 8003652:	401a      	ands	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a1a      	ldr	r2, [r3, #32]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	fa01 f303 	lsl.w	r3, r1, r3
 8003668:	431a      	orrs	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	621a      	str	r2, [r3, #32]
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800368c:	2302      	movs	r3, #2
 800368e:	e050      	b.n	8003732 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1b      	ldr	r2, [pc, #108]	; (800373c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d018      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a19      	ldr	r2, [pc, #100]	; (8003740 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d013      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e6:	d00e      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a15      	ldr	r2, [pc, #84]	; (8003744 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d009      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a14      	ldr	r2, [pc, #80]	; (8003748 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d004      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a12      	ldr	r2, [pc, #72]	; (800374c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d10c      	bne.n	8003720 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800370c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	4313      	orrs	r3, r2
 8003716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr
 800373c:	40012c00 	.word	0x40012c00
 8003740:	40013400 	.word	0x40013400
 8003744:	40000400 	.word	0x40000400
 8003748:	40000800 	.word	0x40000800
 800374c:	40000c00 	.word	0x40000c00

08003750 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr

08003762 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr

08003774 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e03f      	b.n	8003806 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd f964 	bl	8000a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2224      	movs	r2, #36	; 0x24
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fc55 	bl	8004068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	4613      	mov	r3, r2
 800381c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b20      	cmp	r3, #32
 8003828:	d153      	bne.n	80038d2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_UART_Transmit_DMA+0x26>
 8003830:	88fb      	ldrh	r3, [r7, #6]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e04c      	b.n	80038d4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_UART_Transmit_DMA+0x38>
 8003844:	2302      	movs	r3, #2
 8003846:	e045      	b.n	80038d4 <HAL_UART_Transmit_DMA+0xc4>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	88fa      	ldrh	r2, [r7, #6]
 800385a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	88fa      	ldrh	r2, [r7, #6]
 8003860:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2221      	movs	r2, #33	; 0x21
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003874:	4a19      	ldr	r2, [pc, #100]	; (80038dc <HAL_UART_Transmit_DMA+0xcc>)
 8003876:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387c:	4a18      	ldr	r2, [pc, #96]	; (80038e0 <HAL_UART_Transmit_DMA+0xd0>)
 800387e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003884:	4a17      	ldr	r2, [pc, #92]	; (80038e4 <HAL_UART_Transmit_DMA+0xd4>)
 8003886:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388c:	2200      	movs	r2, #0
 800388e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8003890:	f107 0308 	add.w	r3, r7, #8
 8003894:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	6819      	ldr	r1, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3304      	adds	r3, #4
 80038a4:	461a      	mov	r2, r3
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	f7fd fe6e 	bl	8001588 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038b4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038cc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e000      	b.n	80038d4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80038d2:	2302      	movs	r3, #2
  }
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	08003c9b 	.word	0x08003c9b
 80038e0:	08003ced 	.word	0x08003ced
 80038e4:	08003d09 	.word	0x08003d09

080038e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	; 0x28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003908:	2300      	movs	r3, #0
 800390a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10d      	bne.n	800393a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	f003 0320 	and.w	r3, r3, #32
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_UART_IRQHandler+0x52>
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 faee 	bl	8003f14 <UART_Receive_IT>
      return;
 8003938:	e17b      	b.n	8003c32 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80b1 	beq.w	8003aa4 <HAL_UART_IRQHandler+0x1bc>
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d105      	bne.n	8003958 <HAL_UART_IRQHandler+0x70>
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 80a6 	beq.w	8003aa4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_UART_IRQHandler+0x90>
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	f043 0201 	orr.w	r2, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_UART_IRQHandler+0xb0>
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	f043 0202 	orr.w	r2, r3, #2
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_UART_IRQHandler+0xd0>
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	f043 0204 	orr.w	r2, r3, #4
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00f      	beq.n	80039e2 <HAL_UART_IRQHandler+0xfa>
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d104      	bne.n	80039d6 <HAL_UART_IRQHandler+0xee>
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d005      	beq.n	80039e2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f043 0208 	orr.w	r2, r3, #8
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 811e 	beq.w	8003c28 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d007      	beq.n	8003a06 <HAL_UART_IRQHandler+0x11e>
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fa87 	bl	8003f14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bf14      	ite	ne
 8003a14:	2301      	movne	r3, #1
 8003a16:	2300      	moveq	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d102      	bne.n	8003a2e <HAL_UART_IRQHandler+0x146>
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d031      	beq.n	8003a92 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f9c9 	bl	8003dc6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d023      	beq.n	8003a8a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a50:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d013      	beq.n	8003a82 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	4a76      	ldr	r2, [pc, #472]	; (8003c38 <HAL_UART_IRQHandler+0x350>)
 8003a60:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fd fe28 	bl	80016bc <HAL_DMA_Abort_IT>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d016      	beq.n	8003aa0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a80:	e00e      	b.n	8003aa0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f8f5 	bl	8003c72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a88:	e00a      	b.n	8003aa0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f8f1 	bl	8003c72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a90:	e006      	b.n	8003aa0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f8ed 	bl	8003c72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a9e:	e0c3      	b.n	8003c28 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa0:	bf00      	nop
    return;
 8003aa2:	e0c1      	b.n	8003c28 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	f040 80a1 	bne.w	8003bf0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 809b 	beq.w	8003bf0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 8095 	beq.w	8003bf0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d04e      	beq.n	8003b88 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003af4:	8a3b      	ldrh	r3, [r7, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 8098 	beq.w	8003c2c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b00:	8a3a      	ldrh	r2, [r7, #16]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	f080 8092 	bcs.w	8003c2c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8a3a      	ldrh	r2, [r7, #16]
 8003b0c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d02b      	beq.n	8003b70 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b26:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695a      	ldr	r2, [r3, #20]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0201 	bic.w	r2, r2, #1
 8003b36:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b46:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0210 	bic.w	r2, r2, #16
 8003b64:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fd fd6b 	bl	8001646 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	4619      	mov	r1, r3
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f87f 	bl	8003c84 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b86:	e051      	b.n	8003c2c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d047      	beq.n	8003c30 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003ba0:	8a7b      	ldrh	r3, [r7, #18]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d044      	beq.n	8003c30 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bb4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695a      	ldr	r2, [r3, #20]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0201 	bic.w	r2, r2, #1
 8003bc4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0210 	bic.w	r2, r2, #16
 8003be2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003be4:	8a7b      	ldrh	r3, [r7, #18]
 8003be6:	4619      	mov	r1, r3
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f84b 	bl	8003c84 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003bee:	e01f      	b.n	8003c30 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d008      	beq.n	8003c0c <HAL_UART_IRQHandler+0x324>
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f91e 	bl	8003e46 <UART_Transmit_IT>
    return;
 8003c0a:	e012      	b.n	8003c32 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00d      	beq.n	8003c32 <HAL_UART_IRQHandler+0x34a>
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f95f 	bl	8003ee4 <UART_EndTransmit_IT>
    return;
 8003c26:	e004      	b.n	8003c32 <HAL_UART_IRQHandler+0x34a>
    return;
 8003c28:	bf00      	nop
 8003c2a:	e002      	b.n	8003c32 <HAL_UART_IRQHandler+0x34a>
      return;
 8003c2c:	bf00      	nop
 8003c2e:	e000      	b.n	8003c32 <HAL_UART_IRQHandler+0x34a>
      return;
 8003c30:	bf00      	nop
  }
}
 8003c32:	3728      	adds	r7, #40	; 0x28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	08003e1f 	.word	0x08003e1f

08003c3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr

08003c4e <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr

08003c72 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr

08003c84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr

08003c9a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0320 	and.w	r3, r3, #32
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d113      	bne.n	8003cde <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cca:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cda:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003cdc:	e002      	b.n	8003ce4 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f7ff ffac 	bl	8003c3c <HAL_UART_TxCpltCallback>
}
 8003ce4:	bf00      	nop
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f7ff ffa7 	bl	8003c4e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	bf14      	ite	ne
 8003d28:	2301      	movne	r3, #1
 8003d2a:	2300      	moveq	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b21      	cmp	r3, #33	; 0x21
 8003d3a:	d108      	bne.n	8003d4e <UART_DMAError+0x46>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d005      	beq.n	8003d4e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2200      	movs	r2, #0
 8003d46:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003d48:	68b8      	ldr	r0, [r7, #8]
 8003d4a:	f000 f827 	bl	8003d9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf14      	ite	ne
 8003d5c:	2301      	movne	r3, #1
 8003d5e:	2300      	moveq	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b22      	cmp	r3, #34	; 0x22
 8003d6e:	d108      	bne.n	8003d82 <UART_DMAError+0x7a>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003d7c:	68b8      	ldr	r0, [r7, #8]
 8003d7e:	f000 f822 	bl	8003dc6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f043 0210 	orr.w	r2, r3, #16
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d8e:	68b8      	ldr	r0, [r7, #8]
 8003d90:	f7ff ff6f 	bl	8003c72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d94:	bf00      	nop
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003db2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr

08003dc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ddc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0201 	bic.w	r2, r2, #1
 8003dec:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d107      	bne.n	8003e06 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0210 	bic.w	r2, r2, #16
 8003e04:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr

08003e1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f7ff ff1a 	bl	8003c72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b085      	sub	sp, #20
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b21      	cmp	r3, #33	; 0x21
 8003e58:	d13e      	bne.n	8003ed8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e62:	d114      	bne.n	8003e8e <UART_Transmit_IT+0x48>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d110      	bne.n	8003e8e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	1c9a      	adds	r2, r3, #2
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	621a      	str	r2, [r3, #32]
 8003e8c:	e008      	b.n	8003ea0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	1c59      	adds	r1, r3, #1
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6211      	str	r1, [r2, #32]
 8003e98:	781a      	ldrb	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	4619      	mov	r1, r3
 8003eae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10f      	bne.n	8003ed4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ec2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ed2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	e000      	b.n	8003eda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ed8:	2302      	movs	r3, #2
  }
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr

08003ee4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003efa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff fe99 	bl	8003c3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b22      	cmp	r3, #34	; 0x22
 8003f26:	f040 8099 	bne.w	800405c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f32:	d117      	bne.n	8003f64 <UART_Receive_IT+0x50>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d113      	bne.n	8003f64 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	1c9a      	adds	r2, r3, #2
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	629a      	str	r2, [r3, #40]	; 0x28
 8003f62:	e026      	b.n	8003fb2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f68:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f76:	d007      	beq.n	8003f88 <UART_Receive_IT+0x74>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10a      	bne.n	8003f96 <UART_Receive_IT+0x82>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d106      	bne.n	8003f96 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	701a      	strb	r2, [r3, #0]
 8003f94:	e008      	b.n	8003fa8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d148      	bne.n	8004058 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0220 	bic.w	r2, r2, #32
 8003fd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fe4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	2b01      	cmp	r3, #1
 8004004:	d123      	bne.n	800404e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0210 	bic.w	r2, r2, #16
 800401a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0310 	and.w	r3, r3, #16
 8004026:	2b10      	cmp	r3, #16
 8004028:	d10a      	bne.n	8004040 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004044:	4619      	mov	r1, r3
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff fe1c 	bl	8003c84 <HAL_UARTEx_RxEventCallback>
 800404c:	e002      	b.n	8004054 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff fe06 	bl	8003c60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	e002      	b.n	800405e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	e000      	b.n	800405e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800405c:	2302      	movs	r3, #2
  }
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040a2:	f023 030c 	bic.w	r3, r3, #12
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6812      	ldr	r2, [r2, #0]
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	430b      	orrs	r3, r1
 80040ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a2c      	ldr	r2, [pc, #176]	; (800417c <UART_SetConfig+0x114>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d103      	bne.n	80040d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040d0:	f7fe fbfa 	bl	80028c8 <HAL_RCC_GetPCLK2Freq>
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	e002      	b.n	80040de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040d8:	f7fe fbe2 	bl	80028a0 <HAL_RCC_GetPCLK1Freq>
 80040dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	009a      	lsls	r2, r3, #2
 80040e8:	441a      	add	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f4:	4a22      	ldr	r2, [pc, #136]	; (8004180 <UART_SetConfig+0x118>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	0119      	lsls	r1, r3, #4
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009a      	lsls	r2, r3, #2
 8004108:	441a      	add	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	fbb2 f2f3 	udiv	r2, r2, r3
 8004114:	4b1a      	ldr	r3, [pc, #104]	; (8004180 <UART_SetConfig+0x118>)
 8004116:	fba3 0302 	umull	r0, r3, r3, r2
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	2064      	movs	r0, #100	; 0x64
 800411e:	fb00 f303 	mul.w	r3, r0, r3
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	3332      	adds	r3, #50	; 0x32
 8004128:	4a15      	ldr	r2, [pc, #84]	; (8004180 <UART_SetConfig+0x118>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004134:	4419      	add	r1, r3
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	009a      	lsls	r2, r3, #2
 8004140:	441a      	add	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	fbb2 f2f3 	udiv	r2, r2, r3
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <UART_SetConfig+0x118>)
 800414e:	fba3 0302 	umull	r0, r3, r3, r2
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	2064      	movs	r0, #100	; 0x64
 8004156:	fb00 f303 	mul.w	r3, r0, r3
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	3332      	adds	r3, #50	; 0x32
 8004160:	4a07      	ldr	r2, [pc, #28]	; (8004180 <UART_SetConfig+0x118>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	f003 020f 	and.w	r2, r3, #15
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	440a      	add	r2, r1
 8004172:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40013800 	.word	0x40013800
 8004180:	51eb851f 	.word	0x51eb851f

08004184 <__errno>:
 8004184:	4b01      	ldr	r3, [pc, #4]	; (800418c <__errno+0x8>)
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	2000000c 	.word	0x2000000c

08004190 <__libc_init_array>:
 8004190:	b570      	push	{r4, r5, r6, lr}
 8004192:	2600      	movs	r6, #0
 8004194:	4d0c      	ldr	r5, [pc, #48]	; (80041c8 <__libc_init_array+0x38>)
 8004196:	4c0d      	ldr	r4, [pc, #52]	; (80041cc <__libc_init_array+0x3c>)
 8004198:	1b64      	subs	r4, r4, r5
 800419a:	10a4      	asrs	r4, r4, #2
 800419c:	42a6      	cmp	r6, r4
 800419e:	d109      	bne.n	80041b4 <__libc_init_array+0x24>
 80041a0:	f000 fc9c 	bl	8004adc <_init>
 80041a4:	2600      	movs	r6, #0
 80041a6:	4d0a      	ldr	r5, [pc, #40]	; (80041d0 <__libc_init_array+0x40>)
 80041a8:	4c0a      	ldr	r4, [pc, #40]	; (80041d4 <__libc_init_array+0x44>)
 80041aa:	1b64      	subs	r4, r4, r5
 80041ac:	10a4      	asrs	r4, r4, #2
 80041ae:	42a6      	cmp	r6, r4
 80041b0:	d105      	bne.n	80041be <__libc_init_array+0x2e>
 80041b2:	bd70      	pop	{r4, r5, r6, pc}
 80041b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041b8:	4798      	blx	r3
 80041ba:	3601      	adds	r6, #1
 80041bc:	e7ee      	b.n	800419c <__libc_init_array+0xc>
 80041be:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c2:	4798      	blx	r3
 80041c4:	3601      	adds	r6, #1
 80041c6:	e7f2      	b.n	80041ae <__libc_init_array+0x1e>
 80041c8:	08004bbc 	.word	0x08004bbc
 80041cc:	08004bbc 	.word	0x08004bbc
 80041d0:	08004bbc 	.word	0x08004bbc
 80041d4:	08004bc4 	.word	0x08004bc4

080041d8 <memcpy>:
 80041d8:	440a      	add	r2, r1
 80041da:	4291      	cmp	r1, r2
 80041dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80041e0:	d100      	bne.n	80041e4 <memcpy+0xc>
 80041e2:	4770      	bx	lr
 80041e4:	b510      	push	{r4, lr}
 80041e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041ea:	4291      	cmp	r1, r2
 80041ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041f0:	d1f9      	bne.n	80041e6 <memcpy+0xe>
 80041f2:	bd10      	pop	{r4, pc}

080041f4 <memset>:
 80041f4:	4603      	mov	r3, r0
 80041f6:	4402      	add	r2, r0
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d100      	bne.n	80041fe <memset+0xa>
 80041fc:	4770      	bx	lr
 80041fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004202:	e7f9      	b.n	80041f8 <memset+0x4>

08004204 <_free_r>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	4605      	mov	r5, r0
 8004208:	2900      	cmp	r1, #0
 800420a:	d040      	beq.n	800428e <_free_r+0x8a>
 800420c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004210:	1f0c      	subs	r4, r1, #4
 8004212:	2b00      	cmp	r3, #0
 8004214:	bfb8      	it	lt
 8004216:	18e4      	addlt	r4, r4, r3
 8004218:	f000 f900 	bl	800441c <__malloc_lock>
 800421c:	4a1c      	ldr	r2, [pc, #112]	; (8004290 <_free_r+0x8c>)
 800421e:	6813      	ldr	r3, [r2, #0]
 8004220:	b933      	cbnz	r3, 8004230 <_free_r+0x2c>
 8004222:	6063      	str	r3, [r4, #4]
 8004224:	6014      	str	r4, [r2, #0]
 8004226:	4628      	mov	r0, r5
 8004228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800422c:	f000 b8fc 	b.w	8004428 <__malloc_unlock>
 8004230:	42a3      	cmp	r3, r4
 8004232:	d908      	bls.n	8004246 <_free_r+0x42>
 8004234:	6820      	ldr	r0, [r4, #0]
 8004236:	1821      	adds	r1, r4, r0
 8004238:	428b      	cmp	r3, r1
 800423a:	bf01      	itttt	eq
 800423c:	6819      	ldreq	r1, [r3, #0]
 800423e:	685b      	ldreq	r3, [r3, #4]
 8004240:	1809      	addeq	r1, r1, r0
 8004242:	6021      	streq	r1, [r4, #0]
 8004244:	e7ed      	b.n	8004222 <_free_r+0x1e>
 8004246:	461a      	mov	r2, r3
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	b10b      	cbz	r3, 8004250 <_free_r+0x4c>
 800424c:	42a3      	cmp	r3, r4
 800424e:	d9fa      	bls.n	8004246 <_free_r+0x42>
 8004250:	6811      	ldr	r1, [r2, #0]
 8004252:	1850      	adds	r0, r2, r1
 8004254:	42a0      	cmp	r0, r4
 8004256:	d10b      	bne.n	8004270 <_free_r+0x6c>
 8004258:	6820      	ldr	r0, [r4, #0]
 800425a:	4401      	add	r1, r0
 800425c:	1850      	adds	r0, r2, r1
 800425e:	4283      	cmp	r3, r0
 8004260:	6011      	str	r1, [r2, #0]
 8004262:	d1e0      	bne.n	8004226 <_free_r+0x22>
 8004264:	6818      	ldr	r0, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4401      	add	r1, r0
 800426a:	6011      	str	r1, [r2, #0]
 800426c:	6053      	str	r3, [r2, #4]
 800426e:	e7da      	b.n	8004226 <_free_r+0x22>
 8004270:	d902      	bls.n	8004278 <_free_r+0x74>
 8004272:	230c      	movs	r3, #12
 8004274:	602b      	str	r3, [r5, #0]
 8004276:	e7d6      	b.n	8004226 <_free_r+0x22>
 8004278:	6820      	ldr	r0, [r4, #0]
 800427a:	1821      	adds	r1, r4, r0
 800427c:	428b      	cmp	r3, r1
 800427e:	bf01      	itttt	eq
 8004280:	6819      	ldreq	r1, [r3, #0]
 8004282:	685b      	ldreq	r3, [r3, #4]
 8004284:	1809      	addeq	r1, r1, r0
 8004286:	6021      	streq	r1, [r4, #0]
 8004288:	6063      	str	r3, [r4, #4]
 800428a:	6054      	str	r4, [r2, #4]
 800428c:	e7cb      	b.n	8004226 <_free_r+0x22>
 800428e:	bd38      	pop	{r3, r4, r5, pc}
 8004290:	20000280 	.word	0x20000280

08004294 <sbrk_aligned>:
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	4e0e      	ldr	r6, [pc, #56]	; (80042d0 <sbrk_aligned+0x3c>)
 8004298:	460c      	mov	r4, r1
 800429a:	6831      	ldr	r1, [r6, #0]
 800429c:	4605      	mov	r5, r0
 800429e:	b911      	cbnz	r1, 80042a6 <sbrk_aligned+0x12>
 80042a0:	f000 f88c 	bl	80043bc <_sbrk_r>
 80042a4:	6030      	str	r0, [r6, #0]
 80042a6:	4621      	mov	r1, r4
 80042a8:	4628      	mov	r0, r5
 80042aa:	f000 f887 	bl	80043bc <_sbrk_r>
 80042ae:	1c43      	adds	r3, r0, #1
 80042b0:	d00a      	beq.n	80042c8 <sbrk_aligned+0x34>
 80042b2:	1cc4      	adds	r4, r0, #3
 80042b4:	f024 0403 	bic.w	r4, r4, #3
 80042b8:	42a0      	cmp	r0, r4
 80042ba:	d007      	beq.n	80042cc <sbrk_aligned+0x38>
 80042bc:	1a21      	subs	r1, r4, r0
 80042be:	4628      	mov	r0, r5
 80042c0:	f000 f87c 	bl	80043bc <_sbrk_r>
 80042c4:	3001      	adds	r0, #1
 80042c6:	d101      	bne.n	80042cc <sbrk_aligned+0x38>
 80042c8:	f04f 34ff 	mov.w	r4, #4294967295
 80042cc:	4620      	mov	r0, r4
 80042ce:	bd70      	pop	{r4, r5, r6, pc}
 80042d0:	20000284 	.word	0x20000284

080042d4 <_malloc_r>:
 80042d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042d8:	1ccd      	adds	r5, r1, #3
 80042da:	f025 0503 	bic.w	r5, r5, #3
 80042de:	3508      	adds	r5, #8
 80042e0:	2d0c      	cmp	r5, #12
 80042e2:	bf38      	it	cc
 80042e4:	250c      	movcc	r5, #12
 80042e6:	2d00      	cmp	r5, #0
 80042e8:	4607      	mov	r7, r0
 80042ea:	db01      	blt.n	80042f0 <_malloc_r+0x1c>
 80042ec:	42a9      	cmp	r1, r5
 80042ee:	d905      	bls.n	80042fc <_malloc_r+0x28>
 80042f0:	230c      	movs	r3, #12
 80042f2:	2600      	movs	r6, #0
 80042f4:	603b      	str	r3, [r7, #0]
 80042f6:	4630      	mov	r0, r6
 80042f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042fc:	4e2e      	ldr	r6, [pc, #184]	; (80043b8 <_malloc_r+0xe4>)
 80042fe:	f000 f88d 	bl	800441c <__malloc_lock>
 8004302:	6833      	ldr	r3, [r6, #0]
 8004304:	461c      	mov	r4, r3
 8004306:	bb34      	cbnz	r4, 8004356 <_malloc_r+0x82>
 8004308:	4629      	mov	r1, r5
 800430a:	4638      	mov	r0, r7
 800430c:	f7ff ffc2 	bl	8004294 <sbrk_aligned>
 8004310:	1c43      	adds	r3, r0, #1
 8004312:	4604      	mov	r4, r0
 8004314:	d14d      	bne.n	80043b2 <_malloc_r+0xde>
 8004316:	6834      	ldr	r4, [r6, #0]
 8004318:	4626      	mov	r6, r4
 800431a:	2e00      	cmp	r6, #0
 800431c:	d140      	bne.n	80043a0 <_malloc_r+0xcc>
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	4631      	mov	r1, r6
 8004322:	4638      	mov	r0, r7
 8004324:	eb04 0803 	add.w	r8, r4, r3
 8004328:	f000 f848 	bl	80043bc <_sbrk_r>
 800432c:	4580      	cmp	r8, r0
 800432e:	d13a      	bne.n	80043a6 <_malloc_r+0xd2>
 8004330:	6821      	ldr	r1, [r4, #0]
 8004332:	3503      	adds	r5, #3
 8004334:	1a6d      	subs	r5, r5, r1
 8004336:	f025 0503 	bic.w	r5, r5, #3
 800433a:	3508      	adds	r5, #8
 800433c:	2d0c      	cmp	r5, #12
 800433e:	bf38      	it	cc
 8004340:	250c      	movcc	r5, #12
 8004342:	4638      	mov	r0, r7
 8004344:	4629      	mov	r1, r5
 8004346:	f7ff ffa5 	bl	8004294 <sbrk_aligned>
 800434a:	3001      	adds	r0, #1
 800434c:	d02b      	beq.n	80043a6 <_malloc_r+0xd2>
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	442b      	add	r3, r5
 8004352:	6023      	str	r3, [r4, #0]
 8004354:	e00e      	b.n	8004374 <_malloc_r+0xa0>
 8004356:	6822      	ldr	r2, [r4, #0]
 8004358:	1b52      	subs	r2, r2, r5
 800435a:	d41e      	bmi.n	800439a <_malloc_r+0xc6>
 800435c:	2a0b      	cmp	r2, #11
 800435e:	d916      	bls.n	800438e <_malloc_r+0xba>
 8004360:	1961      	adds	r1, r4, r5
 8004362:	42a3      	cmp	r3, r4
 8004364:	6025      	str	r5, [r4, #0]
 8004366:	bf18      	it	ne
 8004368:	6059      	strne	r1, [r3, #4]
 800436a:	6863      	ldr	r3, [r4, #4]
 800436c:	bf08      	it	eq
 800436e:	6031      	streq	r1, [r6, #0]
 8004370:	5162      	str	r2, [r4, r5]
 8004372:	604b      	str	r3, [r1, #4]
 8004374:	4638      	mov	r0, r7
 8004376:	f104 060b 	add.w	r6, r4, #11
 800437a:	f000 f855 	bl	8004428 <__malloc_unlock>
 800437e:	f026 0607 	bic.w	r6, r6, #7
 8004382:	1d23      	adds	r3, r4, #4
 8004384:	1af2      	subs	r2, r6, r3
 8004386:	d0b6      	beq.n	80042f6 <_malloc_r+0x22>
 8004388:	1b9b      	subs	r3, r3, r6
 800438a:	50a3      	str	r3, [r4, r2]
 800438c:	e7b3      	b.n	80042f6 <_malloc_r+0x22>
 800438e:	6862      	ldr	r2, [r4, #4]
 8004390:	42a3      	cmp	r3, r4
 8004392:	bf0c      	ite	eq
 8004394:	6032      	streq	r2, [r6, #0]
 8004396:	605a      	strne	r2, [r3, #4]
 8004398:	e7ec      	b.n	8004374 <_malloc_r+0xa0>
 800439a:	4623      	mov	r3, r4
 800439c:	6864      	ldr	r4, [r4, #4]
 800439e:	e7b2      	b.n	8004306 <_malloc_r+0x32>
 80043a0:	4634      	mov	r4, r6
 80043a2:	6876      	ldr	r6, [r6, #4]
 80043a4:	e7b9      	b.n	800431a <_malloc_r+0x46>
 80043a6:	230c      	movs	r3, #12
 80043a8:	4638      	mov	r0, r7
 80043aa:	603b      	str	r3, [r7, #0]
 80043ac:	f000 f83c 	bl	8004428 <__malloc_unlock>
 80043b0:	e7a1      	b.n	80042f6 <_malloc_r+0x22>
 80043b2:	6025      	str	r5, [r4, #0]
 80043b4:	e7de      	b.n	8004374 <_malloc_r+0xa0>
 80043b6:	bf00      	nop
 80043b8:	20000280 	.word	0x20000280

080043bc <_sbrk_r>:
 80043bc:	b538      	push	{r3, r4, r5, lr}
 80043be:	2300      	movs	r3, #0
 80043c0:	4d05      	ldr	r5, [pc, #20]	; (80043d8 <_sbrk_r+0x1c>)
 80043c2:	4604      	mov	r4, r0
 80043c4:	4608      	mov	r0, r1
 80043c6:	602b      	str	r3, [r5, #0]
 80043c8:	f7fc fc4e 	bl	8000c68 <_sbrk>
 80043cc:	1c43      	adds	r3, r0, #1
 80043ce:	d102      	bne.n	80043d6 <_sbrk_r+0x1a>
 80043d0:	682b      	ldr	r3, [r5, #0]
 80043d2:	b103      	cbz	r3, 80043d6 <_sbrk_r+0x1a>
 80043d4:	6023      	str	r3, [r4, #0]
 80043d6:	bd38      	pop	{r3, r4, r5, pc}
 80043d8:	20000288 	.word	0x20000288

080043dc <siprintf>:
 80043dc:	b40e      	push	{r1, r2, r3}
 80043de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043e2:	b500      	push	{lr}
 80043e4:	b09c      	sub	sp, #112	; 0x70
 80043e6:	ab1d      	add	r3, sp, #116	; 0x74
 80043e8:	9002      	str	r0, [sp, #8]
 80043ea:	9006      	str	r0, [sp, #24]
 80043ec:	9107      	str	r1, [sp, #28]
 80043ee:	9104      	str	r1, [sp, #16]
 80043f0:	4808      	ldr	r0, [pc, #32]	; (8004414 <siprintf+0x38>)
 80043f2:	4909      	ldr	r1, [pc, #36]	; (8004418 <siprintf+0x3c>)
 80043f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80043f8:	9105      	str	r1, [sp, #20]
 80043fa:	6800      	ldr	r0, [r0, #0]
 80043fc:	a902      	add	r1, sp, #8
 80043fe:	9301      	str	r3, [sp, #4]
 8004400:	f000 f874 	bl	80044ec <_svfiprintf_r>
 8004404:	2200      	movs	r2, #0
 8004406:	9b02      	ldr	r3, [sp, #8]
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	b01c      	add	sp, #112	; 0x70
 800440c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004410:	b003      	add	sp, #12
 8004412:	4770      	bx	lr
 8004414:	2000000c 	.word	0x2000000c
 8004418:	ffff0208 	.word	0xffff0208

0800441c <__malloc_lock>:
 800441c:	4801      	ldr	r0, [pc, #4]	; (8004424 <__malloc_lock+0x8>)
 800441e:	f000 bafb 	b.w	8004a18 <__retarget_lock_acquire_recursive>
 8004422:	bf00      	nop
 8004424:	2000028c 	.word	0x2000028c

08004428 <__malloc_unlock>:
 8004428:	4801      	ldr	r0, [pc, #4]	; (8004430 <__malloc_unlock+0x8>)
 800442a:	f000 baf6 	b.w	8004a1a <__retarget_lock_release_recursive>
 800442e:	bf00      	nop
 8004430:	2000028c 	.word	0x2000028c

08004434 <__ssputs_r>:
 8004434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004438:	688e      	ldr	r6, [r1, #8]
 800443a:	4682      	mov	sl, r0
 800443c:	429e      	cmp	r6, r3
 800443e:	460c      	mov	r4, r1
 8004440:	4690      	mov	r8, r2
 8004442:	461f      	mov	r7, r3
 8004444:	d838      	bhi.n	80044b8 <__ssputs_r+0x84>
 8004446:	898a      	ldrh	r2, [r1, #12]
 8004448:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800444c:	d032      	beq.n	80044b4 <__ssputs_r+0x80>
 800444e:	6825      	ldr	r5, [r4, #0]
 8004450:	6909      	ldr	r1, [r1, #16]
 8004452:	3301      	adds	r3, #1
 8004454:	eba5 0901 	sub.w	r9, r5, r1
 8004458:	6965      	ldr	r5, [r4, #20]
 800445a:	444b      	add	r3, r9
 800445c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004460:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004464:	106d      	asrs	r5, r5, #1
 8004466:	429d      	cmp	r5, r3
 8004468:	bf38      	it	cc
 800446a:	461d      	movcc	r5, r3
 800446c:	0553      	lsls	r3, r2, #21
 800446e:	d531      	bpl.n	80044d4 <__ssputs_r+0xa0>
 8004470:	4629      	mov	r1, r5
 8004472:	f7ff ff2f 	bl	80042d4 <_malloc_r>
 8004476:	4606      	mov	r6, r0
 8004478:	b950      	cbnz	r0, 8004490 <__ssputs_r+0x5c>
 800447a:	230c      	movs	r3, #12
 800447c:	f04f 30ff 	mov.w	r0, #4294967295
 8004480:	f8ca 3000 	str.w	r3, [sl]
 8004484:	89a3      	ldrh	r3, [r4, #12]
 8004486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800448a:	81a3      	strh	r3, [r4, #12]
 800448c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004490:	464a      	mov	r2, r9
 8004492:	6921      	ldr	r1, [r4, #16]
 8004494:	f7ff fea0 	bl	80041d8 <memcpy>
 8004498:	89a3      	ldrh	r3, [r4, #12]
 800449a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800449e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a2:	81a3      	strh	r3, [r4, #12]
 80044a4:	6126      	str	r6, [r4, #16]
 80044a6:	444e      	add	r6, r9
 80044a8:	6026      	str	r6, [r4, #0]
 80044aa:	463e      	mov	r6, r7
 80044ac:	6165      	str	r5, [r4, #20]
 80044ae:	eba5 0509 	sub.w	r5, r5, r9
 80044b2:	60a5      	str	r5, [r4, #8]
 80044b4:	42be      	cmp	r6, r7
 80044b6:	d900      	bls.n	80044ba <__ssputs_r+0x86>
 80044b8:	463e      	mov	r6, r7
 80044ba:	4632      	mov	r2, r6
 80044bc:	4641      	mov	r1, r8
 80044be:	6820      	ldr	r0, [r4, #0]
 80044c0:	f000 faba 	bl	8004a38 <memmove>
 80044c4:	68a3      	ldr	r3, [r4, #8]
 80044c6:	2000      	movs	r0, #0
 80044c8:	1b9b      	subs	r3, r3, r6
 80044ca:	60a3      	str	r3, [r4, #8]
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	4433      	add	r3, r6
 80044d0:	6023      	str	r3, [r4, #0]
 80044d2:	e7db      	b.n	800448c <__ssputs_r+0x58>
 80044d4:	462a      	mov	r2, r5
 80044d6:	f000 fac9 	bl	8004a6c <_realloc_r>
 80044da:	4606      	mov	r6, r0
 80044dc:	2800      	cmp	r0, #0
 80044de:	d1e1      	bne.n	80044a4 <__ssputs_r+0x70>
 80044e0:	4650      	mov	r0, sl
 80044e2:	6921      	ldr	r1, [r4, #16]
 80044e4:	f7ff fe8e 	bl	8004204 <_free_r>
 80044e8:	e7c7      	b.n	800447a <__ssputs_r+0x46>
	...

080044ec <_svfiprintf_r>:
 80044ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f0:	4698      	mov	r8, r3
 80044f2:	898b      	ldrh	r3, [r1, #12]
 80044f4:	4607      	mov	r7, r0
 80044f6:	061b      	lsls	r3, r3, #24
 80044f8:	460d      	mov	r5, r1
 80044fa:	4614      	mov	r4, r2
 80044fc:	b09d      	sub	sp, #116	; 0x74
 80044fe:	d50e      	bpl.n	800451e <_svfiprintf_r+0x32>
 8004500:	690b      	ldr	r3, [r1, #16]
 8004502:	b963      	cbnz	r3, 800451e <_svfiprintf_r+0x32>
 8004504:	2140      	movs	r1, #64	; 0x40
 8004506:	f7ff fee5 	bl	80042d4 <_malloc_r>
 800450a:	6028      	str	r0, [r5, #0]
 800450c:	6128      	str	r0, [r5, #16]
 800450e:	b920      	cbnz	r0, 800451a <_svfiprintf_r+0x2e>
 8004510:	230c      	movs	r3, #12
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	f04f 30ff 	mov.w	r0, #4294967295
 8004518:	e0d1      	b.n	80046be <_svfiprintf_r+0x1d2>
 800451a:	2340      	movs	r3, #64	; 0x40
 800451c:	616b      	str	r3, [r5, #20]
 800451e:	2300      	movs	r3, #0
 8004520:	9309      	str	r3, [sp, #36]	; 0x24
 8004522:	2320      	movs	r3, #32
 8004524:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004528:	2330      	movs	r3, #48	; 0x30
 800452a:	f04f 0901 	mov.w	r9, #1
 800452e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004532:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80046d8 <_svfiprintf_r+0x1ec>
 8004536:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800453a:	4623      	mov	r3, r4
 800453c:	469a      	mov	sl, r3
 800453e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004542:	b10a      	cbz	r2, 8004548 <_svfiprintf_r+0x5c>
 8004544:	2a25      	cmp	r2, #37	; 0x25
 8004546:	d1f9      	bne.n	800453c <_svfiprintf_r+0x50>
 8004548:	ebba 0b04 	subs.w	fp, sl, r4
 800454c:	d00b      	beq.n	8004566 <_svfiprintf_r+0x7a>
 800454e:	465b      	mov	r3, fp
 8004550:	4622      	mov	r2, r4
 8004552:	4629      	mov	r1, r5
 8004554:	4638      	mov	r0, r7
 8004556:	f7ff ff6d 	bl	8004434 <__ssputs_r>
 800455a:	3001      	adds	r0, #1
 800455c:	f000 80aa 	beq.w	80046b4 <_svfiprintf_r+0x1c8>
 8004560:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004562:	445a      	add	r2, fp
 8004564:	9209      	str	r2, [sp, #36]	; 0x24
 8004566:	f89a 3000 	ldrb.w	r3, [sl]
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 80a2 	beq.w	80046b4 <_svfiprintf_r+0x1c8>
 8004570:	2300      	movs	r3, #0
 8004572:	f04f 32ff 	mov.w	r2, #4294967295
 8004576:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800457a:	f10a 0a01 	add.w	sl, sl, #1
 800457e:	9304      	str	r3, [sp, #16]
 8004580:	9307      	str	r3, [sp, #28]
 8004582:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004586:	931a      	str	r3, [sp, #104]	; 0x68
 8004588:	4654      	mov	r4, sl
 800458a:	2205      	movs	r2, #5
 800458c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004590:	4851      	ldr	r0, [pc, #324]	; (80046d8 <_svfiprintf_r+0x1ec>)
 8004592:	f000 fa43 	bl	8004a1c <memchr>
 8004596:	9a04      	ldr	r2, [sp, #16]
 8004598:	b9d8      	cbnz	r0, 80045d2 <_svfiprintf_r+0xe6>
 800459a:	06d0      	lsls	r0, r2, #27
 800459c:	bf44      	itt	mi
 800459e:	2320      	movmi	r3, #32
 80045a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045a4:	0711      	lsls	r1, r2, #28
 80045a6:	bf44      	itt	mi
 80045a8:	232b      	movmi	r3, #43	; 0x2b
 80045aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045ae:	f89a 3000 	ldrb.w	r3, [sl]
 80045b2:	2b2a      	cmp	r3, #42	; 0x2a
 80045b4:	d015      	beq.n	80045e2 <_svfiprintf_r+0xf6>
 80045b6:	4654      	mov	r4, sl
 80045b8:	2000      	movs	r0, #0
 80045ba:	f04f 0c0a 	mov.w	ip, #10
 80045be:	9a07      	ldr	r2, [sp, #28]
 80045c0:	4621      	mov	r1, r4
 80045c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045c6:	3b30      	subs	r3, #48	; 0x30
 80045c8:	2b09      	cmp	r3, #9
 80045ca:	d94e      	bls.n	800466a <_svfiprintf_r+0x17e>
 80045cc:	b1b0      	cbz	r0, 80045fc <_svfiprintf_r+0x110>
 80045ce:	9207      	str	r2, [sp, #28]
 80045d0:	e014      	b.n	80045fc <_svfiprintf_r+0x110>
 80045d2:	eba0 0308 	sub.w	r3, r0, r8
 80045d6:	fa09 f303 	lsl.w	r3, r9, r3
 80045da:	4313      	orrs	r3, r2
 80045dc:	46a2      	mov	sl, r4
 80045de:	9304      	str	r3, [sp, #16]
 80045e0:	e7d2      	b.n	8004588 <_svfiprintf_r+0x9c>
 80045e2:	9b03      	ldr	r3, [sp, #12]
 80045e4:	1d19      	adds	r1, r3, #4
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	9103      	str	r1, [sp, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	bfbb      	ittet	lt
 80045ee:	425b      	neglt	r3, r3
 80045f0:	f042 0202 	orrlt.w	r2, r2, #2
 80045f4:	9307      	strge	r3, [sp, #28]
 80045f6:	9307      	strlt	r3, [sp, #28]
 80045f8:	bfb8      	it	lt
 80045fa:	9204      	strlt	r2, [sp, #16]
 80045fc:	7823      	ldrb	r3, [r4, #0]
 80045fe:	2b2e      	cmp	r3, #46	; 0x2e
 8004600:	d10c      	bne.n	800461c <_svfiprintf_r+0x130>
 8004602:	7863      	ldrb	r3, [r4, #1]
 8004604:	2b2a      	cmp	r3, #42	; 0x2a
 8004606:	d135      	bne.n	8004674 <_svfiprintf_r+0x188>
 8004608:	9b03      	ldr	r3, [sp, #12]
 800460a:	3402      	adds	r4, #2
 800460c:	1d1a      	adds	r2, r3, #4
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	9203      	str	r2, [sp, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	bfb8      	it	lt
 8004616:	f04f 33ff 	movlt.w	r3, #4294967295
 800461a:	9305      	str	r3, [sp, #20]
 800461c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80046dc <_svfiprintf_r+0x1f0>
 8004620:	2203      	movs	r2, #3
 8004622:	4650      	mov	r0, sl
 8004624:	7821      	ldrb	r1, [r4, #0]
 8004626:	f000 f9f9 	bl	8004a1c <memchr>
 800462a:	b140      	cbz	r0, 800463e <_svfiprintf_r+0x152>
 800462c:	2340      	movs	r3, #64	; 0x40
 800462e:	eba0 000a 	sub.w	r0, r0, sl
 8004632:	fa03 f000 	lsl.w	r0, r3, r0
 8004636:	9b04      	ldr	r3, [sp, #16]
 8004638:	3401      	adds	r4, #1
 800463a:	4303      	orrs	r3, r0
 800463c:	9304      	str	r3, [sp, #16]
 800463e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004642:	2206      	movs	r2, #6
 8004644:	4826      	ldr	r0, [pc, #152]	; (80046e0 <_svfiprintf_r+0x1f4>)
 8004646:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800464a:	f000 f9e7 	bl	8004a1c <memchr>
 800464e:	2800      	cmp	r0, #0
 8004650:	d038      	beq.n	80046c4 <_svfiprintf_r+0x1d8>
 8004652:	4b24      	ldr	r3, [pc, #144]	; (80046e4 <_svfiprintf_r+0x1f8>)
 8004654:	bb1b      	cbnz	r3, 800469e <_svfiprintf_r+0x1b2>
 8004656:	9b03      	ldr	r3, [sp, #12]
 8004658:	3307      	adds	r3, #7
 800465a:	f023 0307 	bic.w	r3, r3, #7
 800465e:	3308      	adds	r3, #8
 8004660:	9303      	str	r3, [sp, #12]
 8004662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004664:	4433      	add	r3, r6
 8004666:	9309      	str	r3, [sp, #36]	; 0x24
 8004668:	e767      	b.n	800453a <_svfiprintf_r+0x4e>
 800466a:	460c      	mov	r4, r1
 800466c:	2001      	movs	r0, #1
 800466e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004672:	e7a5      	b.n	80045c0 <_svfiprintf_r+0xd4>
 8004674:	2300      	movs	r3, #0
 8004676:	f04f 0c0a 	mov.w	ip, #10
 800467a:	4619      	mov	r1, r3
 800467c:	3401      	adds	r4, #1
 800467e:	9305      	str	r3, [sp, #20]
 8004680:	4620      	mov	r0, r4
 8004682:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004686:	3a30      	subs	r2, #48	; 0x30
 8004688:	2a09      	cmp	r2, #9
 800468a:	d903      	bls.n	8004694 <_svfiprintf_r+0x1a8>
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0c5      	beq.n	800461c <_svfiprintf_r+0x130>
 8004690:	9105      	str	r1, [sp, #20]
 8004692:	e7c3      	b.n	800461c <_svfiprintf_r+0x130>
 8004694:	4604      	mov	r4, r0
 8004696:	2301      	movs	r3, #1
 8004698:	fb0c 2101 	mla	r1, ip, r1, r2
 800469c:	e7f0      	b.n	8004680 <_svfiprintf_r+0x194>
 800469e:	ab03      	add	r3, sp, #12
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	462a      	mov	r2, r5
 80046a4:	4638      	mov	r0, r7
 80046a6:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <_svfiprintf_r+0x1fc>)
 80046a8:	a904      	add	r1, sp, #16
 80046aa:	f3af 8000 	nop.w
 80046ae:	1c42      	adds	r2, r0, #1
 80046b0:	4606      	mov	r6, r0
 80046b2:	d1d6      	bne.n	8004662 <_svfiprintf_r+0x176>
 80046b4:	89ab      	ldrh	r3, [r5, #12]
 80046b6:	065b      	lsls	r3, r3, #25
 80046b8:	f53f af2c 	bmi.w	8004514 <_svfiprintf_r+0x28>
 80046bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046be:	b01d      	add	sp, #116	; 0x74
 80046c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c4:	ab03      	add	r3, sp, #12
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	462a      	mov	r2, r5
 80046ca:	4638      	mov	r0, r7
 80046cc:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <_svfiprintf_r+0x1fc>)
 80046ce:	a904      	add	r1, sp, #16
 80046d0:	f000 f87c 	bl	80047cc <_printf_i>
 80046d4:	e7eb      	b.n	80046ae <_svfiprintf_r+0x1c2>
 80046d6:	bf00      	nop
 80046d8:	08004b88 	.word	0x08004b88
 80046dc:	08004b8e 	.word	0x08004b8e
 80046e0:	08004b92 	.word	0x08004b92
 80046e4:	00000000 	.word	0x00000000
 80046e8:	08004435 	.word	0x08004435

080046ec <_printf_common>:
 80046ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046f0:	4616      	mov	r6, r2
 80046f2:	4699      	mov	r9, r3
 80046f4:	688a      	ldr	r2, [r1, #8]
 80046f6:	690b      	ldr	r3, [r1, #16]
 80046f8:	4607      	mov	r7, r0
 80046fa:	4293      	cmp	r3, r2
 80046fc:	bfb8      	it	lt
 80046fe:	4613      	movlt	r3, r2
 8004700:	6033      	str	r3, [r6, #0]
 8004702:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004706:	460c      	mov	r4, r1
 8004708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800470c:	b10a      	cbz	r2, 8004712 <_printf_common+0x26>
 800470e:	3301      	adds	r3, #1
 8004710:	6033      	str	r3, [r6, #0]
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	0699      	lsls	r1, r3, #26
 8004716:	bf42      	ittt	mi
 8004718:	6833      	ldrmi	r3, [r6, #0]
 800471a:	3302      	addmi	r3, #2
 800471c:	6033      	strmi	r3, [r6, #0]
 800471e:	6825      	ldr	r5, [r4, #0]
 8004720:	f015 0506 	ands.w	r5, r5, #6
 8004724:	d106      	bne.n	8004734 <_printf_common+0x48>
 8004726:	f104 0a19 	add.w	sl, r4, #25
 800472a:	68e3      	ldr	r3, [r4, #12]
 800472c:	6832      	ldr	r2, [r6, #0]
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	42ab      	cmp	r3, r5
 8004732:	dc28      	bgt.n	8004786 <_printf_common+0x9a>
 8004734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004738:	1e13      	subs	r3, r2, #0
 800473a:	6822      	ldr	r2, [r4, #0]
 800473c:	bf18      	it	ne
 800473e:	2301      	movne	r3, #1
 8004740:	0692      	lsls	r2, r2, #26
 8004742:	d42d      	bmi.n	80047a0 <_printf_common+0xb4>
 8004744:	4649      	mov	r1, r9
 8004746:	4638      	mov	r0, r7
 8004748:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800474c:	47c0      	blx	r8
 800474e:	3001      	adds	r0, #1
 8004750:	d020      	beq.n	8004794 <_printf_common+0xa8>
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	68e5      	ldr	r5, [r4, #12]
 8004756:	f003 0306 	and.w	r3, r3, #6
 800475a:	2b04      	cmp	r3, #4
 800475c:	bf18      	it	ne
 800475e:	2500      	movne	r5, #0
 8004760:	6832      	ldr	r2, [r6, #0]
 8004762:	f04f 0600 	mov.w	r6, #0
 8004766:	68a3      	ldr	r3, [r4, #8]
 8004768:	bf08      	it	eq
 800476a:	1aad      	subeq	r5, r5, r2
 800476c:	6922      	ldr	r2, [r4, #16]
 800476e:	bf08      	it	eq
 8004770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004774:	4293      	cmp	r3, r2
 8004776:	bfc4      	itt	gt
 8004778:	1a9b      	subgt	r3, r3, r2
 800477a:	18ed      	addgt	r5, r5, r3
 800477c:	341a      	adds	r4, #26
 800477e:	42b5      	cmp	r5, r6
 8004780:	d11a      	bne.n	80047b8 <_printf_common+0xcc>
 8004782:	2000      	movs	r0, #0
 8004784:	e008      	b.n	8004798 <_printf_common+0xac>
 8004786:	2301      	movs	r3, #1
 8004788:	4652      	mov	r2, sl
 800478a:	4649      	mov	r1, r9
 800478c:	4638      	mov	r0, r7
 800478e:	47c0      	blx	r8
 8004790:	3001      	adds	r0, #1
 8004792:	d103      	bne.n	800479c <_printf_common+0xb0>
 8004794:	f04f 30ff 	mov.w	r0, #4294967295
 8004798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800479c:	3501      	adds	r5, #1
 800479e:	e7c4      	b.n	800472a <_printf_common+0x3e>
 80047a0:	2030      	movs	r0, #48	; 0x30
 80047a2:	18e1      	adds	r1, r4, r3
 80047a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047ae:	4422      	add	r2, r4
 80047b0:	3302      	adds	r3, #2
 80047b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047b6:	e7c5      	b.n	8004744 <_printf_common+0x58>
 80047b8:	2301      	movs	r3, #1
 80047ba:	4622      	mov	r2, r4
 80047bc:	4649      	mov	r1, r9
 80047be:	4638      	mov	r0, r7
 80047c0:	47c0      	blx	r8
 80047c2:	3001      	adds	r0, #1
 80047c4:	d0e6      	beq.n	8004794 <_printf_common+0xa8>
 80047c6:	3601      	adds	r6, #1
 80047c8:	e7d9      	b.n	800477e <_printf_common+0x92>
	...

080047cc <_printf_i>:
 80047cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047d0:	7e0f      	ldrb	r7, [r1, #24]
 80047d2:	4691      	mov	r9, r2
 80047d4:	2f78      	cmp	r7, #120	; 0x78
 80047d6:	4680      	mov	r8, r0
 80047d8:	460c      	mov	r4, r1
 80047da:	469a      	mov	sl, r3
 80047dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047e2:	d807      	bhi.n	80047f4 <_printf_i+0x28>
 80047e4:	2f62      	cmp	r7, #98	; 0x62
 80047e6:	d80a      	bhi.n	80047fe <_printf_i+0x32>
 80047e8:	2f00      	cmp	r7, #0
 80047ea:	f000 80d9 	beq.w	80049a0 <_printf_i+0x1d4>
 80047ee:	2f58      	cmp	r7, #88	; 0x58
 80047f0:	f000 80a4 	beq.w	800493c <_printf_i+0x170>
 80047f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047fc:	e03a      	b.n	8004874 <_printf_i+0xa8>
 80047fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004802:	2b15      	cmp	r3, #21
 8004804:	d8f6      	bhi.n	80047f4 <_printf_i+0x28>
 8004806:	a101      	add	r1, pc, #4	; (adr r1, 800480c <_printf_i+0x40>)
 8004808:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800480c:	08004865 	.word	0x08004865
 8004810:	08004879 	.word	0x08004879
 8004814:	080047f5 	.word	0x080047f5
 8004818:	080047f5 	.word	0x080047f5
 800481c:	080047f5 	.word	0x080047f5
 8004820:	080047f5 	.word	0x080047f5
 8004824:	08004879 	.word	0x08004879
 8004828:	080047f5 	.word	0x080047f5
 800482c:	080047f5 	.word	0x080047f5
 8004830:	080047f5 	.word	0x080047f5
 8004834:	080047f5 	.word	0x080047f5
 8004838:	08004987 	.word	0x08004987
 800483c:	080048a9 	.word	0x080048a9
 8004840:	08004969 	.word	0x08004969
 8004844:	080047f5 	.word	0x080047f5
 8004848:	080047f5 	.word	0x080047f5
 800484c:	080049a9 	.word	0x080049a9
 8004850:	080047f5 	.word	0x080047f5
 8004854:	080048a9 	.word	0x080048a9
 8004858:	080047f5 	.word	0x080047f5
 800485c:	080047f5 	.word	0x080047f5
 8004860:	08004971 	.word	0x08004971
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	1d1a      	adds	r2, r3, #4
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	602a      	str	r2, [r5, #0]
 800486c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004870:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004874:	2301      	movs	r3, #1
 8004876:	e0a4      	b.n	80049c2 <_printf_i+0x1f6>
 8004878:	6820      	ldr	r0, [r4, #0]
 800487a:	6829      	ldr	r1, [r5, #0]
 800487c:	0606      	lsls	r6, r0, #24
 800487e:	f101 0304 	add.w	r3, r1, #4
 8004882:	d50a      	bpl.n	800489a <_printf_i+0xce>
 8004884:	680e      	ldr	r6, [r1, #0]
 8004886:	602b      	str	r3, [r5, #0]
 8004888:	2e00      	cmp	r6, #0
 800488a:	da03      	bge.n	8004894 <_printf_i+0xc8>
 800488c:	232d      	movs	r3, #45	; 0x2d
 800488e:	4276      	negs	r6, r6
 8004890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004894:	230a      	movs	r3, #10
 8004896:	485e      	ldr	r0, [pc, #376]	; (8004a10 <_printf_i+0x244>)
 8004898:	e019      	b.n	80048ce <_printf_i+0x102>
 800489a:	680e      	ldr	r6, [r1, #0]
 800489c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048a0:	602b      	str	r3, [r5, #0]
 80048a2:	bf18      	it	ne
 80048a4:	b236      	sxthne	r6, r6
 80048a6:	e7ef      	b.n	8004888 <_printf_i+0xbc>
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	6820      	ldr	r0, [r4, #0]
 80048ac:	1d19      	adds	r1, r3, #4
 80048ae:	6029      	str	r1, [r5, #0]
 80048b0:	0601      	lsls	r1, r0, #24
 80048b2:	d501      	bpl.n	80048b8 <_printf_i+0xec>
 80048b4:	681e      	ldr	r6, [r3, #0]
 80048b6:	e002      	b.n	80048be <_printf_i+0xf2>
 80048b8:	0646      	lsls	r6, r0, #25
 80048ba:	d5fb      	bpl.n	80048b4 <_printf_i+0xe8>
 80048bc:	881e      	ldrh	r6, [r3, #0]
 80048be:	2f6f      	cmp	r7, #111	; 0x6f
 80048c0:	bf0c      	ite	eq
 80048c2:	2308      	moveq	r3, #8
 80048c4:	230a      	movne	r3, #10
 80048c6:	4852      	ldr	r0, [pc, #328]	; (8004a10 <_printf_i+0x244>)
 80048c8:	2100      	movs	r1, #0
 80048ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048ce:	6865      	ldr	r5, [r4, #4]
 80048d0:	2d00      	cmp	r5, #0
 80048d2:	bfa8      	it	ge
 80048d4:	6821      	ldrge	r1, [r4, #0]
 80048d6:	60a5      	str	r5, [r4, #8]
 80048d8:	bfa4      	itt	ge
 80048da:	f021 0104 	bicge.w	r1, r1, #4
 80048de:	6021      	strge	r1, [r4, #0]
 80048e0:	b90e      	cbnz	r6, 80048e6 <_printf_i+0x11a>
 80048e2:	2d00      	cmp	r5, #0
 80048e4:	d04d      	beq.n	8004982 <_printf_i+0x1b6>
 80048e6:	4615      	mov	r5, r2
 80048e8:	fbb6 f1f3 	udiv	r1, r6, r3
 80048ec:	fb03 6711 	mls	r7, r3, r1, r6
 80048f0:	5dc7      	ldrb	r7, [r0, r7]
 80048f2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048f6:	4637      	mov	r7, r6
 80048f8:	42bb      	cmp	r3, r7
 80048fa:	460e      	mov	r6, r1
 80048fc:	d9f4      	bls.n	80048e8 <_printf_i+0x11c>
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d10b      	bne.n	800491a <_printf_i+0x14e>
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	07de      	lsls	r6, r3, #31
 8004906:	d508      	bpl.n	800491a <_printf_i+0x14e>
 8004908:	6923      	ldr	r3, [r4, #16]
 800490a:	6861      	ldr	r1, [r4, #4]
 800490c:	4299      	cmp	r1, r3
 800490e:	bfde      	ittt	le
 8004910:	2330      	movle	r3, #48	; 0x30
 8004912:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004916:	f105 35ff 	addle.w	r5, r5, #4294967295
 800491a:	1b52      	subs	r2, r2, r5
 800491c:	6122      	str	r2, [r4, #16]
 800491e:	464b      	mov	r3, r9
 8004920:	4621      	mov	r1, r4
 8004922:	4640      	mov	r0, r8
 8004924:	f8cd a000 	str.w	sl, [sp]
 8004928:	aa03      	add	r2, sp, #12
 800492a:	f7ff fedf 	bl	80046ec <_printf_common>
 800492e:	3001      	adds	r0, #1
 8004930:	d14c      	bne.n	80049cc <_printf_i+0x200>
 8004932:	f04f 30ff 	mov.w	r0, #4294967295
 8004936:	b004      	add	sp, #16
 8004938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800493c:	4834      	ldr	r0, [pc, #208]	; (8004a10 <_printf_i+0x244>)
 800493e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004942:	6829      	ldr	r1, [r5, #0]
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	f851 6b04 	ldr.w	r6, [r1], #4
 800494a:	6029      	str	r1, [r5, #0]
 800494c:	061d      	lsls	r5, r3, #24
 800494e:	d514      	bpl.n	800497a <_printf_i+0x1ae>
 8004950:	07df      	lsls	r7, r3, #31
 8004952:	bf44      	itt	mi
 8004954:	f043 0320 	orrmi.w	r3, r3, #32
 8004958:	6023      	strmi	r3, [r4, #0]
 800495a:	b91e      	cbnz	r6, 8004964 <_printf_i+0x198>
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	f023 0320 	bic.w	r3, r3, #32
 8004962:	6023      	str	r3, [r4, #0]
 8004964:	2310      	movs	r3, #16
 8004966:	e7af      	b.n	80048c8 <_printf_i+0xfc>
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	f043 0320 	orr.w	r3, r3, #32
 800496e:	6023      	str	r3, [r4, #0]
 8004970:	2378      	movs	r3, #120	; 0x78
 8004972:	4828      	ldr	r0, [pc, #160]	; (8004a14 <_printf_i+0x248>)
 8004974:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004978:	e7e3      	b.n	8004942 <_printf_i+0x176>
 800497a:	0659      	lsls	r1, r3, #25
 800497c:	bf48      	it	mi
 800497e:	b2b6      	uxthmi	r6, r6
 8004980:	e7e6      	b.n	8004950 <_printf_i+0x184>
 8004982:	4615      	mov	r5, r2
 8004984:	e7bb      	b.n	80048fe <_printf_i+0x132>
 8004986:	682b      	ldr	r3, [r5, #0]
 8004988:	6826      	ldr	r6, [r4, #0]
 800498a:	1d18      	adds	r0, r3, #4
 800498c:	6961      	ldr	r1, [r4, #20]
 800498e:	6028      	str	r0, [r5, #0]
 8004990:	0635      	lsls	r5, r6, #24
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	d501      	bpl.n	800499a <_printf_i+0x1ce>
 8004996:	6019      	str	r1, [r3, #0]
 8004998:	e002      	b.n	80049a0 <_printf_i+0x1d4>
 800499a:	0670      	lsls	r0, r6, #25
 800499c:	d5fb      	bpl.n	8004996 <_printf_i+0x1ca>
 800499e:	8019      	strh	r1, [r3, #0]
 80049a0:	2300      	movs	r3, #0
 80049a2:	4615      	mov	r5, r2
 80049a4:	6123      	str	r3, [r4, #16]
 80049a6:	e7ba      	b.n	800491e <_printf_i+0x152>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	2100      	movs	r1, #0
 80049ac:	1d1a      	adds	r2, r3, #4
 80049ae:	602a      	str	r2, [r5, #0]
 80049b0:	681d      	ldr	r5, [r3, #0]
 80049b2:	6862      	ldr	r2, [r4, #4]
 80049b4:	4628      	mov	r0, r5
 80049b6:	f000 f831 	bl	8004a1c <memchr>
 80049ba:	b108      	cbz	r0, 80049c0 <_printf_i+0x1f4>
 80049bc:	1b40      	subs	r0, r0, r5
 80049be:	6060      	str	r0, [r4, #4]
 80049c0:	6863      	ldr	r3, [r4, #4]
 80049c2:	6123      	str	r3, [r4, #16]
 80049c4:	2300      	movs	r3, #0
 80049c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ca:	e7a8      	b.n	800491e <_printf_i+0x152>
 80049cc:	462a      	mov	r2, r5
 80049ce:	4649      	mov	r1, r9
 80049d0:	4640      	mov	r0, r8
 80049d2:	6923      	ldr	r3, [r4, #16]
 80049d4:	47d0      	blx	sl
 80049d6:	3001      	adds	r0, #1
 80049d8:	d0ab      	beq.n	8004932 <_printf_i+0x166>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	079b      	lsls	r3, r3, #30
 80049de:	d413      	bmi.n	8004a08 <_printf_i+0x23c>
 80049e0:	68e0      	ldr	r0, [r4, #12]
 80049e2:	9b03      	ldr	r3, [sp, #12]
 80049e4:	4298      	cmp	r0, r3
 80049e6:	bfb8      	it	lt
 80049e8:	4618      	movlt	r0, r3
 80049ea:	e7a4      	b.n	8004936 <_printf_i+0x16a>
 80049ec:	2301      	movs	r3, #1
 80049ee:	4632      	mov	r2, r6
 80049f0:	4649      	mov	r1, r9
 80049f2:	4640      	mov	r0, r8
 80049f4:	47d0      	blx	sl
 80049f6:	3001      	adds	r0, #1
 80049f8:	d09b      	beq.n	8004932 <_printf_i+0x166>
 80049fa:	3501      	adds	r5, #1
 80049fc:	68e3      	ldr	r3, [r4, #12]
 80049fe:	9903      	ldr	r1, [sp, #12]
 8004a00:	1a5b      	subs	r3, r3, r1
 8004a02:	42ab      	cmp	r3, r5
 8004a04:	dcf2      	bgt.n	80049ec <_printf_i+0x220>
 8004a06:	e7eb      	b.n	80049e0 <_printf_i+0x214>
 8004a08:	2500      	movs	r5, #0
 8004a0a:	f104 0619 	add.w	r6, r4, #25
 8004a0e:	e7f5      	b.n	80049fc <_printf_i+0x230>
 8004a10:	08004b99 	.word	0x08004b99
 8004a14:	08004baa 	.word	0x08004baa

08004a18 <__retarget_lock_acquire_recursive>:
 8004a18:	4770      	bx	lr

08004a1a <__retarget_lock_release_recursive>:
 8004a1a:	4770      	bx	lr

08004a1c <memchr>:
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	b510      	push	{r4, lr}
 8004a20:	b2c9      	uxtb	r1, r1
 8004a22:	4402      	add	r2, r0
 8004a24:	4293      	cmp	r3, r2
 8004a26:	4618      	mov	r0, r3
 8004a28:	d101      	bne.n	8004a2e <memchr+0x12>
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	e003      	b.n	8004a36 <memchr+0x1a>
 8004a2e:	7804      	ldrb	r4, [r0, #0]
 8004a30:	3301      	adds	r3, #1
 8004a32:	428c      	cmp	r4, r1
 8004a34:	d1f6      	bne.n	8004a24 <memchr+0x8>
 8004a36:	bd10      	pop	{r4, pc}

08004a38 <memmove>:
 8004a38:	4288      	cmp	r0, r1
 8004a3a:	b510      	push	{r4, lr}
 8004a3c:	eb01 0402 	add.w	r4, r1, r2
 8004a40:	d902      	bls.n	8004a48 <memmove+0x10>
 8004a42:	4284      	cmp	r4, r0
 8004a44:	4623      	mov	r3, r4
 8004a46:	d807      	bhi.n	8004a58 <memmove+0x20>
 8004a48:	1e43      	subs	r3, r0, #1
 8004a4a:	42a1      	cmp	r1, r4
 8004a4c:	d008      	beq.n	8004a60 <memmove+0x28>
 8004a4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a56:	e7f8      	b.n	8004a4a <memmove+0x12>
 8004a58:	4601      	mov	r1, r0
 8004a5a:	4402      	add	r2, r0
 8004a5c:	428a      	cmp	r2, r1
 8004a5e:	d100      	bne.n	8004a62 <memmove+0x2a>
 8004a60:	bd10      	pop	{r4, pc}
 8004a62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a6a:	e7f7      	b.n	8004a5c <memmove+0x24>

08004a6c <_realloc_r>:
 8004a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a70:	4680      	mov	r8, r0
 8004a72:	4614      	mov	r4, r2
 8004a74:	460e      	mov	r6, r1
 8004a76:	b921      	cbnz	r1, 8004a82 <_realloc_r+0x16>
 8004a78:	4611      	mov	r1, r2
 8004a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a7e:	f7ff bc29 	b.w	80042d4 <_malloc_r>
 8004a82:	b92a      	cbnz	r2, 8004a90 <_realloc_r+0x24>
 8004a84:	f7ff fbbe 	bl	8004204 <_free_r>
 8004a88:	4625      	mov	r5, r4
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a90:	f000 f81b 	bl	8004aca <_malloc_usable_size_r>
 8004a94:	4284      	cmp	r4, r0
 8004a96:	4607      	mov	r7, r0
 8004a98:	d802      	bhi.n	8004aa0 <_realloc_r+0x34>
 8004a9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a9e:	d812      	bhi.n	8004ac6 <_realloc_r+0x5a>
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	4640      	mov	r0, r8
 8004aa4:	f7ff fc16 	bl	80042d4 <_malloc_r>
 8004aa8:	4605      	mov	r5, r0
 8004aaa:	2800      	cmp	r0, #0
 8004aac:	d0ed      	beq.n	8004a8a <_realloc_r+0x1e>
 8004aae:	42bc      	cmp	r4, r7
 8004ab0:	4622      	mov	r2, r4
 8004ab2:	4631      	mov	r1, r6
 8004ab4:	bf28      	it	cs
 8004ab6:	463a      	movcs	r2, r7
 8004ab8:	f7ff fb8e 	bl	80041d8 <memcpy>
 8004abc:	4631      	mov	r1, r6
 8004abe:	4640      	mov	r0, r8
 8004ac0:	f7ff fba0 	bl	8004204 <_free_r>
 8004ac4:	e7e1      	b.n	8004a8a <_realloc_r+0x1e>
 8004ac6:	4635      	mov	r5, r6
 8004ac8:	e7df      	b.n	8004a8a <_realloc_r+0x1e>

08004aca <_malloc_usable_size_r>:
 8004aca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ace:	1f18      	subs	r0, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	bfbc      	itt	lt
 8004ad4:	580b      	ldrlt	r3, [r1, r0]
 8004ad6:	18c0      	addlt	r0, r0, r3
 8004ad8:	4770      	bx	lr
	...

08004adc <_init>:
 8004adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ade:	bf00      	nop
 8004ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae2:	bc08      	pop	{r3}
 8004ae4:	469e      	mov	lr, r3
 8004ae6:	4770      	bx	lr

08004ae8 <_fini>:
 8004ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aea:	bf00      	nop
 8004aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aee:	bc08      	pop	{r3}
 8004af0:	469e      	mov	lr, r3
 8004af2:	4770      	bx	lr
