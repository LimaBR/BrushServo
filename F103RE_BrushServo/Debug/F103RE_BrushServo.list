
F103RE_BrushServo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b68  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004d4c  08004d4c  00014d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e24  08004e24  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004e24  08004e24  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e24  08004e24  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004e24  08004e24  00014e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004e2c  08004e2c  00014e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000070  08004ea4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08004ea4  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd9f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba3  00000000  00000000  0002fe38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  000329e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df8  00000000  00000000  000338f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df91  00000000  00000000  000346e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001140e  00000000  00000000  00052679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1f32  00000000  00000000  00063a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001059b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043d4  00000000  00000000  00105a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08004d34 	.word	0x08004d34

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08004d34 	.word	0x08004d34

08000224 <_ZN8BTS7960BC1EPVmS1_P12GPIO_TypeDeftS3_t>:
 *      Author: Gabriel
 */

#include "BTS7960B.hpp"

BTS7960B::BTS7960B(__IO uint32_t* ina_ccr, __IO uint32_t* inb_ccr, GPIO_TypeDef* inha_gpio_port, uint16_t inha_gpio_pin, GPIO_TypeDef* inhb_gpio_port, uint16_t inhb_gpio_pin)
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
 8000230:	603b      	str	r3, [r7, #0]
 : ina(ina_ccr), inb(inb_ccr), inha_port(inha_gpio_port), inha_pin(inha_gpio_pin), inhb_port(inhb_gpio_port), inhb_pin(inhb_gpio_pin){
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	8b3a      	ldrh	r2, [r7, #24]
 8000248:	819a      	strh	r2, [r3, #12]
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	69fa      	ldr	r2, [r7, #28]
 800024e:	611a      	str	r2, [r3, #16]
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	8c3a      	ldrh	r2, [r7, #32]
 8000254:	829a      	strh	r2, [r3, #20]

}
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	4618      	mov	r0, r3
 800025a:	3714      	adds	r7, #20
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr

08000262 <_ZN8BTS7960B8setSpeedEl>:

void BTS7960B::setSpeed(int32_t speed){
 8000262:	b580      	push	{r7, lr}
 8000264:	b082      	sub	sp, #8
 8000266:	af00      	add	r7, sp, #0
 8000268:	6078      	str	r0, [r7, #4]
 800026a:	6039      	str	r1, [r7, #0]

	if(speed > 0){
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	2b00      	cmp	r3, #0
 8000270:	dd18      	ble.n	80002a4 <_ZN8BTS7960B8setSpeedEl+0x42>
		HAL_GPIO_WritePin(inha_port, inha_pin, GPIO_PIN_SET);
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	6898      	ldr	r0, [r3, #8]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	899b      	ldrh	r3, [r3, #12]
 800027a:	2201      	movs	r2, #1
 800027c:	4619      	mov	r1, r3
 800027e:	f001 ffdd 	bl	800223c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(inhb_port, inhb_pin, GPIO_PIN_SET);
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	6918      	ldr	r0, [r3, #16]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	8a9b      	ldrh	r3, [r3, #20]
 800028a:	2201      	movs	r2, #1
 800028c:	4619      	mov	r1, r3
 800028e:	f001 ffd5 	bl	800223c <HAL_GPIO_WritePin>
		*ina = speed;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	683a      	ldr	r2, [r7, #0]
 8000298:	601a      	str	r2, [r3, #0]
		*inb = 0;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
		*inb = -speed;
	}else{
		HAL_GPIO_WritePin(inha_port, inha_pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(inhb_port, inhb_pin, GPIO_PIN_RESET);
	}
}
 80002a2:	e02c      	b.n	80002fe <_ZN8BTS7960B8setSpeedEl+0x9c>
	}else if(speed < 0){
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	da19      	bge.n	80002de <_ZN8BTS7960B8setSpeedEl+0x7c>
		HAL_GPIO_WritePin(inha_port, inha_pin, GPIO_PIN_SET);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	6898      	ldr	r0, [r3, #8]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	899b      	ldrh	r3, [r3, #12]
 80002b2:	2201      	movs	r2, #1
 80002b4:	4619      	mov	r1, r3
 80002b6:	f001 ffc1 	bl	800223c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(inhb_port, inhb_pin, GPIO_PIN_SET);
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	6918      	ldr	r0, [r3, #16]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	8a9b      	ldrh	r3, [r3, #20]
 80002c2:	2201      	movs	r2, #1
 80002c4:	4619      	mov	r1, r3
 80002c6:	f001 ffb9 	bl	800223c <HAL_GPIO_WritePin>
		*ina = 0;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
		*inb = -speed;
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	425a      	negs	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	601a      	str	r2, [r3, #0]
}
 80002dc:	e00f      	b.n	80002fe <_ZN8BTS7960B8setSpeedEl+0x9c>
		HAL_GPIO_WritePin(inha_port, inha_pin, GPIO_PIN_RESET);
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6898      	ldr	r0, [r3, #8]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	899b      	ldrh	r3, [r3, #12]
 80002e6:	2200      	movs	r2, #0
 80002e8:	4619      	mov	r1, r3
 80002ea:	f001 ffa7 	bl	800223c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(inhb_port, inhb_pin, GPIO_PIN_RESET);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	6918      	ldr	r0, [r3, #16]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	8a9b      	ldrh	r3, [r3, #20]
 80002f6:	2200      	movs	r2, #0
 80002f8:	4619      	mov	r1, r3
 80002fa:	f001 ff9f 	bl	800223c <HAL_GPIO_WritePin>
}
 80002fe:	bf00      	nop
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}

08000306 <_ZN11SerialDebugC1EP20__UART_HandleTypeDef>:
 *      Author: Gabriel
 */

#include "SerialDebug.hpp"

SerialDebug::SerialDebug(UART_HandleTypeDef* huartptr)
 8000306:	b590      	push	{r4, r7, lr}
 8000308:	b083      	sub	sp, #12
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
 800030e:	6039      	str	r1, [r7, #0]
: huartptr(huartptr)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	683a      	ldr	r2, [r7, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2203      	movs	r2, #3
 800031a:	649a      	str	r2, [r3, #72]	; 0x48
{
	fifo = new StaticFIFO(8);
 800031c:	2014      	movs	r0, #20
 800031e:	f003 ffe3 	bl	80042e8 <_Znwj>
 8000322:	4603      	mov	r3, r0
 8000324:	461c      	mov	r4, r3
 8000326:	2108      	movs	r1, #8
 8000328:	4620      	mov	r0, r4
 800032a:	f000 f8d7 	bl	80004dc <_ZN10StaticFIFOC1Em>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	601c      	str	r4, [r3, #0]
}
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4618      	mov	r0, r3
 8000336:	370c      	adds	r7, #12
 8000338:	46bd      	mov	sp, r7
 800033a:	bd90      	pop	{r4, r7, pc}

0800033c <_ZN11SerialDebugD1Ev>:

SerialDebug::~SerialDebug(){
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	delete fifo;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d004      	beq.n	8000356 <_ZN11SerialDebugD1Ev+0x1a>
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	3204      	adds	r2, #4
 8000350:	6812      	ldr	r2, [r2, #0]
 8000352:	4618      	mov	r0, r3
 8000354:	4790      	blx	r2
}
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4618      	mov	r0, r3
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <_ZN11SerialDebug8sendNextEv>:

void SerialDebug::sendNext(){
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]

}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr

08000372 <_ZN11SerialDebug8setLevelEm>:

void SerialDebug::setLevel(uint32_t level)
{
 8000372:	b480      	push	{r7}
 8000374:	b083      	sub	sp, #12
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
 800037a:	6039      	str	r1, [r7, #0]
	debugLevel = level;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	683a      	ldr	r2, [r7, #0]
 8000380:	649a      	str	r2, [r3, #72]	; 0x48
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <_ZN11SerialDebug5debugEPKc>:

void SerialDebug::debug(const char* data){
 800038c:	b590      	push	{r4, r7, lr}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
	if (debugLevel <= DEBUG_LEVEL_DEBUG){
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800039a:	2b00      	cmp	r3, #0
 800039c:	d117      	bne.n	80003ce <_ZN11SerialDebug5debugEPKc+0x42>
		int numChars;
		//while (huartptr->gState != HAL_UART_STATE_READY);	//Trava se estiver ocupado durante um interrupt que manda debug
		numChars = sprintf((char*)uartBuf, "[%13lu] DBG: %.42s\r\n", HAL_GetTick(), data);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	f103 0408 	add.w	r4, r3, #8
 80003a4:	f000 fdd4 	bl	8000f50 <HAL_GetTick>
 80003a8:	4602      	mov	r2, r0
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	490a      	ldr	r1, [pc, #40]	; (80003d8 <_ZN11SerialDebug5debugEPKc+0x4c>)
 80003ae:	4620      	mov	r0, r4
 80003b0:	f004 f940 	bl	8004634 <siprintf>
 80003b4:	60f8      	str	r0, [r7, #12]
		if(numChars > 0){
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	dd08      	ble.n	80003ce <_ZN11SerialDebug5debugEPKc+0x42>
			HAL_UART_Transmit_DMA(huartptr, uartBuf, (uint16_t)numChars);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	6858      	ldr	r0, [r3, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3308      	adds	r3, #8
 80003c4:	68fa      	ldr	r2, [r7, #12]
 80003c6:	b292      	uxth	r2, r2
 80003c8:	4619      	mov	r1, r3
 80003ca:	f003 fadb 	bl	8003984 <HAL_UART_Transmit_DMA>
		}
	}
}
 80003ce:	bf00      	nop
 80003d0:	3714      	adds	r7, #20
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd90      	pop	{r4, r7, pc}
 80003d6:	bf00      	nop
 80003d8:	08004d4c 	.word	0x08004d4c

080003dc <HAL_UART_TxCpltCallback>:
extern UART_HandleTypeDef huart1;

SerialDebug debug(&huart1);
BTS7960B motor0(&(TIM3->CCR1), &(TIM3->CCR2), GPIOA, GPIO_PIN_4, GPIOA, GPIO_PIN_5);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart){
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	debug.sendNext();
 80003e4:	4803      	ldr	r0, [pc, #12]	; (80003f4 <HAL_UART_TxCpltCallback+0x18>)
 80003e6:	f7ff ffbb 	bl	8000360 <_ZN11SerialDebug8sendNextEv>
}
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	2000008c 	.word	0x2000008c

080003f8 <Start>:

void Start(){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	debug.setLevel(SerialDebug::DEBUG_LEVEL_DEBUG);
 80003fc:	2100      	movs	r1, #0
 80003fe:	480e      	ldr	r0, [pc, #56]	; (8000438 <Start+0x40>)
 8000400:	f7ff ffb7 	bl	8000372 <_ZN11SerialDebug8setLevelEm>
	while(true){
		debug.debug("512");
 8000404:	490d      	ldr	r1, [pc, #52]	; (800043c <Start+0x44>)
 8000406:	480c      	ldr	r0, [pc, #48]	; (8000438 <Start+0x40>)
 8000408:	f7ff ffc0 	bl	800038c <_ZN11SerialDebug5debugEPKc>
		motor0.setSpeed(512);
 800040c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000410:	480b      	ldr	r0, [pc, #44]	; (8000440 <Start+0x48>)
 8000412:	f7ff ff26 	bl	8000262 <_ZN8BTS7960B8setSpeedEl>
		HAL_Delay(500);
 8000416:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800041a:	f000 fda3 	bl	8000f64 <HAL_Delay>
		debug.debug("-512");
 800041e:	4909      	ldr	r1, [pc, #36]	; (8000444 <Start+0x4c>)
 8000420:	4805      	ldr	r0, [pc, #20]	; (8000438 <Start+0x40>)
 8000422:	f7ff ffb3 	bl	800038c <_ZN11SerialDebug5debugEPKc>
		motor0.setSpeed(-512);
 8000426:	4908      	ldr	r1, [pc, #32]	; (8000448 <Start+0x50>)
 8000428:	4805      	ldr	r0, [pc, #20]	; (8000440 <Start+0x48>)
 800042a:	f7ff ff1a 	bl	8000262 <_ZN8BTS7960B8setSpeedEl>
		HAL_Delay(500);
 800042e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000432:	f000 fd97 	bl	8000f64 <HAL_Delay>
		debug.debug("512");
 8000436:	e7e5      	b.n	8000404 <Start+0xc>
 8000438:	2000008c 	.word	0x2000008c
 800043c:	08004dac 	.word	0x08004dac
 8000440:	200000d8 	.word	0x200000d8
 8000444:	08004db0 	.word	0x08004db0
 8000448:	fffffe00 	.word	0xfffffe00

0800044c <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 800044c:	b580      	push	{r7, lr}
 800044e:	b086      	sub	sp, #24
 8000450:	af04      	add	r7, sp, #16
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2b01      	cmp	r3, #1
 800045a:	d114      	bne.n	8000486 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000462:	4293      	cmp	r3, r2
 8000464:	d10f      	bne.n	8000486 <_Z41__static_initialization_and_destruction_0ii+0x3a>
SerialDebug debug(&huart1);
 8000466:	490f      	ldr	r1, [pc, #60]	; (80004a4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8000468:	480f      	ldr	r0, [pc, #60]	; (80004a8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800046a:	f7ff ff4c 	bl	8000306 <_ZN11SerialDebugC1EP20__UART_HandleTypeDef>
BTS7960B motor0(&(TIM3->CCR1), &(TIM3->CCR2), GPIOA, GPIO_PIN_4, GPIOA, GPIO_PIN_5);
 800046e:	2320      	movs	r3, #32
 8000470:	9302      	str	r3, [sp, #8]
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000474:	9301      	str	r3, [sp, #4]
 8000476:	2310      	movs	r3, #16
 8000478:	9300      	str	r3, [sp, #0]
 800047a:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800047c:	4a0c      	ldr	r2, [pc, #48]	; (80004b0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800047e:	490d      	ldr	r1, [pc, #52]	; (80004b4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000480:	480d      	ldr	r0, [pc, #52]	; (80004b8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000482:	f7ff fecf 	bl	8000224 <_ZN8BTS7960BC1EPVmS1_P12GPIO_TypeDeftS3_t>
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d107      	bne.n	800049c <_Z41__static_initialization_and_destruction_0ii+0x50>
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000492:	4293      	cmp	r3, r2
 8000494:	d102      	bne.n	800049c <_Z41__static_initialization_and_destruction_0ii+0x50>
SerialDebug debug(&huart1);
 8000496:	4804      	ldr	r0, [pc, #16]	; (80004a8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000498:	f7ff ff50 	bl	800033c <_ZN11SerialDebugD1Ev>
}
 800049c:	bf00      	nop
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	200001b0 	.word	0x200001b0
 80004a8:	2000008c 	.word	0x2000008c
 80004ac:	40010800 	.word	0x40010800
 80004b0:	40000438 	.word	0x40000438
 80004b4:	40000434 	.word	0x40000434
 80004b8:	200000d8 	.word	0x200000d8

080004bc <_GLOBAL__sub_I_debug>:
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
 80004c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80004c4:	2001      	movs	r0, #1
 80004c6:	f7ff ffc1 	bl	800044c <_Z41__static_initialization_and_destruction_0ii>
 80004ca:	bd80      	pop	{r7, pc}

080004cc <_GLOBAL__sub_D_debug>:
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80004d4:	2000      	movs	r0, #0
 80004d6:	f7ff ffb9 	bl	800044c <_Z41__static_initialization_and_destruction_0ii>
 80004da:	bd80      	pop	{r7, pc}

080004dc <_ZN10StaticFIFOC1Em>:

#include "StaticFIFO.hpp"

#include <cstring>

StaticFIFO::StaticFIFO(uint32_t fifoSize) : fifoSize(fifoSize){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
 80004e6:	4a11      	ldr	r2, [pc, #68]	; (800052c <_ZN10StaticFIFOC1Em+0x50>)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	683a      	ldr	r2, [r7, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2200      	movs	r2, #0
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
	fifo = new StringContainer[fifoSize];
 80004fe:	683a      	ldr	r2, [r7, #0]
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <_ZN10StaticFIFOC1Em+0x54>)
 8000502:	429a      	cmp	r2, r3
 8000504:	d804      	bhi.n	8000510 <_ZN10StaticFIFOC1Em+0x34>
 8000506:	4613      	mov	r3, r2
 8000508:	011b      	lsls	r3, r3, #4
 800050a:	4413      	add	r3, r2
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	e001      	b.n	8000514 <_ZN10StaticFIFOC1Em+0x38>
 8000510:	f04f 33ff 	mov.w	r3, #4294967295
 8000514:	4618      	mov	r0, r3
 8000516:	f003 fef8 	bl	800430a <_Znaj>
 800051a:	4603      	mov	r3, r0
 800051c:	461a      	mov	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	609a      	str	r2, [r3, #8]
}
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4618      	mov	r0, r3
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	08004dd0 	.word	0x08004dd0
 8000530:	01e1e1e1 	.word	0x01e1e1e1

08000534 <_ZN10StaticFIFOD1Ev>:

StaticFIFO::~StaticFIFO() {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	4a07      	ldr	r2, [pc, #28]	; (800055c <_ZN10StaticFIFOD1Ev+0x28>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	601a      	str	r2, [r3, #0]
	delete fifo;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d003      	beq.n	8000552 <_ZN10StaticFIFOD1Ev+0x1e>
 800054a:	2144      	movs	r1, #68	; 0x44
 800054c:	4618      	mov	r0, r3
 800054e:	f003 fec9 	bl	80042e4 <_ZdlPvj>
}
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4618      	mov	r0, r3
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	08004dd0 	.word	0x08004dd0

08000560 <_ZN10StaticFIFOD0Ev>:
StaticFIFO::~StaticFIFO() {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
}
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f7ff ffe3 	bl	8000534 <_ZN10StaticFIFOD1Ev>
 800056e:	2114      	movs	r1, #20
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f003 feb7 	bl	80042e4 <_ZdlPvj>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fc8c 	bl	8000ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f81e 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f9c4 	bl	8000918 <MX_GPIO_Init>
  MX_DMA_Init();
 8000590:	f000 f9a4 	bl	80008dc <MX_DMA_Init>
  MX_TIM3_Init();
 8000594:	f000 f8b4 	bl	8000700 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000598:	f000 f916 	bl	80007c8 <MX_TIM6_Init>
  MX_ADC1_Init();
 800059c:	f000 f872 	bl	8000684 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80005a0:	f000 f948 	bl	8000834 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80005a4:	f000 f970 	bl	8000888 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 80005a8:	4806      	ldr	r0, [pc, #24]	; (80005c4 <main+0x44>)
 80005aa:	f002 fb7f 	bl	8002cac <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005ae:	2100      	movs	r1, #0
 80005b0:	4804      	ldr	r0, [pc, #16]	; (80005c4 <main+0x44>)
 80005b2:	f002 fc23 	bl	8002dfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80005b6:	2104      	movs	r1, #4
 80005b8:	4802      	ldr	r0, [pc, #8]	; (80005c4 <main+0x44>)
 80005ba:	f002 fc1f 	bl	8002dfc <HAL_TIM_PWM_Start>
  Start();
 80005be:	f7ff ff1b 	bl	80003f8 <Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <main+0x42>
 80005c4:	20000120 	.word	0x20000120

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b096      	sub	sp, #88	; 0x58
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005d2:	2228      	movs	r2, #40	; 0x28
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 fef4 	bl	80043c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 031c 	add.w	r3, r7, #28
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]
 80005fa:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000604:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060a:	2301      	movs	r3, #1
 800060c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000616:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000618:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800061c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000622:	4618      	mov	r0, r3
 8000624:	f001 fe22 	bl	800226c <HAL_RCC_OscConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800062e:	f000 f9c9 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	230f      	movs	r3, #15
 8000634:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000636:	2302      	movs	r3, #2
 8000638:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000642:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	2102      	movs	r1, #2
 800064e:	4618      	mov	r0, r3
 8000650:	f002 f88e 	bl	8002770 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800065a:	f000 f9b3 	bl	80009c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800065e:	2302      	movs	r3, #2
 8000660:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000666:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	4618      	mov	r0, r3
 800066c:	f002 fa18 	bl	8002aa0 <HAL_RCCEx_PeriphCLKConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000676:	f000 f9a5 	bl	80009c4 <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3758      	adds	r7, #88	; 0x58
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <MX_ADC1_Init+0x74>)
 8000696:	4a19      	ldr	r2, [pc, #100]	; (80006fc <MX_ADC1_Init+0x78>)
 8000698:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_ADC1_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_ADC1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_ADC1_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_ADC1_Init+0x74>)
 80006ae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80006b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b4:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_ADC1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_ADC1_Init+0x74>)
 80006bc:	2201      	movs	r2, #1
 80006be:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <MX_ADC1_Init+0x74>)
 80006c2:	f000 fc73 	bl	8000fac <HAL_ADC_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80006cc:	f000 f97a 	bl	80009c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006d0:	230a      	movs	r3, #10
 80006d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_ADC1_Init+0x74>)
 80006e2:	f000 fd4d 	bl	8001180 <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80006ec:	f000 f96a 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200000f0 	.word	0x200000f0
 80006fc:	40012400 	.word	0x40012400

08000700 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]
 800071e:	615a      	str	r2, [r3, #20]
 8000720:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000722:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <MX_TIM3_Init+0xc0>)
 8000724:	4a27      	ldr	r2, [pc, #156]	; (80007c4 <MX_TIM3_Init+0xc4>)
 8000726:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6;
 8000728:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <MX_TIM3_Init+0xc0>)
 800072a:	2206      	movs	r2, #6
 800072c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072e:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <MX_TIM3_Init+0xc0>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2047;
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <MX_TIM3_Init+0xc0>)
 8000736:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800073a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073c:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <MX_TIM3_Init+0xc0>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000742:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <MX_TIM3_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000748:	481d      	ldr	r0, [pc, #116]	; (80007c0 <MX_TIM3_Init+0xc0>)
 800074a:	f002 fb07 	bl	8002d5c <HAL_TIM_PWM_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000754:	f000 f936 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000760:	f107 0320 	add.w	r3, r7, #32
 8000764:	4619      	mov	r1, r3
 8000766:	4816      	ldr	r0, [pc, #88]	; (80007c0 <MX_TIM3_Init+0xc0>)
 8000768:	f003 f840 	bl	80037ec <HAL_TIMEx_MasterConfigSynchronization>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000772:	f000 f927 	bl	80009c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000776:	2360      	movs	r3, #96	; 0x60
 8000778:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2200      	movs	r2, #0
 800078a:	4619      	mov	r1, r3
 800078c:	480c      	ldr	r0, [pc, #48]	; (80007c0 <MX_TIM3_Init+0xc0>)
 800078e:	f002 fcf7 	bl	8003180 <HAL_TIM_PWM_ConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000798:	f000 f914 	bl	80009c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2204      	movs	r2, #4
 80007a0:	4619      	mov	r1, r3
 80007a2:	4807      	ldr	r0, [pc, #28]	; (80007c0 <MX_TIM3_Init+0xc0>)
 80007a4:	f002 fcec 	bl	8003180 <HAL_TIM_PWM_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80007ae:	f000 f909 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007b2:	4803      	ldr	r0, [pc, #12]	; (80007c0 <MX_TIM3_Init+0xc0>)
 80007b4:	f000 f9be 	bl	8000b34 <HAL_TIM_MspPostInit>

}
 80007b8:	bf00      	nop
 80007ba:	3728      	adds	r7, #40	; 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000120 	.word	0x20000120
 80007c4:	40000400 	.word	0x40000400

080007c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ce:	463b      	mov	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_TIM6_Init+0x64>)
 80007d8:	4a15      	ldr	r2, [pc, #84]	; (8000830 <MX_TIM6_Init+0x68>)
 80007da:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_TIM6_Init+0x64>)
 80007de:	2247      	movs	r2, #71	; 0x47
 80007e0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_TIM6_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_TIM6_Init+0x64>)
 80007ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007ee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f0:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_TIM6_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007f6:	480d      	ldr	r0, [pc, #52]	; (800082c <MX_TIM6_Init+0x64>)
 80007f8:	f002 fa08 	bl	8002c0c <HAL_TIM_Base_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000802:	f000 f8df 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <MX_TIM6_Init+0x64>)
 8000814:	f002 ffea 	bl	80037ec <HAL_TIMEx_MasterConfigSynchronization>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800081e:	f000 f8d1 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000168 	.word	0x20000168
 8000830:	40001000 	.word	0x40001000

08000834 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 800083a:	4a12      	ldr	r2, [pc, #72]	; (8000884 <MX_USART1_UART_Init+0x50>)
 800083c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 8000840:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 800086c:	f003 f83c 	bl	80038e8 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000876:	f000 f8a5 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200001b0 	.word	0x200001b0
 8000884:	40013800 	.word	0x40013800

08000888 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_USART3_UART_Init+0x4c>)
 800088e:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <MX_USART3_UART_Init+0x50>)
 8000890:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MX_USART3_UART_Init+0x4c>)
 8000894:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000898:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_USART3_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_USART3_UART_Init+0x4c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_USART3_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_USART3_UART_Init+0x4c>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_USART3_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_USART3_UART_Init+0x4c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_USART3_UART_Init+0x4c>)
 80008c0:	f003 f812 	bl	80038e8 <HAL_UART_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008ca:	f000 f87b 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200001f4 	.word	0x200001f4
 80008d8:	40004800 	.word	0x40004800

080008dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_DMA_Init+0x38>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <MX_DMA_Init+0x38>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_DMA_Init+0x38>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	200e      	movs	r0, #14
 8000900:	f000 fe4f 	bl	80015a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000904:	200e      	movs	r0, #14
 8000906:	f000 fe68 	bl	80015da <HAL_NVIC_EnableIRQ>

}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092c:	4b23      	ldr	r3, [pc, #140]	; (80009bc <MX_GPIO_Init+0xa4>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a22      	ldr	r2, [pc, #136]	; (80009bc <MX_GPIO_Init+0xa4>)
 8000932:	f043 0310 	orr.w	r3, r3, #16
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b20      	ldr	r3, [pc, #128]	; (80009bc <MX_GPIO_Init+0xa4>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0310 	and.w	r3, r3, #16
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000944:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <MX_GPIO_Init+0xa4>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a1c      	ldr	r2, [pc, #112]	; (80009bc <MX_GPIO_Init+0xa4>)
 800094a:	f043 0320 	orr.w	r3, r3, #32
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_GPIO_Init+0xa4>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0320 	and.w	r3, r3, #32
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_GPIO_Init+0xa4>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a16      	ldr	r2, [pc, #88]	; (80009bc <MX_GPIO_Init+0xa4>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_GPIO_Init+0xa4>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0304 	and.w	r3, r3, #4
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_GPIO_Init+0xa4>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a10      	ldr	r2, [pc, #64]	; (80009bc <MX_GPIO_Init+0xa4>)
 800097a:	f043 0308 	orr.w	r3, r3, #8
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_GPIO_Init+0xa4>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0308 	and.w	r3, r3, #8
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2130      	movs	r1, #48	; 0x30
 8000990:	480b      	ldr	r0, [pc, #44]	; (80009c0 <MX_GPIO_Init+0xa8>)
 8000992:	f001 fc53 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000996:	2330      	movs	r3, #48	; 0x30
 8000998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2302      	movs	r3, #2
 80009a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	4619      	mov	r1, r3
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_GPIO_Init+0xa8>)
 80009ae:	f001 fab1 	bl	8001f14 <HAL_GPIO_Init>

}
 80009b2:	bf00      	nop
 80009b4:	3720      	adds	r7, #32
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40010800 	.word	0x40010800

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>
	...

080009d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_MspInit+0x5c>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <HAL_MspInit+0x5c>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6193      	str	r3, [r2, #24]
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_MspInit+0x5c>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <HAL_MspInit+0x5c>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <HAL_MspInit+0x5c>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	61d3      	str	r3, [r2, #28]
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <HAL_MspInit+0x5c>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <HAL_MspInit+0x60>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <HAL_MspInit+0x60>)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	bf00      	nop
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010000 	.word	0x40010000

08000a34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <HAL_ADC_MspInit+0x6c>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d121      	bne.n	8000a98 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <HAL_ADC_MspInit+0x70>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <HAL_ADC_MspInit+0x70>)
 8000a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <HAL_ADC_MspInit+0x70>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <HAL_ADC_MspInit+0x70>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a0c      	ldr	r2, [pc, #48]	; (8000aa4 <HAL_ADC_MspInit+0x70>)
 8000a72:	f043 0310 	orr.w	r3, r3, #16
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_ADC_MspInit+0x70>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0310 	and.w	r3, r3, #16
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a84:	2301      	movs	r3, #1
 8000a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	4619      	mov	r1, r3
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <HAL_ADC_MspInit+0x74>)
 8000a94:	f001 fa3e 	bl	8001f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a98:	bf00      	nop
 8000a9a:	3720      	adds	r7, #32
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40012400 	.word	0x40012400
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40011000 	.word	0x40011000

08000aac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <HAL_TIM_PWM_MspInit+0x44>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d113      	bne.n	8000ae6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_TIM_PWM_MspInit+0x48>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <HAL_TIM_PWM_MspInit+0x48>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	61d3      	str	r3, [r2, #28]
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_TIM_PWM_MspInit+0x48>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	201d      	movs	r0, #29
 8000adc:	f000 fd61 	bl	80015a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ae0:	201d      	movs	r0, #29
 8000ae2:	f000 fd7a 	bl	80015da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40000400 	.word	0x40000400
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a09      	ldr	r2, [pc, #36]	; (8000b2c <HAL_TIM_Base_MspInit+0x34>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d10b      	bne.n	8000b22 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <HAL_TIM_Base_MspInit+0x38>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <HAL_TIM_Base_MspInit+0x38>)
 8000b10:	f043 0310 	orr.w	r3, r3, #16
 8000b14:	61d3      	str	r3, [r2, #28]
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_TIM_Base_MspInit+0x38>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	f003 0310 	and.w	r3, r3, #16
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	40001000 	.word	0x40001000
 8000b30:	40021000 	.word	0x40021000

08000b34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <HAL_TIM_MspPostInit+0x58>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d117      	bne.n	8000b84 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_TIM_MspPostInit+0x5c>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <HAL_TIM_MspPostInit+0x5c>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <HAL_TIM_MspPostInit+0x5c>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b6c:	23c0      	movs	r3, #192	; 0xc0
 8000b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <HAL_TIM_MspPostInit+0x60>)
 8000b80:	f001 f9c8 	bl	8001f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b84:	bf00      	nop
 8000b86:	3720      	adds	r7, #32
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40000400 	.word	0x40000400
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40010800 	.word	0x40010800

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0318 	add.w	r3, r7, #24
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a4f      	ldr	r2, [pc, #316]	; (8000cf0 <HAL_UART_MspInit+0x158>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d160      	bne.n	8000c7a <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bb8:	4b4e      	ldr	r3, [pc, #312]	; (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a4d      	ldr	r2, [pc, #308]	; (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000bbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b4b      	ldr	r3, [pc, #300]	; (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd0:	4b48      	ldr	r3, [pc, #288]	; (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a47      	ldr	r2, [pc, #284]	; (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b45      	ldr	r3, [pc, #276]	; (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 0318 	add.w	r3, r7, #24
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	483e      	ldr	r0, [pc, #248]	; (8000cf8 <HAL_UART_MspInit+0x160>)
 8000bfe:	f001 f989 	bl	8001f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 0318 	add.w	r3, r7, #24
 8000c14:	4619      	mov	r1, r3
 8000c16:	4838      	ldr	r0, [pc, #224]	; (8000cf8 <HAL_UART_MspInit+0x160>)
 8000c18:	f001 f97c 	bl	8001f14 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000c1c:	4b37      	ldr	r3, [pc, #220]	; (8000cfc <HAL_UART_MspInit+0x164>)
 8000c1e:	4a38      	ldr	r2, [pc, #224]	; (8000d00 <HAL_UART_MspInit+0x168>)
 8000c20:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c22:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <HAL_UART_MspInit+0x164>)
 8000c24:	2210      	movs	r2, #16
 8000c26:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c28:	4b34      	ldr	r3, [pc, #208]	; (8000cfc <HAL_UART_MspInit+0x164>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c2e:	4b33      	ldr	r3, [pc, #204]	; (8000cfc <HAL_UART_MspInit+0x164>)
 8000c30:	2280      	movs	r2, #128	; 0x80
 8000c32:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c34:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <HAL_UART_MspInit+0x164>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c3a:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <HAL_UART_MspInit+0x164>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000c40:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <HAL_UART_MspInit+0x164>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c46:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <HAL_UART_MspInit+0x164>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000c4c:	482b      	ldr	r0, [pc, #172]	; (8000cfc <HAL_UART_MspInit+0x164>)
 8000c4e:	f000 fcdf 	bl	8001610 <HAL_DMA_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000c58:	f7ff feb4 	bl	80009c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a27      	ldr	r2, [pc, #156]	; (8000cfc <HAL_UART_MspInit+0x164>)
 8000c60:	635a      	str	r2, [r3, #52]	; 0x34
 8000c62:	4a26      	ldr	r2, [pc, #152]	; (8000cfc <HAL_UART_MspInit+0x164>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2025      	movs	r0, #37	; 0x25
 8000c6e:	f000 fc98 	bl	80015a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c72:	2025      	movs	r0, #37	; 0x25
 8000c74:	f000 fcb1 	bl	80015da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c78:	e036      	b.n	8000ce8 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART3)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a21      	ldr	r2, [pc, #132]	; (8000d04 <HAL_UART_MspInit+0x16c>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d131      	bne.n	8000ce8 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c84:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000c86:	69db      	ldr	r3, [r3, #28]
 8000c88:	4a1a      	ldr	r2, [pc, #104]	; (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000c8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c8e:	61d3      	str	r3, [r2, #28]
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000c92:	69db      	ldr	r3, [r3, #28]
 8000c94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a14      	ldr	r2, [pc, #80]	; (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000ca2:	f043 0308 	orr.w	r3, r3, #8
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f003 0308 	and.w	r3, r3, #8
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f107 0318 	add.w	r3, r7, #24
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480f      	ldr	r0, [pc, #60]	; (8000d08 <HAL_UART_MspInit+0x170>)
 8000cca:	f001 f923 	bl	8001f14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 0318 	add.w	r3, r7, #24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4809      	ldr	r0, [pc, #36]	; (8000d08 <HAL_UART_MspInit+0x170>)
 8000ce4:	f001 f916 	bl	8001f14 <HAL_GPIO_Init>
}
 8000ce8:	bf00      	nop
 8000cea:	3728      	adds	r7, #40	; 0x28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40013800 	.word	0x40013800
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40010800 	.word	0x40010800
 8000cfc:	20000238 	.word	0x20000238
 8000d00:	40020044 	.word	0x40020044
 8000d04:	40004800 	.word	0x40004800
 8000d08:	40010c00 	.word	0x40010c00

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <NMI_Handler+0x4>

08000d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <MemManage_Handler+0x4>

08000d1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr

08000d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr

08000d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr

08000d4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d52:	f000 f8eb 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <DMA1_Channel4_IRQHandler+0x10>)
 8000d62:	f000 fe6d 	bl	8001a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000238 	.word	0x20000238

08000d70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <TIM3_IRQHandler+0x10>)
 8000d76:	f002 f8fb 	bl	8002f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000120 	.word	0x20000120

08000d84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <USART1_IRQHandler+0x10>)
 8000d8a:	f002 fe67 	bl	8003a5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200001b0 	.word	0x200001b0

08000d98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
	return 1;
 8000d9c:	2301      	movs	r3, #1
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr

08000da6 <_kill>:

int _kill(int pid, int sig)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
 8000dae:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000db0:	f003 fac0 	bl	8004334 <__errno>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2216      	movs	r2, #22
 8000db8:	601a      	str	r2, [r3, #0]
	return -1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <_exit>:

void _exit (int status)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000dce:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffe7 	bl	8000da6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000dd8:	e7fe      	b.n	8000dd8 <_exit+0x12>
	...

08000ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de4:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <_sbrk+0x5c>)
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <_sbrk+0x60>)
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <_sbrk+0x64>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <_sbrk+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d207      	bcs.n	8000e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e0c:	f003 fa92 	bl	8004334 <__errno>
 8000e10:	4603      	mov	r3, r0
 8000e12:	220c      	movs	r2, #12
 8000e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1a:	e009      	b.n	8000e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e22:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <_sbrk+0x64>)
 8000e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20010000 	.word	0x20010000
 8000e3c:	00000400 	.word	0x00000400
 8000e40:	2000027c 	.word	0x2000027c
 8000e44:	20000298 	.word	0x20000298

08000e48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e54:	480c      	ldr	r0, [pc, #48]	; (8000e88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e56:	490d      	ldr	r1, [pc, #52]	; (8000e8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e5c:	e002      	b.n	8000e64 <LoopCopyDataInit>

08000e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e62:	3304      	adds	r3, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e68:	d3f9      	bcc.n	8000e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e6c:	4c0a      	ldr	r4, [pc, #40]	; (8000e98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e70:	e001      	b.n	8000e76 <LoopFillZerobss>

08000e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e74:	3204      	adds	r2, #4

08000e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e78:	d3fb      	bcc.n	8000e72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e7a:	f7ff ffe5 	bl	8000e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f003 fa5f 	bl	8004340 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e82:	f7ff fb7d 	bl	8000580 <main>
  bx lr
 8000e86:	4770      	bx	lr
  ldr r0, =_sdata
 8000e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e8c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e90:	08004e34 	.word	0x08004e34
  ldr r2, =_sbss
 8000e94:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e98:	20000298 	.word	0x20000298

08000e9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e9c:	e7fe      	b.n	8000e9c <ADC1_2_IRQHandler>
	...

08000ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <HAL_Init+0x28>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <HAL_Init+0x28>)
 8000eaa:	f043 0310 	orr.w	r3, r3, #16
 8000eae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f000 fb6b 	bl	800158c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb6:	200f      	movs	r0, #15
 8000eb8:	f000 f808 	bl	8000ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ebc:	f7ff fd88 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40022000 	.word	0x40022000

08000ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_InitTick+0x54>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_InitTick+0x58>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 fb83 	bl	80015f6 <HAL_SYSTICK_Config>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00e      	b.n	8000f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	d80a      	bhi.n	8000f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f00:	2200      	movs	r2, #0
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f000 fb4b 	bl	80015a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f0c:	4a06      	ldr	r2, [pc, #24]	; (8000f28 <HAL_InitTick+0x5c>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e000      	b.n	8000f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000008 	.word	0x20000008
 8000f28:	20000004 	.word	0x20000004

08000f2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_IncTick+0x1c>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_IncTick+0x20>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a03      	ldr	r2, [pc, #12]	; (8000f4c <HAL_IncTick+0x20>)
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000280 	.word	0x20000280

08000f50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b02      	ldr	r3, [pc, #8]	; (8000f60 <HAL_GetTick+0x10>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	20000280 	.word	0x20000280

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff fff0 	bl	8000f50 <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_Delay+0x44>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f8a:	bf00      	nop
 8000f8c:	f7ff ffe0 	bl	8000f50 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008

08000fac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e0ce      	b.n	800116c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d109      	bne.n	8000ff0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff fd22 	bl	8000a34 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 f9bd 	bl	8001370 <ADC_ConversionStop_Disable>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffe:	f003 0310 	and.w	r3, r3, #16
 8001002:	2b00      	cmp	r3, #0
 8001004:	f040 80a9 	bne.w	800115a <HAL_ADC_Init+0x1ae>
 8001008:	7dfb      	ldrb	r3, [r7, #23]
 800100a:	2b00      	cmp	r3, #0
 800100c:	f040 80a5 	bne.w	800115a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001014:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001018:	f023 0302 	bic.w	r3, r3, #2
 800101c:	f043 0202 	orr.w	r2, r3, #2
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4951      	ldr	r1, [pc, #324]	; (8001174 <HAL_ADC_Init+0x1c8>)
 800102e:	428b      	cmp	r3, r1
 8001030:	d10a      	bne.n	8001048 <HAL_ADC_Init+0x9c>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800103a:	d002      	beq.n	8001042 <HAL_ADC_Init+0x96>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	e004      	b.n	800104c <HAL_ADC_Init+0xa0>
 8001042:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001046:	e001      	b.n	800104c <HAL_ADC_Init+0xa0>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800104c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	7b1b      	ldrb	r3, [r3, #12]
 8001052:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001054:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	4313      	orrs	r3, r2
 800105a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001064:	d003      	beq.n	800106e <HAL_ADC_Init+0xc2>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d102      	bne.n	8001074 <HAL_ADC_Init+0xc8>
 800106e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001072:	e000      	b.n	8001076 <HAL_ADC_Init+0xca>
 8001074:	2300      	movs	r3, #0
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7d1b      	ldrb	r3, [r3, #20]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d119      	bne.n	80010b8 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7b1b      	ldrb	r3, [r3, #12]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d109      	bne.n	80010a0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	3b01      	subs	r3, #1
 8001092:	035a      	lsls	r2, r3, #13
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	e00b      	b.n	80010b8 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a4:	f043 0220 	orr.w	r2, r3, #32
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b0:	f043 0201 	orr.w	r2, r3, #1
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	430a      	orrs	r2, r1
 80010ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	4b29      	ldr	r3, [pc, #164]	; (8001178 <HAL_ADC_Init+0x1cc>)
 80010d4:	4013      	ands	r3, r2
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	6812      	ldr	r2, [r2, #0]
 80010da:	68b9      	ldr	r1, [r7, #8]
 80010dc:	430b      	orrs	r3, r1
 80010de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010e8:	d003      	beq.n	80010f2 <HAL_ADC_Init+0x146>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d104      	bne.n	80010fc <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	051b      	lsls	r3, r3, #20
 80010fa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001102:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	430a      	orrs	r2, r1
 800110e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_ADC_Init+0x1d0>)
 8001118:	4013      	ands	r3, r2
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	429a      	cmp	r2, r3
 800111e:	d10b      	bne.n	8001138 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112a:	f023 0303 	bic.w	r3, r3, #3
 800112e:	f043 0201 	orr.w	r2, r3, #1
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001136:	e018      	b.n	800116a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113c:	f023 0312 	bic.w	r3, r3, #18
 8001140:	f043 0210 	orr.w	r2, r3, #16
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114c:	f043 0201 	orr.w	r2, r3, #1
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001158:	e007      	b.n	800116a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115e:	f043 0210 	orr.w	r2, r3, #16
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800116a:	7dfb      	ldrb	r3, [r7, #23]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40013c00 	.word	0x40013c00
 8001178:	ffe1f7fd 	.word	0xffe1f7fd
 800117c:	ff1f0efe 	.word	0xff1f0efe

08001180 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001198:	2b01      	cmp	r3, #1
 800119a:	d101      	bne.n	80011a0 <HAL_ADC_ConfigChannel+0x20>
 800119c:	2302      	movs	r3, #2
 800119e:	e0dc      	b.n	800135a <HAL_ADC_ConfigChannel+0x1da>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2201      	movs	r2, #1
 80011a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b06      	cmp	r3, #6
 80011ae:	d81c      	bhi.n	80011ea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	3b05      	subs	r3, #5
 80011c2:	221f      	movs	r2, #31
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	4019      	ands	r1, r3
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	6818      	ldr	r0, [r3, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	3b05      	subs	r3, #5
 80011dc:	fa00 f203 	lsl.w	r2, r0, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	430a      	orrs	r2, r1
 80011e6:	635a      	str	r2, [r3, #52]	; 0x34
 80011e8:	e03c      	b.n	8001264 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b0c      	cmp	r3, #12
 80011f0:	d81c      	bhi.n	800122c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	3b23      	subs	r3, #35	; 0x23
 8001204:	221f      	movs	r2, #31
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	4019      	ands	r1, r3
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	6818      	ldr	r0, [r3, #0]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	3b23      	subs	r3, #35	; 0x23
 800121e:	fa00 f203 	lsl.w	r2, r0, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	430a      	orrs	r2, r1
 8001228:	631a      	str	r2, [r3, #48]	; 0x30
 800122a:	e01b      	b.n	8001264 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	4613      	mov	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	3b41      	subs	r3, #65	; 0x41
 800123e:	221f      	movs	r2, #31
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	4019      	ands	r1, r3
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	6818      	ldr	r0, [r3, #0]
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	3b41      	subs	r3, #65	; 0x41
 8001258:	fa00 f203 	lsl.w	r2, r0, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	430a      	orrs	r2, r1
 8001262:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b09      	cmp	r3, #9
 800126a:	d91c      	bls.n	80012a6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68d9      	ldr	r1, [r3, #12]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4613      	mov	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	3b1e      	subs	r3, #30
 800127e:	2207      	movs	r2, #7
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	4019      	ands	r1, r3
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	6898      	ldr	r0, [r3, #8]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4613      	mov	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	4413      	add	r3, r2
 8001296:	3b1e      	subs	r3, #30
 8001298:	fa00 f203 	lsl.w	r2, r0, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	e019      	b.n	80012da <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6919      	ldr	r1, [r3, #16]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	2207      	movs	r2, #7
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	4019      	ands	r1, r3
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	6898      	ldr	r0, [r3, #8]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	fa00 f203 	lsl.w	r2, r0, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b10      	cmp	r3, #16
 80012e0:	d003      	beq.n	80012ea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012e6:	2b11      	cmp	r3, #17
 80012e8:	d132      	bne.n	8001350 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <HAL_ADC_ConfigChannel+0x1e4>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d125      	bne.n	8001340 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d126      	bne.n	8001350 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001310:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b10      	cmp	r3, #16
 8001318:	d11a      	bne.n	8001350 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_ADC_ConfigChannel+0x1e8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a13      	ldr	r2, [pc, #76]	; (800136c <HAL_ADC_ConfigChannel+0x1ec>)
 8001320:	fba2 2303 	umull	r2, r3, r2, r3
 8001324:	0c9a      	lsrs	r2, r3, #18
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001330:	e002      	b.n	8001338 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	3b01      	subs	r3, #1
 8001336:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f9      	bne.n	8001332 <HAL_ADC_ConfigChannel+0x1b2>
 800133e:	e007      	b.n	8001350 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001344:	f043 0220 	orr.w	r2, r3, #32
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001358:	7bfb      	ldrb	r3, [r7, #15]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	40012400 	.word	0x40012400
 8001368:	20000000 	.word	0x20000000
 800136c:	431bde83 	.word	0x431bde83

08001370 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b01      	cmp	r3, #1
 8001388:	d12e      	bne.n	80013e8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0201 	bic.w	r2, r2, #1
 8001398:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800139a:	f7ff fdd9 	bl	8000f50 <HAL_GetTick>
 800139e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013a0:	e01b      	b.n	80013da <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013a2:	f7ff fdd5 	bl	8000f50 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d914      	bls.n	80013da <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d10d      	bne.n	80013da <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c2:	f043 0210 	orr.w	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ce:	f043 0201 	orr.w	r2, r3, #1
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e007      	b.n	80013ea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d0dc      	beq.n	80013a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800141c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <__NVIC_GetPriorityGrouping+0x18>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f003 0307 	and.w	r3, r3, #7
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	2b00      	cmp	r3, #0
 8001468:	db0b      	blt.n	8001482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	f003 021f 	and.w	r2, r3, #31
 8001470:	4906      	ldr	r1, [pc, #24]	; (800148c <__NVIC_EnableIRQ+0x34>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	2001      	movs	r0, #1
 800147a:	fa00 f202 	lsl.w	r2, r0, r2
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	e000e100 	.word	0xe000e100

08001490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	db0a      	blt.n	80014ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	490c      	ldr	r1, [pc, #48]	; (80014dc <__NVIC_SetPriority+0x4c>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	0112      	lsls	r2, r2, #4
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	440b      	add	r3, r1
 80014b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b8:	e00a      	b.n	80014d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4908      	ldr	r1, [pc, #32]	; (80014e0 <__NVIC_SetPriority+0x50>)
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	3b04      	subs	r3, #4
 80014c8:	0112      	lsls	r2, r2, #4
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	440b      	add	r3, r1
 80014ce:	761a      	strb	r2, [r3, #24]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000e100 	.word	0xe000e100
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f1c3 0307 	rsb	r3, r3, #7
 80014fe:	2b04      	cmp	r3, #4
 8001500:	bf28      	it	cs
 8001502:	2304      	movcs	r3, #4
 8001504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3304      	adds	r3, #4
 800150a:	2b06      	cmp	r3, #6
 800150c:	d902      	bls.n	8001514 <NVIC_EncodePriority+0x30>
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3b03      	subs	r3, #3
 8001512:	e000      	b.n	8001516 <NVIC_EncodePriority+0x32>
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	f04f 32ff 	mov.w	r2, #4294967295
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	401a      	ands	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800152c:	f04f 31ff 	mov.w	r1, #4294967295
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa01 f303 	lsl.w	r3, r1, r3
 8001536:	43d9      	mvns	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	4313      	orrs	r3, r2
         );
}
 800153e:	4618      	mov	r0, r3
 8001540:	3724      	adds	r7, #36	; 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001558:	d301      	bcc.n	800155e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155a:	2301      	movs	r3, #1
 800155c:	e00f      	b.n	800157e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <SysTick_Config+0x40>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001566:	210f      	movs	r1, #15
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	f7ff ff90 	bl	8001490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <SysTick_Config+0x40>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <SysTick_Config+0x40>)
 8001578:	2207      	movs	r2, #7
 800157a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	e000e010 	.word	0xe000e010

0800158c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff2d 	bl	80013f4 <__NVIC_SetPriorityGrouping>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b4:	f7ff ff42 	bl	800143c <__NVIC_GetPriorityGrouping>
 80015b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	6978      	ldr	r0, [r7, #20]
 80015c0:	f7ff ff90 	bl	80014e4 <NVIC_EncodePriority>
 80015c4:	4602      	mov	r2, r0
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff5f 	bl	8001490 <__NVIC_SetPriority>
}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff35 	bl	8001458 <__NVIC_EnableIRQ>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffa2 	bl	8001548 <SysTick_Config>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e059      	b.n	80016da <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <HAL_DMA_Init+0xd4>)
 800162e:	429a      	cmp	r2, r3
 8001630:	d80f      	bhi.n	8001652 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <HAL_DMA_Init+0xd8>)
 800163a:	4413      	add	r3, r2
 800163c:	4a2b      	ldr	r2, [pc, #172]	; (80016ec <HAL_DMA_Init+0xdc>)
 800163e:	fba2 2303 	umull	r2, r3, r2, r3
 8001642:	091b      	lsrs	r3, r3, #4
 8001644:	009a      	lsls	r2, r3, #2
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a28      	ldr	r2, [pc, #160]	; (80016f0 <HAL_DMA_Init+0xe0>)
 800164e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001650:	e00e      	b.n	8001670 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	4b26      	ldr	r3, [pc, #152]	; (80016f4 <HAL_DMA_Init+0xe4>)
 800165a:	4413      	add	r3, r2
 800165c:	4a23      	ldr	r2, [pc, #140]	; (80016ec <HAL_DMA_Init+0xdc>)
 800165e:	fba2 2303 	umull	r2, r3, r2, r3
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	009a      	lsls	r2, r3, #2
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a22      	ldr	r2, [pc, #136]	; (80016f8 <HAL_DMA_Init+0xe8>)
 800166e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2202      	movs	r2, #2
 8001674:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001686:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800168a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001694:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	40020407 	.word	0x40020407
 80016e8:	bffdfff8 	.word	0xbffdfff8
 80016ec:	cccccccd 	.word	0xcccccccd
 80016f0:	40020000 	.word	0x40020000
 80016f4:	bffdfbf8 	.word	0xbffdfbf8
 80016f8:	40020400 	.word	0x40020400

080016fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
 8001708:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <HAL_DMA_Start_IT+0x20>
 8001718:	2302      	movs	r3, #2
 800171a:	e04a      	b.n	80017b2 <HAL_DMA_Start_IT+0xb6>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800172a:	2b01      	cmp	r3, #1
 800172c:	d13a      	bne.n	80017a4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2202      	movs	r2, #2
 8001732:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0201 	bic.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f000 fbb0 	bl	8001eb8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	2b00      	cmp	r3, #0
 800175e:	d008      	beq.n	8001772 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f042 020e 	orr.w	r2, r2, #14
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	e00f      	b.n	8001792 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0204 	bic.w	r2, r2, #4
 8001780:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f042 020a 	orr.w	r2, r2, #10
 8001790:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 0201 	orr.w	r2, r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	e005      	b.n	80017b0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80017ac:	2302      	movs	r3, #2
 80017ae:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b085      	sub	sp, #20
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d008      	beq.n	80017e2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2204      	movs	r2, #4
 80017d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e020      	b.n	8001824 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 020e 	bic.w	r2, r2, #14
 80017f0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0201 	bic.w	r2, r2, #1
 8001800:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180a:	2101      	movs	r1, #1
 800180c:	fa01 f202 	lsl.w	r2, r1, r2
 8001810:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001822:	7bfb      	ldrb	r3, [r7, #15]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
	...

08001830 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001842:	2b02      	cmp	r3, #2
 8001844:	d005      	beq.n	8001852 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2204      	movs	r2, #4
 800184a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
 8001850:	e0d6      	b.n	8001a00 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 020e 	bic.w	r2, r2, #14
 8001860:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0201 	bic.w	r2, r2, #1
 8001870:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	4b64      	ldr	r3, [pc, #400]	; (8001a0c <HAL_DMA_Abort_IT+0x1dc>)
 800187a:	429a      	cmp	r2, r3
 800187c:	d958      	bls.n	8001930 <HAL_DMA_Abort_IT+0x100>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a63      	ldr	r2, [pc, #396]	; (8001a10 <HAL_DMA_Abort_IT+0x1e0>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d04f      	beq.n	8001928 <HAL_DMA_Abort_IT+0xf8>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a61      	ldr	r2, [pc, #388]	; (8001a14 <HAL_DMA_Abort_IT+0x1e4>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d048      	beq.n	8001924 <HAL_DMA_Abort_IT+0xf4>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a60      	ldr	r2, [pc, #384]	; (8001a18 <HAL_DMA_Abort_IT+0x1e8>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d040      	beq.n	800191e <HAL_DMA_Abort_IT+0xee>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a5e      	ldr	r2, [pc, #376]	; (8001a1c <HAL_DMA_Abort_IT+0x1ec>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d038      	beq.n	8001918 <HAL_DMA_Abort_IT+0xe8>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a5d      	ldr	r2, [pc, #372]	; (8001a20 <HAL_DMA_Abort_IT+0x1f0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d030      	beq.n	8001912 <HAL_DMA_Abort_IT+0xe2>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a5b      	ldr	r2, [pc, #364]	; (8001a24 <HAL_DMA_Abort_IT+0x1f4>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d028      	beq.n	800190c <HAL_DMA_Abort_IT+0xdc>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a53      	ldr	r2, [pc, #332]	; (8001a0c <HAL_DMA_Abort_IT+0x1dc>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d020      	beq.n	8001906 <HAL_DMA_Abort_IT+0xd6>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a57      	ldr	r2, [pc, #348]	; (8001a28 <HAL_DMA_Abort_IT+0x1f8>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d019      	beq.n	8001902 <HAL_DMA_Abort_IT+0xd2>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a56      	ldr	r2, [pc, #344]	; (8001a2c <HAL_DMA_Abort_IT+0x1fc>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d012      	beq.n	80018fe <HAL_DMA_Abort_IT+0xce>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a54      	ldr	r2, [pc, #336]	; (8001a30 <HAL_DMA_Abort_IT+0x200>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00a      	beq.n	80018f8 <HAL_DMA_Abort_IT+0xc8>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a53      	ldr	r2, [pc, #332]	; (8001a34 <HAL_DMA_Abort_IT+0x204>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d102      	bne.n	80018f2 <HAL_DMA_Abort_IT+0xc2>
 80018ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f0:	e01b      	b.n	800192a <HAL_DMA_Abort_IT+0xfa>
 80018f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018f6:	e018      	b.n	800192a <HAL_DMA_Abort_IT+0xfa>
 80018f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018fc:	e015      	b.n	800192a <HAL_DMA_Abort_IT+0xfa>
 80018fe:	2310      	movs	r3, #16
 8001900:	e013      	b.n	800192a <HAL_DMA_Abort_IT+0xfa>
 8001902:	2301      	movs	r3, #1
 8001904:	e011      	b.n	800192a <HAL_DMA_Abort_IT+0xfa>
 8001906:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800190a:	e00e      	b.n	800192a <HAL_DMA_Abort_IT+0xfa>
 800190c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001910:	e00b      	b.n	800192a <HAL_DMA_Abort_IT+0xfa>
 8001912:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001916:	e008      	b.n	800192a <HAL_DMA_Abort_IT+0xfa>
 8001918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800191c:	e005      	b.n	800192a <HAL_DMA_Abort_IT+0xfa>
 800191e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001922:	e002      	b.n	800192a <HAL_DMA_Abort_IT+0xfa>
 8001924:	2310      	movs	r3, #16
 8001926:	e000      	b.n	800192a <HAL_DMA_Abort_IT+0xfa>
 8001928:	2301      	movs	r3, #1
 800192a:	4a43      	ldr	r2, [pc, #268]	; (8001a38 <HAL_DMA_Abort_IT+0x208>)
 800192c:	6053      	str	r3, [r2, #4]
 800192e:	e057      	b.n	80019e0 <HAL_DMA_Abort_IT+0x1b0>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a36      	ldr	r2, [pc, #216]	; (8001a10 <HAL_DMA_Abort_IT+0x1e0>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d04f      	beq.n	80019da <HAL_DMA_Abort_IT+0x1aa>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a35      	ldr	r2, [pc, #212]	; (8001a14 <HAL_DMA_Abort_IT+0x1e4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d048      	beq.n	80019d6 <HAL_DMA_Abort_IT+0x1a6>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a33      	ldr	r2, [pc, #204]	; (8001a18 <HAL_DMA_Abort_IT+0x1e8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d040      	beq.n	80019d0 <HAL_DMA_Abort_IT+0x1a0>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a32      	ldr	r2, [pc, #200]	; (8001a1c <HAL_DMA_Abort_IT+0x1ec>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d038      	beq.n	80019ca <HAL_DMA_Abort_IT+0x19a>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a30      	ldr	r2, [pc, #192]	; (8001a20 <HAL_DMA_Abort_IT+0x1f0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d030      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x194>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a2f      	ldr	r2, [pc, #188]	; (8001a24 <HAL_DMA_Abort_IT+0x1f4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d028      	beq.n	80019be <HAL_DMA_Abort_IT+0x18e>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a26      	ldr	r2, [pc, #152]	; (8001a0c <HAL_DMA_Abort_IT+0x1dc>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d020      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x188>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a2b      	ldr	r2, [pc, #172]	; (8001a28 <HAL_DMA_Abort_IT+0x1f8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d019      	beq.n	80019b4 <HAL_DMA_Abort_IT+0x184>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a29      	ldr	r2, [pc, #164]	; (8001a2c <HAL_DMA_Abort_IT+0x1fc>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d012      	beq.n	80019b0 <HAL_DMA_Abort_IT+0x180>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a28      	ldr	r2, [pc, #160]	; (8001a30 <HAL_DMA_Abort_IT+0x200>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d00a      	beq.n	80019aa <HAL_DMA_Abort_IT+0x17a>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a26      	ldr	r2, [pc, #152]	; (8001a34 <HAL_DMA_Abort_IT+0x204>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d102      	bne.n	80019a4 <HAL_DMA_Abort_IT+0x174>
 800199e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a2:	e01b      	b.n	80019dc <HAL_DMA_Abort_IT+0x1ac>
 80019a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019a8:	e018      	b.n	80019dc <HAL_DMA_Abort_IT+0x1ac>
 80019aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ae:	e015      	b.n	80019dc <HAL_DMA_Abort_IT+0x1ac>
 80019b0:	2310      	movs	r3, #16
 80019b2:	e013      	b.n	80019dc <HAL_DMA_Abort_IT+0x1ac>
 80019b4:	2301      	movs	r3, #1
 80019b6:	e011      	b.n	80019dc <HAL_DMA_Abort_IT+0x1ac>
 80019b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019bc:	e00e      	b.n	80019dc <HAL_DMA_Abort_IT+0x1ac>
 80019be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019c2:	e00b      	b.n	80019dc <HAL_DMA_Abort_IT+0x1ac>
 80019c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019c8:	e008      	b.n	80019dc <HAL_DMA_Abort_IT+0x1ac>
 80019ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ce:	e005      	b.n	80019dc <HAL_DMA_Abort_IT+0x1ac>
 80019d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019d4:	e002      	b.n	80019dc <HAL_DMA_Abort_IT+0x1ac>
 80019d6:	2310      	movs	r3, #16
 80019d8:	e000      	b.n	80019dc <HAL_DMA_Abort_IT+0x1ac>
 80019da:	2301      	movs	r3, #1
 80019dc:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <HAL_DMA_Abort_IT+0x20c>)
 80019de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	4798      	blx	r3
    } 
  }
  return status;
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40020080 	.word	0x40020080
 8001a10:	40020008 	.word	0x40020008
 8001a14:	4002001c 	.word	0x4002001c
 8001a18:	40020030 	.word	0x40020030
 8001a1c:	40020044 	.word	0x40020044
 8001a20:	40020058 	.word	0x40020058
 8001a24:	4002006c 	.word	0x4002006c
 8001a28:	40020408 	.word	0x40020408
 8001a2c:	4002041c 	.word	0x4002041c
 8001a30:	40020430 	.word	0x40020430
 8001a34:	40020444 	.word	0x40020444
 8001a38:	40020400 	.word	0x40020400
 8001a3c:	40020000 	.word	0x40020000

08001a40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80f1 	beq.w	8001c4c <HAL_DMA_IRQHandler+0x20c>
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80eb 	beq.w	8001c4c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0320 	and.w	r3, r3, #32
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d107      	bne.n	8001a94 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0204 	bic.w	r2, r2, #4
 8001a92:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b5f      	ldr	r3, [pc, #380]	; (8001c18 <HAL_DMA_IRQHandler+0x1d8>)
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d958      	bls.n	8001b52 <HAL_DMA_IRQHandler+0x112>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a5d      	ldr	r2, [pc, #372]	; (8001c1c <HAL_DMA_IRQHandler+0x1dc>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d04f      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x10a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a5c      	ldr	r2, [pc, #368]	; (8001c20 <HAL_DMA_IRQHandler+0x1e0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d048      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x106>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a5a      	ldr	r2, [pc, #360]	; (8001c24 <HAL_DMA_IRQHandler+0x1e4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d040      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x100>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a59      	ldr	r2, [pc, #356]	; (8001c28 <HAL_DMA_IRQHandler+0x1e8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d038      	beq.n	8001b3a <HAL_DMA_IRQHandler+0xfa>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a57      	ldr	r2, [pc, #348]	; (8001c2c <HAL_DMA_IRQHandler+0x1ec>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d030      	beq.n	8001b34 <HAL_DMA_IRQHandler+0xf4>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a56      	ldr	r2, [pc, #344]	; (8001c30 <HAL_DMA_IRQHandler+0x1f0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d028      	beq.n	8001b2e <HAL_DMA_IRQHandler+0xee>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a4d      	ldr	r2, [pc, #308]	; (8001c18 <HAL_DMA_IRQHandler+0x1d8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d020      	beq.n	8001b28 <HAL_DMA_IRQHandler+0xe8>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a52      	ldr	r2, [pc, #328]	; (8001c34 <HAL_DMA_IRQHandler+0x1f4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d019      	beq.n	8001b24 <HAL_DMA_IRQHandler+0xe4>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a50      	ldr	r2, [pc, #320]	; (8001c38 <HAL_DMA_IRQHandler+0x1f8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d012      	beq.n	8001b20 <HAL_DMA_IRQHandler+0xe0>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a4f      	ldr	r2, [pc, #316]	; (8001c3c <HAL_DMA_IRQHandler+0x1fc>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d00a      	beq.n	8001b1a <HAL_DMA_IRQHandler+0xda>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a4d      	ldr	r2, [pc, #308]	; (8001c40 <HAL_DMA_IRQHandler+0x200>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d102      	bne.n	8001b14 <HAL_DMA_IRQHandler+0xd4>
 8001b0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b12:	e01b      	b.n	8001b4c <HAL_DMA_IRQHandler+0x10c>
 8001b14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b18:	e018      	b.n	8001b4c <HAL_DMA_IRQHandler+0x10c>
 8001b1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b1e:	e015      	b.n	8001b4c <HAL_DMA_IRQHandler+0x10c>
 8001b20:	2340      	movs	r3, #64	; 0x40
 8001b22:	e013      	b.n	8001b4c <HAL_DMA_IRQHandler+0x10c>
 8001b24:	2304      	movs	r3, #4
 8001b26:	e011      	b.n	8001b4c <HAL_DMA_IRQHandler+0x10c>
 8001b28:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b2c:	e00e      	b.n	8001b4c <HAL_DMA_IRQHandler+0x10c>
 8001b2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b32:	e00b      	b.n	8001b4c <HAL_DMA_IRQHandler+0x10c>
 8001b34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b38:	e008      	b.n	8001b4c <HAL_DMA_IRQHandler+0x10c>
 8001b3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b3e:	e005      	b.n	8001b4c <HAL_DMA_IRQHandler+0x10c>
 8001b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b44:	e002      	b.n	8001b4c <HAL_DMA_IRQHandler+0x10c>
 8001b46:	2340      	movs	r3, #64	; 0x40
 8001b48:	e000      	b.n	8001b4c <HAL_DMA_IRQHandler+0x10c>
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	4a3d      	ldr	r2, [pc, #244]	; (8001c44 <HAL_DMA_IRQHandler+0x204>)
 8001b4e:	6053      	str	r3, [r2, #4]
 8001b50:	e057      	b.n	8001c02 <HAL_DMA_IRQHandler+0x1c2>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a31      	ldr	r2, [pc, #196]	; (8001c1c <HAL_DMA_IRQHandler+0x1dc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d04f      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x1bc>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a2f      	ldr	r2, [pc, #188]	; (8001c20 <HAL_DMA_IRQHandler+0x1e0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d048      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x1b8>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a2e      	ldr	r2, [pc, #184]	; (8001c24 <HAL_DMA_IRQHandler+0x1e4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d040      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0x1b2>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a2c      	ldr	r2, [pc, #176]	; (8001c28 <HAL_DMA_IRQHandler+0x1e8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d038      	beq.n	8001bec <HAL_DMA_IRQHandler+0x1ac>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a2b      	ldr	r2, [pc, #172]	; (8001c2c <HAL_DMA_IRQHandler+0x1ec>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d030      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x1a6>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a29      	ldr	r2, [pc, #164]	; (8001c30 <HAL_DMA_IRQHandler+0x1f0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d028      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x1a0>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a21      	ldr	r2, [pc, #132]	; (8001c18 <HAL_DMA_IRQHandler+0x1d8>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d020      	beq.n	8001bda <HAL_DMA_IRQHandler+0x19a>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a25      	ldr	r2, [pc, #148]	; (8001c34 <HAL_DMA_IRQHandler+0x1f4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d019      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0x196>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a24      	ldr	r2, [pc, #144]	; (8001c38 <HAL_DMA_IRQHandler+0x1f8>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d012      	beq.n	8001bd2 <HAL_DMA_IRQHandler+0x192>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a22      	ldr	r2, [pc, #136]	; (8001c3c <HAL_DMA_IRQHandler+0x1fc>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00a      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x18c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a21      	ldr	r2, [pc, #132]	; (8001c40 <HAL_DMA_IRQHandler+0x200>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d102      	bne.n	8001bc6 <HAL_DMA_IRQHandler+0x186>
 8001bc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bc4:	e01b      	b.n	8001bfe <HAL_DMA_IRQHandler+0x1be>
 8001bc6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001bca:	e018      	b.n	8001bfe <HAL_DMA_IRQHandler+0x1be>
 8001bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bd0:	e015      	b.n	8001bfe <HAL_DMA_IRQHandler+0x1be>
 8001bd2:	2340      	movs	r3, #64	; 0x40
 8001bd4:	e013      	b.n	8001bfe <HAL_DMA_IRQHandler+0x1be>
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	e011      	b.n	8001bfe <HAL_DMA_IRQHandler+0x1be>
 8001bda:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001bde:	e00e      	b.n	8001bfe <HAL_DMA_IRQHandler+0x1be>
 8001be0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001be4:	e00b      	b.n	8001bfe <HAL_DMA_IRQHandler+0x1be>
 8001be6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001bea:	e008      	b.n	8001bfe <HAL_DMA_IRQHandler+0x1be>
 8001bec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bf0:	e005      	b.n	8001bfe <HAL_DMA_IRQHandler+0x1be>
 8001bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bf6:	e002      	b.n	8001bfe <HAL_DMA_IRQHandler+0x1be>
 8001bf8:	2340      	movs	r3, #64	; 0x40
 8001bfa:	e000      	b.n	8001bfe <HAL_DMA_IRQHandler+0x1be>
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <HAL_DMA_IRQHandler+0x208>)
 8001c00:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 8136 	beq.w	8001e78 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c14:	e130      	b.n	8001e78 <HAL_DMA_IRQHandler+0x438>
 8001c16:	bf00      	nop
 8001c18:	40020080 	.word	0x40020080
 8001c1c:	40020008 	.word	0x40020008
 8001c20:	4002001c 	.word	0x4002001c
 8001c24:	40020030 	.word	0x40020030
 8001c28:	40020044 	.word	0x40020044
 8001c2c:	40020058 	.word	0x40020058
 8001c30:	4002006c 	.word	0x4002006c
 8001c34:	40020408 	.word	0x40020408
 8001c38:	4002041c 	.word	0x4002041c
 8001c3c:	40020430 	.word	0x40020430
 8001c40:	40020444 	.word	0x40020444
 8001c44:	40020400 	.word	0x40020400
 8001c48:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	2202      	movs	r2, #2
 8001c52:	409a      	lsls	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 80dd 	beq.w	8001e18 <HAL_DMA_IRQHandler+0x3d8>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80d7 	beq.w	8001e18 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0320 	and.w	r3, r3, #32
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10b      	bne.n	8001c90 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 020a 	bic.w	r2, r2, #10
 8001c86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b7b      	ldr	r3, [pc, #492]	; (8001e84 <HAL_DMA_IRQHandler+0x444>)
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d958      	bls.n	8001d4e <HAL_DMA_IRQHandler+0x30e>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a79      	ldr	r2, [pc, #484]	; (8001e88 <HAL_DMA_IRQHandler+0x448>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d04f      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x306>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a78      	ldr	r2, [pc, #480]	; (8001e8c <HAL_DMA_IRQHandler+0x44c>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d048      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x302>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a76      	ldr	r2, [pc, #472]	; (8001e90 <HAL_DMA_IRQHandler+0x450>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d040      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x2fc>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a75      	ldr	r2, [pc, #468]	; (8001e94 <HAL_DMA_IRQHandler+0x454>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d038      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x2f6>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a73      	ldr	r2, [pc, #460]	; (8001e98 <HAL_DMA_IRQHandler+0x458>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d030      	beq.n	8001d30 <HAL_DMA_IRQHandler+0x2f0>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a72      	ldr	r2, [pc, #456]	; (8001e9c <HAL_DMA_IRQHandler+0x45c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d028      	beq.n	8001d2a <HAL_DMA_IRQHandler+0x2ea>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a69      	ldr	r2, [pc, #420]	; (8001e84 <HAL_DMA_IRQHandler+0x444>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d020      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x2e4>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a6e      	ldr	r2, [pc, #440]	; (8001ea0 <HAL_DMA_IRQHandler+0x460>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d019      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x2e0>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a6c      	ldr	r2, [pc, #432]	; (8001ea4 <HAL_DMA_IRQHandler+0x464>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d012      	beq.n	8001d1c <HAL_DMA_IRQHandler+0x2dc>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a6b      	ldr	r2, [pc, #428]	; (8001ea8 <HAL_DMA_IRQHandler+0x468>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d00a      	beq.n	8001d16 <HAL_DMA_IRQHandler+0x2d6>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a69      	ldr	r2, [pc, #420]	; (8001eac <HAL_DMA_IRQHandler+0x46c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d102      	bne.n	8001d10 <HAL_DMA_IRQHandler+0x2d0>
 8001d0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d0e:	e01b      	b.n	8001d48 <HAL_DMA_IRQHandler+0x308>
 8001d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d14:	e018      	b.n	8001d48 <HAL_DMA_IRQHandler+0x308>
 8001d16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d1a:	e015      	b.n	8001d48 <HAL_DMA_IRQHandler+0x308>
 8001d1c:	2320      	movs	r3, #32
 8001d1e:	e013      	b.n	8001d48 <HAL_DMA_IRQHandler+0x308>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e011      	b.n	8001d48 <HAL_DMA_IRQHandler+0x308>
 8001d24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d28:	e00e      	b.n	8001d48 <HAL_DMA_IRQHandler+0x308>
 8001d2a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d2e:	e00b      	b.n	8001d48 <HAL_DMA_IRQHandler+0x308>
 8001d30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d34:	e008      	b.n	8001d48 <HAL_DMA_IRQHandler+0x308>
 8001d36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d3a:	e005      	b.n	8001d48 <HAL_DMA_IRQHandler+0x308>
 8001d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d40:	e002      	b.n	8001d48 <HAL_DMA_IRQHandler+0x308>
 8001d42:	2320      	movs	r3, #32
 8001d44:	e000      	b.n	8001d48 <HAL_DMA_IRQHandler+0x308>
 8001d46:	2302      	movs	r3, #2
 8001d48:	4a59      	ldr	r2, [pc, #356]	; (8001eb0 <HAL_DMA_IRQHandler+0x470>)
 8001d4a:	6053      	str	r3, [r2, #4]
 8001d4c:	e057      	b.n	8001dfe <HAL_DMA_IRQHandler+0x3be>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a4d      	ldr	r2, [pc, #308]	; (8001e88 <HAL_DMA_IRQHandler+0x448>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d04f      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x3b8>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a4b      	ldr	r2, [pc, #300]	; (8001e8c <HAL_DMA_IRQHandler+0x44c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d048      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x3b4>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a4a      	ldr	r2, [pc, #296]	; (8001e90 <HAL_DMA_IRQHandler+0x450>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d040      	beq.n	8001dee <HAL_DMA_IRQHandler+0x3ae>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a48      	ldr	r2, [pc, #288]	; (8001e94 <HAL_DMA_IRQHandler+0x454>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d038      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x3a8>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a47      	ldr	r2, [pc, #284]	; (8001e98 <HAL_DMA_IRQHandler+0x458>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d030      	beq.n	8001de2 <HAL_DMA_IRQHandler+0x3a2>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a45      	ldr	r2, [pc, #276]	; (8001e9c <HAL_DMA_IRQHandler+0x45c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d028      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x39c>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a3d      	ldr	r2, [pc, #244]	; (8001e84 <HAL_DMA_IRQHandler+0x444>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d020      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0x396>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a41      	ldr	r2, [pc, #260]	; (8001ea0 <HAL_DMA_IRQHandler+0x460>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d019      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x392>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a40      	ldr	r2, [pc, #256]	; (8001ea4 <HAL_DMA_IRQHandler+0x464>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d012      	beq.n	8001dce <HAL_DMA_IRQHandler+0x38e>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a3e      	ldr	r2, [pc, #248]	; (8001ea8 <HAL_DMA_IRQHandler+0x468>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00a      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x388>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a3d      	ldr	r2, [pc, #244]	; (8001eac <HAL_DMA_IRQHandler+0x46c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d102      	bne.n	8001dc2 <HAL_DMA_IRQHandler+0x382>
 8001dbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dc0:	e01b      	b.n	8001dfa <HAL_DMA_IRQHandler+0x3ba>
 8001dc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc6:	e018      	b.n	8001dfa <HAL_DMA_IRQHandler+0x3ba>
 8001dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dcc:	e015      	b.n	8001dfa <HAL_DMA_IRQHandler+0x3ba>
 8001dce:	2320      	movs	r3, #32
 8001dd0:	e013      	b.n	8001dfa <HAL_DMA_IRQHandler+0x3ba>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e011      	b.n	8001dfa <HAL_DMA_IRQHandler+0x3ba>
 8001dd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dda:	e00e      	b.n	8001dfa <HAL_DMA_IRQHandler+0x3ba>
 8001ddc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001de0:	e00b      	b.n	8001dfa <HAL_DMA_IRQHandler+0x3ba>
 8001de2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001de6:	e008      	b.n	8001dfa <HAL_DMA_IRQHandler+0x3ba>
 8001de8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dec:	e005      	b.n	8001dfa <HAL_DMA_IRQHandler+0x3ba>
 8001dee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001df2:	e002      	b.n	8001dfa <HAL_DMA_IRQHandler+0x3ba>
 8001df4:	2320      	movs	r3, #32
 8001df6:	e000      	b.n	8001dfa <HAL_DMA_IRQHandler+0x3ba>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	4a2e      	ldr	r2, [pc, #184]	; (8001eb4 <HAL_DMA_IRQHandler+0x474>)
 8001dfc:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d034      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e16:	e02f      	b.n	8001e78 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	2208      	movs	r2, #8
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d028      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x43a>
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d023      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 020e 	bic.w	r2, r2, #14
 8001e40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e50:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d004      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	4798      	blx	r3
    }
  }
  return;
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
}
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40020080 	.word	0x40020080
 8001e88:	40020008 	.word	0x40020008
 8001e8c:	4002001c 	.word	0x4002001c
 8001e90:	40020030 	.word	0x40020030
 8001e94:	40020044 	.word	0x40020044
 8001e98:	40020058 	.word	0x40020058
 8001e9c:	4002006c 	.word	0x4002006c
 8001ea0:	40020408 	.word	0x40020408
 8001ea4:	4002041c 	.word	0x4002041c
 8001ea8:	40020430 	.word	0x40020430
 8001eac:	40020444 	.word	0x40020444
 8001eb0:	40020400 	.word	0x40020400
 8001eb4:	40020000 	.word	0x40020000

08001eb8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ece:	2101      	movs	r1, #1
 8001ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b10      	cmp	r3, #16
 8001ee4:	d108      	bne.n	8001ef8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ef6:	e007      	b.n	8001f08 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	60da      	str	r2, [r3, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
	...

08001f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b08b      	sub	sp, #44	; 0x2c
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f22:	2300      	movs	r3, #0
 8001f24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f26:	e179      	b.n	800221c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	f040 8168 	bne.w	8002216 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4a96      	ldr	r2, [pc, #600]	; (80021a4 <HAL_GPIO_Init+0x290>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d05e      	beq.n	800200e <HAL_GPIO_Init+0xfa>
 8001f50:	4a94      	ldr	r2, [pc, #592]	; (80021a4 <HAL_GPIO_Init+0x290>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d875      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f56:	4a94      	ldr	r2, [pc, #592]	; (80021a8 <HAL_GPIO_Init+0x294>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d058      	beq.n	800200e <HAL_GPIO_Init+0xfa>
 8001f5c:	4a92      	ldr	r2, [pc, #584]	; (80021a8 <HAL_GPIO_Init+0x294>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d86f      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f62:	4a92      	ldr	r2, [pc, #584]	; (80021ac <HAL_GPIO_Init+0x298>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d052      	beq.n	800200e <HAL_GPIO_Init+0xfa>
 8001f68:	4a90      	ldr	r2, [pc, #576]	; (80021ac <HAL_GPIO_Init+0x298>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d869      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f6e:	4a90      	ldr	r2, [pc, #576]	; (80021b0 <HAL_GPIO_Init+0x29c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d04c      	beq.n	800200e <HAL_GPIO_Init+0xfa>
 8001f74:	4a8e      	ldr	r2, [pc, #568]	; (80021b0 <HAL_GPIO_Init+0x29c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d863      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f7a:	4a8e      	ldr	r2, [pc, #568]	; (80021b4 <HAL_GPIO_Init+0x2a0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d046      	beq.n	800200e <HAL_GPIO_Init+0xfa>
 8001f80:	4a8c      	ldr	r2, [pc, #560]	; (80021b4 <HAL_GPIO_Init+0x2a0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d85d      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f86:	2b12      	cmp	r3, #18
 8001f88:	d82a      	bhi.n	8001fe0 <HAL_GPIO_Init+0xcc>
 8001f8a:	2b12      	cmp	r3, #18
 8001f8c:	d859      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f8e:	a201      	add	r2, pc, #4	; (adr r2, 8001f94 <HAL_GPIO_Init+0x80>)
 8001f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f94:	0800200f 	.word	0x0800200f
 8001f98:	08001fe9 	.word	0x08001fe9
 8001f9c:	08001ffb 	.word	0x08001ffb
 8001fa0:	0800203d 	.word	0x0800203d
 8001fa4:	08002043 	.word	0x08002043
 8001fa8:	08002043 	.word	0x08002043
 8001fac:	08002043 	.word	0x08002043
 8001fb0:	08002043 	.word	0x08002043
 8001fb4:	08002043 	.word	0x08002043
 8001fb8:	08002043 	.word	0x08002043
 8001fbc:	08002043 	.word	0x08002043
 8001fc0:	08002043 	.word	0x08002043
 8001fc4:	08002043 	.word	0x08002043
 8001fc8:	08002043 	.word	0x08002043
 8001fcc:	08002043 	.word	0x08002043
 8001fd0:	08002043 	.word	0x08002043
 8001fd4:	08002043 	.word	0x08002043
 8001fd8:	08001ff1 	.word	0x08001ff1
 8001fdc:	08002005 	.word	0x08002005
 8001fe0:	4a75      	ldr	r2, [pc, #468]	; (80021b8 <HAL_GPIO_Init+0x2a4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d013      	beq.n	800200e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fe6:	e02c      	b.n	8002042 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	623b      	str	r3, [r7, #32]
          break;
 8001fee:	e029      	b.n	8002044 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	623b      	str	r3, [r7, #32]
          break;
 8001ff8:	e024      	b.n	8002044 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	3308      	adds	r3, #8
 8002000:	623b      	str	r3, [r7, #32]
          break;
 8002002:	e01f      	b.n	8002044 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	330c      	adds	r3, #12
 800200a:	623b      	str	r3, [r7, #32]
          break;
 800200c:	e01a      	b.n	8002044 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002016:	2304      	movs	r3, #4
 8002018:	623b      	str	r3, [r7, #32]
          break;
 800201a:	e013      	b.n	8002044 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d105      	bne.n	8002030 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002024:	2308      	movs	r3, #8
 8002026:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	611a      	str	r2, [r3, #16]
          break;
 800202e:	e009      	b.n	8002044 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002030:	2308      	movs	r3, #8
 8002032:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	615a      	str	r2, [r3, #20]
          break;
 800203a:	e003      	b.n	8002044 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800203c:	2300      	movs	r3, #0
 800203e:	623b      	str	r3, [r7, #32]
          break;
 8002040:	e000      	b.n	8002044 <HAL_GPIO_Init+0x130>
          break;
 8002042:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2bff      	cmp	r3, #255	; 0xff
 8002048:	d801      	bhi.n	800204e <HAL_GPIO_Init+0x13a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	e001      	b.n	8002052 <HAL_GPIO_Init+0x13e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3304      	adds	r3, #4
 8002052:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2bff      	cmp	r3, #255	; 0xff
 8002058:	d802      	bhi.n	8002060 <HAL_GPIO_Init+0x14c>
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	e002      	b.n	8002066 <HAL_GPIO_Init+0x152>
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	3b08      	subs	r3, #8
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	210f      	movs	r1, #15
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	fa01 f303 	lsl.w	r3, r1, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	401a      	ands	r2, r3
 8002078:	6a39      	ldr	r1, [r7, #32]
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	431a      	orrs	r2, r3
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 80c1 	beq.w	8002216 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002094:	4b49      	ldr	r3, [pc, #292]	; (80021bc <HAL_GPIO_Init+0x2a8>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	4a48      	ldr	r2, [pc, #288]	; (80021bc <HAL_GPIO_Init+0x2a8>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	6193      	str	r3, [r2, #24]
 80020a0:	4b46      	ldr	r3, [pc, #280]	; (80021bc <HAL_GPIO_Init+0x2a8>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020ac:	4a44      	ldr	r2, [pc, #272]	; (80021c0 <HAL_GPIO_Init+0x2ac>)
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	3302      	adds	r3, #2
 80020b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	220f      	movs	r2, #15
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4013      	ands	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a3c      	ldr	r2, [pc, #240]	; (80021c4 <HAL_GPIO_Init+0x2b0>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d01f      	beq.n	8002118 <HAL_GPIO_Init+0x204>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a3b      	ldr	r2, [pc, #236]	; (80021c8 <HAL_GPIO_Init+0x2b4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d019      	beq.n	8002114 <HAL_GPIO_Init+0x200>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a3a      	ldr	r2, [pc, #232]	; (80021cc <HAL_GPIO_Init+0x2b8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d013      	beq.n	8002110 <HAL_GPIO_Init+0x1fc>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a39      	ldr	r2, [pc, #228]	; (80021d0 <HAL_GPIO_Init+0x2bc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d00d      	beq.n	800210c <HAL_GPIO_Init+0x1f8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a38      	ldr	r2, [pc, #224]	; (80021d4 <HAL_GPIO_Init+0x2c0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d007      	beq.n	8002108 <HAL_GPIO_Init+0x1f4>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a37      	ldr	r2, [pc, #220]	; (80021d8 <HAL_GPIO_Init+0x2c4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d101      	bne.n	8002104 <HAL_GPIO_Init+0x1f0>
 8002100:	2305      	movs	r3, #5
 8002102:	e00a      	b.n	800211a <HAL_GPIO_Init+0x206>
 8002104:	2306      	movs	r3, #6
 8002106:	e008      	b.n	800211a <HAL_GPIO_Init+0x206>
 8002108:	2304      	movs	r3, #4
 800210a:	e006      	b.n	800211a <HAL_GPIO_Init+0x206>
 800210c:	2303      	movs	r3, #3
 800210e:	e004      	b.n	800211a <HAL_GPIO_Init+0x206>
 8002110:	2302      	movs	r3, #2
 8002112:	e002      	b.n	800211a <HAL_GPIO_Init+0x206>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <HAL_GPIO_Init+0x206>
 8002118:	2300      	movs	r3, #0
 800211a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211c:	f002 0203 	and.w	r2, r2, #3
 8002120:	0092      	lsls	r2, r2, #2
 8002122:	4093      	lsls	r3, r2
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800212a:	4925      	ldr	r1, [pc, #148]	; (80021c0 <HAL_GPIO_Init+0x2ac>)
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	089b      	lsrs	r3, r3, #2
 8002130:	3302      	adds	r3, #2
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d006      	beq.n	8002152 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002144:	4b25      	ldr	r3, [pc, #148]	; (80021dc <HAL_GPIO_Init+0x2c8>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4924      	ldr	r1, [pc, #144]	; (80021dc <HAL_GPIO_Init+0x2c8>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	600b      	str	r3, [r1, #0]
 8002150:	e006      	b.n	8002160 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002152:	4b22      	ldr	r3, [pc, #136]	; (80021dc <HAL_GPIO_Init+0x2c8>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	43db      	mvns	r3, r3
 800215a:	4920      	ldr	r1, [pc, #128]	; (80021dc <HAL_GPIO_Init+0x2c8>)
 800215c:	4013      	ands	r3, r2
 800215e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_GPIO_Init+0x2c8>)
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	491a      	ldr	r1, [pc, #104]	; (80021dc <HAL_GPIO_Init+0x2c8>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800217a:	4b18      	ldr	r3, [pc, #96]	; (80021dc <HAL_GPIO_Init+0x2c8>)
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	43db      	mvns	r3, r3
 8002182:	4916      	ldr	r1, [pc, #88]	; (80021dc <HAL_GPIO_Init+0x2c8>)
 8002184:	4013      	ands	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d025      	beq.n	80021e0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_GPIO_Init+0x2c8>)
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	4910      	ldr	r1, [pc, #64]	; (80021dc <HAL_GPIO_Init+0x2c8>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	608b      	str	r3, [r1, #8]
 80021a0:	e025      	b.n	80021ee <HAL_GPIO_Init+0x2da>
 80021a2:	bf00      	nop
 80021a4:	10320000 	.word	0x10320000
 80021a8:	10310000 	.word	0x10310000
 80021ac:	10220000 	.word	0x10220000
 80021b0:	10210000 	.word	0x10210000
 80021b4:	10120000 	.word	0x10120000
 80021b8:	10110000 	.word	0x10110000
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40010000 	.word	0x40010000
 80021c4:	40010800 	.word	0x40010800
 80021c8:	40010c00 	.word	0x40010c00
 80021cc:	40011000 	.word	0x40011000
 80021d0:	40011400 	.word	0x40011400
 80021d4:	40011800 	.word	0x40011800
 80021d8:	40011c00 	.word	0x40011c00
 80021dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021e0:	4b15      	ldr	r3, [pc, #84]	; (8002238 <HAL_GPIO_Init+0x324>)
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	4913      	ldr	r1, [pc, #76]	; (8002238 <HAL_GPIO_Init+0x324>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d006      	beq.n	8002208 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021fa:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <HAL_GPIO_Init+0x324>)
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	490e      	ldr	r1, [pc, #56]	; (8002238 <HAL_GPIO_Init+0x324>)
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	60cb      	str	r3, [r1, #12]
 8002206:	e006      	b.n	8002216 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_GPIO_Init+0x324>)
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	43db      	mvns	r3, r3
 8002210:	4909      	ldr	r1, [pc, #36]	; (8002238 <HAL_GPIO_Init+0x324>)
 8002212:	4013      	ands	r3, r2
 8002214:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	3301      	adds	r3, #1
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	fa22 f303 	lsr.w	r3, r2, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	f47f ae7e 	bne.w	8001f28 <HAL_GPIO_Init+0x14>
  }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	372c      	adds	r7, #44	; 0x2c
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	40010400 	.word	0x40010400

0800223c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	807b      	strh	r3, [r7, #2]
 8002248:	4613      	mov	r3, r2
 800224a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800224c:	787b      	ldrb	r3, [r7, #1]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002258:	e003      	b.n	8002262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800225a:	887b      	ldrh	r3, [r7, #2]
 800225c:	041a      	lsls	r2, r3, #16
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	611a      	str	r2, [r3, #16]
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e272      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 8087 	beq.w	800239a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800228c:	4b92      	ldr	r3, [pc, #584]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	2b04      	cmp	r3, #4
 8002296:	d00c      	beq.n	80022b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002298:	4b8f      	ldr	r3, [pc, #572]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d112      	bne.n	80022ca <HAL_RCC_OscConfig+0x5e>
 80022a4:	4b8c      	ldr	r3, [pc, #560]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b0:	d10b      	bne.n	80022ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b2:	4b89      	ldr	r3, [pc, #548]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d06c      	beq.n	8002398 <HAL_RCC_OscConfig+0x12c>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d168      	bne.n	8002398 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e24c      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d2:	d106      	bne.n	80022e2 <HAL_RCC_OscConfig+0x76>
 80022d4:	4b80      	ldr	r3, [pc, #512]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a7f      	ldr	r2, [pc, #508]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	e02e      	b.n	8002340 <HAL_RCC_OscConfig+0xd4>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0x98>
 80022ea:	4b7b      	ldr	r3, [pc, #492]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a7a      	ldr	r2, [pc, #488]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	4b78      	ldr	r3, [pc, #480]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a77      	ldr	r2, [pc, #476]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e01d      	b.n	8002340 <HAL_RCC_OscConfig+0xd4>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800230c:	d10c      	bne.n	8002328 <HAL_RCC_OscConfig+0xbc>
 800230e:	4b72      	ldr	r3, [pc, #456]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a71      	ldr	r2, [pc, #452]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b6f      	ldr	r3, [pc, #444]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a6e      	ldr	r2, [pc, #440]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e00b      	b.n	8002340 <HAL_RCC_OscConfig+0xd4>
 8002328:	4b6b      	ldr	r3, [pc, #428]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a6a      	ldr	r2, [pc, #424]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800232e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b68      	ldr	r3, [pc, #416]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a67      	ldr	r2, [pc, #412]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800233a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800233e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d013      	beq.n	8002370 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7fe fe02 	bl	8000f50 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7fe fdfe 	bl	8000f50 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e200      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	4b5d      	ldr	r3, [pc, #372]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0xe4>
 800236e:	e014      	b.n	800239a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7fe fdee 	bl	8000f50 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002378:	f7fe fdea 	bl	8000f50 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	; 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e1ec      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238a:	4b53      	ldr	r3, [pc, #332]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x10c>
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d063      	beq.n	800246e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023a6:	4b4c      	ldr	r3, [pc, #304]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00b      	beq.n	80023ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023b2:	4b49      	ldr	r3, [pc, #292]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d11c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x18c>
 80023be:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d116      	bne.n	80023f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ca:	4b43      	ldr	r3, [pc, #268]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_RCC_OscConfig+0x176>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e1c0      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e2:	4b3d      	ldr	r3, [pc, #244]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4939      	ldr	r1, [pc, #228]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f6:	e03a      	b.n	800246e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d020      	beq.n	8002442 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002400:	4b36      	ldr	r3, [pc, #216]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002402:	2201      	movs	r2, #1
 8002404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002406:	f7fe fda3 	bl	8000f50 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240e:	f7fe fd9f 	bl	8000f50 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e1a1      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002420:	4b2d      	ldr	r3, [pc, #180]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242c:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4927      	ldr	r1, [pc, #156]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]
 8002440:	e015      	b.n	800246e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002442:	4b26      	ldr	r3, [pc, #152]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7fe fd82 	bl	8000f50 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002450:	f7fe fd7e 	bl	8000f50 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e180      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002462:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d03a      	beq.n	80024f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d019      	beq.n	80024b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002482:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <HAL_RCC_OscConfig+0x274>)
 8002484:	2201      	movs	r2, #1
 8002486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002488:	f7fe fd62 	bl	8000f50 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002490:	f7fe fd5e 	bl	8000f50 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e160      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024ae:	2001      	movs	r0, #1
 80024b0:	f000 fad8 	bl	8002a64 <RCC_Delay>
 80024b4:	e01c      	b.n	80024f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <HAL_RCC_OscConfig+0x274>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024bc:	f7fe fd48 	bl	8000f50 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c2:	e00f      	b.n	80024e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c4:	f7fe fd44 	bl	8000f50 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d908      	bls.n	80024e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e146      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	42420000 	.word	0x42420000
 80024e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e4:	4b92      	ldr	r3, [pc, #584]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1e9      	bne.n	80024c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80a6 	beq.w	800264a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002502:	4b8b      	ldr	r3, [pc, #556]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10d      	bne.n	800252a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	4b88      	ldr	r3, [pc, #544]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	4a87      	ldr	r2, [pc, #540]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002518:	61d3      	str	r3, [r2, #28]
 800251a:	4b85      	ldr	r3, [pc, #532]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002526:	2301      	movs	r3, #1
 8002528:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252a:	4b82      	ldr	r3, [pc, #520]	; (8002734 <HAL_RCC_OscConfig+0x4c8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002532:	2b00      	cmp	r3, #0
 8002534:	d118      	bne.n	8002568 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002536:	4b7f      	ldr	r3, [pc, #508]	; (8002734 <HAL_RCC_OscConfig+0x4c8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a7e      	ldr	r2, [pc, #504]	; (8002734 <HAL_RCC_OscConfig+0x4c8>)
 800253c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002542:	f7fe fd05 	bl	8000f50 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254a:	f7fe fd01 	bl	8000f50 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b64      	cmp	r3, #100	; 0x64
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e103      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255c:	4b75      	ldr	r3, [pc, #468]	; (8002734 <HAL_RCC_OscConfig+0x4c8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d106      	bne.n	800257e <HAL_RCC_OscConfig+0x312>
 8002570:	4b6f      	ldr	r3, [pc, #444]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4a6e      	ldr	r2, [pc, #440]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6213      	str	r3, [r2, #32]
 800257c:	e02d      	b.n	80025da <HAL_RCC_OscConfig+0x36e>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x334>
 8002586:	4b6a      	ldr	r3, [pc, #424]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	4a69      	ldr	r2, [pc, #420]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	6213      	str	r3, [r2, #32]
 8002592:	4b67      	ldr	r3, [pc, #412]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4a66      	ldr	r2, [pc, #408]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	f023 0304 	bic.w	r3, r3, #4
 800259c:	6213      	str	r3, [r2, #32]
 800259e:	e01c      	b.n	80025da <HAL_RCC_OscConfig+0x36e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	d10c      	bne.n	80025c2 <HAL_RCC_OscConfig+0x356>
 80025a8:	4b61      	ldr	r3, [pc, #388]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	4a60      	ldr	r2, [pc, #384]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025ae:	f043 0304 	orr.w	r3, r3, #4
 80025b2:	6213      	str	r3, [r2, #32]
 80025b4:	4b5e      	ldr	r3, [pc, #376]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	4a5d      	ldr	r2, [pc, #372]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6213      	str	r3, [r2, #32]
 80025c0:	e00b      	b.n	80025da <HAL_RCC_OscConfig+0x36e>
 80025c2:	4b5b      	ldr	r3, [pc, #364]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	4a5a      	ldr	r2, [pc, #360]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	6213      	str	r3, [r2, #32]
 80025ce:	4b58      	ldr	r3, [pc, #352]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	4a57      	ldr	r2, [pc, #348]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	f023 0304 	bic.w	r3, r3, #4
 80025d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d015      	beq.n	800260e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e2:	f7fe fcb5 	bl	8000f50 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e8:	e00a      	b.n	8002600 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7fe fcb1 	bl	8000f50 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e0b1      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002600:	4b4b      	ldr	r3, [pc, #300]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ee      	beq.n	80025ea <HAL_RCC_OscConfig+0x37e>
 800260c:	e014      	b.n	8002638 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260e:	f7fe fc9f 	bl	8000f50 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002614:	e00a      	b.n	800262c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002616:	f7fe fc9b 	bl	8000f50 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	f241 3288 	movw	r2, #5000	; 0x1388
 8002624:	4293      	cmp	r3, r2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e09b      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800262c:	4b40      	ldr	r3, [pc, #256]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1ee      	bne.n	8002616 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002638:	7dfb      	ldrb	r3, [r7, #23]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d105      	bne.n	800264a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263e:	4b3c      	ldr	r3, [pc, #240]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4a3b      	ldr	r2, [pc, #236]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002648:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 8087 	beq.w	8002762 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002654:	4b36      	ldr	r3, [pc, #216]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 030c 	and.w	r3, r3, #12
 800265c:	2b08      	cmp	r3, #8
 800265e:	d061      	beq.n	8002724 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d146      	bne.n	80026f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002668:	4b33      	ldr	r3, [pc, #204]	; (8002738 <HAL_RCC_OscConfig+0x4cc>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266e:	f7fe fc6f 	bl	8000f50 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002676:	f7fe fc6b 	bl	8000f50 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e06d      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002688:	4b29      	ldr	r3, [pc, #164]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f0      	bne.n	8002676 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269c:	d108      	bne.n	80026b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800269e:	4b24      	ldr	r3, [pc, #144]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	4921      	ldr	r1, [pc, #132]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026b0:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a19      	ldr	r1, [r3, #32]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	430b      	orrs	r3, r1
 80026c2:	491b      	ldr	r1, [pc, #108]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <HAL_RCC_OscConfig+0x4cc>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ce:	f7fe fc3f 	bl	8000f50 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d6:	f7fe fc3b 	bl	8000f50 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e03d      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x46a>
 80026f4:	e035      	b.n	8002762 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f6:	4b10      	ldr	r3, [pc, #64]	; (8002738 <HAL_RCC_OscConfig+0x4cc>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7fe fc28 	bl	8000f50 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002704:	f7fe fc24 	bl	8000f50 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e026      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x498>
 8002722:	e01e      	b.n	8002762 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d107      	bne.n	800273c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e019      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
 8002730:	40021000 	.word	0x40021000
 8002734:	40007000 	.word	0x40007000
 8002738:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_RCC_OscConfig+0x500>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	429a      	cmp	r2, r3
 800274e:	d106      	bne.n	800275e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d001      	beq.n	8002762 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000

08002770 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0d0      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002784:	4b6a      	ldr	r3, [pc, #424]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d910      	bls.n	80027b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002792:	4b67      	ldr	r3, [pc, #412]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 0207 	bic.w	r2, r3, #7
 800279a:	4965      	ldr	r1, [pc, #404]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b63      	ldr	r3, [pc, #396]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0b8      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d020      	beq.n	8002802 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027cc:	4b59      	ldr	r3, [pc, #356]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4a58      	ldr	r2, [pc, #352]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027e4:	4b53      	ldr	r3, [pc, #332]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a52      	ldr	r2, [pc, #328]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f0:	4b50      	ldr	r3, [pc, #320]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	494d      	ldr	r1, [pc, #308]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d040      	beq.n	8002890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d107      	bne.n	8002826 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002816:	4b47      	ldr	r3, [pc, #284]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d115      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e07f      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282e:	4b41      	ldr	r3, [pc, #260]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d109      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e073      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283e:	4b3d      	ldr	r3, [pc, #244]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e06b      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800284e:	4b39      	ldr	r3, [pc, #228]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f023 0203 	bic.w	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	4936      	ldr	r1, [pc, #216]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002860:	f7fe fb76 	bl	8000f50 <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	e00a      	b.n	800287e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002868:	f7fe fb72 	bl	8000f50 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	; 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e053      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	4b2d      	ldr	r3, [pc, #180]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 020c 	and.w	r2, r3, #12
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	429a      	cmp	r2, r3
 800288e:	d1eb      	bne.n	8002868 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002890:	4b27      	ldr	r3, [pc, #156]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d210      	bcs.n	80028c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	4b24      	ldr	r3, [pc, #144]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 0207 	bic.w	r2, r3, #7
 80028a6:	4922      	ldr	r1, [pc, #136]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ae:	4b20      	ldr	r3, [pc, #128]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e032      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028cc:	4b19      	ldr	r3, [pc, #100]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4916      	ldr	r1, [pc, #88]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ea:	4b12      	ldr	r3, [pc, #72]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	490e      	ldr	r1, [pc, #56]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028fe:	f000 f821 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 8002902:	4602      	mov	r2, r0
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	490a      	ldr	r1, [pc, #40]	; (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 8002910:	5ccb      	ldrb	r3, [r1, r3]
 8002912:	fa22 f303 	lsr.w	r3, r2, r3
 8002916:	4a09      	ldr	r2, [pc, #36]	; (800293c <HAL_RCC_ClockConfig+0x1cc>)
 8002918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_RCC_ClockConfig+0x1d0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fad4 	bl	8000ecc <HAL_InitTick>

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40022000 	.word	0x40022000
 8002934:	40021000 	.word	0x40021000
 8002938:	08004dd8 	.word	0x08004dd8
 800293c:	20000000 	.word	0x20000000
 8002940:	20000004 	.word	0x20000004

08002944 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002944:	b490      	push	{r4, r7}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800294a:	4b29      	ldr	r3, [pc, #164]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xac>)
 800294c:	1d3c      	adds	r4, r7, #4
 800294e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002950:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002954:	f240 2301 	movw	r3, #513	; 0x201
 8002958:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	2300      	movs	r3, #0
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800296e:	4b21      	ldr	r3, [pc, #132]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b04      	cmp	r3, #4
 800297c:	d002      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0x40>
 800297e:	2b08      	cmp	r3, #8
 8002980:	d003      	beq.n	800298a <HAL_RCC_GetSysClockFreq+0x46>
 8002982:	e02b      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002984:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002986:	623b      	str	r3, [r7, #32]
      break;
 8002988:	e02b      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	0c9b      	lsrs	r3, r3, #18
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	3328      	adds	r3, #40	; 0x28
 8002994:	443b      	add	r3, r7
 8002996:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800299a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d012      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029a6:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	0c5b      	lsrs	r3, r3, #17
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	3328      	adds	r3, #40	; 0x28
 80029b2:	443b      	add	r3, r7
 80029b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	4a0e      	ldr	r2, [pc, #56]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029be:	fb03 f202 	mul.w	r2, r3, r2
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ca:	e004      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	4a0b      	ldr	r2, [pc, #44]	; (80029fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80029d0:	fb02 f303 	mul.w	r3, r2, r3
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	623b      	str	r3, [r7, #32]
      break;
 80029da:	e002      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029de:	623b      	str	r3, [r7, #32]
      break;
 80029e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e2:	6a3b      	ldr	r3, [r7, #32]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3728      	adds	r7, #40	; 0x28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc90      	pop	{r4, r7}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	08004db8 	.word	0x08004db8
 80029f4:	40021000 	.word	0x40021000
 80029f8:	007a1200 	.word	0x007a1200
 80029fc:	003d0900 	.word	0x003d0900

08002a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a04:	4b02      	ldr	r3, [pc, #8]	; (8002a10 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	20000000 	.word	0x20000000

08002a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a18:	f7ff fff2 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	0a1b      	lsrs	r3, r3, #8
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	4903      	ldr	r1, [pc, #12]	; (8002a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a2a:	5ccb      	ldrb	r3, [r1, r3]
 8002a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40021000 	.word	0x40021000
 8002a38:	08004de8 	.word	0x08004de8

08002a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a40:	f7ff ffde 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 8002a44:	4602      	mov	r2, r0
 8002a46:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	0adb      	lsrs	r3, r3, #11
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	4903      	ldr	r1, [pc, #12]	; (8002a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a52:	5ccb      	ldrb	r3, [r1, r3]
 8002a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	08004de8 	.word	0x08004de8

08002a64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <RCC_Delay+0x34>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <RCC_Delay+0x38>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	0a5b      	lsrs	r3, r3, #9
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	fb02 f303 	mul.w	r3, r2, r3
 8002a7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a80:	bf00      	nop
  }
  while (Delay --);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1e5a      	subs	r2, r3, #1
 8002a86:	60fa      	str	r2, [r7, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1f9      	bne.n	8002a80 <RCC_Delay+0x1c>
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	10624dd3 	.word	0x10624dd3

08002aa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d07d      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002abc:	2300      	movs	r3, #0
 8002abe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac0:	4b4f      	ldr	r3, [pc, #316]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10d      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002acc:	4b4c      	ldr	r3, [pc, #304]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	4a4b      	ldr	r2, [pc, #300]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	61d3      	str	r3, [r2, #28]
 8002ad8:	4b49      	ldr	r3, [pc, #292]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae8:	4b46      	ldr	r3, [pc, #280]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d118      	bne.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002af4:	4b43      	ldr	r3, [pc, #268]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a42      	ldr	r2, [pc, #264]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b00:	f7fe fa26 	bl	8000f50 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b06:	e008      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b08:	f7fe fa22 	bl	8000f50 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	; 0x64
 8002b14:	d901      	bls.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e06d      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1a:	4b3a      	ldr	r3, [pc, #232]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b26:	4b36      	ldr	r3, [pc, #216]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d02e      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d027      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b44:	4b2e      	ldr	r3, [pc, #184]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b4e:	4b2e      	ldr	r3, [pc, #184]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b54:	4b2c      	ldr	r3, [pc, #176]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b5a:	4a29      	ldr	r2, [pc, #164]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d014      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6a:	f7fe f9f1 	bl	8000f50 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b70:	e00a      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b72:	f7fe f9ed 	bl	8000f50 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e036      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b88:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0ee      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b94:	4b1a      	ldr	r3, [pc, #104]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	4917      	ldr	r1, [pc, #92]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ba6:	7dfb      	ldrb	r3, [r7, #23]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d105      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bac:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	4a13      	ldr	r2, [pc, #76]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bc4:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	490b      	ldr	r1, [pc, #44]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002be2:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	4904      	ldr	r1, [pc, #16]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40007000 	.word	0x40007000
 8002c08:	42420440 	.word	0x42420440

08002c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e041      	b.n	8002ca2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d106      	bne.n	8002c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fd ff60 	bl	8000af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3304      	adds	r3, #4
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	f000 fb84 	bl	8003358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d001      	beq.n	8002cc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e03c      	b.n	8002d3e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a1d      	ldr	r2, [pc, #116]	; (8002d48 <HAL_TIM_Base_Start+0x9c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d018      	beq.n	8002d08 <HAL_TIM_Base_Start+0x5c>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a1c      	ldr	r2, [pc, #112]	; (8002d4c <HAL_TIM_Base_Start+0xa0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d013      	beq.n	8002d08 <HAL_TIM_Base_Start+0x5c>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce8:	d00e      	beq.n	8002d08 <HAL_TIM_Base_Start+0x5c>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a18      	ldr	r2, [pc, #96]	; (8002d50 <HAL_TIM_Base_Start+0xa4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d009      	beq.n	8002d08 <HAL_TIM_Base_Start+0x5c>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a16      	ldr	r2, [pc, #88]	; (8002d54 <HAL_TIM_Base_Start+0xa8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d004      	beq.n	8002d08 <HAL_TIM_Base_Start+0x5c>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a15      	ldr	r2, [pc, #84]	; (8002d58 <HAL_TIM_Base_Start+0xac>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d111      	bne.n	8002d2c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b06      	cmp	r3, #6
 8002d18:	d010      	beq.n	8002d3c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0201 	orr.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d2a:	e007      	b.n	8002d3c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	40012c00 	.word	0x40012c00
 8002d4c:	40013400 	.word	0x40013400
 8002d50:	40000400 	.word	0x40000400
 8002d54:	40000800 	.word	0x40000800
 8002d58:	40000c00 	.word	0x40000c00

08002d5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e041      	b.n	8002df2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fd fe92 	bl	8000aac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3304      	adds	r3, #4
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	f000 fadc 	bl	8003358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d109      	bne.n	8002e20 <HAL_TIM_PWM_Start+0x24>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	bf14      	ite	ne
 8002e18:	2301      	movne	r3, #1
 8002e1a:	2300      	moveq	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	e022      	b.n	8002e66 <HAL_TIM_PWM_Start+0x6a>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d109      	bne.n	8002e3a <HAL_TIM_PWM_Start+0x3e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	bf14      	ite	ne
 8002e32:	2301      	movne	r3, #1
 8002e34:	2300      	moveq	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	e015      	b.n	8002e66 <HAL_TIM_PWM_Start+0x6a>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d109      	bne.n	8002e54 <HAL_TIM_PWM_Start+0x58>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	bf14      	ite	ne
 8002e4c:	2301      	movne	r3, #1
 8002e4e:	2300      	moveq	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	e008      	b.n	8002e66 <HAL_TIM_PWM_Start+0x6a>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	bf14      	ite	ne
 8002e60:	2301      	movne	r3, #1
 8002e62:	2300      	moveq	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e072      	b.n	8002f54 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d104      	bne.n	8002e7e <HAL_TIM_PWM_Start+0x82>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e7c:	e013      	b.n	8002ea6 <HAL_TIM_PWM_Start+0xaa>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d104      	bne.n	8002e8e <HAL_TIM_PWM_Start+0x92>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e8c:	e00b      	b.n	8002ea6 <HAL_TIM_PWM_Start+0xaa>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d104      	bne.n	8002e9e <HAL_TIM_PWM_Start+0xa2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e9c:	e003      	b.n	8002ea6 <HAL_TIM_PWM_Start+0xaa>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	6839      	ldr	r1, [r7, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fc78 	bl	80037a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a28      	ldr	r2, [pc, #160]	; (8002f5c <HAL_TIM_PWM_Start+0x160>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d004      	beq.n	8002ec8 <HAL_TIM_PWM_Start+0xcc>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a27      	ldr	r2, [pc, #156]	; (8002f60 <HAL_TIM_PWM_Start+0x164>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d101      	bne.n	8002ecc <HAL_TIM_PWM_Start+0xd0>
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e000      	b.n	8002ece <HAL_TIM_PWM_Start+0xd2>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d007      	beq.n	8002ee2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ee0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a1d      	ldr	r2, [pc, #116]	; (8002f5c <HAL_TIM_PWM_Start+0x160>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d018      	beq.n	8002f1e <HAL_TIM_PWM_Start+0x122>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a1b      	ldr	r2, [pc, #108]	; (8002f60 <HAL_TIM_PWM_Start+0x164>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d013      	beq.n	8002f1e <HAL_TIM_PWM_Start+0x122>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efe:	d00e      	beq.n	8002f1e <HAL_TIM_PWM_Start+0x122>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a17      	ldr	r2, [pc, #92]	; (8002f64 <HAL_TIM_PWM_Start+0x168>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d009      	beq.n	8002f1e <HAL_TIM_PWM_Start+0x122>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a16      	ldr	r2, [pc, #88]	; (8002f68 <HAL_TIM_PWM_Start+0x16c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d004      	beq.n	8002f1e <HAL_TIM_PWM_Start+0x122>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a14      	ldr	r2, [pc, #80]	; (8002f6c <HAL_TIM_PWM_Start+0x170>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d111      	bne.n	8002f42 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b06      	cmp	r3, #6
 8002f2e:	d010      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f40:	e007      	b.n	8002f52 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0201 	orr.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40012c00 	.word	0x40012c00
 8002f60:	40013400 	.word	0x40013400
 8002f64:	40000400 	.word	0x40000400
 8002f68:	40000800 	.word	0x40000800
 8002f6c:	40000c00 	.word	0x40000c00

08002f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d122      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d11b      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0202 	mvn.w	r2, #2
 8002f9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f9b4 	bl	8003320 <HAL_TIM_IC_CaptureCallback>
 8002fb8:	e005      	b.n	8002fc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f9a7 	bl	800330e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f9b6 	bl	8003332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d122      	bne.n	8003020 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d11b      	bne.n	8003020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0204 	mvn.w	r2, #4
 8002ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f98a 	bl	8003320 <HAL_TIM_IC_CaptureCallback>
 800300c:	e005      	b.n	800301a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f97d 	bl	800330e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f98c 	bl	8003332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b08      	cmp	r3, #8
 800302c:	d122      	bne.n	8003074 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b08      	cmp	r3, #8
 800303a:	d11b      	bne.n	8003074 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0208 	mvn.w	r2, #8
 8003044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2204      	movs	r2, #4
 800304a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f960 	bl	8003320 <HAL_TIM_IC_CaptureCallback>
 8003060:	e005      	b.n	800306e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f953 	bl	800330e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f962 	bl	8003332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b10      	cmp	r3, #16
 8003080:	d122      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	2b10      	cmp	r3, #16
 800308e:	d11b      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0210 	mvn.w	r2, #16
 8003098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2208      	movs	r2, #8
 800309e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f936 	bl	8003320 <HAL_TIM_IC_CaptureCallback>
 80030b4:	e005      	b.n	80030c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f929 	bl	800330e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f938 	bl	8003332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d10e      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d107      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0201 	mvn.w	r2, #1
 80030ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f904 	bl	80032fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fe:	2b80      	cmp	r3, #128	; 0x80
 8003100:	d10e      	bne.n	8003120 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310c:	2b80      	cmp	r3, #128	; 0x80
 800310e:	d107      	bne.n	8003120 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fbdb 	bl	80038d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312a:	2b40      	cmp	r3, #64	; 0x40
 800312c:	d10e      	bne.n	800314c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d107      	bne.n	800314c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f8fc 	bl	8003344 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b20      	cmp	r3, #32
 8003158:	d10e      	bne.n	8003178 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b20      	cmp	r3, #32
 8003166:	d107      	bne.n	8003178 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0220 	mvn.w	r2, #32
 8003170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fba6 	bl	80038c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003196:	2302      	movs	r3, #2
 8003198:	e0ac      	b.n	80032f4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b0c      	cmp	r3, #12
 80031a6:	f200 809f 	bhi.w	80032e8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80031aa:	a201      	add	r2, pc, #4	; (adr r2, 80031b0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80031ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b0:	080031e5 	.word	0x080031e5
 80031b4:	080032e9 	.word	0x080032e9
 80031b8:	080032e9 	.word	0x080032e9
 80031bc:	080032e9 	.word	0x080032e9
 80031c0:	08003225 	.word	0x08003225
 80031c4:	080032e9 	.word	0x080032e9
 80031c8:	080032e9 	.word	0x080032e9
 80031cc:	080032e9 	.word	0x080032e9
 80031d0:	08003267 	.word	0x08003267
 80031d4:	080032e9 	.word	0x080032e9
 80031d8:	080032e9 	.word	0x080032e9
 80031dc:	080032e9 	.word	0x080032e9
 80031e0:	080032a7 	.word	0x080032a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 f92e 	bl	800344c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0208 	orr.w	r2, r2, #8
 80031fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0204 	bic.w	r2, r2, #4
 800320e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6999      	ldr	r1, [r3, #24]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	619a      	str	r2, [r3, #24]
      break;
 8003222:	e062      	b.n	80032ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	4618      	mov	r0, r3
 800322c:	f000 f97e 	bl	800352c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699a      	ldr	r2, [r3, #24]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800323e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699a      	ldr	r2, [r3, #24]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800324e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6999      	ldr	r1, [r3, #24]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	021a      	lsls	r2, r3, #8
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	619a      	str	r2, [r3, #24]
      break;
 8003264:	e041      	b.n	80032ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	4618      	mov	r0, r3
 800326e:	f000 f9d1 	bl	8003614 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	69da      	ldr	r2, [r3, #28]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 0208 	orr.w	r2, r2, #8
 8003280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0204 	bic.w	r2, r2, #4
 8003290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69d9      	ldr	r1, [r3, #28]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	61da      	str	r2, [r3, #28]
      break;
 80032a4:	e021      	b.n	80032ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68b9      	ldr	r1, [r7, #8]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fa25 	bl	80036fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69da      	ldr	r2, [r3, #28]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69da      	ldr	r2, [r3, #28]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	69d9      	ldr	r1, [r3, #28]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	021a      	lsls	r2, r3, #8
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	61da      	str	r2, [r3, #28]
      break;
 80032e6:	e000      	b.n	80032ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80032e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	bc80      	pop	{r7}
 800330c:	4770      	bx	lr

0800330e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr

08003332 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr
	...

08003358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a33      	ldr	r2, [pc, #204]	; (8003438 <TIM_Base_SetConfig+0xe0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d013      	beq.n	8003398 <TIM_Base_SetConfig+0x40>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a32      	ldr	r2, [pc, #200]	; (800343c <TIM_Base_SetConfig+0xe4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d00f      	beq.n	8003398 <TIM_Base_SetConfig+0x40>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337e:	d00b      	beq.n	8003398 <TIM_Base_SetConfig+0x40>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a2f      	ldr	r2, [pc, #188]	; (8003440 <TIM_Base_SetConfig+0xe8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d007      	beq.n	8003398 <TIM_Base_SetConfig+0x40>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a2e      	ldr	r2, [pc, #184]	; (8003444 <TIM_Base_SetConfig+0xec>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d003      	beq.n	8003398 <TIM_Base_SetConfig+0x40>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a2d      	ldr	r2, [pc, #180]	; (8003448 <TIM_Base_SetConfig+0xf0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d108      	bne.n	80033aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a22      	ldr	r2, [pc, #136]	; (8003438 <TIM_Base_SetConfig+0xe0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d013      	beq.n	80033da <TIM_Base_SetConfig+0x82>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a21      	ldr	r2, [pc, #132]	; (800343c <TIM_Base_SetConfig+0xe4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d00f      	beq.n	80033da <TIM_Base_SetConfig+0x82>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c0:	d00b      	beq.n	80033da <TIM_Base_SetConfig+0x82>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a1e      	ldr	r2, [pc, #120]	; (8003440 <TIM_Base_SetConfig+0xe8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d007      	beq.n	80033da <TIM_Base_SetConfig+0x82>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a1d      	ldr	r2, [pc, #116]	; (8003444 <TIM_Base_SetConfig+0xec>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d003      	beq.n	80033da <TIM_Base_SetConfig+0x82>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a1c      	ldr	r2, [pc, #112]	; (8003448 <TIM_Base_SetConfig+0xf0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d108      	bne.n	80033ec <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a09      	ldr	r2, [pc, #36]	; (8003438 <TIM_Base_SetConfig+0xe0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d003      	beq.n	8003420 <TIM_Base_SetConfig+0xc8>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a08      	ldr	r2, [pc, #32]	; (800343c <TIM_Base_SetConfig+0xe4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d103      	bne.n	8003428 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	615a      	str	r2, [r3, #20]
}
 800342e:	bf00      	nop
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr
 8003438:	40012c00 	.word	0x40012c00
 800343c:	40013400 	.word	0x40013400
 8003440:	40000400 	.word	0x40000400
 8003444:	40000800 	.word	0x40000800
 8003448:	40000c00 	.word	0x40000c00

0800344c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f023 0201 	bic.w	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0303 	bic.w	r3, r3, #3
 8003482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f023 0302 	bic.w	r3, r3, #2
 8003494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	4313      	orrs	r3, r2
 800349e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a20      	ldr	r2, [pc, #128]	; (8003524 <TIM_OC1_SetConfig+0xd8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d003      	beq.n	80034b0 <TIM_OC1_SetConfig+0x64>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a1f      	ldr	r2, [pc, #124]	; (8003528 <TIM_OC1_SetConfig+0xdc>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d10c      	bne.n	80034ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f023 0308 	bic.w	r3, r3, #8
 80034b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f023 0304 	bic.w	r3, r3, #4
 80034c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a15      	ldr	r2, [pc, #84]	; (8003524 <TIM_OC1_SetConfig+0xd8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d003      	beq.n	80034da <TIM_OC1_SetConfig+0x8e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a14      	ldr	r2, [pc, #80]	; (8003528 <TIM_OC1_SetConfig+0xdc>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d111      	bne.n	80034fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	621a      	str	r2, [r3, #32]
}
 8003518:	bf00      	nop
 800351a:	371c      	adds	r7, #28
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40012c00 	.word	0x40012c00
 8003528:	40013400 	.word	0x40013400

0800352c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f023 0210 	bic.w	r2, r3, #16
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800355a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	021b      	lsls	r3, r3, #8
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4313      	orrs	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f023 0320 	bic.w	r3, r3, #32
 8003576:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a21      	ldr	r2, [pc, #132]	; (800360c <TIM_OC2_SetConfig+0xe0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d003      	beq.n	8003594 <TIM_OC2_SetConfig+0x68>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a20      	ldr	r2, [pc, #128]	; (8003610 <TIM_OC2_SetConfig+0xe4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d10d      	bne.n	80035b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800359a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a16      	ldr	r2, [pc, #88]	; (800360c <TIM_OC2_SetConfig+0xe0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d003      	beq.n	80035c0 <TIM_OC2_SetConfig+0x94>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a15      	ldr	r2, [pc, #84]	; (8003610 <TIM_OC2_SetConfig+0xe4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d113      	bne.n	80035e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	621a      	str	r2, [r3, #32]
}
 8003602:	bf00      	nop
 8003604:	371c      	adds	r7, #28
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr
 800360c:	40012c00 	.word	0x40012c00
 8003610:	40013400 	.word	0x40013400

08003614 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0303 	bic.w	r3, r3, #3
 800364a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800365c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	021b      	lsls	r3, r3, #8
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a21      	ldr	r2, [pc, #132]	; (80036f4 <TIM_OC3_SetConfig+0xe0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d003      	beq.n	800367a <TIM_OC3_SetConfig+0x66>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a20      	ldr	r2, [pc, #128]	; (80036f8 <TIM_OC3_SetConfig+0xe4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d10d      	bne.n	8003696 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003680:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	021b      	lsls	r3, r3, #8
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	4313      	orrs	r3, r2
 800368c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a16      	ldr	r2, [pc, #88]	; (80036f4 <TIM_OC3_SetConfig+0xe0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d003      	beq.n	80036a6 <TIM_OC3_SetConfig+0x92>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a15      	ldr	r2, [pc, #84]	; (80036f8 <TIM_OC3_SetConfig+0xe4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d113      	bne.n	80036ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	621a      	str	r2, [r3, #32]
}
 80036e8:	bf00      	nop
 80036ea:	371c      	adds	r7, #28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40012c00 	.word	0x40012c00
 80036f8:	40013400 	.word	0x40013400

080036fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800372a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	021b      	lsls	r3, r3, #8
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4313      	orrs	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003746:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	031b      	lsls	r3, r3, #12
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a11      	ldr	r2, [pc, #68]	; (800379c <TIM_OC4_SetConfig+0xa0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d003      	beq.n	8003764 <TIM_OC4_SetConfig+0x68>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a10      	ldr	r2, [pc, #64]	; (80037a0 <TIM_OC4_SetConfig+0xa4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d109      	bne.n	8003778 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800376a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	019b      	lsls	r3, r3, #6
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	621a      	str	r2, [r3, #32]
}
 8003792:	bf00      	nop
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr
 800379c:	40012c00 	.word	0x40012c00
 80037a0:	40013400 	.word	0x40013400

080037a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f003 031f 	and.w	r3, r3, #31
 80037b6:	2201      	movs	r2, #1
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a1a      	ldr	r2, [r3, #32]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	43db      	mvns	r3, r3
 80037c6:	401a      	ands	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a1a      	ldr	r2, [r3, #32]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f003 031f 	and.w	r3, r3, #31
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	fa01 f303 	lsl.w	r3, r1, r3
 80037dc:	431a      	orrs	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	621a      	str	r2, [r3, #32]
}
 80037e2:	bf00      	nop
 80037e4:	371c      	adds	r7, #28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr

080037ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003800:	2302      	movs	r3, #2
 8003802:	e050      	b.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800382a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a1b      	ldr	r2, [pc, #108]	; (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d018      	beq.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a19      	ldr	r2, [pc, #100]	; (80038b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d013      	beq.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385a:	d00e      	beq.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a15      	ldr	r2, [pc, #84]	; (80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d009      	beq.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a14      	ldr	r2, [pc, #80]	; (80038bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d004      	beq.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a12      	ldr	r2, [pc, #72]	; (80038c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d10c      	bne.n	8003894 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	4313      	orrs	r3, r2
 800388a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr
 80038b0:	40012c00 	.word	0x40012c00
 80038b4:	40013400 	.word	0x40013400
 80038b8:	40000400 	.word	0x40000400
 80038bc:	40000800 	.word	0x40000800
 80038c0:	40000c00 	.word	0x40000c00

080038c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr

080038d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr

080038e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e03f      	b.n	800397a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fd f942 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2224      	movs	r2, #36	; 0x24
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800392a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fc4b 	bl	80041c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695a      	ldr	r2, [r3, #20]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	4613      	mov	r3, r2
 8003990:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b20      	cmp	r3, #32
 800399c:	d153      	bne.n	8003a46 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <HAL_UART_Transmit_DMA+0x26>
 80039a4:	88fb      	ldrh	r3, [r7, #6]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e04c      	b.n	8003a48 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_UART_Transmit_DMA+0x38>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e045      	b.n	8003a48 <HAL_UART_Transmit_DMA+0xc4>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	88fa      	ldrh	r2, [r7, #6]
 80039ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	88fa      	ldrh	r2, [r7, #6]
 80039d4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2221      	movs	r2, #33	; 0x21
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e8:	4a19      	ldr	r2, [pc, #100]	; (8003a50 <HAL_UART_Transmit_DMA+0xcc>)
 80039ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f0:	4a18      	ldr	r2, [pc, #96]	; (8003a54 <HAL_UART_Transmit_DMA+0xd0>)
 80039f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f8:	4a17      	ldr	r2, [pc, #92]	; (8003a58 <HAL_UART_Transmit_DMA+0xd4>)
 80039fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a00:	2200      	movs	r2, #0
 8003a02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8003a04:	f107 0308 	add.w	r3, r7, #8
 8003a08:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	6819      	ldr	r1, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3304      	adds	r3, #4
 8003a18:	461a      	mov	r2, r3
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	f7fd fe6e 	bl	80016fc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a28:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695a      	ldr	r2, [r3, #20]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a40:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	e000      	b.n	8003a48 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003a46:	2302      	movs	r3, #2
  }
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	08003dfd 	.word	0x08003dfd
 8003a54:	08003e4f 	.word	0x08003e4f
 8003a58:	08003e6b 	.word	0x08003e6b

08003a5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08a      	sub	sp, #40	; 0x28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10d      	bne.n	8003aae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d008      	beq.n	8003aae <HAL_UART_IRQHandler+0x52>
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	f003 0320 	and.w	r3, r3, #32
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fae5 	bl	8004076 <UART_Receive_IT>
      return;
 8003aac:	e17b      	b.n	8003da6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 80b1 	beq.w	8003c18 <HAL_UART_IRQHandler+0x1bc>
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d105      	bne.n	8003acc <HAL_UART_IRQHandler+0x70>
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 80a6 	beq.w	8003c18 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <HAL_UART_IRQHandler+0x90>
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	f043 0201 	orr.w	r2, r3, #1
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <HAL_UART_IRQHandler+0xb0>
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	f043 0202 	orr.w	r2, r3, #2
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <HAL_UART_IRQHandler+0xd0>
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	f043 0204 	orr.w	r2, r3, #4
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00f      	beq.n	8003b56 <HAL_UART_IRQHandler+0xfa>
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	f003 0320 	and.w	r3, r3, #32
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d104      	bne.n	8003b4a <HAL_UART_IRQHandler+0xee>
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f043 0208 	orr.w	r2, r3, #8
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 811e 	beq.w	8003d9c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <HAL_UART_IRQHandler+0x11e>
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fa7e 	bl	8004076 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf14      	ite	ne
 8003b88:	2301      	movne	r3, #1
 8003b8a:	2300      	moveq	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d102      	bne.n	8003ba2 <HAL_UART_IRQHandler+0x146>
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d031      	beq.n	8003c06 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f9c0 	bl	8003f28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d023      	beq.n	8003bfe <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695a      	ldr	r2, [r3, #20]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bc4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d013      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd2:	4a76      	ldr	r2, [pc, #472]	; (8003dac <HAL_UART_IRQHandler+0x350>)
 8003bd4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fd fe28 	bl	8001830 <HAL_DMA_Abort_IT>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d016      	beq.n	8003c14 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf4:	e00e      	b.n	8003c14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f8ec 	bl	8003dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bfc:	e00a      	b.n	8003c14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f8e8 	bl	8003dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c04:	e006      	b.n	8003c14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f8e4 	bl	8003dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c12:	e0c3      	b.n	8003d9c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c14:	bf00      	nop
    return;
 8003c16:	e0c1      	b.n	8003d9c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	f040 80a1 	bne.w	8003d64 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 809b 	beq.w	8003d64 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 8095 	beq.w	8003d64 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d04e      	beq.n	8003cfc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003c68:	8a3b      	ldrh	r3, [r7, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 8098 	beq.w	8003da0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c74:	8a3a      	ldrh	r2, [r7, #16]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	f080 8092 	bcs.w	8003da0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	8a3a      	ldrh	r2, [r7, #16]
 8003c80:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d02b      	beq.n	8003ce4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c9a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695a      	ldr	r2, [r3, #20]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0201 	bic.w	r2, r2, #1
 8003caa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695a      	ldr	r2, [r3, #20]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cba:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0210 	bic.w	r2, r2, #16
 8003cd8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fd fd6b 	bl	80017ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f876 	bl	8003de6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003cfa:	e051      	b.n	8003da0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d047      	beq.n	8003da4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003d14:	8a7b      	ldrh	r3, [r7, #18]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d044      	beq.n	8003da4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d28:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0201 	bic.w	r2, r2, #1
 8003d38:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0210 	bic.w	r2, r2, #16
 8003d56:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d58:	8a7b      	ldrh	r3, [r7, #18]
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f842 	bl	8003de6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d62:	e01f      	b.n	8003da4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d008      	beq.n	8003d80 <HAL_UART_IRQHandler+0x324>
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f915 	bl	8003fa8 <UART_Transmit_IT>
    return;
 8003d7e:	e012      	b.n	8003da6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00d      	beq.n	8003da6 <HAL_UART_IRQHandler+0x34a>
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f956 	bl	8004046 <UART_EndTransmit_IT>
    return;
 8003d9a:	e004      	b.n	8003da6 <HAL_UART_IRQHandler+0x34a>
    return;
 8003d9c:	bf00      	nop
 8003d9e:	e002      	b.n	8003da6 <HAL_UART_IRQHandler+0x34a>
      return;
 8003da0:	bf00      	nop
 8003da2:	e000      	b.n	8003da6 <HAL_UART_IRQHandler+0x34a>
      return;
 8003da4:	bf00      	nop
  }
}
 8003da6:	3728      	adds	r7, #40	; 0x28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	08003f81 	.word	0x08003f81

08003db0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr

08003de6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	460b      	mov	r3, r1
 8003df0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr

08003dfc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d113      	bne.n	8003e40 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695a      	ldr	r2, [r3, #20]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e2c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e3c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e3e:	e002      	b.n	8003e46 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f7fc facb 	bl	80003dc <HAL_UART_TxCpltCallback>
}
 8003e46:	bf00      	nop
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f7ff ffa7 	bl	8003db0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e62:	bf00      	nop
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	bf14      	ite	ne
 8003e8a:	2301      	movne	r3, #1
 8003e8c:	2300      	moveq	r3, #0
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b21      	cmp	r3, #33	; 0x21
 8003e9c:	d108      	bne.n	8003eb0 <UART_DMAError+0x46>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003eaa:	68b8      	ldr	r0, [r7, #8]
 8003eac:	f000 f827 	bl	8003efe <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	bf14      	ite	ne
 8003ebe:	2301      	movne	r3, #1
 8003ec0:	2300      	moveq	r3, #0
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b22      	cmp	r3, #34	; 0x22
 8003ed0:	d108      	bne.n	8003ee4 <UART_DMAError+0x7a>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2200      	movs	r2, #0
 8003edc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003ede:	68b8      	ldr	r0, [r7, #8]
 8003ee0:	f000 f822 	bl	8003f28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	f043 0210 	orr.w	r2, r3, #16
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ef0:	68b8      	ldr	r0, [r7, #8]
 8003ef2:	f7ff ff6f 	bl	8003dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ef6:	bf00      	nop
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003f14:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr

08003f28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f3e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695a      	ldr	r2, [r3, #20]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0201 	bic.w	r2, r2, #1
 8003f4e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d107      	bne.n	8003f68 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0210 	bic.w	r2, r2, #16
 8003f66:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr

08003f80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f7ff ff1a 	bl	8003dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fa0:	bf00      	nop
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b21      	cmp	r3, #33	; 0x21
 8003fba:	d13e      	bne.n	800403a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc4:	d114      	bne.n	8003ff0 <UART_Transmit_IT+0x48>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d110      	bne.n	8003ff0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fe2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	1c9a      	adds	r2, r3, #2
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	621a      	str	r2, [r3, #32]
 8003fee:	e008      	b.n	8004002 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	1c59      	adds	r1, r3, #1
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6211      	str	r1, [r2, #32]
 8003ffa:	781a      	ldrb	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29b      	uxth	r3, r3
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	4619      	mov	r1, r3
 8004010:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10f      	bne.n	8004036 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004024:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004034:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	e000      	b.n	800403c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800403a:	2302      	movs	r3, #2
  }
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr

08004046 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800405c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2220      	movs	r2, #32
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7fc f9b8 	bl	80003dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b086      	sub	sp, #24
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b22      	cmp	r3, #34	; 0x22
 8004088:	f040 8099 	bne.w	80041be <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004094:	d117      	bne.n	80040c6 <UART_Receive_IT+0x50>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d113      	bne.n	80040c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040be:	1c9a      	adds	r2, r3, #2
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	629a      	str	r2, [r3, #40]	; 0x28
 80040c4:	e026      	b.n	8004114 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ca:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d8:	d007      	beq.n	80040ea <UART_Receive_IT+0x74>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <UART_Receive_IT+0x82>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	e008      	b.n	800410a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004104:	b2da      	uxtb	r2, r3
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29b      	uxth	r3, r3
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	4619      	mov	r1, r3
 8004122:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004124:	2b00      	cmp	r3, #0
 8004126:	d148      	bne.n	80041ba <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0220 	bic.w	r2, r2, #32
 8004136:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004146:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695a      	ldr	r2, [r3, #20]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0201 	bic.w	r2, r2, #1
 8004156:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004164:	2b01      	cmp	r3, #1
 8004166:	d123      	bne.n	80041b0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0210 	bic.w	r2, r2, #16
 800417c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b10      	cmp	r3, #16
 800418a:	d10a      	bne.n	80041a2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800418c:	2300      	movs	r3, #0
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041a6:	4619      	mov	r1, r3
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff fe1c 	bl	8003de6 <HAL_UARTEx_RxEventCallback>
 80041ae:	e002      	b.n	80041b6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff fe06 	bl	8003dc2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e002      	b.n	80041c0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	e000      	b.n	80041c0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80041be:	2302      	movs	r3, #2
  }
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004202:	f023 030c 	bic.w	r3, r3, #12
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	430b      	orrs	r3, r1
 800420e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a2c      	ldr	r2, [pc, #176]	; (80042dc <UART_SetConfig+0x114>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d103      	bne.n	8004238 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004230:	f7fe fc04 	bl	8002a3c <HAL_RCC_GetPCLK2Freq>
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	e002      	b.n	800423e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004238:	f7fe fbec 	bl	8002a14 <HAL_RCC_GetPCLK1Freq>
 800423c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	009a      	lsls	r2, r3, #2
 8004248:	441a      	add	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	fbb2 f3f3 	udiv	r3, r2, r3
 8004254:	4a22      	ldr	r2, [pc, #136]	; (80042e0 <UART_SetConfig+0x118>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	0119      	lsls	r1, r3, #4
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	009a      	lsls	r2, r3, #2
 8004268:	441a      	add	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	fbb2 f2f3 	udiv	r2, r2, r3
 8004274:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <UART_SetConfig+0x118>)
 8004276:	fba3 0302 	umull	r0, r3, r3, r2
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	2064      	movs	r0, #100	; 0x64
 800427e:	fb00 f303 	mul.w	r3, r0, r3
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	3332      	adds	r3, #50	; 0x32
 8004288:	4a15      	ldr	r2, [pc, #84]	; (80042e0 <UART_SetConfig+0x118>)
 800428a:	fba2 2303 	umull	r2, r3, r2, r3
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004294:	4419      	add	r1, r3
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	009a      	lsls	r2, r3, #2
 80042a0:	441a      	add	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <UART_SetConfig+0x118>)
 80042ae:	fba3 0302 	umull	r0, r3, r3, r2
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2064      	movs	r0, #100	; 0x64
 80042b6:	fb00 f303 	mul.w	r3, r0, r3
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	3332      	adds	r3, #50	; 0x32
 80042c0:	4a07      	ldr	r2, [pc, #28]	; (80042e0 <UART_SetConfig+0x118>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	f003 020f 	and.w	r2, r3, #15
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	440a      	add	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042d4:	bf00      	nop
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40013800 	.word	0x40013800
 80042e0:	51eb851f 	.word	0x51eb851f

080042e4 <_ZdlPvj>:
 80042e4:	f000 b813 	b.w	800430e <_ZdlPv>

080042e8 <_Znwj>:
 80042e8:	2801      	cmp	r0, #1
 80042ea:	bf38      	it	cc
 80042ec:	2001      	movcc	r0, #1
 80042ee:	b510      	push	{r4, lr}
 80042f0:	4604      	mov	r4, r0
 80042f2:	4620      	mov	r0, r4
 80042f4:	f000 f848 	bl	8004388 <malloc>
 80042f8:	b930      	cbnz	r0, 8004308 <_Znwj+0x20>
 80042fa:	f000 f80b 	bl	8004314 <_ZSt15get_new_handlerv>
 80042fe:	b908      	cbnz	r0, 8004304 <_Znwj+0x1c>
 8004300:	f000 f810 	bl	8004324 <abort>
 8004304:	4780      	blx	r0
 8004306:	e7f4      	b.n	80042f2 <_Znwj+0xa>
 8004308:	bd10      	pop	{r4, pc}

0800430a <_Znaj>:
 800430a:	f7ff bfed 	b.w	80042e8 <_Znwj>

0800430e <_ZdlPv>:
 800430e:	f000 b843 	b.w	8004398 <free>
	...

08004314 <_ZSt15get_new_handlerv>:
 8004314:	4b02      	ldr	r3, [pc, #8]	; (8004320 <_ZSt15get_new_handlerv+0xc>)
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	f3bf 8f5b 	dmb	ish
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000284 	.word	0x20000284

08004324 <abort>:
 8004324:	2006      	movs	r0, #6
 8004326:	b508      	push	{r3, lr}
 8004328:	f000 f968 	bl	80045fc <raise>
 800432c:	2001      	movs	r0, #1
 800432e:	f7fc fd4a 	bl	8000dc6 <_exit>
	...

08004334 <__errno>:
 8004334:	4b01      	ldr	r3, [pc, #4]	; (800433c <__errno+0x8>)
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	2000000c 	.word	0x2000000c

08004340 <__libc_init_array>:
 8004340:	b570      	push	{r4, r5, r6, lr}
 8004342:	2600      	movs	r6, #0
 8004344:	4d0c      	ldr	r5, [pc, #48]	; (8004378 <__libc_init_array+0x38>)
 8004346:	4c0d      	ldr	r4, [pc, #52]	; (800437c <__libc_init_array+0x3c>)
 8004348:	1b64      	subs	r4, r4, r5
 800434a:	10a4      	asrs	r4, r4, #2
 800434c:	42a6      	cmp	r6, r4
 800434e:	d109      	bne.n	8004364 <__libc_init_array+0x24>
 8004350:	f000 fcf0 	bl	8004d34 <_init>
 8004354:	2600      	movs	r6, #0
 8004356:	4d0a      	ldr	r5, [pc, #40]	; (8004380 <__libc_init_array+0x40>)
 8004358:	4c0a      	ldr	r4, [pc, #40]	; (8004384 <__libc_init_array+0x44>)
 800435a:	1b64      	subs	r4, r4, r5
 800435c:	10a4      	asrs	r4, r4, #2
 800435e:	42a6      	cmp	r6, r4
 8004360:	d105      	bne.n	800436e <__libc_init_array+0x2e>
 8004362:	bd70      	pop	{r4, r5, r6, pc}
 8004364:	f855 3b04 	ldr.w	r3, [r5], #4
 8004368:	4798      	blx	r3
 800436a:	3601      	adds	r6, #1
 800436c:	e7ee      	b.n	800434c <__libc_init_array+0xc>
 800436e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004372:	4798      	blx	r3
 8004374:	3601      	adds	r6, #1
 8004376:	e7f2      	b.n	800435e <__libc_init_array+0x1e>
 8004378:	08004e24 	.word	0x08004e24
 800437c:	08004e24 	.word	0x08004e24
 8004380:	08004e24 	.word	0x08004e24
 8004384:	08004e2c 	.word	0x08004e2c

08004388 <malloc>:
 8004388:	4b02      	ldr	r3, [pc, #8]	; (8004394 <malloc+0xc>)
 800438a:	4601      	mov	r1, r0
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	f000 b889 	b.w	80044a4 <_malloc_r>
 8004392:	bf00      	nop
 8004394:	2000000c 	.word	0x2000000c

08004398 <free>:
 8004398:	4b02      	ldr	r3, [pc, #8]	; (80043a4 <free+0xc>)
 800439a:	4601      	mov	r1, r0
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	f000 b819 	b.w	80043d4 <_free_r>
 80043a2:	bf00      	nop
 80043a4:	2000000c 	.word	0x2000000c

080043a8 <memcpy>:
 80043a8:	440a      	add	r2, r1
 80043aa:	4291      	cmp	r1, r2
 80043ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80043b0:	d100      	bne.n	80043b4 <memcpy+0xc>
 80043b2:	4770      	bx	lr
 80043b4:	b510      	push	{r4, lr}
 80043b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043ba:	4291      	cmp	r1, r2
 80043bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043c0:	d1f9      	bne.n	80043b6 <memcpy+0xe>
 80043c2:	bd10      	pop	{r4, pc}

080043c4 <memset>:
 80043c4:	4603      	mov	r3, r0
 80043c6:	4402      	add	r2, r0
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d100      	bne.n	80043ce <memset+0xa>
 80043cc:	4770      	bx	lr
 80043ce:	f803 1b01 	strb.w	r1, [r3], #1
 80043d2:	e7f9      	b.n	80043c8 <memset+0x4>

080043d4 <_free_r>:
 80043d4:	b538      	push	{r3, r4, r5, lr}
 80043d6:	4605      	mov	r5, r0
 80043d8:	2900      	cmp	r1, #0
 80043da:	d040      	beq.n	800445e <_free_r+0x8a>
 80043dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043e0:	1f0c      	subs	r4, r1, #4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	bfb8      	it	lt
 80043e6:	18e4      	addlt	r4, r4, r3
 80043e8:	f000 f944 	bl	8004674 <__malloc_lock>
 80043ec:	4a1c      	ldr	r2, [pc, #112]	; (8004460 <_free_r+0x8c>)
 80043ee:	6813      	ldr	r3, [r2, #0]
 80043f0:	b933      	cbnz	r3, 8004400 <_free_r+0x2c>
 80043f2:	6063      	str	r3, [r4, #4]
 80043f4:	6014      	str	r4, [r2, #0]
 80043f6:	4628      	mov	r0, r5
 80043f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043fc:	f000 b940 	b.w	8004680 <__malloc_unlock>
 8004400:	42a3      	cmp	r3, r4
 8004402:	d908      	bls.n	8004416 <_free_r+0x42>
 8004404:	6820      	ldr	r0, [r4, #0]
 8004406:	1821      	adds	r1, r4, r0
 8004408:	428b      	cmp	r3, r1
 800440a:	bf01      	itttt	eq
 800440c:	6819      	ldreq	r1, [r3, #0]
 800440e:	685b      	ldreq	r3, [r3, #4]
 8004410:	1809      	addeq	r1, r1, r0
 8004412:	6021      	streq	r1, [r4, #0]
 8004414:	e7ed      	b.n	80043f2 <_free_r+0x1e>
 8004416:	461a      	mov	r2, r3
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	b10b      	cbz	r3, 8004420 <_free_r+0x4c>
 800441c:	42a3      	cmp	r3, r4
 800441e:	d9fa      	bls.n	8004416 <_free_r+0x42>
 8004420:	6811      	ldr	r1, [r2, #0]
 8004422:	1850      	adds	r0, r2, r1
 8004424:	42a0      	cmp	r0, r4
 8004426:	d10b      	bne.n	8004440 <_free_r+0x6c>
 8004428:	6820      	ldr	r0, [r4, #0]
 800442a:	4401      	add	r1, r0
 800442c:	1850      	adds	r0, r2, r1
 800442e:	4283      	cmp	r3, r0
 8004430:	6011      	str	r1, [r2, #0]
 8004432:	d1e0      	bne.n	80043f6 <_free_r+0x22>
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	4401      	add	r1, r0
 800443a:	6011      	str	r1, [r2, #0]
 800443c:	6053      	str	r3, [r2, #4]
 800443e:	e7da      	b.n	80043f6 <_free_r+0x22>
 8004440:	d902      	bls.n	8004448 <_free_r+0x74>
 8004442:	230c      	movs	r3, #12
 8004444:	602b      	str	r3, [r5, #0]
 8004446:	e7d6      	b.n	80043f6 <_free_r+0x22>
 8004448:	6820      	ldr	r0, [r4, #0]
 800444a:	1821      	adds	r1, r4, r0
 800444c:	428b      	cmp	r3, r1
 800444e:	bf01      	itttt	eq
 8004450:	6819      	ldreq	r1, [r3, #0]
 8004452:	685b      	ldreq	r3, [r3, #4]
 8004454:	1809      	addeq	r1, r1, r0
 8004456:	6021      	streq	r1, [r4, #0]
 8004458:	6063      	str	r3, [r4, #4]
 800445a:	6054      	str	r4, [r2, #4]
 800445c:	e7cb      	b.n	80043f6 <_free_r+0x22>
 800445e:	bd38      	pop	{r3, r4, r5, pc}
 8004460:	20000288 	.word	0x20000288

08004464 <sbrk_aligned>:
 8004464:	b570      	push	{r4, r5, r6, lr}
 8004466:	4e0e      	ldr	r6, [pc, #56]	; (80044a0 <sbrk_aligned+0x3c>)
 8004468:	460c      	mov	r4, r1
 800446a:	6831      	ldr	r1, [r6, #0]
 800446c:	4605      	mov	r5, r0
 800446e:	b911      	cbnz	r1, 8004476 <sbrk_aligned+0x12>
 8004470:	f000 f88c 	bl	800458c <_sbrk_r>
 8004474:	6030      	str	r0, [r6, #0]
 8004476:	4621      	mov	r1, r4
 8004478:	4628      	mov	r0, r5
 800447a:	f000 f887 	bl	800458c <_sbrk_r>
 800447e:	1c43      	adds	r3, r0, #1
 8004480:	d00a      	beq.n	8004498 <sbrk_aligned+0x34>
 8004482:	1cc4      	adds	r4, r0, #3
 8004484:	f024 0403 	bic.w	r4, r4, #3
 8004488:	42a0      	cmp	r0, r4
 800448a:	d007      	beq.n	800449c <sbrk_aligned+0x38>
 800448c:	1a21      	subs	r1, r4, r0
 800448e:	4628      	mov	r0, r5
 8004490:	f000 f87c 	bl	800458c <_sbrk_r>
 8004494:	3001      	adds	r0, #1
 8004496:	d101      	bne.n	800449c <sbrk_aligned+0x38>
 8004498:	f04f 34ff 	mov.w	r4, #4294967295
 800449c:	4620      	mov	r0, r4
 800449e:	bd70      	pop	{r4, r5, r6, pc}
 80044a0:	2000028c 	.word	0x2000028c

080044a4 <_malloc_r>:
 80044a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a8:	1ccd      	adds	r5, r1, #3
 80044aa:	f025 0503 	bic.w	r5, r5, #3
 80044ae:	3508      	adds	r5, #8
 80044b0:	2d0c      	cmp	r5, #12
 80044b2:	bf38      	it	cc
 80044b4:	250c      	movcc	r5, #12
 80044b6:	2d00      	cmp	r5, #0
 80044b8:	4607      	mov	r7, r0
 80044ba:	db01      	blt.n	80044c0 <_malloc_r+0x1c>
 80044bc:	42a9      	cmp	r1, r5
 80044be:	d905      	bls.n	80044cc <_malloc_r+0x28>
 80044c0:	230c      	movs	r3, #12
 80044c2:	2600      	movs	r6, #0
 80044c4:	603b      	str	r3, [r7, #0]
 80044c6:	4630      	mov	r0, r6
 80044c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044cc:	4e2e      	ldr	r6, [pc, #184]	; (8004588 <_malloc_r+0xe4>)
 80044ce:	f000 f8d1 	bl	8004674 <__malloc_lock>
 80044d2:	6833      	ldr	r3, [r6, #0]
 80044d4:	461c      	mov	r4, r3
 80044d6:	bb34      	cbnz	r4, 8004526 <_malloc_r+0x82>
 80044d8:	4629      	mov	r1, r5
 80044da:	4638      	mov	r0, r7
 80044dc:	f7ff ffc2 	bl	8004464 <sbrk_aligned>
 80044e0:	1c43      	adds	r3, r0, #1
 80044e2:	4604      	mov	r4, r0
 80044e4:	d14d      	bne.n	8004582 <_malloc_r+0xde>
 80044e6:	6834      	ldr	r4, [r6, #0]
 80044e8:	4626      	mov	r6, r4
 80044ea:	2e00      	cmp	r6, #0
 80044ec:	d140      	bne.n	8004570 <_malloc_r+0xcc>
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	4631      	mov	r1, r6
 80044f2:	4638      	mov	r0, r7
 80044f4:	eb04 0803 	add.w	r8, r4, r3
 80044f8:	f000 f848 	bl	800458c <_sbrk_r>
 80044fc:	4580      	cmp	r8, r0
 80044fe:	d13a      	bne.n	8004576 <_malloc_r+0xd2>
 8004500:	6821      	ldr	r1, [r4, #0]
 8004502:	3503      	adds	r5, #3
 8004504:	1a6d      	subs	r5, r5, r1
 8004506:	f025 0503 	bic.w	r5, r5, #3
 800450a:	3508      	adds	r5, #8
 800450c:	2d0c      	cmp	r5, #12
 800450e:	bf38      	it	cc
 8004510:	250c      	movcc	r5, #12
 8004512:	4638      	mov	r0, r7
 8004514:	4629      	mov	r1, r5
 8004516:	f7ff ffa5 	bl	8004464 <sbrk_aligned>
 800451a:	3001      	adds	r0, #1
 800451c:	d02b      	beq.n	8004576 <_malloc_r+0xd2>
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	442b      	add	r3, r5
 8004522:	6023      	str	r3, [r4, #0]
 8004524:	e00e      	b.n	8004544 <_malloc_r+0xa0>
 8004526:	6822      	ldr	r2, [r4, #0]
 8004528:	1b52      	subs	r2, r2, r5
 800452a:	d41e      	bmi.n	800456a <_malloc_r+0xc6>
 800452c:	2a0b      	cmp	r2, #11
 800452e:	d916      	bls.n	800455e <_malloc_r+0xba>
 8004530:	1961      	adds	r1, r4, r5
 8004532:	42a3      	cmp	r3, r4
 8004534:	6025      	str	r5, [r4, #0]
 8004536:	bf18      	it	ne
 8004538:	6059      	strne	r1, [r3, #4]
 800453a:	6863      	ldr	r3, [r4, #4]
 800453c:	bf08      	it	eq
 800453e:	6031      	streq	r1, [r6, #0]
 8004540:	5162      	str	r2, [r4, r5]
 8004542:	604b      	str	r3, [r1, #4]
 8004544:	4638      	mov	r0, r7
 8004546:	f104 060b 	add.w	r6, r4, #11
 800454a:	f000 f899 	bl	8004680 <__malloc_unlock>
 800454e:	f026 0607 	bic.w	r6, r6, #7
 8004552:	1d23      	adds	r3, r4, #4
 8004554:	1af2      	subs	r2, r6, r3
 8004556:	d0b6      	beq.n	80044c6 <_malloc_r+0x22>
 8004558:	1b9b      	subs	r3, r3, r6
 800455a:	50a3      	str	r3, [r4, r2]
 800455c:	e7b3      	b.n	80044c6 <_malloc_r+0x22>
 800455e:	6862      	ldr	r2, [r4, #4]
 8004560:	42a3      	cmp	r3, r4
 8004562:	bf0c      	ite	eq
 8004564:	6032      	streq	r2, [r6, #0]
 8004566:	605a      	strne	r2, [r3, #4]
 8004568:	e7ec      	b.n	8004544 <_malloc_r+0xa0>
 800456a:	4623      	mov	r3, r4
 800456c:	6864      	ldr	r4, [r4, #4]
 800456e:	e7b2      	b.n	80044d6 <_malloc_r+0x32>
 8004570:	4634      	mov	r4, r6
 8004572:	6876      	ldr	r6, [r6, #4]
 8004574:	e7b9      	b.n	80044ea <_malloc_r+0x46>
 8004576:	230c      	movs	r3, #12
 8004578:	4638      	mov	r0, r7
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	f000 f880 	bl	8004680 <__malloc_unlock>
 8004580:	e7a1      	b.n	80044c6 <_malloc_r+0x22>
 8004582:	6025      	str	r5, [r4, #0]
 8004584:	e7de      	b.n	8004544 <_malloc_r+0xa0>
 8004586:	bf00      	nop
 8004588:	20000288 	.word	0x20000288

0800458c <_sbrk_r>:
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	2300      	movs	r3, #0
 8004590:	4d05      	ldr	r5, [pc, #20]	; (80045a8 <_sbrk_r+0x1c>)
 8004592:	4604      	mov	r4, r0
 8004594:	4608      	mov	r0, r1
 8004596:	602b      	str	r3, [r5, #0]
 8004598:	f7fc fc20 	bl	8000ddc <_sbrk>
 800459c:	1c43      	adds	r3, r0, #1
 800459e:	d102      	bne.n	80045a6 <_sbrk_r+0x1a>
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	b103      	cbz	r3, 80045a6 <_sbrk_r+0x1a>
 80045a4:	6023      	str	r3, [r4, #0]
 80045a6:	bd38      	pop	{r3, r4, r5, pc}
 80045a8:	20000290 	.word	0x20000290

080045ac <_raise_r>:
 80045ac:	291f      	cmp	r1, #31
 80045ae:	b538      	push	{r3, r4, r5, lr}
 80045b0:	4604      	mov	r4, r0
 80045b2:	460d      	mov	r5, r1
 80045b4:	d904      	bls.n	80045c0 <_raise_r+0x14>
 80045b6:	2316      	movs	r3, #22
 80045b8:	6003      	str	r3, [r0, #0]
 80045ba:	f04f 30ff 	mov.w	r0, #4294967295
 80045be:	bd38      	pop	{r3, r4, r5, pc}
 80045c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80045c2:	b112      	cbz	r2, 80045ca <_raise_r+0x1e>
 80045c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80045c8:	b94b      	cbnz	r3, 80045de <_raise_r+0x32>
 80045ca:	4620      	mov	r0, r4
 80045cc:	f000 f830 	bl	8004630 <_getpid_r>
 80045d0:	462a      	mov	r2, r5
 80045d2:	4601      	mov	r1, r0
 80045d4:	4620      	mov	r0, r4
 80045d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045da:	f000 b817 	b.w	800460c <_kill_r>
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d00a      	beq.n	80045f8 <_raise_r+0x4c>
 80045e2:	1c59      	adds	r1, r3, #1
 80045e4:	d103      	bne.n	80045ee <_raise_r+0x42>
 80045e6:	2316      	movs	r3, #22
 80045e8:	6003      	str	r3, [r0, #0]
 80045ea:	2001      	movs	r0, #1
 80045ec:	e7e7      	b.n	80045be <_raise_r+0x12>
 80045ee:	2400      	movs	r4, #0
 80045f0:	4628      	mov	r0, r5
 80045f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80045f6:	4798      	blx	r3
 80045f8:	2000      	movs	r0, #0
 80045fa:	e7e0      	b.n	80045be <_raise_r+0x12>

080045fc <raise>:
 80045fc:	4b02      	ldr	r3, [pc, #8]	; (8004608 <raise+0xc>)
 80045fe:	4601      	mov	r1, r0
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	f7ff bfd3 	b.w	80045ac <_raise_r>
 8004606:	bf00      	nop
 8004608:	2000000c 	.word	0x2000000c

0800460c <_kill_r>:
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	2300      	movs	r3, #0
 8004610:	4d06      	ldr	r5, [pc, #24]	; (800462c <_kill_r+0x20>)
 8004612:	4604      	mov	r4, r0
 8004614:	4608      	mov	r0, r1
 8004616:	4611      	mov	r1, r2
 8004618:	602b      	str	r3, [r5, #0]
 800461a:	f7fc fbc4 	bl	8000da6 <_kill>
 800461e:	1c43      	adds	r3, r0, #1
 8004620:	d102      	bne.n	8004628 <_kill_r+0x1c>
 8004622:	682b      	ldr	r3, [r5, #0]
 8004624:	b103      	cbz	r3, 8004628 <_kill_r+0x1c>
 8004626:	6023      	str	r3, [r4, #0]
 8004628:	bd38      	pop	{r3, r4, r5, pc}
 800462a:	bf00      	nop
 800462c:	20000290 	.word	0x20000290

08004630 <_getpid_r>:
 8004630:	f7fc bbb2 	b.w	8000d98 <_getpid>

08004634 <siprintf>:
 8004634:	b40e      	push	{r1, r2, r3}
 8004636:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800463a:	b500      	push	{lr}
 800463c:	b09c      	sub	sp, #112	; 0x70
 800463e:	ab1d      	add	r3, sp, #116	; 0x74
 8004640:	9002      	str	r0, [sp, #8]
 8004642:	9006      	str	r0, [sp, #24]
 8004644:	9107      	str	r1, [sp, #28]
 8004646:	9104      	str	r1, [sp, #16]
 8004648:	4808      	ldr	r0, [pc, #32]	; (800466c <siprintf+0x38>)
 800464a:	4909      	ldr	r1, [pc, #36]	; (8004670 <siprintf+0x3c>)
 800464c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004650:	9105      	str	r1, [sp, #20]
 8004652:	6800      	ldr	r0, [r0, #0]
 8004654:	a902      	add	r1, sp, #8
 8004656:	9301      	str	r3, [sp, #4]
 8004658:	f000 f874 	bl	8004744 <_svfiprintf_r>
 800465c:	2200      	movs	r2, #0
 800465e:	9b02      	ldr	r3, [sp, #8]
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	b01c      	add	sp, #112	; 0x70
 8004664:	f85d eb04 	ldr.w	lr, [sp], #4
 8004668:	b003      	add	sp, #12
 800466a:	4770      	bx	lr
 800466c:	2000000c 	.word	0x2000000c
 8004670:	ffff0208 	.word	0xffff0208

08004674 <__malloc_lock>:
 8004674:	4801      	ldr	r0, [pc, #4]	; (800467c <__malloc_lock+0x8>)
 8004676:	f000 bafb 	b.w	8004c70 <__retarget_lock_acquire_recursive>
 800467a:	bf00      	nop
 800467c:	20000294 	.word	0x20000294

08004680 <__malloc_unlock>:
 8004680:	4801      	ldr	r0, [pc, #4]	; (8004688 <__malloc_unlock+0x8>)
 8004682:	f000 baf6 	b.w	8004c72 <__retarget_lock_release_recursive>
 8004686:	bf00      	nop
 8004688:	20000294 	.word	0x20000294

0800468c <__ssputs_r>:
 800468c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004690:	688e      	ldr	r6, [r1, #8]
 8004692:	4682      	mov	sl, r0
 8004694:	429e      	cmp	r6, r3
 8004696:	460c      	mov	r4, r1
 8004698:	4690      	mov	r8, r2
 800469a:	461f      	mov	r7, r3
 800469c:	d838      	bhi.n	8004710 <__ssputs_r+0x84>
 800469e:	898a      	ldrh	r2, [r1, #12]
 80046a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046a4:	d032      	beq.n	800470c <__ssputs_r+0x80>
 80046a6:	6825      	ldr	r5, [r4, #0]
 80046a8:	6909      	ldr	r1, [r1, #16]
 80046aa:	3301      	adds	r3, #1
 80046ac:	eba5 0901 	sub.w	r9, r5, r1
 80046b0:	6965      	ldr	r5, [r4, #20]
 80046b2:	444b      	add	r3, r9
 80046b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046bc:	106d      	asrs	r5, r5, #1
 80046be:	429d      	cmp	r5, r3
 80046c0:	bf38      	it	cc
 80046c2:	461d      	movcc	r5, r3
 80046c4:	0553      	lsls	r3, r2, #21
 80046c6:	d531      	bpl.n	800472c <__ssputs_r+0xa0>
 80046c8:	4629      	mov	r1, r5
 80046ca:	f7ff feeb 	bl	80044a4 <_malloc_r>
 80046ce:	4606      	mov	r6, r0
 80046d0:	b950      	cbnz	r0, 80046e8 <__ssputs_r+0x5c>
 80046d2:	230c      	movs	r3, #12
 80046d4:	f04f 30ff 	mov.w	r0, #4294967295
 80046d8:	f8ca 3000 	str.w	r3, [sl]
 80046dc:	89a3      	ldrh	r3, [r4, #12]
 80046de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046e2:	81a3      	strh	r3, [r4, #12]
 80046e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e8:	464a      	mov	r2, r9
 80046ea:	6921      	ldr	r1, [r4, #16]
 80046ec:	f7ff fe5c 	bl	80043a8 <memcpy>
 80046f0:	89a3      	ldrh	r3, [r4, #12]
 80046f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046fa:	81a3      	strh	r3, [r4, #12]
 80046fc:	6126      	str	r6, [r4, #16]
 80046fe:	444e      	add	r6, r9
 8004700:	6026      	str	r6, [r4, #0]
 8004702:	463e      	mov	r6, r7
 8004704:	6165      	str	r5, [r4, #20]
 8004706:	eba5 0509 	sub.w	r5, r5, r9
 800470a:	60a5      	str	r5, [r4, #8]
 800470c:	42be      	cmp	r6, r7
 800470e:	d900      	bls.n	8004712 <__ssputs_r+0x86>
 8004710:	463e      	mov	r6, r7
 8004712:	4632      	mov	r2, r6
 8004714:	4641      	mov	r1, r8
 8004716:	6820      	ldr	r0, [r4, #0]
 8004718:	f000 faba 	bl	8004c90 <memmove>
 800471c:	68a3      	ldr	r3, [r4, #8]
 800471e:	2000      	movs	r0, #0
 8004720:	1b9b      	subs	r3, r3, r6
 8004722:	60a3      	str	r3, [r4, #8]
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	4433      	add	r3, r6
 8004728:	6023      	str	r3, [r4, #0]
 800472a:	e7db      	b.n	80046e4 <__ssputs_r+0x58>
 800472c:	462a      	mov	r2, r5
 800472e:	f000 fac9 	bl	8004cc4 <_realloc_r>
 8004732:	4606      	mov	r6, r0
 8004734:	2800      	cmp	r0, #0
 8004736:	d1e1      	bne.n	80046fc <__ssputs_r+0x70>
 8004738:	4650      	mov	r0, sl
 800473a:	6921      	ldr	r1, [r4, #16]
 800473c:	f7ff fe4a 	bl	80043d4 <_free_r>
 8004740:	e7c7      	b.n	80046d2 <__ssputs_r+0x46>
	...

08004744 <_svfiprintf_r>:
 8004744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004748:	4698      	mov	r8, r3
 800474a:	898b      	ldrh	r3, [r1, #12]
 800474c:	4607      	mov	r7, r0
 800474e:	061b      	lsls	r3, r3, #24
 8004750:	460d      	mov	r5, r1
 8004752:	4614      	mov	r4, r2
 8004754:	b09d      	sub	sp, #116	; 0x74
 8004756:	d50e      	bpl.n	8004776 <_svfiprintf_r+0x32>
 8004758:	690b      	ldr	r3, [r1, #16]
 800475a:	b963      	cbnz	r3, 8004776 <_svfiprintf_r+0x32>
 800475c:	2140      	movs	r1, #64	; 0x40
 800475e:	f7ff fea1 	bl	80044a4 <_malloc_r>
 8004762:	6028      	str	r0, [r5, #0]
 8004764:	6128      	str	r0, [r5, #16]
 8004766:	b920      	cbnz	r0, 8004772 <_svfiprintf_r+0x2e>
 8004768:	230c      	movs	r3, #12
 800476a:	603b      	str	r3, [r7, #0]
 800476c:	f04f 30ff 	mov.w	r0, #4294967295
 8004770:	e0d1      	b.n	8004916 <_svfiprintf_r+0x1d2>
 8004772:	2340      	movs	r3, #64	; 0x40
 8004774:	616b      	str	r3, [r5, #20]
 8004776:	2300      	movs	r3, #0
 8004778:	9309      	str	r3, [sp, #36]	; 0x24
 800477a:	2320      	movs	r3, #32
 800477c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004780:	2330      	movs	r3, #48	; 0x30
 8004782:	f04f 0901 	mov.w	r9, #1
 8004786:	f8cd 800c 	str.w	r8, [sp, #12]
 800478a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004930 <_svfiprintf_r+0x1ec>
 800478e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004792:	4623      	mov	r3, r4
 8004794:	469a      	mov	sl, r3
 8004796:	f813 2b01 	ldrb.w	r2, [r3], #1
 800479a:	b10a      	cbz	r2, 80047a0 <_svfiprintf_r+0x5c>
 800479c:	2a25      	cmp	r2, #37	; 0x25
 800479e:	d1f9      	bne.n	8004794 <_svfiprintf_r+0x50>
 80047a0:	ebba 0b04 	subs.w	fp, sl, r4
 80047a4:	d00b      	beq.n	80047be <_svfiprintf_r+0x7a>
 80047a6:	465b      	mov	r3, fp
 80047a8:	4622      	mov	r2, r4
 80047aa:	4629      	mov	r1, r5
 80047ac:	4638      	mov	r0, r7
 80047ae:	f7ff ff6d 	bl	800468c <__ssputs_r>
 80047b2:	3001      	adds	r0, #1
 80047b4:	f000 80aa 	beq.w	800490c <_svfiprintf_r+0x1c8>
 80047b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047ba:	445a      	add	r2, fp
 80047bc:	9209      	str	r2, [sp, #36]	; 0x24
 80047be:	f89a 3000 	ldrb.w	r3, [sl]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 80a2 	beq.w	800490c <_svfiprintf_r+0x1c8>
 80047c8:	2300      	movs	r3, #0
 80047ca:	f04f 32ff 	mov.w	r2, #4294967295
 80047ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047d2:	f10a 0a01 	add.w	sl, sl, #1
 80047d6:	9304      	str	r3, [sp, #16]
 80047d8:	9307      	str	r3, [sp, #28]
 80047da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047de:	931a      	str	r3, [sp, #104]	; 0x68
 80047e0:	4654      	mov	r4, sl
 80047e2:	2205      	movs	r2, #5
 80047e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047e8:	4851      	ldr	r0, [pc, #324]	; (8004930 <_svfiprintf_r+0x1ec>)
 80047ea:	f000 fa43 	bl	8004c74 <memchr>
 80047ee:	9a04      	ldr	r2, [sp, #16]
 80047f0:	b9d8      	cbnz	r0, 800482a <_svfiprintf_r+0xe6>
 80047f2:	06d0      	lsls	r0, r2, #27
 80047f4:	bf44      	itt	mi
 80047f6:	2320      	movmi	r3, #32
 80047f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047fc:	0711      	lsls	r1, r2, #28
 80047fe:	bf44      	itt	mi
 8004800:	232b      	movmi	r3, #43	; 0x2b
 8004802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004806:	f89a 3000 	ldrb.w	r3, [sl]
 800480a:	2b2a      	cmp	r3, #42	; 0x2a
 800480c:	d015      	beq.n	800483a <_svfiprintf_r+0xf6>
 800480e:	4654      	mov	r4, sl
 8004810:	2000      	movs	r0, #0
 8004812:	f04f 0c0a 	mov.w	ip, #10
 8004816:	9a07      	ldr	r2, [sp, #28]
 8004818:	4621      	mov	r1, r4
 800481a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800481e:	3b30      	subs	r3, #48	; 0x30
 8004820:	2b09      	cmp	r3, #9
 8004822:	d94e      	bls.n	80048c2 <_svfiprintf_r+0x17e>
 8004824:	b1b0      	cbz	r0, 8004854 <_svfiprintf_r+0x110>
 8004826:	9207      	str	r2, [sp, #28]
 8004828:	e014      	b.n	8004854 <_svfiprintf_r+0x110>
 800482a:	eba0 0308 	sub.w	r3, r0, r8
 800482e:	fa09 f303 	lsl.w	r3, r9, r3
 8004832:	4313      	orrs	r3, r2
 8004834:	46a2      	mov	sl, r4
 8004836:	9304      	str	r3, [sp, #16]
 8004838:	e7d2      	b.n	80047e0 <_svfiprintf_r+0x9c>
 800483a:	9b03      	ldr	r3, [sp, #12]
 800483c:	1d19      	adds	r1, r3, #4
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	9103      	str	r1, [sp, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	bfbb      	ittet	lt
 8004846:	425b      	neglt	r3, r3
 8004848:	f042 0202 	orrlt.w	r2, r2, #2
 800484c:	9307      	strge	r3, [sp, #28]
 800484e:	9307      	strlt	r3, [sp, #28]
 8004850:	bfb8      	it	lt
 8004852:	9204      	strlt	r2, [sp, #16]
 8004854:	7823      	ldrb	r3, [r4, #0]
 8004856:	2b2e      	cmp	r3, #46	; 0x2e
 8004858:	d10c      	bne.n	8004874 <_svfiprintf_r+0x130>
 800485a:	7863      	ldrb	r3, [r4, #1]
 800485c:	2b2a      	cmp	r3, #42	; 0x2a
 800485e:	d135      	bne.n	80048cc <_svfiprintf_r+0x188>
 8004860:	9b03      	ldr	r3, [sp, #12]
 8004862:	3402      	adds	r4, #2
 8004864:	1d1a      	adds	r2, r3, #4
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	9203      	str	r2, [sp, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	bfb8      	it	lt
 800486e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004872:	9305      	str	r3, [sp, #20]
 8004874:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004934 <_svfiprintf_r+0x1f0>
 8004878:	2203      	movs	r2, #3
 800487a:	4650      	mov	r0, sl
 800487c:	7821      	ldrb	r1, [r4, #0]
 800487e:	f000 f9f9 	bl	8004c74 <memchr>
 8004882:	b140      	cbz	r0, 8004896 <_svfiprintf_r+0x152>
 8004884:	2340      	movs	r3, #64	; 0x40
 8004886:	eba0 000a 	sub.w	r0, r0, sl
 800488a:	fa03 f000 	lsl.w	r0, r3, r0
 800488e:	9b04      	ldr	r3, [sp, #16]
 8004890:	3401      	adds	r4, #1
 8004892:	4303      	orrs	r3, r0
 8004894:	9304      	str	r3, [sp, #16]
 8004896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800489a:	2206      	movs	r2, #6
 800489c:	4826      	ldr	r0, [pc, #152]	; (8004938 <_svfiprintf_r+0x1f4>)
 800489e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048a2:	f000 f9e7 	bl	8004c74 <memchr>
 80048a6:	2800      	cmp	r0, #0
 80048a8:	d038      	beq.n	800491c <_svfiprintf_r+0x1d8>
 80048aa:	4b24      	ldr	r3, [pc, #144]	; (800493c <_svfiprintf_r+0x1f8>)
 80048ac:	bb1b      	cbnz	r3, 80048f6 <_svfiprintf_r+0x1b2>
 80048ae:	9b03      	ldr	r3, [sp, #12]
 80048b0:	3307      	adds	r3, #7
 80048b2:	f023 0307 	bic.w	r3, r3, #7
 80048b6:	3308      	adds	r3, #8
 80048b8:	9303      	str	r3, [sp, #12]
 80048ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048bc:	4433      	add	r3, r6
 80048be:	9309      	str	r3, [sp, #36]	; 0x24
 80048c0:	e767      	b.n	8004792 <_svfiprintf_r+0x4e>
 80048c2:	460c      	mov	r4, r1
 80048c4:	2001      	movs	r0, #1
 80048c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80048ca:	e7a5      	b.n	8004818 <_svfiprintf_r+0xd4>
 80048cc:	2300      	movs	r3, #0
 80048ce:	f04f 0c0a 	mov.w	ip, #10
 80048d2:	4619      	mov	r1, r3
 80048d4:	3401      	adds	r4, #1
 80048d6:	9305      	str	r3, [sp, #20]
 80048d8:	4620      	mov	r0, r4
 80048da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048de:	3a30      	subs	r2, #48	; 0x30
 80048e0:	2a09      	cmp	r2, #9
 80048e2:	d903      	bls.n	80048ec <_svfiprintf_r+0x1a8>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0c5      	beq.n	8004874 <_svfiprintf_r+0x130>
 80048e8:	9105      	str	r1, [sp, #20]
 80048ea:	e7c3      	b.n	8004874 <_svfiprintf_r+0x130>
 80048ec:	4604      	mov	r4, r0
 80048ee:	2301      	movs	r3, #1
 80048f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80048f4:	e7f0      	b.n	80048d8 <_svfiprintf_r+0x194>
 80048f6:	ab03      	add	r3, sp, #12
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	462a      	mov	r2, r5
 80048fc:	4638      	mov	r0, r7
 80048fe:	4b10      	ldr	r3, [pc, #64]	; (8004940 <_svfiprintf_r+0x1fc>)
 8004900:	a904      	add	r1, sp, #16
 8004902:	f3af 8000 	nop.w
 8004906:	1c42      	adds	r2, r0, #1
 8004908:	4606      	mov	r6, r0
 800490a:	d1d6      	bne.n	80048ba <_svfiprintf_r+0x176>
 800490c:	89ab      	ldrh	r3, [r5, #12]
 800490e:	065b      	lsls	r3, r3, #25
 8004910:	f53f af2c 	bmi.w	800476c <_svfiprintf_r+0x28>
 8004914:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004916:	b01d      	add	sp, #116	; 0x74
 8004918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800491c:	ab03      	add	r3, sp, #12
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	462a      	mov	r2, r5
 8004922:	4638      	mov	r0, r7
 8004924:	4b06      	ldr	r3, [pc, #24]	; (8004940 <_svfiprintf_r+0x1fc>)
 8004926:	a904      	add	r1, sp, #16
 8004928:	f000 f87c 	bl	8004a24 <_printf_i>
 800492c:	e7eb      	b.n	8004906 <_svfiprintf_r+0x1c2>
 800492e:	bf00      	nop
 8004930:	08004df0 	.word	0x08004df0
 8004934:	08004df6 	.word	0x08004df6
 8004938:	08004dfa 	.word	0x08004dfa
 800493c:	00000000 	.word	0x00000000
 8004940:	0800468d 	.word	0x0800468d

08004944 <_printf_common>:
 8004944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004948:	4616      	mov	r6, r2
 800494a:	4699      	mov	r9, r3
 800494c:	688a      	ldr	r2, [r1, #8]
 800494e:	690b      	ldr	r3, [r1, #16]
 8004950:	4607      	mov	r7, r0
 8004952:	4293      	cmp	r3, r2
 8004954:	bfb8      	it	lt
 8004956:	4613      	movlt	r3, r2
 8004958:	6033      	str	r3, [r6, #0]
 800495a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800495e:	460c      	mov	r4, r1
 8004960:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004964:	b10a      	cbz	r2, 800496a <_printf_common+0x26>
 8004966:	3301      	adds	r3, #1
 8004968:	6033      	str	r3, [r6, #0]
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	0699      	lsls	r1, r3, #26
 800496e:	bf42      	ittt	mi
 8004970:	6833      	ldrmi	r3, [r6, #0]
 8004972:	3302      	addmi	r3, #2
 8004974:	6033      	strmi	r3, [r6, #0]
 8004976:	6825      	ldr	r5, [r4, #0]
 8004978:	f015 0506 	ands.w	r5, r5, #6
 800497c:	d106      	bne.n	800498c <_printf_common+0x48>
 800497e:	f104 0a19 	add.w	sl, r4, #25
 8004982:	68e3      	ldr	r3, [r4, #12]
 8004984:	6832      	ldr	r2, [r6, #0]
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	42ab      	cmp	r3, r5
 800498a:	dc28      	bgt.n	80049de <_printf_common+0x9a>
 800498c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004990:	1e13      	subs	r3, r2, #0
 8004992:	6822      	ldr	r2, [r4, #0]
 8004994:	bf18      	it	ne
 8004996:	2301      	movne	r3, #1
 8004998:	0692      	lsls	r2, r2, #26
 800499a:	d42d      	bmi.n	80049f8 <_printf_common+0xb4>
 800499c:	4649      	mov	r1, r9
 800499e:	4638      	mov	r0, r7
 80049a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049a4:	47c0      	blx	r8
 80049a6:	3001      	adds	r0, #1
 80049a8:	d020      	beq.n	80049ec <_printf_common+0xa8>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	68e5      	ldr	r5, [r4, #12]
 80049ae:	f003 0306 	and.w	r3, r3, #6
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	bf18      	it	ne
 80049b6:	2500      	movne	r5, #0
 80049b8:	6832      	ldr	r2, [r6, #0]
 80049ba:	f04f 0600 	mov.w	r6, #0
 80049be:	68a3      	ldr	r3, [r4, #8]
 80049c0:	bf08      	it	eq
 80049c2:	1aad      	subeq	r5, r5, r2
 80049c4:	6922      	ldr	r2, [r4, #16]
 80049c6:	bf08      	it	eq
 80049c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049cc:	4293      	cmp	r3, r2
 80049ce:	bfc4      	itt	gt
 80049d0:	1a9b      	subgt	r3, r3, r2
 80049d2:	18ed      	addgt	r5, r5, r3
 80049d4:	341a      	adds	r4, #26
 80049d6:	42b5      	cmp	r5, r6
 80049d8:	d11a      	bne.n	8004a10 <_printf_common+0xcc>
 80049da:	2000      	movs	r0, #0
 80049dc:	e008      	b.n	80049f0 <_printf_common+0xac>
 80049de:	2301      	movs	r3, #1
 80049e0:	4652      	mov	r2, sl
 80049e2:	4649      	mov	r1, r9
 80049e4:	4638      	mov	r0, r7
 80049e6:	47c0      	blx	r8
 80049e8:	3001      	adds	r0, #1
 80049ea:	d103      	bne.n	80049f4 <_printf_common+0xb0>
 80049ec:	f04f 30ff 	mov.w	r0, #4294967295
 80049f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f4:	3501      	adds	r5, #1
 80049f6:	e7c4      	b.n	8004982 <_printf_common+0x3e>
 80049f8:	2030      	movs	r0, #48	; 0x30
 80049fa:	18e1      	adds	r1, r4, r3
 80049fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a06:	4422      	add	r2, r4
 8004a08:	3302      	adds	r3, #2
 8004a0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a0e:	e7c5      	b.n	800499c <_printf_common+0x58>
 8004a10:	2301      	movs	r3, #1
 8004a12:	4622      	mov	r2, r4
 8004a14:	4649      	mov	r1, r9
 8004a16:	4638      	mov	r0, r7
 8004a18:	47c0      	blx	r8
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	d0e6      	beq.n	80049ec <_printf_common+0xa8>
 8004a1e:	3601      	adds	r6, #1
 8004a20:	e7d9      	b.n	80049d6 <_printf_common+0x92>
	...

08004a24 <_printf_i>:
 8004a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a28:	7e0f      	ldrb	r7, [r1, #24]
 8004a2a:	4691      	mov	r9, r2
 8004a2c:	2f78      	cmp	r7, #120	; 0x78
 8004a2e:	4680      	mov	r8, r0
 8004a30:	460c      	mov	r4, r1
 8004a32:	469a      	mov	sl, r3
 8004a34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a3a:	d807      	bhi.n	8004a4c <_printf_i+0x28>
 8004a3c:	2f62      	cmp	r7, #98	; 0x62
 8004a3e:	d80a      	bhi.n	8004a56 <_printf_i+0x32>
 8004a40:	2f00      	cmp	r7, #0
 8004a42:	f000 80d9 	beq.w	8004bf8 <_printf_i+0x1d4>
 8004a46:	2f58      	cmp	r7, #88	; 0x58
 8004a48:	f000 80a4 	beq.w	8004b94 <_printf_i+0x170>
 8004a4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a54:	e03a      	b.n	8004acc <_printf_i+0xa8>
 8004a56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a5a:	2b15      	cmp	r3, #21
 8004a5c:	d8f6      	bhi.n	8004a4c <_printf_i+0x28>
 8004a5e:	a101      	add	r1, pc, #4	; (adr r1, 8004a64 <_printf_i+0x40>)
 8004a60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a64:	08004abd 	.word	0x08004abd
 8004a68:	08004ad1 	.word	0x08004ad1
 8004a6c:	08004a4d 	.word	0x08004a4d
 8004a70:	08004a4d 	.word	0x08004a4d
 8004a74:	08004a4d 	.word	0x08004a4d
 8004a78:	08004a4d 	.word	0x08004a4d
 8004a7c:	08004ad1 	.word	0x08004ad1
 8004a80:	08004a4d 	.word	0x08004a4d
 8004a84:	08004a4d 	.word	0x08004a4d
 8004a88:	08004a4d 	.word	0x08004a4d
 8004a8c:	08004a4d 	.word	0x08004a4d
 8004a90:	08004bdf 	.word	0x08004bdf
 8004a94:	08004b01 	.word	0x08004b01
 8004a98:	08004bc1 	.word	0x08004bc1
 8004a9c:	08004a4d 	.word	0x08004a4d
 8004aa0:	08004a4d 	.word	0x08004a4d
 8004aa4:	08004c01 	.word	0x08004c01
 8004aa8:	08004a4d 	.word	0x08004a4d
 8004aac:	08004b01 	.word	0x08004b01
 8004ab0:	08004a4d 	.word	0x08004a4d
 8004ab4:	08004a4d 	.word	0x08004a4d
 8004ab8:	08004bc9 	.word	0x08004bc9
 8004abc:	682b      	ldr	r3, [r5, #0]
 8004abe:	1d1a      	adds	r2, r3, #4
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	602a      	str	r2, [r5, #0]
 8004ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ac8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004acc:	2301      	movs	r3, #1
 8004ace:	e0a4      	b.n	8004c1a <_printf_i+0x1f6>
 8004ad0:	6820      	ldr	r0, [r4, #0]
 8004ad2:	6829      	ldr	r1, [r5, #0]
 8004ad4:	0606      	lsls	r6, r0, #24
 8004ad6:	f101 0304 	add.w	r3, r1, #4
 8004ada:	d50a      	bpl.n	8004af2 <_printf_i+0xce>
 8004adc:	680e      	ldr	r6, [r1, #0]
 8004ade:	602b      	str	r3, [r5, #0]
 8004ae0:	2e00      	cmp	r6, #0
 8004ae2:	da03      	bge.n	8004aec <_printf_i+0xc8>
 8004ae4:	232d      	movs	r3, #45	; 0x2d
 8004ae6:	4276      	negs	r6, r6
 8004ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aec:	230a      	movs	r3, #10
 8004aee:	485e      	ldr	r0, [pc, #376]	; (8004c68 <_printf_i+0x244>)
 8004af0:	e019      	b.n	8004b26 <_printf_i+0x102>
 8004af2:	680e      	ldr	r6, [r1, #0]
 8004af4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004af8:	602b      	str	r3, [r5, #0]
 8004afa:	bf18      	it	ne
 8004afc:	b236      	sxthne	r6, r6
 8004afe:	e7ef      	b.n	8004ae0 <_printf_i+0xbc>
 8004b00:	682b      	ldr	r3, [r5, #0]
 8004b02:	6820      	ldr	r0, [r4, #0]
 8004b04:	1d19      	adds	r1, r3, #4
 8004b06:	6029      	str	r1, [r5, #0]
 8004b08:	0601      	lsls	r1, r0, #24
 8004b0a:	d501      	bpl.n	8004b10 <_printf_i+0xec>
 8004b0c:	681e      	ldr	r6, [r3, #0]
 8004b0e:	e002      	b.n	8004b16 <_printf_i+0xf2>
 8004b10:	0646      	lsls	r6, r0, #25
 8004b12:	d5fb      	bpl.n	8004b0c <_printf_i+0xe8>
 8004b14:	881e      	ldrh	r6, [r3, #0]
 8004b16:	2f6f      	cmp	r7, #111	; 0x6f
 8004b18:	bf0c      	ite	eq
 8004b1a:	2308      	moveq	r3, #8
 8004b1c:	230a      	movne	r3, #10
 8004b1e:	4852      	ldr	r0, [pc, #328]	; (8004c68 <_printf_i+0x244>)
 8004b20:	2100      	movs	r1, #0
 8004b22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b26:	6865      	ldr	r5, [r4, #4]
 8004b28:	2d00      	cmp	r5, #0
 8004b2a:	bfa8      	it	ge
 8004b2c:	6821      	ldrge	r1, [r4, #0]
 8004b2e:	60a5      	str	r5, [r4, #8]
 8004b30:	bfa4      	itt	ge
 8004b32:	f021 0104 	bicge.w	r1, r1, #4
 8004b36:	6021      	strge	r1, [r4, #0]
 8004b38:	b90e      	cbnz	r6, 8004b3e <_printf_i+0x11a>
 8004b3a:	2d00      	cmp	r5, #0
 8004b3c:	d04d      	beq.n	8004bda <_printf_i+0x1b6>
 8004b3e:	4615      	mov	r5, r2
 8004b40:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b44:	fb03 6711 	mls	r7, r3, r1, r6
 8004b48:	5dc7      	ldrb	r7, [r0, r7]
 8004b4a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b4e:	4637      	mov	r7, r6
 8004b50:	42bb      	cmp	r3, r7
 8004b52:	460e      	mov	r6, r1
 8004b54:	d9f4      	bls.n	8004b40 <_printf_i+0x11c>
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d10b      	bne.n	8004b72 <_printf_i+0x14e>
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	07de      	lsls	r6, r3, #31
 8004b5e:	d508      	bpl.n	8004b72 <_printf_i+0x14e>
 8004b60:	6923      	ldr	r3, [r4, #16]
 8004b62:	6861      	ldr	r1, [r4, #4]
 8004b64:	4299      	cmp	r1, r3
 8004b66:	bfde      	ittt	le
 8004b68:	2330      	movle	r3, #48	; 0x30
 8004b6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b72:	1b52      	subs	r2, r2, r5
 8004b74:	6122      	str	r2, [r4, #16]
 8004b76:	464b      	mov	r3, r9
 8004b78:	4621      	mov	r1, r4
 8004b7a:	4640      	mov	r0, r8
 8004b7c:	f8cd a000 	str.w	sl, [sp]
 8004b80:	aa03      	add	r2, sp, #12
 8004b82:	f7ff fedf 	bl	8004944 <_printf_common>
 8004b86:	3001      	adds	r0, #1
 8004b88:	d14c      	bne.n	8004c24 <_printf_i+0x200>
 8004b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8e:	b004      	add	sp, #16
 8004b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b94:	4834      	ldr	r0, [pc, #208]	; (8004c68 <_printf_i+0x244>)
 8004b96:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b9a:	6829      	ldr	r1, [r5, #0]
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ba2:	6029      	str	r1, [r5, #0]
 8004ba4:	061d      	lsls	r5, r3, #24
 8004ba6:	d514      	bpl.n	8004bd2 <_printf_i+0x1ae>
 8004ba8:	07df      	lsls	r7, r3, #31
 8004baa:	bf44      	itt	mi
 8004bac:	f043 0320 	orrmi.w	r3, r3, #32
 8004bb0:	6023      	strmi	r3, [r4, #0]
 8004bb2:	b91e      	cbnz	r6, 8004bbc <_printf_i+0x198>
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	f023 0320 	bic.w	r3, r3, #32
 8004bba:	6023      	str	r3, [r4, #0]
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	e7af      	b.n	8004b20 <_printf_i+0xfc>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	f043 0320 	orr.w	r3, r3, #32
 8004bc6:	6023      	str	r3, [r4, #0]
 8004bc8:	2378      	movs	r3, #120	; 0x78
 8004bca:	4828      	ldr	r0, [pc, #160]	; (8004c6c <_printf_i+0x248>)
 8004bcc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bd0:	e7e3      	b.n	8004b9a <_printf_i+0x176>
 8004bd2:	0659      	lsls	r1, r3, #25
 8004bd4:	bf48      	it	mi
 8004bd6:	b2b6      	uxthmi	r6, r6
 8004bd8:	e7e6      	b.n	8004ba8 <_printf_i+0x184>
 8004bda:	4615      	mov	r5, r2
 8004bdc:	e7bb      	b.n	8004b56 <_printf_i+0x132>
 8004bde:	682b      	ldr	r3, [r5, #0]
 8004be0:	6826      	ldr	r6, [r4, #0]
 8004be2:	1d18      	adds	r0, r3, #4
 8004be4:	6961      	ldr	r1, [r4, #20]
 8004be6:	6028      	str	r0, [r5, #0]
 8004be8:	0635      	lsls	r5, r6, #24
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	d501      	bpl.n	8004bf2 <_printf_i+0x1ce>
 8004bee:	6019      	str	r1, [r3, #0]
 8004bf0:	e002      	b.n	8004bf8 <_printf_i+0x1d4>
 8004bf2:	0670      	lsls	r0, r6, #25
 8004bf4:	d5fb      	bpl.n	8004bee <_printf_i+0x1ca>
 8004bf6:	8019      	strh	r1, [r3, #0]
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	4615      	mov	r5, r2
 8004bfc:	6123      	str	r3, [r4, #16]
 8004bfe:	e7ba      	b.n	8004b76 <_printf_i+0x152>
 8004c00:	682b      	ldr	r3, [r5, #0]
 8004c02:	2100      	movs	r1, #0
 8004c04:	1d1a      	adds	r2, r3, #4
 8004c06:	602a      	str	r2, [r5, #0]
 8004c08:	681d      	ldr	r5, [r3, #0]
 8004c0a:	6862      	ldr	r2, [r4, #4]
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	f000 f831 	bl	8004c74 <memchr>
 8004c12:	b108      	cbz	r0, 8004c18 <_printf_i+0x1f4>
 8004c14:	1b40      	subs	r0, r0, r5
 8004c16:	6060      	str	r0, [r4, #4]
 8004c18:	6863      	ldr	r3, [r4, #4]
 8004c1a:	6123      	str	r3, [r4, #16]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c22:	e7a8      	b.n	8004b76 <_printf_i+0x152>
 8004c24:	462a      	mov	r2, r5
 8004c26:	4649      	mov	r1, r9
 8004c28:	4640      	mov	r0, r8
 8004c2a:	6923      	ldr	r3, [r4, #16]
 8004c2c:	47d0      	blx	sl
 8004c2e:	3001      	adds	r0, #1
 8004c30:	d0ab      	beq.n	8004b8a <_printf_i+0x166>
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	079b      	lsls	r3, r3, #30
 8004c36:	d413      	bmi.n	8004c60 <_printf_i+0x23c>
 8004c38:	68e0      	ldr	r0, [r4, #12]
 8004c3a:	9b03      	ldr	r3, [sp, #12]
 8004c3c:	4298      	cmp	r0, r3
 8004c3e:	bfb8      	it	lt
 8004c40:	4618      	movlt	r0, r3
 8004c42:	e7a4      	b.n	8004b8e <_printf_i+0x16a>
 8004c44:	2301      	movs	r3, #1
 8004c46:	4632      	mov	r2, r6
 8004c48:	4649      	mov	r1, r9
 8004c4a:	4640      	mov	r0, r8
 8004c4c:	47d0      	blx	sl
 8004c4e:	3001      	adds	r0, #1
 8004c50:	d09b      	beq.n	8004b8a <_printf_i+0x166>
 8004c52:	3501      	adds	r5, #1
 8004c54:	68e3      	ldr	r3, [r4, #12]
 8004c56:	9903      	ldr	r1, [sp, #12]
 8004c58:	1a5b      	subs	r3, r3, r1
 8004c5a:	42ab      	cmp	r3, r5
 8004c5c:	dcf2      	bgt.n	8004c44 <_printf_i+0x220>
 8004c5e:	e7eb      	b.n	8004c38 <_printf_i+0x214>
 8004c60:	2500      	movs	r5, #0
 8004c62:	f104 0619 	add.w	r6, r4, #25
 8004c66:	e7f5      	b.n	8004c54 <_printf_i+0x230>
 8004c68:	08004e01 	.word	0x08004e01
 8004c6c:	08004e12 	.word	0x08004e12

08004c70 <__retarget_lock_acquire_recursive>:
 8004c70:	4770      	bx	lr

08004c72 <__retarget_lock_release_recursive>:
 8004c72:	4770      	bx	lr

08004c74 <memchr>:
 8004c74:	4603      	mov	r3, r0
 8004c76:	b510      	push	{r4, lr}
 8004c78:	b2c9      	uxtb	r1, r1
 8004c7a:	4402      	add	r2, r0
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	4618      	mov	r0, r3
 8004c80:	d101      	bne.n	8004c86 <memchr+0x12>
 8004c82:	2000      	movs	r0, #0
 8004c84:	e003      	b.n	8004c8e <memchr+0x1a>
 8004c86:	7804      	ldrb	r4, [r0, #0]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	428c      	cmp	r4, r1
 8004c8c:	d1f6      	bne.n	8004c7c <memchr+0x8>
 8004c8e:	bd10      	pop	{r4, pc}

08004c90 <memmove>:
 8004c90:	4288      	cmp	r0, r1
 8004c92:	b510      	push	{r4, lr}
 8004c94:	eb01 0402 	add.w	r4, r1, r2
 8004c98:	d902      	bls.n	8004ca0 <memmove+0x10>
 8004c9a:	4284      	cmp	r4, r0
 8004c9c:	4623      	mov	r3, r4
 8004c9e:	d807      	bhi.n	8004cb0 <memmove+0x20>
 8004ca0:	1e43      	subs	r3, r0, #1
 8004ca2:	42a1      	cmp	r1, r4
 8004ca4:	d008      	beq.n	8004cb8 <memmove+0x28>
 8004ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004caa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cae:	e7f8      	b.n	8004ca2 <memmove+0x12>
 8004cb0:	4601      	mov	r1, r0
 8004cb2:	4402      	add	r2, r0
 8004cb4:	428a      	cmp	r2, r1
 8004cb6:	d100      	bne.n	8004cba <memmove+0x2a>
 8004cb8:	bd10      	pop	{r4, pc}
 8004cba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cc2:	e7f7      	b.n	8004cb4 <memmove+0x24>

08004cc4 <_realloc_r>:
 8004cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc8:	4680      	mov	r8, r0
 8004cca:	4614      	mov	r4, r2
 8004ccc:	460e      	mov	r6, r1
 8004cce:	b921      	cbnz	r1, 8004cda <_realloc_r+0x16>
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd6:	f7ff bbe5 	b.w	80044a4 <_malloc_r>
 8004cda:	b92a      	cbnz	r2, 8004ce8 <_realloc_r+0x24>
 8004cdc:	f7ff fb7a 	bl	80043d4 <_free_r>
 8004ce0:	4625      	mov	r5, r4
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ce8:	f000 f81b 	bl	8004d22 <_malloc_usable_size_r>
 8004cec:	4284      	cmp	r4, r0
 8004cee:	4607      	mov	r7, r0
 8004cf0:	d802      	bhi.n	8004cf8 <_realloc_r+0x34>
 8004cf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cf6:	d812      	bhi.n	8004d1e <_realloc_r+0x5a>
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	4640      	mov	r0, r8
 8004cfc:	f7ff fbd2 	bl	80044a4 <_malloc_r>
 8004d00:	4605      	mov	r5, r0
 8004d02:	2800      	cmp	r0, #0
 8004d04:	d0ed      	beq.n	8004ce2 <_realloc_r+0x1e>
 8004d06:	42bc      	cmp	r4, r7
 8004d08:	4622      	mov	r2, r4
 8004d0a:	4631      	mov	r1, r6
 8004d0c:	bf28      	it	cs
 8004d0e:	463a      	movcs	r2, r7
 8004d10:	f7ff fb4a 	bl	80043a8 <memcpy>
 8004d14:	4631      	mov	r1, r6
 8004d16:	4640      	mov	r0, r8
 8004d18:	f7ff fb5c 	bl	80043d4 <_free_r>
 8004d1c:	e7e1      	b.n	8004ce2 <_realloc_r+0x1e>
 8004d1e:	4635      	mov	r5, r6
 8004d20:	e7df      	b.n	8004ce2 <_realloc_r+0x1e>

08004d22 <_malloc_usable_size_r>:
 8004d22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d26:	1f18      	subs	r0, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	bfbc      	itt	lt
 8004d2c:	580b      	ldrlt	r3, [r1, r0]
 8004d2e:	18c0      	addlt	r0, r0, r3
 8004d30:	4770      	bx	lr
	...

08004d34 <_init>:
 8004d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d36:	bf00      	nop
 8004d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3a:	bc08      	pop	{r3}
 8004d3c:	469e      	mov	lr, r3
 8004d3e:	4770      	bx	lr

08004d40 <_fini>:
 8004d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d42:	bf00      	nop
 8004d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d46:	bc08      	pop	{r3}
 8004d48:	469e      	mov	lr, r3
 8004d4a:	4770      	bx	lr
