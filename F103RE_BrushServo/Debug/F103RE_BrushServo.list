
F103RE_BrushServo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005150  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005334  08005334  00015334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005418  08005418  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005418  08005418  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005418  08005418  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005418  08005418  00015418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005420  08005420  00015420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000070  08005498  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08005498  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010191  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c0e  00000000  00000000  0003022a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00032e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00033d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df91  00000000  00000000  00034b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011487  00000000  00000000  00052af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1f7e  00000000  00000000  00063f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105ef6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004410  00000000  00000000  00105f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	0800531c 	.word	0x0800531c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	0800531c 	.word	0x0800531c

08000224 <_ZN8BTS7960BC1EPVmS1_P12GPIO_TypeDeftS3_t>:
 *      Author: Gabriel
 */

#include "BTS7960B.hpp"

BTS7960B::BTS7960B(__IO uint32_t* ina_ccr, __IO uint32_t* inb_ccr, GPIO_TypeDef* inha_gpio_port, uint16_t inha_gpio_pin, GPIO_TypeDef* inhb_gpio_port, uint16_t inhb_gpio_pin)
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
 8000230:	603b      	str	r3, [r7, #0]
 : ina(ina_ccr), inb(inb_ccr), inha_port(inha_gpio_port), inha_pin(inha_gpio_pin), inhb_port(inhb_gpio_port), inhb_pin(inhb_gpio_pin){
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	8b3a      	ldrh	r2, [r7, #24]
 8000248:	819a      	strh	r2, [r3, #12]
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	69fa      	ldr	r2, [r7, #28]
 800024e:	611a      	str	r2, [r3, #16]
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	8c3a      	ldrh	r2, [r7, #32]
 8000254:	829a      	strh	r2, [r3, #20]

}
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	4618      	mov	r0, r3
 800025a:	3714      	adds	r7, #20
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr

08000262 <_ZN8BTS7960B8setSpeedEl>:

void BTS7960B::setSpeed(int32_t speed){
 8000262:	b580      	push	{r7, lr}
 8000264:	b082      	sub	sp, #8
 8000266:	af00      	add	r7, sp, #0
 8000268:	6078      	str	r0, [r7, #4]
 800026a:	6039      	str	r1, [r7, #0]

	if(speed > 0){
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	2b00      	cmp	r3, #0
 8000270:	dd18      	ble.n	80002a4 <_ZN8BTS7960B8setSpeedEl+0x42>
		HAL_GPIO_WritePin(inha_port, inha_pin, GPIO_PIN_SET);
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	6898      	ldr	r0, [r3, #8]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	899b      	ldrh	r3, [r3, #12]
 800027a:	2201      	movs	r2, #1
 800027c:	4619      	mov	r1, r3
 800027e:	f002 fad1 	bl	8002824 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(inhb_port, inhb_pin, GPIO_PIN_SET);
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	6918      	ldr	r0, [r3, #16]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	8a9b      	ldrh	r3, [r3, #20]
 800028a:	2201      	movs	r2, #1
 800028c:	4619      	mov	r1, r3
 800028e:	f002 fac9 	bl	8002824 <HAL_GPIO_WritePin>
		*ina = speed;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	683a      	ldr	r2, [r7, #0]
 8000298:	601a      	str	r2, [r3, #0]
		*inb = 0;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
		*inb = -speed;
	}else{
		HAL_GPIO_WritePin(inha_port, inha_pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(inhb_port, inhb_pin, GPIO_PIN_RESET);
	}
}
 80002a2:	e02c      	b.n	80002fe <_ZN8BTS7960B8setSpeedEl+0x9c>
	}else if(speed < 0){
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	da19      	bge.n	80002de <_ZN8BTS7960B8setSpeedEl+0x7c>
		HAL_GPIO_WritePin(inha_port, inha_pin, GPIO_PIN_SET);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	6898      	ldr	r0, [r3, #8]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	899b      	ldrh	r3, [r3, #12]
 80002b2:	2201      	movs	r2, #1
 80002b4:	4619      	mov	r1, r3
 80002b6:	f002 fab5 	bl	8002824 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(inhb_port, inhb_pin, GPIO_PIN_SET);
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	6918      	ldr	r0, [r3, #16]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	8a9b      	ldrh	r3, [r3, #20]
 80002c2:	2201      	movs	r2, #1
 80002c4:	4619      	mov	r1, r3
 80002c6:	f002 faad 	bl	8002824 <HAL_GPIO_WritePin>
		*ina = 0;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
		*inb = -speed;
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	425a      	negs	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	601a      	str	r2, [r3, #0]
}
 80002dc:	e00f      	b.n	80002fe <_ZN8BTS7960B8setSpeedEl+0x9c>
		HAL_GPIO_WritePin(inha_port, inha_pin, GPIO_PIN_RESET);
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6898      	ldr	r0, [r3, #8]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	899b      	ldrh	r3, [r3, #12]
 80002e6:	2200      	movs	r2, #0
 80002e8:	4619      	mov	r1, r3
 80002ea:	f002 fa9b 	bl	8002824 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(inhb_port, inhb_pin, GPIO_PIN_RESET);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	6918      	ldr	r0, [r3, #16]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	8a9b      	ldrh	r3, [r3, #20]
 80002f6:	2200      	movs	r2, #0
 80002f8:	4619      	mov	r1, r3
 80002fa:	f002 fa93 	bl	8002824 <HAL_GPIO_WritePin>
}
 80002fe:	bf00      	nop
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}

08000306 <_ZN11SerialDebugC1EP20__UART_HandleTypeDef>:
 *      Author: Gabriel
 */

#include "SerialDebug.hpp"

SerialDebug::SerialDebug(UART_HandleTypeDef* huartptr)
 8000306:	b590      	push	{r4, r7, lr}
 8000308:	b083      	sub	sp, #12
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
 800030e:	6039      	str	r1, [r7, #0]
: huartptr(huartptr)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	683a      	ldr	r2, [r7, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2203      	movs	r2, #3
 800031a:	64da      	str	r2, [r3, #76]	; 0x4c
{
	fifo = new StaticFIFO(8);
 800031c:	2014      	movs	r0, #20
 800031e:	f004 fad7 	bl	80048d0 <_Znwj>
 8000322:	4603      	mov	r3, r0
 8000324:	461c      	mov	r4, r3
 8000326:	2108      	movs	r1, #8
 8000328:	4620      	mov	r0, r4
 800032a:	f000 f91f 	bl	800056c <_ZN10StaticFIFOC1Em>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	601c      	str	r4, [r3, #0]
}
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4618      	mov	r0, r3
 8000336:	370c      	adds	r7, #12
 8000338:	46bd      	mov	sp, r7
 800033a:	bd90      	pop	{r4, r7, pc}

0800033c <_ZN11SerialDebugD1Ev>:

SerialDebug::~SerialDebug(){
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	delete fifo;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d004      	beq.n	8000356 <_ZN11SerialDebugD1Ev+0x1a>
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	3204      	adds	r2, #4
 8000350:	6812      	ldr	r2, [r2, #0]
 8000352:	4618      	mov	r0, r3
 8000354:	4790      	blx	r2
}
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4618      	mov	r0, r3
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <_ZN11SerialDebug8sendNextEv>:

void SerialDebug::sendNext(){
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	uint8_t numChars;
	if(fifo->pop(&uartSendBuf, &numChars, 64)){
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	6818      	ldr	r0, [r3, #0]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8000372:	f107 020f 	add.w	r2, r7, #15
 8000376:	2340      	movs	r3, #64	; 0x40
 8000378:	f000 f9ae 	bl	80006d8 <_ZN10StaticFIFO3popEPPhS0_m>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	bf14      	ite	ne
 8000382:	2301      	movne	r3, #1
 8000384:	2300      	moveq	r3, #0
 8000386:	b2db      	uxtb	r3, r3
 8000388:	2b00      	cmp	r3, #0
 800038a:	d008      	beq.n	800039e <_ZN11SerialDebug8sendNextEv+0x3e>
		HAL_UART_Transmit_DMA(huartptr, uartSendBuf, (uint16_t)numChars);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6858      	ldr	r0, [r3, #4]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000394:	7bfa      	ldrb	r2, [r7, #15]
 8000396:	b292      	uxth	r2, r2
 8000398:	4619      	mov	r1, r3
 800039a:	f003 fde7 	bl	8003f6c <HAL_UART_Transmit_DMA>
	}
}
 800039e:	bf00      	nop
 80003a0:	3710      	adds	r7, #16
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}

080003a6 <_ZN11SerialDebug8setLevelEm>:

void SerialDebug::setLevel(uint32_t level)
{
 80003a6:	b480      	push	{r7}
 80003a8:	b083      	sub	sp, #12
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]
 80003ae:	6039      	str	r1, [r7, #0]
	debugLevel = level;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	683a      	ldr	r2, [r7, #0]
 80003b4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80003b6:	bf00      	nop
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr

080003c0 <_ZN11SerialDebug5debugEPKc>:

void SerialDebug::debug(const char* data){
 80003c0:	b590      	push	{r4, r7, lr}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	6039      	str	r1, [r7, #0]
	if (debugLevel <= DEBUG_LEVEL_DEBUG){
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d119      	bne.n	8000406 <_ZN11SerialDebug5debugEPKc+0x46>
		int numChars;
		//while (huartptr->gState != HAL_UART_STATE_READY);	//Trava se estiver ocupado durante um interrupt que manda debug
		numChars = sprintf((char*)uartBuf, "[%13lu] DBG: %.42s\r\n", HAL_GetTick(), data);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	f103 0408 	add.w	r4, r3, #8
 80003d8:	f000 fefe 	bl	80011d8 <HAL_GetTick>
 80003dc:	4602      	mov	r2, r0
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	490b      	ldr	r1, [pc, #44]	; (8000410 <_ZN11SerialDebug5debugEPKc+0x50>)
 80003e2:	4620      	mov	r0, r4
 80003e4:	f004 fc1a 	bl	8004c1c <siprintf>
 80003e8:	60f8      	str	r0, [r7, #12]
		if(numChars > 0){
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	dd0a      	ble.n	8000406 <_ZN11SerialDebug5debugEPKc+0x46>
			//HAL_UART_Transmit_DMA(huartptr, uartBuf, (uint16_t)numChars);
			fifo->push(uartBuf, numChars);
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	6818      	ldr	r0, [r3, #0]
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	3308      	adds	r3, #8
 80003f8:	68fa      	ldr	r2, [r7, #12]
 80003fa:	4619      	mov	r1, r3
 80003fc:	f000 f908 	bl	8000610 <_ZN10StaticFIFO4pushEPhm>
			sendNext();
 8000400:	6878      	ldr	r0, [r7, #4]
 8000402:	f7ff ffad 	bl	8000360 <_ZN11SerialDebug8sendNextEv>
		}
	}
}
 8000406:	bf00      	nop
 8000408:	3714      	adds	r7, #20
 800040a:	46bd      	mov	sp, r7
 800040c:	bd90      	pop	{r4, r7, pc}
 800040e:	bf00      	nop
 8000410:	08005334 	.word	0x08005334

08000414 <HAL_UART_TxCpltCallback>:
BTS7960B motor0(&(TIM3->CCR1), &(TIM3->CCR2), GPIOA, GPIO_PIN_4, GPIOA, GPIO_PIN_5);

char adcprintbuf[64];
uint32_t adcresult = 0;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart){
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1){
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a05      	ldr	r2, [pc, #20]	; (8000434 <HAL_UART_TxCpltCallback+0x20>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d102      	bne.n	800042a <HAL_UART_TxCpltCallback+0x16>
		debug.sendNext();
 8000424:	4804      	ldr	r0, [pc, #16]	; (8000438 <HAL_UART_TxCpltCallback+0x24>)
 8000426:	f7ff ff9b 	bl	8000360 <_ZN11SerialDebug8sendNextEv>
	}
}
 800042a:	bf00      	nop
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	2000023c 	.word	0x2000023c
 8000438:	2000008c 	.word	0x2000008c

0800043c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	sprintf(adcprintbuf, "ADC: %lu", adcresult);
 8000444:	4b07      	ldr	r3, [pc, #28]	; (8000464 <HAL_ADC_ConvCpltCallback+0x28>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	461a      	mov	r2, r3
 800044a:	4907      	ldr	r1, [pc, #28]	; (8000468 <HAL_ADC_ConvCpltCallback+0x2c>)
 800044c:	4807      	ldr	r0, [pc, #28]	; (800046c <HAL_ADC_ConvCpltCallback+0x30>)
 800044e:	f004 fbe5 	bl	8004c1c <siprintf>
	debug.debug(adcprintbuf);
 8000452:	4906      	ldr	r1, [pc, #24]	; (800046c <HAL_ADC_ConvCpltCallback+0x30>)
 8000454:	4806      	ldr	r0, [pc, #24]	; (8000470 <HAL_ADC_ConvCpltCallback+0x34>)
 8000456:	f7ff ffb3 	bl	80003c0 <_ZN11SerialDebug5debugEPKc>
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000134 	.word	0x20000134
 8000468:	08005394 	.word	0x08005394
 800046c:	200000f4 	.word	0x200000f4
 8000470:	2000008c 	.word	0x2000008c

08000474 <Start>:

void Start(){
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	debug.setLevel(SerialDebug::DEBUG_LEVEL_DEBUG);
 8000478:	2100      	movs	r1, #0
 800047a:	4811      	ldr	r0, [pc, #68]	; (80004c0 <Start+0x4c>)
 800047c:	f7ff ff93 	bl	80003a6 <_ZN11SerialDebug8setLevelEm>
	while(true){
		HAL_ADC_Start_DMA(&hadc1, &adcresult, 1);
 8000480:	2201      	movs	r2, #1
 8000482:	4910      	ldr	r1, [pc, #64]	; (80004c4 <Start+0x50>)
 8000484:	4810      	ldr	r0, [pc, #64]	; (80004c8 <Start+0x54>)
 8000486:	f000 ffbf 	bl	8001408 <HAL_ADC_Start_DMA>
		//HAL_Delay(2);
		debug.debug("512");
 800048a:	4910      	ldr	r1, [pc, #64]	; (80004cc <Start+0x58>)
 800048c:	480c      	ldr	r0, [pc, #48]	; (80004c0 <Start+0x4c>)
 800048e:	f7ff ff97 	bl	80003c0 <_ZN11SerialDebug5debugEPKc>
		motor0.setSpeed(512);
 8000492:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000496:	480e      	ldr	r0, [pc, #56]	; (80004d0 <Start+0x5c>)
 8000498:	f7ff fee3 	bl	8000262 <_ZN8BTS7960B8setSpeedEl>
		HAL_Delay(500);
 800049c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004a0:	f000 fea4 	bl	80011ec <HAL_Delay>
		debug.debug("-512");
 80004a4:	490b      	ldr	r1, [pc, #44]	; (80004d4 <Start+0x60>)
 80004a6:	4806      	ldr	r0, [pc, #24]	; (80004c0 <Start+0x4c>)
 80004a8:	f7ff ff8a 	bl	80003c0 <_ZN11SerialDebug5debugEPKc>
		motor0.setSpeed(-512);
 80004ac:	490a      	ldr	r1, [pc, #40]	; (80004d8 <Start+0x64>)
 80004ae:	4808      	ldr	r0, [pc, #32]	; (80004d0 <Start+0x5c>)
 80004b0:	f7ff fed7 	bl	8000262 <_ZN8BTS7960B8setSpeedEl>
		HAL_Delay(500);
 80004b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004b8:	f000 fe98 	bl	80011ec <HAL_Delay>
		HAL_ADC_Start_DMA(&hadc1, &adcresult, 1);
 80004bc:	e7e0      	b.n	8000480 <Start+0xc>
 80004be:	bf00      	nop
 80004c0:	2000008c 	.word	0x2000008c
 80004c4:	20000134 	.word	0x20000134
 80004c8:	20000138 	.word	0x20000138
 80004cc:	080053a0 	.word	0x080053a0
 80004d0:	200000dc 	.word	0x200000dc
 80004d4:	080053a4 	.word	0x080053a4
 80004d8:	fffffe00 	.word	0xfffffe00

080004dc <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af04      	add	r7, sp, #16
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d114      	bne.n	8000516 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d10f      	bne.n	8000516 <_Z41__static_initialization_and_destruction_0ii+0x3a>
SerialDebug debug(&huart1);
 80004f6:	490f      	ldr	r1, [pc, #60]	; (8000534 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80004f8:	480f      	ldr	r0, [pc, #60]	; (8000538 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80004fa:	f7ff ff04 	bl	8000306 <_ZN11SerialDebugC1EP20__UART_HandleTypeDef>
BTS7960B motor0(&(TIM3->CCR1), &(TIM3->CCR2), GPIOA, GPIO_PIN_4, GPIOA, GPIO_PIN_5);
 80004fe:	2320      	movs	r3, #32
 8000500:	9302      	str	r3, [sp, #8]
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	2310      	movs	r3, #16
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800050c:	4a0c      	ldr	r2, [pc, #48]	; (8000540 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800050e:	490d      	ldr	r1, [pc, #52]	; (8000544 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000510:	480d      	ldr	r0, [pc, #52]	; (8000548 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000512:	f7ff fe87 	bl	8000224 <_ZN8BTS7960BC1EPVmS1_P12GPIO_TypeDeftS3_t>
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d107      	bne.n	800052c <_Z41__static_initialization_and_destruction_0ii+0x50>
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000522:	4293      	cmp	r3, r2
 8000524:	d102      	bne.n	800052c <_Z41__static_initialization_and_destruction_0ii+0x50>
SerialDebug debug(&huart1);
 8000526:	4804      	ldr	r0, [pc, #16]	; (8000538 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000528:	f7ff ff08 	bl	800033c <_ZN11SerialDebugD1Ev>
}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	2000023c 	.word	0x2000023c
 8000538:	2000008c 	.word	0x2000008c
 800053c:	40010800 	.word	0x40010800
 8000540:	40000438 	.word	0x40000438
 8000544:	40000434 	.word	0x40000434
 8000548:	200000dc 	.word	0x200000dc

0800054c <_GLOBAL__sub_I_debug>:
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
 8000550:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000554:	2001      	movs	r0, #1
 8000556:	f7ff ffc1 	bl	80004dc <_Z41__static_initialization_and_destruction_0ii>
 800055a:	bd80      	pop	{r7, pc}

0800055c <_GLOBAL__sub_D_debug>:
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
 8000560:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000564:	2000      	movs	r0, #0
 8000566:	f7ff ffb9 	bl	80004dc <_Z41__static_initialization_and_destruction_0ii>
 800056a:	bd80      	pop	{r7, pc}

0800056c <_ZN10StaticFIFOC1Em>:

#include "StaticFIFO.hpp"

#include <cstring>

StaticFIFO::StaticFIFO(uint32_t fifoSize) : fifoSize(fifoSize){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	4a11      	ldr	r2, [pc, #68]	; (80005bc <_ZN10StaticFIFOC1Em+0x50>)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	683a      	ldr	r2, [r7, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
	fifo = new StringContainer[fifoSize];
 800058e:	683a      	ldr	r2, [r7, #0]
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <_ZN10StaticFIFOC1Em+0x54>)
 8000592:	429a      	cmp	r2, r3
 8000594:	d804      	bhi.n	80005a0 <_ZN10StaticFIFOC1Em+0x34>
 8000596:	4613      	mov	r3, r2
 8000598:	011b      	lsls	r3, r3, #4
 800059a:	4413      	add	r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	e001      	b.n	80005a4 <_ZN10StaticFIFOC1Em+0x38>
 80005a0:	f04f 33ff 	mov.w	r3, #4294967295
 80005a4:	4618      	mov	r0, r3
 80005a6:	f004 f9a4 	bl	80048f2 <_Znaj>
 80005aa:	4603      	mov	r3, r0
 80005ac:	461a      	mov	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	609a      	str	r2, [r3, #8]
}
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	080053c4 	.word	0x080053c4
 80005c0:	01e1e1e1 	.word	0x01e1e1e1

080005c4 <_ZN10StaticFIFOD1Ev>:

StaticFIFO::~StaticFIFO() {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	4a07      	ldr	r2, [pc, #28]	; (80005ec <_ZN10StaticFIFOD1Ev+0x28>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	601a      	str	r2, [r3, #0]
	delete fifo;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d003      	beq.n	80005e2 <_ZN10StaticFIFOD1Ev+0x1e>
 80005da:	2144      	movs	r1, #68	; 0x44
 80005dc:	4618      	mov	r0, r3
 80005de:	f004 f975 	bl	80048cc <_ZdlPvj>
}
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	080053c4 	.word	0x080053c4

080005f0 <_ZN10StaticFIFOD0Ev>:
StaticFIFO::~StaticFIFO() {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
}
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff ffe3 	bl	80005c4 <_ZN10StaticFIFOD1Ev>
 80005fe:	2114      	movs	r1, #20
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f004 f963 	bl	80048cc <_ZdlPvj>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <_ZN10StaticFIFO4pushEPhm>:
	fifo[lastIdx] = stringContainer;
	lastIdx = (lastIdx + 1) % fifoSize;
	return (((fifoSize + lastIdx) - firstIdx) % fifoSize);
}

int32_t StaticFIFO::push(uint8_t* pointer, uint32_t length){
 8000610:	b580      	push	{r7, lr}
 8000612:	b096      	sub	sp, #88	; 0x58
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
	if (((fifoSize + firstIdx) - lastIdx) % fifoSize == 1) {
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	685a      	ldr	r2, [r3, #4]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	441a      	add	r2, r3
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	691b      	ldr	r3, [r3, #16]
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	68fa      	ldr	r2, [r7, #12]
 800062e:	6852      	ldr	r2, [r2, #4]
 8000630:	fbb3 f1f2 	udiv	r1, r3, r2
 8000634:	fb01 f202 	mul.w	r2, r1, r2
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	2b01      	cmp	r3, #1
 800063c:	d101      	bne.n	8000642 <_ZN10StaticFIFO4pushEPhm+0x32>
		return 0; //overflow
 800063e:	2300      	movs	r3, #0
 8000640:	e046      	b.n	80006d0 <_ZN10StaticFIFO4pushEPhm+0xc0>
	}else if(length > bufSize){
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2b40      	cmp	r3, #64	; 0x40
 8000646:	d902      	bls.n	800064e <_ZN10StaticFIFO4pushEPhm+0x3e>
		return -1; //length limit
 8000648:	f04f 33ff 	mov.w	r3, #4294967295
 800064c:	e040      	b.n	80006d0 <_ZN10StaticFIFO4pushEPhm+0xc0>
	}
	StringContainer stringContainer;
	for(uint32_t i=0; i < length; i++){
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	; 0x54
 8000652:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	429a      	cmp	r2, r3
 8000658:	d20d      	bcs.n	8000676 <_ZN10StaticFIFO4pushEPhm+0x66>
		stringContainer.buffer[i] = pointer[i];
 800065a:	68ba      	ldr	r2, [r7, #8]
 800065c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800065e:	4413      	add	r3, r2
 8000660:	7819      	ldrb	r1, [r3, #0]
 8000662:	f107 0210 	add.w	r2, r7, #16
 8000666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000668:	4413      	add	r3, r2
 800066a:	460a      	mov	r2, r1
 800066c:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i < length; i++){
 800066e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000670:	3301      	adds	r3, #1
 8000672:	657b      	str	r3, [r7, #84]	; 0x54
 8000674:	e7ed      	b.n	8000652 <_ZN10StaticFIFO4pushEPhm+0x42>
	}
	stringContainer.length = length;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	653b      	str	r3, [r7, #80]	; 0x50
	fifo[lastIdx] = stringContainer;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	6899      	ldr	r1, [r3, #8]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	691a      	ldr	r2, [r3, #16]
 8000682:	4613      	mov	r3, r2
 8000684:	011b      	lsls	r3, r3, #4
 8000686:	4413      	add	r3, r2
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	440b      	add	r3, r1
 800068c:	4618      	mov	r0, r3
 800068e:	f107 0310 	add.w	r3, r7, #16
 8000692:	2244      	movs	r2, #68	; 0x44
 8000694:	4619      	mov	r1, r3
 8000696:	f004 f97b 	bl	8004990 <memcpy>
	lastIdx = (lastIdx + 1) % fifoSize;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	691b      	ldr	r3, [r3, #16]
 800069e:	3301      	adds	r3, #1
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	6852      	ldr	r2, [r2, #4]
 80006a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80006a8:	fb01 f202 	mul.w	r2, r1, r2
 80006ac:	1a9a      	subs	r2, r3, r2
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	611a      	str	r2, [r3, #16]
	return (((fifoSize + lastIdx) - firstIdx) % fifoSize);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	685a      	ldr	r2, [r3, #4]
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	691b      	ldr	r3, [r3, #16]
 80006ba:	441a      	add	r2, r3
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	6852      	ldr	r2, [r2, #4]
 80006c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80006ca:	fb01 f202 	mul.w	r2, r1, r2
 80006ce:	1a9b      	subs	r3, r3, r2
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3758      	adds	r7, #88	; 0x58
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <_ZN10StaticFIFO3popEPPhS0_m>:
	fifo[lastIdx] = stringContainer;
	lastIdx = (lastIdx + 1) % fifoSize;
	return (((fifoSize + lastIdx) - firstIdx) % fifoSize);
}

int32_t StaticFIFO::pop(uint8_t** pointer, uint8_t* length, uint32_t max_length){
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
 80006e4:	603b      	str	r3, [r7, #0]
    if (lastIdx == firstIdx){
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	691a      	ldr	r2, [r3, #16]
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	68db      	ldr	r3, [r3, #12]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d101      	bne.n	80006f6 <_ZN10StaticFIFO3popEPPhS0_m+0x1e>
    	return 0;	//underrun
 80006f2:	2300      	movs	r3, #0
 80006f4:	e044      	b.n	8000780 <_ZN10StaticFIFO3popEPPhS0_m+0xa8>
    }else if(fifo[firstIdx].length > max_length){
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	6899      	ldr	r1, [r3, #8]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	68da      	ldr	r2, [r3, #12]
 80006fe:	4613      	mov	r3, r2
 8000700:	011b      	lsls	r3, r3, #4
 8000702:	4413      	add	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	440b      	add	r3, r1
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	429a      	cmp	r2, r3
 800070e:	d202      	bcs.n	8000716 <_ZN10StaticFIFO3popEPPhS0_m+0x3e>
    	return -1;	//length limit
 8000710:	f04f 33ff 	mov.w	r3, #4294967295
 8000714:	e034      	b.n	8000780 <_ZN10StaticFIFO3popEPPhS0_m+0xa8>
    }
    *pointer = fifo[firstIdx].buffer;
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	6899      	ldr	r1, [r3, #8]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	68da      	ldr	r2, [r3, #12]
 800071e:	4613      	mov	r3, r2
 8000720:	011b      	lsls	r3, r3, #4
 8000722:	4413      	add	r3, r2
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	440b      	add	r3, r1
 8000728:	461a      	mov	r2, r3
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	601a      	str	r2, [r3, #0]
    *length = fifo[firstIdx].length;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	6899      	ldr	r1, [r3, #8]
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	68da      	ldr	r2, [r3, #12]
 8000736:	4613      	mov	r3, r2
 8000738:	011b      	lsls	r3, r3, #4
 800073a:	4413      	add	r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	440b      	add	r3, r1
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	b2da      	uxtb	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	701a      	strb	r2, [r3, #0]
    firstIdx = (firstIdx + 1) % fifoSize;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	3301      	adds	r3, #1
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	6852      	ldr	r2, [r2, #4]
 8000752:	fbb3 f1f2 	udiv	r1, r3, r2
 8000756:	fb01 f202 	mul.w	r2, r1, r2
 800075a:	1a9a      	subs	r2, r3, r2
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	60da      	str	r2, [r3, #12]
    return ((((fifoSize + lastIdx) - firstIdx) % fifoSize) + 1);
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	685a      	ldr	r2, [r3, #4]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	691b      	ldr	r3, [r3, #16]
 8000768:	441a      	add	r2, r3
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	68db      	ldr	r3, [r3, #12]
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	68fa      	ldr	r2, [r7, #12]
 8000772:	6852      	ldr	r2, [r2, #4]
 8000774:	fbb3 f1f2 	udiv	r1, r3, r2
 8000778:	fb01 f202 	mul.w	r2, r1, r2
 800077c:	1a9b      	subs	r3, r3, r2
 800077e:	3301      	adds	r3, #1
}
 8000780:	4618      	mov	r0, r3
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr
	...

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000790:	f000 fcca 	bl	8001128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000794:	f000 f81e 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000798:	f000 f9cc 	bl	8000b34 <MX_GPIO_Init>
  MX_DMA_Init();
 800079c:	f000 f9a4 	bl	8000ae8 <MX_DMA_Init>
  MX_TIM3_Init();
 80007a0:	f000 f8b4 	bl	800090c <MX_TIM3_Init>
  MX_TIM6_Init();
 80007a4:	f000 f916 	bl	80009d4 <MX_TIM6_Init>
  MX_ADC1_Init();
 80007a8:	f000 f872 	bl	8000890 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80007ac:	f000 f948 	bl	8000a40 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80007b0:	f000 f970 	bl	8000a94 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 80007b4:	4806      	ldr	r0, [pc, #24]	; (80007d0 <main+0x44>)
 80007b6:	f002 fd6d 	bl	8003294 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80007ba:	2100      	movs	r1, #0
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <main+0x44>)
 80007be:	f002 fe11 	bl	80033e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80007c2:	2104      	movs	r1, #4
 80007c4:	4802      	ldr	r0, [pc, #8]	; (80007d0 <main+0x44>)
 80007c6:	f002 fe0d 	bl	80033e4 <HAL_TIM_PWM_Start>
  Start();
 80007ca:	f7ff fe53 	bl	8000474 <Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <main+0x42>
 80007d0:	200001ac 	.word	0x200001ac

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b096      	sub	sp, #88	; 0x58
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007de:	2228      	movs	r2, #40	; 0x28
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f004 f8e2 	bl	80049ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
 8000806:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000808:	2301      	movs	r3, #1
 800080a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800080c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000810:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000816:	2301      	movs	r3, #1
 8000818:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000822:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000824:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000828:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800082e:	4618      	mov	r0, r3
 8000830:	f002 f810 	bl	8002854 <HAL_RCC_OscConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800083a:	f000 f9d1 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	230f      	movs	r3, #15
 8000840:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000842:	2302      	movs	r3, #2
 8000844:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	2102      	movs	r1, #2
 800085a:	4618      	mov	r0, r3
 800085c:	f002 fa7c 	bl	8002d58 <HAL_RCC_ClockConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000866:	f000 f9bb 	bl	8000be0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800086a:	2302      	movs	r3, #2
 800086c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800086e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000872:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4618      	mov	r0, r3
 8000878:	f002 fc06 	bl	8003088 <HAL_RCCEx_PeriphCLKConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000882:	f000 f9ad 	bl	8000be0 <Error_Handler>
  }
}
 8000886:	bf00      	nop
 8000888:	3758      	adds	r7, #88	; 0x58
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_ADC1_Init+0x74>)
 80008a2:	4a19      	ldr	r2, [pc, #100]	; (8000908 <MX_ADC1_Init+0x78>)
 80008a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_ADC1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_ADC1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_ADC1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_ADC1_Init+0x74>)
 80008ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c0:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_ADC1_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_ADC1_Init+0x74>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <MX_ADC1_Init+0x74>)
 80008ce:	f000 fcb1 	bl	8001234 <HAL_ADC_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80008d8:	f000 f982 	bl	8000be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008dc:	230a      	movs	r3, #10
 80008de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_ADC1_Init+0x74>)
 80008ee:	f000 fe7b 	bl	80015e8 <HAL_ADC_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80008f8:	f000 f972 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000138 	.word	0x20000138
 8000908:	40012400 	.word	0x40012400

0800090c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000912:	f107 0320 	add.w	r3, r7, #32
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]
 800092a:	615a      	str	r2, [r3, #20]
 800092c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800092e:	4b27      	ldr	r3, [pc, #156]	; (80009cc <MX_TIM3_Init+0xc0>)
 8000930:	4a27      	ldr	r2, [pc, #156]	; (80009d0 <MX_TIM3_Init+0xc4>)
 8000932:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6;
 8000934:	4b25      	ldr	r3, [pc, #148]	; (80009cc <MX_TIM3_Init+0xc0>)
 8000936:	2206      	movs	r2, #6
 8000938:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093a:	4b24      	ldr	r3, [pc, #144]	; (80009cc <MX_TIM3_Init+0xc0>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2047;
 8000940:	4b22      	ldr	r3, [pc, #136]	; (80009cc <MX_TIM3_Init+0xc0>)
 8000942:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000946:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <MX_TIM3_Init+0xc0>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_TIM3_Init+0xc0>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000954:	481d      	ldr	r0, [pc, #116]	; (80009cc <MX_TIM3_Init+0xc0>)
 8000956:	f002 fcf5 	bl	8003344 <HAL_TIM_PWM_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000960:	f000 f93e 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800096c:	f107 0320 	add.w	r3, r7, #32
 8000970:	4619      	mov	r1, r3
 8000972:	4816      	ldr	r0, [pc, #88]	; (80009cc <MX_TIM3_Init+0xc0>)
 8000974:	f003 fa2e 	bl	8003dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800097e:	f000 f92f 	bl	8000be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000982:	2360      	movs	r3, #96	; 0x60
 8000984:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	4619      	mov	r1, r3
 8000998:	480c      	ldr	r0, [pc, #48]	; (80009cc <MX_TIM3_Init+0xc0>)
 800099a:	f002 fee5 	bl	8003768 <HAL_TIM_PWM_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80009a4:	f000 f91c 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2204      	movs	r2, #4
 80009ac:	4619      	mov	r1, r3
 80009ae:	4807      	ldr	r0, [pc, #28]	; (80009cc <MX_TIM3_Init+0xc0>)
 80009b0:	f002 feda 	bl	8003768 <HAL_TIM_PWM_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009ba:	f000 f911 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009be:	4803      	ldr	r0, [pc, #12]	; (80009cc <MX_TIM3_Init+0xc0>)
 80009c0:	f000 f9f2 	bl	8000da8 <HAL_TIM_MspPostInit>

}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200001ac 	.word	0x200001ac
 80009d0:	40000400 	.word	0x40000400

080009d4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009da:	463b      	mov	r3, r7
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_TIM6_Init+0x64>)
 80009e4:	4a15      	ldr	r2, [pc, #84]	; (8000a3c <MX_TIM6_Init+0x68>)
 80009e6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_TIM6_Init+0x64>)
 80009ea:	2247      	movs	r2, #71	; 0x47
 80009ec:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_TIM6_Init+0x64>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80009f4:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <MX_TIM6_Init+0x64>)
 80009f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009fa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fc:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_TIM6_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a02:	480d      	ldr	r0, [pc, #52]	; (8000a38 <MX_TIM6_Init+0x64>)
 8000a04:	f002 fbf6 	bl	80031f4 <HAL_TIM_Base_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000a0e:	f000 f8e7 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4806      	ldr	r0, [pc, #24]	; (8000a38 <MX_TIM6_Init+0x64>)
 8000a20:	f003 f9d8 	bl	8003dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000a2a:	f000 f8d9 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200001f4 	.word	0x200001f4
 8000a3c:	40001000 	.word	0x40001000

08000a40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <MX_USART1_UART_Init+0x50>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a4c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000a50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a78:	f003 fa2a 	bl	8003ed0 <HAL_UART_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a82:	f000 f8ad 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000023c 	.word	0x2000023c
 8000a90:	40013800 	.word	0x40013800

08000a94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <MX_USART3_UART_Init+0x50>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000aa0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000aa4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000acc:	f003 fa00 	bl	8003ed0 <HAL_UART_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ad6:	f000 f883 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000280 	.word	0x20000280
 8000ae4:	40004800 	.word	0x40004800

08000ae8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <MX_DMA_Init+0x48>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <MX_DMA_Init+0x48>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6153      	str	r3, [r2, #20]
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <MX_DMA_Init+0x48>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	200b      	movs	r0, #11
 8000b0c:	f001 f83d 	bl	8001b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b10:	200b      	movs	r0, #11
 8000b12:	f001 f856 	bl	8001bc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	200e      	movs	r0, #14
 8000b1c:	f001 f835 	bl	8001b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000b20:	200e      	movs	r0, #14
 8000b22:	f001 f84e 	bl	8001bc2 <HAL_NVIC_EnableIRQ>

}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000

08000b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b48:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a22      	ldr	r2, [pc, #136]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b4e:	f043 0310 	orr.w	r3, r3, #16
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0310 	and.w	r3, r3, #16
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b60:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a1c      	ldr	r2, [pc, #112]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b66:	f043 0320 	orr.w	r3, r3, #32
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0320 	and.w	r3, r3, #32
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a16      	ldr	r2, [pc, #88]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b96:	f043 0308 	orr.w	r3, r3, #8
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0308 	and.w	r3, r3, #8
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2130      	movs	r1, #48	; 0x30
 8000bac:	480b      	ldr	r0, [pc, #44]	; (8000bdc <MX_GPIO_Init+0xa8>)
 8000bae:	f001 fe39 	bl	8002824 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bb2:	2330      	movs	r3, #48	; 0x30
 8000bb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0310 	add.w	r3, r7, #16
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4804      	ldr	r0, [pc, #16]	; (8000bdc <MX_GPIO_Init+0xa8>)
 8000bca:	f001 fc97 	bl	80024fc <HAL_GPIO_Init>

}
 8000bce:	bf00      	nop
 8000bd0:	3720      	adds	r7, #32
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010800 	.word	0x40010800

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <Error_Handler+0x8>
	...

08000bec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_MspInit+0x5c>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <HAL_MspInit+0x5c>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6193      	str	r3, [r2, #24]
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	61d3      	str	r3, [r2, #28]
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <HAL_MspInit+0x60>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <HAL_MspInit+0x60>)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010000 	.word	0x40010000

08000c50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a28      	ldr	r2, [pc, #160]	; (8000d0c <HAL_ADC_MspInit+0xbc>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d149      	bne.n	8000d04 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c70:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <HAL_ADC_MspInit+0xc0>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a26      	ldr	r2, [pc, #152]	; (8000d10 <HAL_ADC_MspInit+0xc0>)
 8000c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <HAL_ADC_MspInit+0xc0>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c88:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <HAL_ADC_MspInit+0xc0>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a20      	ldr	r2, [pc, #128]	; (8000d10 <HAL_ADC_MspInit+0xc0>)
 8000c8e:	f043 0310 	orr.w	r3, r3, #16
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <HAL_ADC_MspInit+0xc0>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0310 	and.w	r3, r3, #16
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4619      	mov	r1, r3
 8000cae:	4819      	ldr	r0, [pc, #100]	; (8000d14 <HAL_ADC_MspInit+0xc4>)
 8000cb0:	f001 fc24 	bl	80024fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000cb4:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <HAL_ADC_MspInit+0xc8>)
 8000cb6:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <HAL_ADC_MspInit+0xcc>)
 8000cb8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <HAL_ADC_MspInit+0xc8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <HAL_ADC_MspInit+0xc8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <HAL_ADC_MspInit+0xc8>)
 8000cc8:	2280      	movs	r2, #128	; 0x80
 8000cca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_ADC_MspInit+0xc8>)
 8000cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <HAL_ADC_MspInit+0xc8>)
 8000cd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cda:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_ADC_MspInit+0xc8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_ADC_MspInit+0xc8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ce8:	480b      	ldr	r0, [pc, #44]	; (8000d18 <HAL_ADC_MspInit+0xc8>)
 8000cea:	f000 ff85 	bl	8001bf8 <HAL_DMA_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000cf4:	f7ff ff74 	bl	8000be0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <HAL_ADC_MspInit+0xc8>)
 8000cfc:	621a      	str	r2, [r3, #32]
 8000cfe:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <HAL_ADC_MspInit+0xc8>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d04:	bf00      	nop
 8000d06:	3720      	adds	r7, #32
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40012400 	.word	0x40012400
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40011000 	.word	0x40011000
 8000d18:	20000168 	.word	0x20000168
 8000d1c:	40020008 	.word	0x40020008

08000d20 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <HAL_TIM_PWM_MspInit+0x44>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d113      	bne.n	8000d5a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_TIM_PWM_MspInit+0x48>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	4a0c      	ldr	r2, [pc, #48]	; (8000d68 <HAL_TIM_PWM_MspInit+0x48>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	61d3      	str	r3, [r2, #28]
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_TIM_PWM_MspInit+0x48>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	201d      	movs	r0, #29
 8000d50:	f000 ff1b 	bl	8001b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d54:	201d      	movs	r0, #29
 8000d56:	f000 ff34 	bl	8001bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40000400 	.word	0x40000400
 8000d68:	40021000 	.word	0x40021000

08000d6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a09      	ldr	r2, [pc, #36]	; (8000da0 <HAL_TIM_Base_MspInit+0x34>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d10b      	bne.n	8000d96 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_TIM_Base_MspInit+0x38>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <HAL_TIM_Base_MspInit+0x38>)
 8000d84:	f043 0310 	orr.w	r3, r3, #16
 8000d88:	61d3      	str	r3, [r2, #28]
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_TIM_Base_MspInit+0x38>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	f003 0310 	and.w	r3, r3, #16
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	40001000 	.word	0x40001000
 8000da4:	40021000 	.word	0x40021000

08000da8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a0f      	ldr	r2, [pc, #60]	; (8000e00 <HAL_TIM_MspPostInit+0x58>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d117      	bne.n	8000df8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <HAL_TIM_MspPostInit+0x5c>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <HAL_TIM_MspPostInit+0x5c>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	6193      	str	r3, [r2, #24]
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_TIM_MspPostInit+0x5c>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000de0:	23c0      	movs	r3, #192	; 0xc0
 8000de2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2302      	movs	r3, #2
 8000dea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	4619      	mov	r1, r3
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <HAL_TIM_MspPostInit+0x60>)
 8000df4:	f001 fb82 	bl	80024fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000df8:	bf00      	nop
 8000dfa:	3720      	adds	r7, #32
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40000400 	.word	0x40000400
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40010800 	.word	0x40010800

08000e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0318 	add.w	r3, r7, #24
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a4f      	ldr	r2, [pc, #316]	; (8000f64 <HAL_UART_MspInit+0x158>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d160      	bne.n	8000eee <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e2c:	4b4e      	ldr	r3, [pc, #312]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a4d      	ldr	r2, [pc, #308]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000e32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b4b      	ldr	r3, [pc, #300]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	4b48      	ldr	r3, [pc, #288]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a47      	ldr	r2, [pc, #284]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000e4a:	f043 0304 	orr.w	r3, r3, #4
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b45      	ldr	r3, [pc, #276]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0318 	add.w	r3, r7, #24
 8000e6e:	4619      	mov	r1, r3
 8000e70:	483e      	ldr	r0, [pc, #248]	; (8000f6c <HAL_UART_MspInit+0x160>)
 8000e72:	f001 fb43 	bl	80024fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 0318 	add.w	r3, r7, #24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4838      	ldr	r0, [pc, #224]	; (8000f6c <HAL_UART_MspInit+0x160>)
 8000e8c:	f001 fb36 	bl	80024fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000e90:	4b37      	ldr	r3, [pc, #220]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000e92:	4a38      	ldr	r2, [pc, #224]	; (8000f74 <HAL_UART_MspInit+0x168>)
 8000e94:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e96:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000e98:	2210      	movs	r2, #16
 8000e9a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e9c:	4b34      	ldr	r3, [pc, #208]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ea2:	4b33      	ldr	r3, [pc, #204]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ea8:	4b31      	ldr	r3, [pc, #196]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eae:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000eb4:	4b2e      	ldr	r3, [pc, #184]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000eba:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000ec0:	482b      	ldr	r0, [pc, #172]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000ec2:	f000 fe99 	bl	8001bf8 <HAL_DMA_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000ecc:	f7ff fe88 	bl	8000be0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a27      	ldr	r2, [pc, #156]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000ed4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ed6:	4a26      	ldr	r2, [pc, #152]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2025      	movs	r0, #37	; 0x25
 8000ee2:	f000 fe52 	bl	8001b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ee6:	2025      	movs	r0, #37	; 0x25
 8000ee8:	f000 fe6b 	bl	8001bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eec:	e036      	b.n	8000f5c <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART3)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a21      	ldr	r2, [pc, #132]	; (8000f78 <HAL_UART_MspInit+0x16c>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d131      	bne.n	8000f5c <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ef8:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000efa:	69db      	ldr	r3, [r3, #28]
 8000efc:	4a1a      	ldr	r2, [pc, #104]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000efe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f02:	61d3      	str	r3, [r2, #28]
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000f06:	69db      	ldr	r3, [r3, #28]
 8000f08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000f16:	f043 0308 	orr.w	r3, r3, #8
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0308 	and.w	r3, r3, #8
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f36:	f107 0318 	add.w	r3, r7, #24
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480f      	ldr	r0, [pc, #60]	; (8000f7c <HAL_UART_MspInit+0x170>)
 8000f3e:	f001 fadd 	bl	80024fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f50:	f107 0318 	add.w	r3, r7, #24
 8000f54:	4619      	mov	r1, r3
 8000f56:	4809      	ldr	r0, [pc, #36]	; (8000f7c <HAL_UART_MspInit+0x170>)
 8000f58:	f001 fad0 	bl	80024fc <HAL_GPIO_Init>
}
 8000f5c:	bf00      	nop
 8000f5e:	3728      	adds	r7, #40	; 0x28
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40013800 	.word	0x40013800
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40010800 	.word	0x40010800
 8000f70:	200002c4 	.word	0x200002c4
 8000f74:	40020044 	.word	0x40020044
 8000f78:	40004800 	.word	0x40004800
 8000f7c:	40010c00 	.word	0x40010c00

08000f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <NMI_Handler+0x4>

08000f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <HardFault_Handler+0x4>

08000f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <MemManage_Handler+0x4>

08000f92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <BusFault_Handler+0x4>

08000f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <UsageFault_Handler+0x4>

08000f9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr

08000faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr

08000fc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc6:	f000 f8f5 	bl	80011b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <DMA1_Channel1_IRQHandler+0x10>)
 8000fd6:	f001 f827 	bl	8002028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000168 	.word	0x20000168

08000fe4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <DMA1_Channel4_IRQHandler+0x10>)
 8000fea:	f001 f81d 	bl	8002028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200002c4 	.word	0x200002c4

08000ff8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <TIM3_IRQHandler+0x10>)
 8000ffe:	f002 faab 	bl	8003558 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200001ac 	.word	0x200001ac

0800100c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <USART1_IRQHandler+0x10>)
 8001012:	f003 f817 	bl	8004044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000023c 	.word	0x2000023c

08001020 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	return 1;
 8001024:	2301      	movs	r3, #1
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr

0800102e <_kill>:

int _kill(int pid, int sig)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001038:	f003 fc70 	bl	800491c <__errno>
 800103c:	4603      	mov	r3, r0
 800103e:	2216      	movs	r2, #22
 8001040:	601a      	str	r2, [r3, #0]
	return -1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <_exit>:

void _exit (int status)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001056:	f04f 31ff 	mov.w	r1, #4294967295
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffe7 	bl	800102e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001060:	e7fe      	b.n	8001060 <_exit+0x12>
	...

08001064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800106c:	4a14      	ldr	r2, [pc, #80]	; (80010c0 <_sbrk+0x5c>)
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <_sbrk+0x60>)
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d102      	bne.n	8001086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <_sbrk+0x64>)
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <_sbrk+0x68>)
 8001084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	429a      	cmp	r2, r3
 8001092:	d207      	bcs.n	80010a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001094:	f003 fc42 	bl	800491c <__errno>
 8001098:	4603      	mov	r3, r0
 800109a:	220c      	movs	r2, #12
 800109c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	e009      	b.n	80010b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <_sbrk+0x64>)
 80010b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b6:	68fb      	ldr	r3, [r7, #12]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20010000 	.word	0x20010000
 80010c4:	00000400 	.word	0x00000400
 80010c8:	20000308 	.word	0x20000308
 80010cc:	20000328 	.word	0x20000328

080010d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010de:	490d      	ldr	r1, [pc, #52]	; (8001114 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010e0:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f4:	4c0a      	ldr	r4, [pc, #40]	; (8001120 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001102:	f7ff ffe5 	bl	80010d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001106:	f003 fc0f 	bl	8004928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800110a:	f7ff fb3f 	bl	800078c <main>
  bx lr
 800110e:	4770      	bx	lr
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001118:	08005428 	.word	0x08005428
  ldr r2, =_sbss
 800111c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001120:	20000324 	.word	0x20000324

08001124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC1_2_IRQHandler>
	...

08001128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <HAL_Init+0x28>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <HAL_Init+0x28>)
 8001132:	f043 0310 	orr.w	r3, r3, #16
 8001136:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001138:	2003      	movs	r0, #3
 800113a:	f000 fd1b 	bl	8001b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800113e:	200f      	movs	r0, #15
 8001140:	f000 f808 	bl	8001154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001144:	f7ff fd52 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40022000 	.word	0x40022000

08001154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_InitTick+0x54>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_InitTick+0x58>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	fbb3 f3f1 	udiv	r3, r3, r1
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f000 fd33 	bl	8001bde <HAL_SYSTICK_Config>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e00e      	b.n	80011a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b0f      	cmp	r3, #15
 8001186:	d80a      	bhi.n	800119e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001188:	2200      	movs	r2, #0
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f000 fcfb 	bl	8001b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001194:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <HAL_InitTick+0x5c>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	e000      	b.n	80011a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000000 	.word	0x20000000
 80011ac:	20000008 	.word	0x20000008
 80011b0:	20000004 	.word	0x20000004

080011b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_IncTick+0x1c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_IncTick+0x20>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a03      	ldr	r2, [pc, #12]	; (80011d4 <HAL_IncTick+0x20>)
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	20000008 	.word	0x20000008
 80011d4:	2000030c 	.word	0x2000030c

080011d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return uwTick;
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <HAL_GetTick+0x10>)
 80011de:	681b      	ldr	r3, [r3, #0]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	2000030c 	.word	0x2000030c

080011ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f4:	f7ff fff0 	bl	80011d8 <HAL_GetTick>
 80011f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001204:	d005      	beq.n	8001212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_Delay+0x44>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001212:	bf00      	nop
 8001214:	f7ff ffe0 	bl	80011d8 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	429a      	cmp	r2, r3
 8001222:	d8f7      	bhi.n	8001214 <HAL_Delay+0x28>
  {
  }
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008

08001234 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e0ce      	b.n	80013f4 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001260:	2b00      	cmp	r3, #0
 8001262:	d109      	bne.n	8001278 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fcec 	bl	8000c50 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 fb07 	bl	800188c <ADC_ConversionStop_Disable>
 800127e:	4603      	mov	r3, r0
 8001280:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	2b00      	cmp	r3, #0
 800128c:	f040 80a9 	bne.w	80013e2 <HAL_ADC_Init+0x1ae>
 8001290:	7dfb      	ldrb	r3, [r7, #23]
 8001292:	2b00      	cmp	r3, #0
 8001294:	f040 80a5 	bne.w	80013e2 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012a0:	f023 0302 	bic.w	r3, r3, #2
 80012a4:	f043 0202 	orr.w	r2, r3, #2
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4951      	ldr	r1, [pc, #324]	; (80013fc <HAL_ADC_Init+0x1c8>)
 80012b6:	428b      	cmp	r3, r1
 80012b8:	d10a      	bne.n	80012d0 <HAL_ADC_Init+0x9c>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80012c2:	d002      	beq.n	80012ca <HAL_ADC_Init+0x96>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	e004      	b.n	80012d4 <HAL_ADC_Init+0xa0>
 80012ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80012ce:	e001      	b.n	80012d4 <HAL_ADC_Init+0xa0>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7b1b      	ldrb	r3, [r3, #12]
 80012da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012ec:	d003      	beq.n	80012f6 <HAL_ADC_Init+0xc2>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d102      	bne.n	80012fc <HAL_ADC_Init+0xc8>
 80012f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fa:	e000      	b.n	80012fe <HAL_ADC_Init+0xca>
 80012fc:	2300      	movs	r3, #0
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7d1b      	ldrb	r3, [r3, #20]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d119      	bne.n	8001340 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7b1b      	ldrb	r3, [r3, #12]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d109      	bne.n	8001328 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	3b01      	subs	r3, #1
 800131a:	035a      	lsls	r2, r3, #13
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	e00b      	b.n	8001340 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132c:	f043 0220 	orr.w	r2, r3, #32
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	f043 0201 	orr.w	r2, r3, #1
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	430a      	orrs	r2, r1
 8001352:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	4b29      	ldr	r3, [pc, #164]	; (8001400 <HAL_ADC_Init+0x1cc>)
 800135c:	4013      	ands	r3, r2
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	68b9      	ldr	r1, [r7, #8]
 8001364:	430b      	orrs	r3, r1
 8001366:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001370:	d003      	beq.n	800137a <HAL_ADC_Init+0x146>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d104      	bne.n	8001384 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	3b01      	subs	r3, #1
 8001380:	051b      	lsls	r3, r3, #20
 8001382:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	430a      	orrs	r2, r1
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <HAL_ADC_Init+0x1d0>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d10b      	bne.n	80013c0 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b2:	f023 0303 	bic.w	r3, r3, #3
 80013b6:	f043 0201 	orr.w	r2, r3, #1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013be:	e018      	b.n	80013f2 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	f023 0312 	bic.w	r3, r3, #18
 80013c8:	f043 0210 	orr.w	r2, r3, #16
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	f043 0201 	orr.w	r2, r3, #1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013e0:	e007      	b.n	80013f2 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e6:	f043 0210 	orr.w	r2, r3, #16
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40013c00 	.word	0x40013c00
 8001400:	ffe1f7fd 	.word	0xffe1f7fd
 8001404:	ff1f0efe 	.word	0xff1f0efe

08001408 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a64      	ldr	r2, [pc, #400]	; (80015b0 <HAL_ADC_Start_DMA+0x1a8>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d004      	beq.n	800142c <HAL_ADC_Start_DMA+0x24>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a63      	ldr	r2, [pc, #396]	; (80015b4 <HAL_ADC_Start_DMA+0x1ac>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d106      	bne.n	800143a <HAL_ADC_Start_DMA+0x32>
 800142c:	4b60      	ldr	r3, [pc, #384]	; (80015b0 <HAL_ADC_Start_DMA+0x1a8>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001434:	2b00      	cmp	r3, #0
 8001436:	f040 80b3 	bne.w	80015a0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_ADC_Start_DMA+0x40>
 8001444:	2302      	movs	r3, #2
 8001446:	e0ae      	b.n	80015a6 <HAL_ADC_Start_DMA+0x19e>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f000 f9c1 	bl	80017d8 <ADC_Enable>
 8001456:	4603      	mov	r3, r0
 8001458:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800145a:	7dfb      	ldrb	r3, [r7, #23]
 800145c:	2b00      	cmp	r3, #0
 800145e:	f040 809a 	bne.w	8001596 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800146a:	f023 0301 	bic.w	r3, r3, #1
 800146e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a4e      	ldr	r2, [pc, #312]	; (80015b4 <HAL_ADC_Start_DMA+0x1ac>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d105      	bne.n	800148c <HAL_ADC_Start_DMA+0x84>
 8001480:	4b4b      	ldr	r3, [pc, #300]	; (80015b0 <HAL_ADC_Start_DMA+0x1a8>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d115      	bne.n	80014b8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001490:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d026      	beq.n	80014f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014b6:	e01d      	b.n	80014f4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a39      	ldr	r2, [pc, #228]	; (80015b0 <HAL_ADC_Start_DMA+0x1a8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d004      	beq.n	80014d8 <HAL_ADC_Start_DMA+0xd0>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a38      	ldr	r2, [pc, #224]	; (80015b4 <HAL_ADC_Start_DMA+0x1ac>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d10d      	bne.n	80014f4 <HAL_ADC_Start_DMA+0xec>
 80014d8:	4b35      	ldr	r3, [pc, #212]	; (80015b0 <HAL_ADC_Start_DMA+0x1a8>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d007      	beq.n	80014f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d006      	beq.n	800150e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001504:	f023 0206 	bic.w	r2, r3, #6
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
 800150c:	e002      	b.n	8001514 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	4a25      	ldr	r2, [pc, #148]	; (80015b8 <HAL_ADC_Start_DMA+0x1b0>)
 8001522:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	4a24      	ldr	r2, [pc, #144]	; (80015bc <HAL_ADC_Start_DMA+0x1b4>)
 800152a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4a23      	ldr	r2, [pc, #140]	; (80015c0 <HAL_ADC_Start_DMA+0x1b8>)
 8001532:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f06f 0202 	mvn.w	r2, #2
 800153c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800154c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6a18      	ldr	r0, [r3, #32]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	334c      	adds	r3, #76	; 0x4c
 8001558:	4619      	mov	r1, r3
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f000 fbc1 	bl	8001ce4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800156c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001570:	d108      	bne.n	8001584 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001580:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001582:	e00f      	b.n	80015a4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001592:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001594:	e006      	b.n	80015a4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800159e:	e001      	b.n	80015a4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40012400 	.word	0x40012400
 80015b4:	40012800 	.word	0x40012800
 80015b8:	0800190f 	.word	0x0800190f
 80015bc:	0800198b 	.word	0x0800198b
 80015c0:	080019a7 	.word	0x080019a7

080015c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr

080015d6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x20>
 8001604:	2302      	movs	r3, #2
 8001606:	e0dc      	b.n	80017c2 <HAL_ADC_ConfigChannel+0x1da>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b06      	cmp	r3, #6
 8001616:	d81c      	bhi.n	8001652 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	3b05      	subs	r3, #5
 800162a:	221f      	movs	r2, #31
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	4019      	ands	r1, r3
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	6818      	ldr	r0, [r3, #0]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	3b05      	subs	r3, #5
 8001644:	fa00 f203 	lsl.w	r2, r0, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	635a      	str	r2, [r3, #52]	; 0x34
 8001650:	e03c      	b.n	80016cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b0c      	cmp	r3, #12
 8001658:	d81c      	bhi.n	8001694 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	3b23      	subs	r3, #35	; 0x23
 800166c:	221f      	movs	r2, #31
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	4019      	ands	r1, r3
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	3b23      	subs	r3, #35	; 0x23
 8001686:	fa00 f203 	lsl.w	r2, r0, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	631a      	str	r2, [r3, #48]	; 0x30
 8001692:	e01b      	b.n	80016cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	3b41      	subs	r3, #65	; 0x41
 80016a6:	221f      	movs	r2, #31
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	4019      	ands	r1, r3
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	6818      	ldr	r0, [r3, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	3b41      	subs	r3, #65	; 0x41
 80016c0:	fa00 f203 	lsl.w	r2, r0, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b09      	cmp	r3, #9
 80016d2:	d91c      	bls.n	800170e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68d9      	ldr	r1, [r3, #12]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	4613      	mov	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	3b1e      	subs	r3, #30
 80016e6:	2207      	movs	r2, #7
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	4019      	ands	r1, r3
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	6898      	ldr	r0, [r3, #8]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	3b1e      	subs	r3, #30
 8001700:	fa00 f203 	lsl.w	r2, r0, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	e019      	b.n	8001742 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6919      	ldr	r1, [r3, #16]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	2207      	movs	r2, #7
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	4019      	ands	r1, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	6898      	ldr	r0, [r3, #8]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	fa00 f203 	lsl.w	r2, r0, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b10      	cmp	r3, #16
 8001748:	d003      	beq.n	8001752 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800174e:	2b11      	cmp	r3, #17
 8001750:	d132      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <HAL_ADC_ConfigChannel+0x1e4>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d125      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d126      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001778:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b10      	cmp	r3, #16
 8001780:	d11a      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001782:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001788:	fba2 2303 	umull	r2, r3, r2, r3
 800178c:	0c9a      	lsrs	r2, r3, #18
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001798:	e002      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	3b01      	subs	r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f9      	bne.n	800179a <HAL_ADC_ConfigChannel+0x1b2>
 80017a6:	e007      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	f043 0220 	orr.w	r2, r3, #32
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	40012400 	.word	0x40012400
 80017d0:	20000000 	.word	0x20000000
 80017d4:	431bde83 	.word	0x431bde83

080017d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d040      	beq.n	8001878 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f042 0201 	orr.w	r2, r2, #1
 8001804:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001806:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <ADC_Enable+0xac>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a1f      	ldr	r2, [pc, #124]	; (8001888 <ADC_Enable+0xb0>)
 800180c:	fba2 2303 	umull	r2, r3, r2, r3
 8001810:	0c9b      	lsrs	r3, r3, #18
 8001812:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001814:	e002      	b.n	800181c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	3b01      	subs	r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f9      	bne.n	8001816 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001822:	f7ff fcd9 	bl	80011d8 <HAL_GetTick>
 8001826:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001828:	e01f      	b.n	800186a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800182a:	f7ff fcd5 	bl	80011d8 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d918      	bls.n	800186a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b01      	cmp	r3, #1
 8001844:	d011      	beq.n	800186a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	f043 0210 	orr.w	r2, r3, #16
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001856:	f043 0201 	orr.w	r2, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e007      	b.n	800187a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b01      	cmp	r3, #1
 8001876:	d1d8      	bne.n	800182a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000000 	.word	0x20000000
 8001888:	431bde83 	.word	0x431bde83

0800188c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d12e      	bne.n	8001904 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0201 	bic.w	r2, r2, #1
 80018b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018b6:	f7ff fc8f 	bl	80011d8 <HAL_GetTick>
 80018ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018bc:	e01b      	b.n	80018f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018be:	f7ff fc8b 	bl	80011d8 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d914      	bls.n	80018f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d10d      	bne.n	80018f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018de:	f043 0210 	orr.w	r2, r3, #16
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ea:	f043 0201 	orr.w	r2, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e007      	b.n	8001906 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b01      	cmp	r3, #1
 8001902:	d0dc      	beq.n	80018be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b084      	sub	sp, #16
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001924:	2b00      	cmp	r3, #0
 8001926:	d127      	bne.n	8001978 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800193e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001942:	d115      	bne.n	8001970 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001948:	2b00      	cmp	r3, #0
 800194a:	d111      	bne.n	8001970 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001950:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	f043 0201 	orr.w	r2, r3, #1
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f7fe fd63 	bl	800043c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001976:	e004      	b.n	8001982 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	4798      	blx	r3
}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b084      	sub	sp, #16
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff fe13 	bl	80015c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	f043 0204 	orr.w	r2, r3, #4
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f7ff fe02 	bl	80015d6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <__NVIC_SetPriorityGrouping+0x44>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019f8:	4013      	ands	r3, r2
 80019fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a0e:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <__NVIC_SetPriorityGrouping+0x44>)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	60d3      	str	r3, [r2, #12]
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <__NVIC_GetPriorityGrouping+0x18>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	f003 0307 	and.w	r3, r3, #7
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	db0b      	blt.n	8001a6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	f003 021f 	and.w	r2, r3, #31
 8001a58:	4906      	ldr	r1, [pc, #24]	; (8001a74 <__NVIC_EnableIRQ+0x34>)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	095b      	lsrs	r3, r3, #5
 8001a60:	2001      	movs	r0, #1
 8001a62:	fa00 f202 	lsl.w	r2, r0, r2
 8001a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	e000e100 	.word	0xe000e100

08001a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	6039      	str	r1, [r7, #0]
 8001a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	db0a      	blt.n	8001aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	490c      	ldr	r1, [pc, #48]	; (8001ac4 <__NVIC_SetPriority+0x4c>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	0112      	lsls	r2, r2, #4
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa0:	e00a      	b.n	8001ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4908      	ldr	r1, [pc, #32]	; (8001ac8 <__NVIC_SetPriority+0x50>)
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	3b04      	subs	r3, #4
 8001ab0:	0112      	lsls	r2, r2, #4
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	761a      	strb	r2, [r3, #24]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000e100 	.word	0xe000e100
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b089      	sub	sp, #36	; 0x24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f1c3 0307 	rsb	r3, r3, #7
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	bf28      	it	cs
 8001aea:	2304      	movcs	r3, #4
 8001aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3304      	adds	r3, #4
 8001af2:	2b06      	cmp	r3, #6
 8001af4:	d902      	bls.n	8001afc <NVIC_EncodePriority+0x30>
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3b03      	subs	r3, #3
 8001afa:	e000      	b.n	8001afe <NVIC_EncodePriority+0x32>
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	f04f 32ff 	mov.w	r2, #4294967295
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43da      	mvns	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	401a      	ands	r2, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b14:	f04f 31ff 	mov.w	r1, #4294967295
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1e:	43d9      	mvns	r1, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b24:	4313      	orrs	r3, r2
         );
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3724      	adds	r7, #36	; 0x24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b40:	d301      	bcc.n	8001b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00f      	b.n	8001b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <SysTick_Config+0x40>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4e:	210f      	movs	r1, #15
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295
 8001b54:	f7ff ff90 	bl	8001a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <SysTick_Config+0x40>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5e:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <SysTick_Config+0x40>)
 8001b60:	2207      	movs	r2, #7
 8001b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	e000e010 	.word	0xe000e010

08001b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ff2d 	bl	80019dc <__NVIC_SetPriorityGrouping>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b9c:	f7ff ff42 	bl	8001a24 <__NVIC_GetPriorityGrouping>
 8001ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	6978      	ldr	r0, [r7, #20]
 8001ba8:	f7ff ff90 	bl	8001acc <NVIC_EncodePriority>
 8001bac:	4602      	mov	r2, r0
 8001bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff5f 	bl	8001a78 <__NVIC_SetPriority>
}
 8001bba:	bf00      	nop
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff35 	bl	8001a40 <__NVIC_EnableIRQ>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff ffa2 	bl	8001b30 <SysTick_Config>
 8001bec:	4603      	mov	r3, r0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e059      	b.n	8001cc2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <HAL_DMA_Init+0xd4>)
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d80f      	bhi.n	8001c3a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <HAL_DMA_Init+0xd8>)
 8001c22:	4413      	add	r3, r2
 8001c24:	4a2b      	ldr	r2, [pc, #172]	; (8001cd4 <HAL_DMA_Init+0xdc>)
 8001c26:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	009a      	lsls	r2, r3, #2
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a28      	ldr	r2, [pc, #160]	; (8001cd8 <HAL_DMA_Init+0xe0>)
 8001c36:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c38:	e00e      	b.n	8001c58 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <HAL_DMA_Init+0xe4>)
 8001c42:	4413      	add	r3, r2
 8001c44:	4a23      	ldr	r2, [pc, #140]	; (8001cd4 <HAL_DMA_Init+0xdc>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	009a      	lsls	r2, r3, #2
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a22      	ldr	r2, [pc, #136]	; (8001ce0 <HAL_DMA_Init+0xe8>)
 8001c56:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	40020407 	.word	0x40020407
 8001cd0:	bffdfff8 	.word	0xbffdfff8
 8001cd4:	cccccccd 	.word	0xcccccccd
 8001cd8:	40020000 	.word	0x40020000
 8001cdc:	bffdfbf8 	.word	0xbffdfbf8
 8001ce0:	40020400 	.word	0x40020400

08001ce4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_DMA_Start_IT+0x20>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e04a      	b.n	8001d9a <HAL_DMA_Start_IT+0xb6>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d13a      	bne.n	8001d8c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2202      	movs	r2, #2
 8001d1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0201 	bic.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 fbb0 	bl	80024a0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 020e 	orr.w	r2, r2, #14
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	e00f      	b.n	8001d7a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0204 	bic.w	r2, r2, #4
 8001d68:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f042 020a 	orr.w	r2, r2, #10
 8001d78:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f042 0201 	orr.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	e005      	b.n	8001d98 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d94:	2302      	movs	r3, #2
 8001d96:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b085      	sub	sp, #20
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d008      	beq.n	8001dca <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2204      	movs	r2, #4
 8001dbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e020      	b.n	8001e0c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 020e 	bic.w	r2, r2, #14
 8001dd8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0201 	bic.w	r2, r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df2:	2101      	movs	r1, #1
 8001df4:	fa01 f202 	lsl.w	r2, r1, r2
 8001df8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
	...

08001e18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d005      	beq.n	8001e3a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2204      	movs	r2, #4
 8001e32:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	73fb      	strb	r3, [r7, #15]
 8001e38:	e0d6      	b.n	8001fe8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 020e 	bic.w	r2, r2, #14
 8001e48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0201 	bic.w	r2, r2, #1
 8001e58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4b64      	ldr	r3, [pc, #400]	; (8001ff4 <HAL_DMA_Abort_IT+0x1dc>)
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d958      	bls.n	8001f18 <HAL_DMA_Abort_IT+0x100>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a63      	ldr	r2, [pc, #396]	; (8001ff8 <HAL_DMA_Abort_IT+0x1e0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d04f      	beq.n	8001f10 <HAL_DMA_Abort_IT+0xf8>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a61      	ldr	r2, [pc, #388]	; (8001ffc <HAL_DMA_Abort_IT+0x1e4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d048      	beq.n	8001f0c <HAL_DMA_Abort_IT+0xf4>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a60      	ldr	r2, [pc, #384]	; (8002000 <HAL_DMA_Abort_IT+0x1e8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d040      	beq.n	8001f06 <HAL_DMA_Abort_IT+0xee>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a5e      	ldr	r2, [pc, #376]	; (8002004 <HAL_DMA_Abort_IT+0x1ec>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d038      	beq.n	8001f00 <HAL_DMA_Abort_IT+0xe8>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a5d      	ldr	r2, [pc, #372]	; (8002008 <HAL_DMA_Abort_IT+0x1f0>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d030      	beq.n	8001efa <HAL_DMA_Abort_IT+0xe2>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a5b      	ldr	r2, [pc, #364]	; (800200c <HAL_DMA_Abort_IT+0x1f4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d028      	beq.n	8001ef4 <HAL_DMA_Abort_IT+0xdc>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a53      	ldr	r2, [pc, #332]	; (8001ff4 <HAL_DMA_Abort_IT+0x1dc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d020      	beq.n	8001eee <HAL_DMA_Abort_IT+0xd6>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a57      	ldr	r2, [pc, #348]	; (8002010 <HAL_DMA_Abort_IT+0x1f8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d019      	beq.n	8001eea <HAL_DMA_Abort_IT+0xd2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a56      	ldr	r2, [pc, #344]	; (8002014 <HAL_DMA_Abort_IT+0x1fc>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d012      	beq.n	8001ee6 <HAL_DMA_Abort_IT+0xce>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a54      	ldr	r2, [pc, #336]	; (8002018 <HAL_DMA_Abort_IT+0x200>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00a      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a53      	ldr	r2, [pc, #332]	; (800201c <HAL_DMA_Abort_IT+0x204>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d102      	bne.n	8001eda <HAL_DMA_Abort_IT+0xc2>
 8001ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed8:	e01b      	b.n	8001f12 <HAL_DMA_Abort_IT+0xfa>
 8001eda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ede:	e018      	b.n	8001f12 <HAL_DMA_Abort_IT+0xfa>
 8001ee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee4:	e015      	b.n	8001f12 <HAL_DMA_Abort_IT+0xfa>
 8001ee6:	2310      	movs	r3, #16
 8001ee8:	e013      	b.n	8001f12 <HAL_DMA_Abort_IT+0xfa>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e011      	b.n	8001f12 <HAL_DMA_Abort_IT+0xfa>
 8001eee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ef2:	e00e      	b.n	8001f12 <HAL_DMA_Abort_IT+0xfa>
 8001ef4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ef8:	e00b      	b.n	8001f12 <HAL_DMA_Abort_IT+0xfa>
 8001efa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001efe:	e008      	b.n	8001f12 <HAL_DMA_Abort_IT+0xfa>
 8001f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f04:	e005      	b.n	8001f12 <HAL_DMA_Abort_IT+0xfa>
 8001f06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f0a:	e002      	b.n	8001f12 <HAL_DMA_Abort_IT+0xfa>
 8001f0c:	2310      	movs	r3, #16
 8001f0e:	e000      	b.n	8001f12 <HAL_DMA_Abort_IT+0xfa>
 8001f10:	2301      	movs	r3, #1
 8001f12:	4a43      	ldr	r2, [pc, #268]	; (8002020 <HAL_DMA_Abort_IT+0x208>)
 8001f14:	6053      	str	r3, [r2, #4]
 8001f16:	e057      	b.n	8001fc8 <HAL_DMA_Abort_IT+0x1b0>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a36      	ldr	r2, [pc, #216]	; (8001ff8 <HAL_DMA_Abort_IT+0x1e0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d04f      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0x1aa>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a35      	ldr	r2, [pc, #212]	; (8001ffc <HAL_DMA_Abort_IT+0x1e4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d048      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x1a6>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a33      	ldr	r2, [pc, #204]	; (8002000 <HAL_DMA_Abort_IT+0x1e8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d040      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0x1a0>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a32      	ldr	r2, [pc, #200]	; (8002004 <HAL_DMA_Abort_IT+0x1ec>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d038      	beq.n	8001fb2 <HAL_DMA_Abort_IT+0x19a>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a30      	ldr	r2, [pc, #192]	; (8002008 <HAL_DMA_Abort_IT+0x1f0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d030      	beq.n	8001fac <HAL_DMA_Abort_IT+0x194>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a2f      	ldr	r2, [pc, #188]	; (800200c <HAL_DMA_Abort_IT+0x1f4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d028      	beq.n	8001fa6 <HAL_DMA_Abort_IT+0x18e>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a26      	ldr	r2, [pc, #152]	; (8001ff4 <HAL_DMA_Abort_IT+0x1dc>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d020      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x188>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a2b      	ldr	r2, [pc, #172]	; (8002010 <HAL_DMA_Abort_IT+0x1f8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d019      	beq.n	8001f9c <HAL_DMA_Abort_IT+0x184>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a29      	ldr	r2, [pc, #164]	; (8002014 <HAL_DMA_Abort_IT+0x1fc>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d012      	beq.n	8001f98 <HAL_DMA_Abort_IT+0x180>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a28      	ldr	r2, [pc, #160]	; (8002018 <HAL_DMA_Abort_IT+0x200>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00a      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a26      	ldr	r2, [pc, #152]	; (800201c <HAL_DMA_Abort_IT+0x204>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d102      	bne.n	8001f8c <HAL_DMA_Abort_IT+0x174>
 8001f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f8a:	e01b      	b.n	8001fc4 <HAL_DMA_Abort_IT+0x1ac>
 8001f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f90:	e018      	b.n	8001fc4 <HAL_DMA_Abort_IT+0x1ac>
 8001f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f96:	e015      	b.n	8001fc4 <HAL_DMA_Abort_IT+0x1ac>
 8001f98:	2310      	movs	r3, #16
 8001f9a:	e013      	b.n	8001fc4 <HAL_DMA_Abort_IT+0x1ac>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e011      	b.n	8001fc4 <HAL_DMA_Abort_IT+0x1ac>
 8001fa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fa4:	e00e      	b.n	8001fc4 <HAL_DMA_Abort_IT+0x1ac>
 8001fa6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001faa:	e00b      	b.n	8001fc4 <HAL_DMA_Abort_IT+0x1ac>
 8001fac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fb0:	e008      	b.n	8001fc4 <HAL_DMA_Abort_IT+0x1ac>
 8001fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb6:	e005      	b.n	8001fc4 <HAL_DMA_Abort_IT+0x1ac>
 8001fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fbc:	e002      	b.n	8001fc4 <HAL_DMA_Abort_IT+0x1ac>
 8001fbe:	2310      	movs	r3, #16
 8001fc0:	e000      	b.n	8001fc4 <HAL_DMA_Abort_IT+0x1ac>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	4a17      	ldr	r2, [pc, #92]	; (8002024 <HAL_DMA_Abort_IT+0x20c>)
 8001fc6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	4798      	blx	r3
    } 
  }
  return status;
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40020080 	.word	0x40020080
 8001ff8:	40020008 	.word	0x40020008
 8001ffc:	4002001c 	.word	0x4002001c
 8002000:	40020030 	.word	0x40020030
 8002004:	40020044 	.word	0x40020044
 8002008:	40020058 	.word	0x40020058
 800200c:	4002006c 	.word	0x4002006c
 8002010:	40020408 	.word	0x40020408
 8002014:	4002041c 	.word	0x4002041c
 8002018:	40020430 	.word	0x40020430
 800201c:	40020444 	.word	0x40020444
 8002020:	40020400 	.word	0x40020400
 8002024:	40020000 	.word	0x40020000

08002028 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	2204      	movs	r2, #4
 8002046:	409a      	lsls	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4013      	ands	r3, r2
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80f1 	beq.w	8002234 <HAL_DMA_IRQHandler+0x20c>
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80eb 	beq.w	8002234 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0320 	and.w	r3, r3, #32
 8002068:	2b00      	cmp	r3, #0
 800206a:	d107      	bne.n	800207c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0204 	bic.w	r2, r2, #4
 800207a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	4b5f      	ldr	r3, [pc, #380]	; (8002200 <HAL_DMA_IRQHandler+0x1d8>)
 8002084:	429a      	cmp	r2, r3
 8002086:	d958      	bls.n	800213a <HAL_DMA_IRQHandler+0x112>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a5d      	ldr	r2, [pc, #372]	; (8002204 <HAL_DMA_IRQHandler+0x1dc>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d04f      	beq.n	8002132 <HAL_DMA_IRQHandler+0x10a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a5c      	ldr	r2, [pc, #368]	; (8002208 <HAL_DMA_IRQHandler+0x1e0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d048      	beq.n	800212e <HAL_DMA_IRQHandler+0x106>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a5a      	ldr	r2, [pc, #360]	; (800220c <HAL_DMA_IRQHandler+0x1e4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d040      	beq.n	8002128 <HAL_DMA_IRQHandler+0x100>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a59      	ldr	r2, [pc, #356]	; (8002210 <HAL_DMA_IRQHandler+0x1e8>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d038      	beq.n	8002122 <HAL_DMA_IRQHandler+0xfa>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a57      	ldr	r2, [pc, #348]	; (8002214 <HAL_DMA_IRQHandler+0x1ec>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d030      	beq.n	800211c <HAL_DMA_IRQHandler+0xf4>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a56      	ldr	r2, [pc, #344]	; (8002218 <HAL_DMA_IRQHandler+0x1f0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d028      	beq.n	8002116 <HAL_DMA_IRQHandler+0xee>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a4d      	ldr	r2, [pc, #308]	; (8002200 <HAL_DMA_IRQHandler+0x1d8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d020      	beq.n	8002110 <HAL_DMA_IRQHandler+0xe8>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a52      	ldr	r2, [pc, #328]	; (800221c <HAL_DMA_IRQHandler+0x1f4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d019      	beq.n	800210c <HAL_DMA_IRQHandler+0xe4>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a50      	ldr	r2, [pc, #320]	; (8002220 <HAL_DMA_IRQHandler+0x1f8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d012      	beq.n	8002108 <HAL_DMA_IRQHandler+0xe0>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a4f      	ldr	r2, [pc, #316]	; (8002224 <HAL_DMA_IRQHandler+0x1fc>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d00a      	beq.n	8002102 <HAL_DMA_IRQHandler+0xda>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a4d      	ldr	r2, [pc, #308]	; (8002228 <HAL_DMA_IRQHandler+0x200>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d102      	bne.n	80020fc <HAL_DMA_IRQHandler+0xd4>
 80020f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020fa:	e01b      	b.n	8002134 <HAL_DMA_IRQHandler+0x10c>
 80020fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002100:	e018      	b.n	8002134 <HAL_DMA_IRQHandler+0x10c>
 8002102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002106:	e015      	b.n	8002134 <HAL_DMA_IRQHandler+0x10c>
 8002108:	2340      	movs	r3, #64	; 0x40
 800210a:	e013      	b.n	8002134 <HAL_DMA_IRQHandler+0x10c>
 800210c:	2304      	movs	r3, #4
 800210e:	e011      	b.n	8002134 <HAL_DMA_IRQHandler+0x10c>
 8002110:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002114:	e00e      	b.n	8002134 <HAL_DMA_IRQHandler+0x10c>
 8002116:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800211a:	e00b      	b.n	8002134 <HAL_DMA_IRQHandler+0x10c>
 800211c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002120:	e008      	b.n	8002134 <HAL_DMA_IRQHandler+0x10c>
 8002122:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002126:	e005      	b.n	8002134 <HAL_DMA_IRQHandler+0x10c>
 8002128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800212c:	e002      	b.n	8002134 <HAL_DMA_IRQHandler+0x10c>
 800212e:	2340      	movs	r3, #64	; 0x40
 8002130:	e000      	b.n	8002134 <HAL_DMA_IRQHandler+0x10c>
 8002132:	2304      	movs	r3, #4
 8002134:	4a3d      	ldr	r2, [pc, #244]	; (800222c <HAL_DMA_IRQHandler+0x204>)
 8002136:	6053      	str	r3, [r2, #4]
 8002138:	e057      	b.n	80021ea <HAL_DMA_IRQHandler+0x1c2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a31      	ldr	r2, [pc, #196]	; (8002204 <HAL_DMA_IRQHandler+0x1dc>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d04f      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x1bc>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a2f      	ldr	r2, [pc, #188]	; (8002208 <HAL_DMA_IRQHandler+0x1e0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d048      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x1b8>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a2e      	ldr	r2, [pc, #184]	; (800220c <HAL_DMA_IRQHandler+0x1e4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d040      	beq.n	80021da <HAL_DMA_IRQHandler+0x1b2>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a2c      	ldr	r2, [pc, #176]	; (8002210 <HAL_DMA_IRQHandler+0x1e8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d038      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x1ac>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a2b      	ldr	r2, [pc, #172]	; (8002214 <HAL_DMA_IRQHandler+0x1ec>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d030      	beq.n	80021ce <HAL_DMA_IRQHandler+0x1a6>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a29      	ldr	r2, [pc, #164]	; (8002218 <HAL_DMA_IRQHandler+0x1f0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d028      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x1a0>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a21      	ldr	r2, [pc, #132]	; (8002200 <HAL_DMA_IRQHandler+0x1d8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d020      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x19a>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a25      	ldr	r2, [pc, #148]	; (800221c <HAL_DMA_IRQHandler+0x1f4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d019      	beq.n	80021be <HAL_DMA_IRQHandler+0x196>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a24      	ldr	r2, [pc, #144]	; (8002220 <HAL_DMA_IRQHandler+0x1f8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d012      	beq.n	80021ba <HAL_DMA_IRQHandler+0x192>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a22      	ldr	r2, [pc, #136]	; (8002224 <HAL_DMA_IRQHandler+0x1fc>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00a      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x18c>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a21      	ldr	r2, [pc, #132]	; (8002228 <HAL_DMA_IRQHandler+0x200>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d102      	bne.n	80021ae <HAL_DMA_IRQHandler+0x186>
 80021a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021ac:	e01b      	b.n	80021e6 <HAL_DMA_IRQHandler+0x1be>
 80021ae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021b2:	e018      	b.n	80021e6 <HAL_DMA_IRQHandler+0x1be>
 80021b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b8:	e015      	b.n	80021e6 <HAL_DMA_IRQHandler+0x1be>
 80021ba:	2340      	movs	r3, #64	; 0x40
 80021bc:	e013      	b.n	80021e6 <HAL_DMA_IRQHandler+0x1be>
 80021be:	2304      	movs	r3, #4
 80021c0:	e011      	b.n	80021e6 <HAL_DMA_IRQHandler+0x1be>
 80021c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80021c6:	e00e      	b.n	80021e6 <HAL_DMA_IRQHandler+0x1be>
 80021c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021cc:	e00b      	b.n	80021e6 <HAL_DMA_IRQHandler+0x1be>
 80021ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021d2:	e008      	b.n	80021e6 <HAL_DMA_IRQHandler+0x1be>
 80021d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021d8:	e005      	b.n	80021e6 <HAL_DMA_IRQHandler+0x1be>
 80021da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021de:	e002      	b.n	80021e6 <HAL_DMA_IRQHandler+0x1be>
 80021e0:	2340      	movs	r3, #64	; 0x40
 80021e2:	e000      	b.n	80021e6 <HAL_DMA_IRQHandler+0x1be>
 80021e4:	2304      	movs	r3, #4
 80021e6:	4a12      	ldr	r2, [pc, #72]	; (8002230 <HAL_DMA_IRQHandler+0x208>)
 80021e8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 8136 	beq.w	8002460 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80021fc:	e130      	b.n	8002460 <HAL_DMA_IRQHandler+0x438>
 80021fe:	bf00      	nop
 8002200:	40020080 	.word	0x40020080
 8002204:	40020008 	.word	0x40020008
 8002208:	4002001c 	.word	0x4002001c
 800220c:	40020030 	.word	0x40020030
 8002210:	40020044 	.word	0x40020044
 8002214:	40020058 	.word	0x40020058
 8002218:	4002006c 	.word	0x4002006c
 800221c:	40020408 	.word	0x40020408
 8002220:	4002041c 	.word	0x4002041c
 8002224:	40020430 	.word	0x40020430
 8002228:	40020444 	.word	0x40020444
 800222c:	40020400 	.word	0x40020400
 8002230:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	2202      	movs	r2, #2
 800223a:	409a      	lsls	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4013      	ands	r3, r2
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80dd 	beq.w	8002400 <HAL_DMA_IRQHandler+0x3d8>
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 80d7 	beq.w	8002400 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10b      	bne.n	8002278 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 020a 	bic.w	r2, r2, #10
 800226e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	4b7b      	ldr	r3, [pc, #492]	; (800246c <HAL_DMA_IRQHandler+0x444>)
 8002280:	429a      	cmp	r2, r3
 8002282:	d958      	bls.n	8002336 <HAL_DMA_IRQHandler+0x30e>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a79      	ldr	r2, [pc, #484]	; (8002470 <HAL_DMA_IRQHandler+0x448>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d04f      	beq.n	800232e <HAL_DMA_IRQHandler+0x306>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a78      	ldr	r2, [pc, #480]	; (8002474 <HAL_DMA_IRQHandler+0x44c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d048      	beq.n	800232a <HAL_DMA_IRQHandler+0x302>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a76      	ldr	r2, [pc, #472]	; (8002478 <HAL_DMA_IRQHandler+0x450>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d040      	beq.n	8002324 <HAL_DMA_IRQHandler+0x2fc>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a75      	ldr	r2, [pc, #468]	; (800247c <HAL_DMA_IRQHandler+0x454>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d038      	beq.n	800231e <HAL_DMA_IRQHandler+0x2f6>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a73      	ldr	r2, [pc, #460]	; (8002480 <HAL_DMA_IRQHandler+0x458>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d030      	beq.n	8002318 <HAL_DMA_IRQHandler+0x2f0>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a72      	ldr	r2, [pc, #456]	; (8002484 <HAL_DMA_IRQHandler+0x45c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d028      	beq.n	8002312 <HAL_DMA_IRQHandler+0x2ea>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a69      	ldr	r2, [pc, #420]	; (800246c <HAL_DMA_IRQHandler+0x444>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d020      	beq.n	800230c <HAL_DMA_IRQHandler+0x2e4>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a6e      	ldr	r2, [pc, #440]	; (8002488 <HAL_DMA_IRQHandler+0x460>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d019      	beq.n	8002308 <HAL_DMA_IRQHandler+0x2e0>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a6c      	ldr	r2, [pc, #432]	; (800248c <HAL_DMA_IRQHandler+0x464>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d012      	beq.n	8002304 <HAL_DMA_IRQHandler+0x2dc>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a6b      	ldr	r2, [pc, #428]	; (8002490 <HAL_DMA_IRQHandler+0x468>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d00a      	beq.n	80022fe <HAL_DMA_IRQHandler+0x2d6>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a69      	ldr	r2, [pc, #420]	; (8002494 <HAL_DMA_IRQHandler+0x46c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d102      	bne.n	80022f8 <HAL_DMA_IRQHandler+0x2d0>
 80022f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022f6:	e01b      	b.n	8002330 <HAL_DMA_IRQHandler+0x308>
 80022f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022fc:	e018      	b.n	8002330 <HAL_DMA_IRQHandler+0x308>
 80022fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002302:	e015      	b.n	8002330 <HAL_DMA_IRQHandler+0x308>
 8002304:	2320      	movs	r3, #32
 8002306:	e013      	b.n	8002330 <HAL_DMA_IRQHandler+0x308>
 8002308:	2302      	movs	r3, #2
 800230a:	e011      	b.n	8002330 <HAL_DMA_IRQHandler+0x308>
 800230c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002310:	e00e      	b.n	8002330 <HAL_DMA_IRQHandler+0x308>
 8002312:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002316:	e00b      	b.n	8002330 <HAL_DMA_IRQHandler+0x308>
 8002318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800231c:	e008      	b.n	8002330 <HAL_DMA_IRQHandler+0x308>
 800231e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002322:	e005      	b.n	8002330 <HAL_DMA_IRQHandler+0x308>
 8002324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002328:	e002      	b.n	8002330 <HAL_DMA_IRQHandler+0x308>
 800232a:	2320      	movs	r3, #32
 800232c:	e000      	b.n	8002330 <HAL_DMA_IRQHandler+0x308>
 800232e:	2302      	movs	r3, #2
 8002330:	4a59      	ldr	r2, [pc, #356]	; (8002498 <HAL_DMA_IRQHandler+0x470>)
 8002332:	6053      	str	r3, [r2, #4]
 8002334:	e057      	b.n	80023e6 <HAL_DMA_IRQHandler+0x3be>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a4d      	ldr	r2, [pc, #308]	; (8002470 <HAL_DMA_IRQHandler+0x448>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d04f      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x3b8>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a4b      	ldr	r2, [pc, #300]	; (8002474 <HAL_DMA_IRQHandler+0x44c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d048      	beq.n	80023dc <HAL_DMA_IRQHandler+0x3b4>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a4a      	ldr	r2, [pc, #296]	; (8002478 <HAL_DMA_IRQHandler+0x450>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d040      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x3ae>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a48      	ldr	r2, [pc, #288]	; (800247c <HAL_DMA_IRQHandler+0x454>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d038      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x3a8>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a47      	ldr	r2, [pc, #284]	; (8002480 <HAL_DMA_IRQHandler+0x458>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d030      	beq.n	80023ca <HAL_DMA_IRQHandler+0x3a2>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a45      	ldr	r2, [pc, #276]	; (8002484 <HAL_DMA_IRQHandler+0x45c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d028      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x39c>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a3d      	ldr	r2, [pc, #244]	; (800246c <HAL_DMA_IRQHandler+0x444>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d020      	beq.n	80023be <HAL_DMA_IRQHandler+0x396>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a41      	ldr	r2, [pc, #260]	; (8002488 <HAL_DMA_IRQHandler+0x460>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d019      	beq.n	80023ba <HAL_DMA_IRQHandler+0x392>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a40      	ldr	r2, [pc, #256]	; (800248c <HAL_DMA_IRQHandler+0x464>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d012      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x38e>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a3e      	ldr	r2, [pc, #248]	; (8002490 <HAL_DMA_IRQHandler+0x468>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00a      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x388>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a3d      	ldr	r2, [pc, #244]	; (8002494 <HAL_DMA_IRQHandler+0x46c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d102      	bne.n	80023aa <HAL_DMA_IRQHandler+0x382>
 80023a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023a8:	e01b      	b.n	80023e2 <HAL_DMA_IRQHandler+0x3ba>
 80023aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ae:	e018      	b.n	80023e2 <HAL_DMA_IRQHandler+0x3ba>
 80023b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023b4:	e015      	b.n	80023e2 <HAL_DMA_IRQHandler+0x3ba>
 80023b6:	2320      	movs	r3, #32
 80023b8:	e013      	b.n	80023e2 <HAL_DMA_IRQHandler+0x3ba>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e011      	b.n	80023e2 <HAL_DMA_IRQHandler+0x3ba>
 80023be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c2:	e00e      	b.n	80023e2 <HAL_DMA_IRQHandler+0x3ba>
 80023c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023c8:	e00b      	b.n	80023e2 <HAL_DMA_IRQHandler+0x3ba>
 80023ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ce:	e008      	b.n	80023e2 <HAL_DMA_IRQHandler+0x3ba>
 80023d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d4:	e005      	b.n	80023e2 <HAL_DMA_IRQHandler+0x3ba>
 80023d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023da:	e002      	b.n	80023e2 <HAL_DMA_IRQHandler+0x3ba>
 80023dc:	2320      	movs	r3, #32
 80023de:	e000      	b.n	80023e2 <HAL_DMA_IRQHandler+0x3ba>
 80023e0:	2302      	movs	r3, #2
 80023e2:	4a2e      	ldr	r2, [pc, #184]	; (800249c <HAL_DMA_IRQHandler+0x474>)
 80023e4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d034      	beq.n	8002460 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80023fe:	e02f      	b.n	8002460 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	2208      	movs	r2, #8
 8002406:	409a      	lsls	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d028      	beq.n	8002462 <HAL_DMA_IRQHandler+0x43a>
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d023      	beq.n	8002462 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 020e 	bic.w	r2, r2, #14
 8002428:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002432:	2101      	movs	r1, #1
 8002434:	fa01 f202 	lsl.w	r2, r1, r2
 8002438:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	2b00      	cmp	r3, #0
 8002456:	d004      	beq.n	8002462 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	4798      	blx	r3
    }
  }
  return;
 8002460:	bf00      	nop
 8002462:	bf00      	nop
}
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40020080 	.word	0x40020080
 8002470:	40020008 	.word	0x40020008
 8002474:	4002001c 	.word	0x4002001c
 8002478:	40020030 	.word	0x40020030
 800247c:	40020044 	.word	0x40020044
 8002480:	40020058 	.word	0x40020058
 8002484:	4002006c 	.word	0x4002006c
 8002488:	40020408 	.word	0x40020408
 800248c:	4002041c 	.word	0x4002041c
 8002490:	40020430 	.word	0x40020430
 8002494:	40020444 	.word	0x40020444
 8002498:	40020400 	.word	0x40020400
 800249c:	40020000 	.word	0x40020000

080024a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b6:	2101      	movs	r1, #1
 80024b8:	fa01 f202 	lsl.w	r2, r1, r2
 80024bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d108      	bne.n	80024e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024de:	e007      	b.n	80024f0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	60da      	str	r2, [r3, #12]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
	...

080024fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b08b      	sub	sp, #44	; 0x2c
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002506:	2300      	movs	r3, #0
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800250a:	2300      	movs	r3, #0
 800250c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800250e:	e179      	b.n	8002804 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002510:	2201      	movs	r2, #1
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	429a      	cmp	r2, r3
 800252a:	f040 8168 	bne.w	80027fe <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	4a96      	ldr	r2, [pc, #600]	; (800278c <HAL_GPIO_Init+0x290>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d05e      	beq.n	80025f6 <HAL_GPIO_Init+0xfa>
 8002538:	4a94      	ldr	r2, [pc, #592]	; (800278c <HAL_GPIO_Init+0x290>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d875      	bhi.n	800262a <HAL_GPIO_Init+0x12e>
 800253e:	4a94      	ldr	r2, [pc, #592]	; (8002790 <HAL_GPIO_Init+0x294>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d058      	beq.n	80025f6 <HAL_GPIO_Init+0xfa>
 8002544:	4a92      	ldr	r2, [pc, #584]	; (8002790 <HAL_GPIO_Init+0x294>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d86f      	bhi.n	800262a <HAL_GPIO_Init+0x12e>
 800254a:	4a92      	ldr	r2, [pc, #584]	; (8002794 <HAL_GPIO_Init+0x298>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d052      	beq.n	80025f6 <HAL_GPIO_Init+0xfa>
 8002550:	4a90      	ldr	r2, [pc, #576]	; (8002794 <HAL_GPIO_Init+0x298>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d869      	bhi.n	800262a <HAL_GPIO_Init+0x12e>
 8002556:	4a90      	ldr	r2, [pc, #576]	; (8002798 <HAL_GPIO_Init+0x29c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d04c      	beq.n	80025f6 <HAL_GPIO_Init+0xfa>
 800255c:	4a8e      	ldr	r2, [pc, #568]	; (8002798 <HAL_GPIO_Init+0x29c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d863      	bhi.n	800262a <HAL_GPIO_Init+0x12e>
 8002562:	4a8e      	ldr	r2, [pc, #568]	; (800279c <HAL_GPIO_Init+0x2a0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d046      	beq.n	80025f6 <HAL_GPIO_Init+0xfa>
 8002568:	4a8c      	ldr	r2, [pc, #560]	; (800279c <HAL_GPIO_Init+0x2a0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d85d      	bhi.n	800262a <HAL_GPIO_Init+0x12e>
 800256e:	2b12      	cmp	r3, #18
 8002570:	d82a      	bhi.n	80025c8 <HAL_GPIO_Init+0xcc>
 8002572:	2b12      	cmp	r3, #18
 8002574:	d859      	bhi.n	800262a <HAL_GPIO_Init+0x12e>
 8002576:	a201      	add	r2, pc, #4	; (adr r2, 800257c <HAL_GPIO_Init+0x80>)
 8002578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257c:	080025f7 	.word	0x080025f7
 8002580:	080025d1 	.word	0x080025d1
 8002584:	080025e3 	.word	0x080025e3
 8002588:	08002625 	.word	0x08002625
 800258c:	0800262b 	.word	0x0800262b
 8002590:	0800262b 	.word	0x0800262b
 8002594:	0800262b 	.word	0x0800262b
 8002598:	0800262b 	.word	0x0800262b
 800259c:	0800262b 	.word	0x0800262b
 80025a0:	0800262b 	.word	0x0800262b
 80025a4:	0800262b 	.word	0x0800262b
 80025a8:	0800262b 	.word	0x0800262b
 80025ac:	0800262b 	.word	0x0800262b
 80025b0:	0800262b 	.word	0x0800262b
 80025b4:	0800262b 	.word	0x0800262b
 80025b8:	0800262b 	.word	0x0800262b
 80025bc:	0800262b 	.word	0x0800262b
 80025c0:	080025d9 	.word	0x080025d9
 80025c4:	080025ed 	.word	0x080025ed
 80025c8:	4a75      	ldr	r2, [pc, #468]	; (80027a0 <HAL_GPIO_Init+0x2a4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d013      	beq.n	80025f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025ce:	e02c      	b.n	800262a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	623b      	str	r3, [r7, #32]
          break;
 80025d6:	e029      	b.n	800262c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	3304      	adds	r3, #4
 80025de:	623b      	str	r3, [r7, #32]
          break;
 80025e0:	e024      	b.n	800262c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	3308      	adds	r3, #8
 80025e8:	623b      	str	r3, [r7, #32]
          break;
 80025ea:	e01f      	b.n	800262c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	330c      	adds	r3, #12
 80025f2:	623b      	str	r3, [r7, #32]
          break;
 80025f4:	e01a      	b.n	800262c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d102      	bne.n	8002604 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025fe:	2304      	movs	r3, #4
 8002600:	623b      	str	r3, [r7, #32]
          break;
 8002602:	e013      	b.n	800262c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d105      	bne.n	8002618 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800260c:	2308      	movs	r3, #8
 800260e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	611a      	str	r2, [r3, #16]
          break;
 8002616:	e009      	b.n	800262c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002618:	2308      	movs	r3, #8
 800261a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	615a      	str	r2, [r3, #20]
          break;
 8002622:	e003      	b.n	800262c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002624:	2300      	movs	r3, #0
 8002626:	623b      	str	r3, [r7, #32]
          break;
 8002628:	e000      	b.n	800262c <HAL_GPIO_Init+0x130>
          break;
 800262a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	2bff      	cmp	r3, #255	; 0xff
 8002630:	d801      	bhi.n	8002636 <HAL_GPIO_Init+0x13a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	e001      	b.n	800263a <HAL_GPIO_Init+0x13e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3304      	adds	r3, #4
 800263a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	2bff      	cmp	r3, #255	; 0xff
 8002640:	d802      	bhi.n	8002648 <HAL_GPIO_Init+0x14c>
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	e002      	b.n	800264e <HAL_GPIO_Init+0x152>
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	3b08      	subs	r3, #8
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	210f      	movs	r1, #15
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	401a      	ands	r2, r3
 8002660:	6a39      	ldr	r1, [r7, #32]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	fa01 f303 	lsl.w	r3, r1, r3
 8002668:	431a      	orrs	r2, r3
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 80c1 	beq.w	80027fe <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800267c:	4b49      	ldr	r3, [pc, #292]	; (80027a4 <HAL_GPIO_Init+0x2a8>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	4a48      	ldr	r2, [pc, #288]	; (80027a4 <HAL_GPIO_Init+0x2a8>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	6193      	str	r3, [r2, #24]
 8002688:	4b46      	ldr	r3, [pc, #280]	; (80027a4 <HAL_GPIO_Init+0x2a8>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002694:	4a44      	ldr	r2, [pc, #272]	; (80027a8 <HAL_GPIO_Init+0x2ac>)
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	089b      	lsrs	r3, r3, #2
 800269a:	3302      	adds	r3, #2
 800269c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	220f      	movs	r2, #15
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4013      	ands	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a3c      	ldr	r2, [pc, #240]	; (80027ac <HAL_GPIO_Init+0x2b0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d01f      	beq.n	8002700 <HAL_GPIO_Init+0x204>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a3b      	ldr	r2, [pc, #236]	; (80027b0 <HAL_GPIO_Init+0x2b4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d019      	beq.n	80026fc <HAL_GPIO_Init+0x200>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a3a      	ldr	r2, [pc, #232]	; (80027b4 <HAL_GPIO_Init+0x2b8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d013      	beq.n	80026f8 <HAL_GPIO_Init+0x1fc>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a39      	ldr	r2, [pc, #228]	; (80027b8 <HAL_GPIO_Init+0x2bc>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d00d      	beq.n	80026f4 <HAL_GPIO_Init+0x1f8>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a38      	ldr	r2, [pc, #224]	; (80027bc <HAL_GPIO_Init+0x2c0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d007      	beq.n	80026f0 <HAL_GPIO_Init+0x1f4>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a37      	ldr	r2, [pc, #220]	; (80027c0 <HAL_GPIO_Init+0x2c4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d101      	bne.n	80026ec <HAL_GPIO_Init+0x1f0>
 80026e8:	2305      	movs	r3, #5
 80026ea:	e00a      	b.n	8002702 <HAL_GPIO_Init+0x206>
 80026ec:	2306      	movs	r3, #6
 80026ee:	e008      	b.n	8002702 <HAL_GPIO_Init+0x206>
 80026f0:	2304      	movs	r3, #4
 80026f2:	e006      	b.n	8002702 <HAL_GPIO_Init+0x206>
 80026f4:	2303      	movs	r3, #3
 80026f6:	e004      	b.n	8002702 <HAL_GPIO_Init+0x206>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e002      	b.n	8002702 <HAL_GPIO_Init+0x206>
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <HAL_GPIO_Init+0x206>
 8002700:	2300      	movs	r3, #0
 8002702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002704:	f002 0203 	and.w	r2, r2, #3
 8002708:	0092      	lsls	r2, r2, #2
 800270a:	4093      	lsls	r3, r2
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002712:	4925      	ldr	r1, [pc, #148]	; (80027a8 <HAL_GPIO_Init+0x2ac>)
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	089b      	lsrs	r3, r3, #2
 8002718:	3302      	adds	r3, #2
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d006      	beq.n	800273a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800272c:	4b25      	ldr	r3, [pc, #148]	; (80027c4 <HAL_GPIO_Init+0x2c8>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4924      	ldr	r1, [pc, #144]	; (80027c4 <HAL_GPIO_Init+0x2c8>)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	4313      	orrs	r3, r2
 8002736:	600b      	str	r3, [r1, #0]
 8002738:	e006      	b.n	8002748 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800273a:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <HAL_GPIO_Init+0x2c8>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	43db      	mvns	r3, r3
 8002742:	4920      	ldr	r1, [pc, #128]	; (80027c4 <HAL_GPIO_Init+0x2c8>)
 8002744:	4013      	ands	r3, r2
 8002746:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d006      	beq.n	8002762 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002754:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <HAL_GPIO_Init+0x2c8>)
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	491a      	ldr	r1, [pc, #104]	; (80027c4 <HAL_GPIO_Init+0x2c8>)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	604b      	str	r3, [r1, #4]
 8002760:	e006      	b.n	8002770 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002762:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <HAL_GPIO_Init+0x2c8>)
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	43db      	mvns	r3, r3
 800276a:	4916      	ldr	r1, [pc, #88]	; (80027c4 <HAL_GPIO_Init+0x2c8>)
 800276c:	4013      	ands	r3, r2
 800276e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d025      	beq.n	80027c8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <HAL_GPIO_Init+0x2c8>)
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	4910      	ldr	r1, [pc, #64]	; (80027c4 <HAL_GPIO_Init+0x2c8>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	4313      	orrs	r3, r2
 8002786:	608b      	str	r3, [r1, #8]
 8002788:	e025      	b.n	80027d6 <HAL_GPIO_Init+0x2da>
 800278a:	bf00      	nop
 800278c:	10320000 	.word	0x10320000
 8002790:	10310000 	.word	0x10310000
 8002794:	10220000 	.word	0x10220000
 8002798:	10210000 	.word	0x10210000
 800279c:	10120000 	.word	0x10120000
 80027a0:	10110000 	.word	0x10110000
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40010000 	.word	0x40010000
 80027ac:	40010800 	.word	0x40010800
 80027b0:	40010c00 	.word	0x40010c00
 80027b4:	40011000 	.word	0x40011000
 80027b8:	40011400 	.word	0x40011400
 80027bc:	40011800 	.word	0x40011800
 80027c0:	40011c00 	.word	0x40011c00
 80027c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027c8:	4b15      	ldr	r3, [pc, #84]	; (8002820 <HAL_GPIO_Init+0x324>)
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	4913      	ldr	r1, [pc, #76]	; (8002820 <HAL_GPIO_Init+0x324>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d006      	beq.n	80027f0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027e2:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <HAL_GPIO_Init+0x324>)
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	490e      	ldr	r1, [pc, #56]	; (8002820 <HAL_GPIO_Init+0x324>)
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60cb      	str	r3, [r1, #12]
 80027ee:	e006      	b.n	80027fe <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_GPIO_Init+0x324>)
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	4909      	ldr	r1, [pc, #36]	; (8002820 <HAL_GPIO_Init+0x324>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	3301      	adds	r3, #1
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	fa22 f303 	lsr.w	r3, r2, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	f47f ae7e 	bne.w	8002510 <HAL_GPIO_Init+0x14>
  }
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	372c      	adds	r7, #44	; 0x2c
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	40010400 	.word	0x40010400

08002824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	807b      	strh	r3, [r7, #2]
 8002830:	4613      	mov	r3, r2
 8002832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002834:	787b      	ldrb	r3, [r7, #1]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002840:	e003      	b.n	800284a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002842:	887b      	ldrh	r3, [r7, #2]
 8002844:	041a      	lsls	r2, r3, #16
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	611a      	str	r2, [r3, #16]
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e272      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 8087 	beq.w	8002982 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002874:	4b92      	ldr	r3, [pc, #584]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 030c 	and.w	r3, r3, #12
 800287c:	2b04      	cmp	r3, #4
 800287e:	d00c      	beq.n	800289a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002880:	4b8f      	ldr	r3, [pc, #572]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b08      	cmp	r3, #8
 800288a:	d112      	bne.n	80028b2 <HAL_RCC_OscConfig+0x5e>
 800288c:	4b8c      	ldr	r3, [pc, #560]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002898:	d10b      	bne.n	80028b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289a:	4b89      	ldr	r3, [pc, #548]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d06c      	beq.n	8002980 <HAL_RCC_OscConfig+0x12c>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d168      	bne.n	8002980 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e24c      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ba:	d106      	bne.n	80028ca <HAL_RCC_OscConfig+0x76>
 80028bc:	4b80      	ldr	r3, [pc, #512]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a7f      	ldr	r2, [pc, #508]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80028c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	e02e      	b.n	8002928 <HAL_RCC_OscConfig+0xd4>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10c      	bne.n	80028ec <HAL_RCC_OscConfig+0x98>
 80028d2:	4b7b      	ldr	r3, [pc, #492]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a7a      	ldr	r2, [pc, #488]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	4b78      	ldr	r3, [pc, #480]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a77      	ldr	r2, [pc, #476]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	e01d      	b.n	8002928 <HAL_RCC_OscConfig+0xd4>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f4:	d10c      	bne.n	8002910 <HAL_RCC_OscConfig+0xbc>
 80028f6:	4b72      	ldr	r3, [pc, #456]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a71      	ldr	r2, [pc, #452]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80028fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	4b6f      	ldr	r3, [pc, #444]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a6e      	ldr	r2, [pc, #440]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	e00b      	b.n	8002928 <HAL_RCC_OscConfig+0xd4>
 8002910:	4b6b      	ldr	r3, [pc, #428]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a6a      	ldr	r2, [pc, #424]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	4b68      	ldr	r3, [pc, #416]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a67      	ldr	r2, [pc, #412]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002926:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d013      	beq.n	8002958 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002930:	f7fe fc52 	bl	80011d8 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002938:	f7fe fc4e 	bl	80011d8 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	; 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e200      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294a:	4b5d      	ldr	r3, [pc, #372]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0xe4>
 8002956:	e014      	b.n	8002982 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7fe fc3e 	bl	80011d8 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002960:	f7fe fc3a 	bl	80011d8 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	; 0x64
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e1ec      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002972:	4b53      	ldr	r3, [pc, #332]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x10c>
 800297e:	e000      	b.n	8002982 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d063      	beq.n	8002a56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800298e:	4b4c      	ldr	r3, [pc, #304]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800299a:	4b49      	ldr	r3, [pc, #292]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 030c 	and.w	r3, r3, #12
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d11c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x18c>
 80029a6:	4b46      	ldr	r3, [pc, #280]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d116      	bne.n	80029e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b2:	4b43      	ldr	r3, [pc, #268]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d005      	beq.n	80029ca <HAL_RCC_OscConfig+0x176>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d001      	beq.n	80029ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e1c0      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ca:	4b3d      	ldr	r3, [pc, #244]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4939      	ldr	r1, [pc, #228]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029de:	e03a      	b.n	8002a56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d020      	beq.n	8002a2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e8:	4b36      	ldr	r3, [pc, #216]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ee:	f7fe fbf3 	bl	80011d8 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f6:	f7fe fbef 	bl	80011d8 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e1a1      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a08:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a14:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4927      	ldr	r1, [pc, #156]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	600b      	str	r3, [r1, #0]
 8002a28:	e015      	b.n	8002a56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a2a:	4b26      	ldr	r3, [pc, #152]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7fe fbd2 	bl	80011d8 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a38:	f7fe fbce 	bl	80011d8 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e180      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d03a      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d019      	beq.n	8002a9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a6a:	4b17      	ldr	r3, [pc, #92]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a70:	f7fe fbb2 	bl	80011d8 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a78:	f7fe fbae 	bl	80011d8 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e160      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a96:	2001      	movs	r0, #1
 8002a98:	f000 fad8 	bl	800304c <RCC_Delay>
 8002a9c:	e01c      	b.n	8002ad8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa4:	f7fe fb98 	bl	80011d8 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aaa:	e00f      	b.n	8002acc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aac:	f7fe fb94 	bl	80011d8 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d908      	bls.n	8002acc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e146      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	42420000 	.word	0x42420000
 8002ac8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002acc:	4b92      	ldr	r3, [pc, #584]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1e9      	bne.n	8002aac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 80a6 	beq.w	8002c32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aea:	4b8b      	ldr	r3, [pc, #556]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10d      	bne.n	8002b12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af6:	4b88      	ldr	r3, [pc, #544]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	4a87      	ldr	r2, [pc, #540]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b00:	61d3      	str	r3, [r2, #28]
 8002b02:	4b85      	ldr	r3, [pc, #532]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b12:	4b82      	ldr	r3, [pc, #520]	; (8002d1c <HAL_RCC_OscConfig+0x4c8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d118      	bne.n	8002b50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b1e:	4b7f      	ldr	r3, [pc, #508]	; (8002d1c <HAL_RCC_OscConfig+0x4c8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a7e      	ldr	r2, [pc, #504]	; (8002d1c <HAL_RCC_OscConfig+0x4c8>)
 8002b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2a:	f7fe fb55 	bl	80011d8 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b32:	f7fe fb51 	bl	80011d8 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b64      	cmp	r3, #100	; 0x64
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e103      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b44:	4b75      	ldr	r3, [pc, #468]	; (8002d1c <HAL_RCC_OscConfig+0x4c8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d106      	bne.n	8002b66 <HAL_RCC_OscConfig+0x312>
 8002b58:	4b6f      	ldr	r3, [pc, #444]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	4a6e      	ldr	r2, [pc, #440]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6213      	str	r3, [r2, #32]
 8002b64:	e02d      	b.n	8002bc2 <HAL_RCC_OscConfig+0x36e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RCC_OscConfig+0x334>
 8002b6e:	4b6a      	ldr	r3, [pc, #424]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	4a69      	ldr	r2, [pc, #420]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	6213      	str	r3, [r2, #32]
 8002b7a:	4b67      	ldr	r3, [pc, #412]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	4a66      	ldr	r2, [pc, #408]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002b80:	f023 0304 	bic.w	r3, r3, #4
 8002b84:	6213      	str	r3, [r2, #32]
 8002b86:	e01c      	b.n	8002bc2 <HAL_RCC_OscConfig+0x36e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2b05      	cmp	r3, #5
 8002b8e:	d10c      	bne.n	8002baa <HAL_RCC_OscConfig+0x356>
 8002b90:	4b61      	ldr	r3, [pc, #388]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	4a60      	ldr	r2, [pc, #384]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002b96:	f043 0304 	orr.w	r3, r3, #4
 8002b9a:	6213      	str	r3, [r2, #32]
 8002b9c:	4b5e      	ldr	r3, [pc, #376]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	4a5d      	ldr	r2, [pc, #372]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6213      	str	r3, [r2, #32]
 8002ba8:	e00b      	b.n	8002bc2 <HAL_RCC_OscConfig+0x36e>
 8002baa:	4b5b      	ldr	r3, [pc, #364]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	4a5a      	ldr	r2, [pc, #360]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	6213      	str	r3, [r2, #32]
 8002bb6:	4b58      	ldr	r3, [pc, #352]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	4a57      	ldr	r2, [pc, #348]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	f023 0304 	bic.w	r3, r3, #4
 8002bc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d015      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bca:	f7fe fb05 	bl	80011d8 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd2:	f7fe fb01 	bl	80011d8 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e0b1      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be8:	4b4b      	ldr	r3, [pc, #300]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0ee      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x37e>
 8002bf4:	e014      	b.n	8002c20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf6:	f7fe faef 	bl	80011d8 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfc:	e00a      	b.n	8002c14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfe:	f7fe faeb 	bl	80011d8 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e09b      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c14:	4b40      	ldr	r3, [pc, #256]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1ee      	bne.n	8002bfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c20:	7dfb      	ldrb	r3, [r7, #23]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d105      	bne.n	8002c32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c26:	4b3c      	ldr	r3, [pc, #240]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	4a3b      	ldr	r2, [pc, #236]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 8087 	beq.w	8002d4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c3c:	4b36      	ldr	r3, [pc, #216]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 030c 	and.w	r3, r3, #12
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d061      	beq.n	8002d0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d146      	bne.n	8002cde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c50:	4b33      	ldr	r3, [pc, #204]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c56:	f7fe fabf 	bl	80011d8 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5e:	f7fe fabb 	bl	80011d8 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e06d      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c70:	4b29      	ldr	r3, [pc, #164]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1f0      	bne.n	8002c5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c84:	d108      	bne.n	8002c98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c86:	4b24      	ldr	r3, [pc, #144]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	4921      	ldr	r1, [pc, #132]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c98:	4b1f      	ldr	r3, [pc, #124]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a19      	ldr	r1, [r3, #32]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	430b      	orrs	r3, r1
 8002caa:	491b      	ldr	r1, [pc, #108]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb0:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb6:	f7fe fa8f 	bl	80011d8 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cbe:	f7fe fa8b 	bl	80011d8 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e03d      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cd0:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x46a>
 8002cdc:	e035      	b.n	8002d4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fa78 	bl	80011d8 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cec:	f7fe fa74 	bl	80011d8 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e026      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x498>
 8002d0a:	e01e      	b.n	8002d4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e019      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40007000 	.word	0x40007000
 8002d20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_RCC_OscConfig+0x500>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d106      	bne.n	8002d46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d001      	beq.n	8002d4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000

08002d58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0d0      	b.n	8002f0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b6a      	ldr	r3, [pc, #424]	; (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d910      	bls.n	8002d9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b67      	ldr	r3, [pc, #412]	; (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 0207 	bic.w	r2, r3, #7
 8002d82:	4965      	ldr	r1, [pc, #404]	; (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8a:	4b63      	ldr	r3, [pc, #396]	; (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0b8      	b.n	8002f0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d020      	beq.n	8002dea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002db4:	4b59      	ldr	r3, [pc, #356]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4a58      	ldr	r2, [pc, #352]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002dba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dcc:	4b53      	ldr	r3, [pc, #332]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	4a52      	ldr	r2, [pc, #328]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002dd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002dd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd8:	4b50      	ldr	r3, [pc, #320]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	494d      	ldr	r1, [pc, #308]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d040      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d107      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfe:	4b47      	ldr	r3, [pc, #284]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d115      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e07f      	b.n	8002f0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d107      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e16:	4b41      	ldr	r3, [pc, #260]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e073      	b.n	8002f0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e26:	4b3d      	ldr	r3, [pc, #244]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e06b      	b.n	8002f0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e36:	4b39      	ldr	r3, [pc, #228]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f023 0203 	bic.w	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4936      	ldr	r1, [pc, #216]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e48:	f7fe f9c6 	bl	80011d8 <HAL_GetTick>
 8002e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4e:	e00a      	b.n	8002e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e50:	f7fe f9c2 	bl	80011d8 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e053      	b.n	8002f0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e66:	4b2d      	ldr	r3, [pc, #180]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 020c 	and.w	r2, r3, #12
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d1eb      	bne.n	8002e50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e78:	4b27      	ldr	r3, [pc, #156]	; (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d210      	bcs.n	8002ea8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b24      	ldr	r3, [pc, #144]	; (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 0207 	bic.w	r2, r3, #7
 8002e8e:	4922      	ldr	r1, [pc, #136]	; (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b20      	ldr	r3, [pc, #128]	; (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e032      	b.n	8002f0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb4:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	4916      	ldr	r1, [pc, #88]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ed2:	4b12      	ldr	r3, [pc, #72]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	490e      	ldr	r1, [pc, #56]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ee6:	f000 f821 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 8002eea:	4602      	mov	r2, r0
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	490a      	ldr	r1, [pc, #40]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef8:	5ccb      	ldrb	r3, [r1, r3]
 8002efa:	fa22 f303 	lsr.w	r3, r2, r3
 8002efe:	4a09      	ldr	r2, [pc, #36]	; (8002f24 <HAL_RCC_ClockConfig+0x1cc>)
 8002f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f02:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HAL_RCC_ClockConfig+0x1d0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe f924 	bl	8001154 <HAL_InitTick>

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40022000 	.word	0x40022000
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	080053cc 	.word	0x080053cc
 8002f24:	20000000 	.word	0x20000000
 8002f28:	20000004 	.word	0x20000004

08002f2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f2c:	b490      	push	{r4, r7}
 8002f2e:	b08a      	sub	sp, #40	; 0x28
 8002f30:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f32:	4b29      	ldr	r3, [pc, #164]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002f34:	1d3c      	adds	r4, r7, #4
 8002f36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f3c:	f240 2301 	movw	r3, #513	; 0x201
 8002f40:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
 8002f46:	2300      	movs	r3, #0
 8002f48:	61bb      	str	r3, [r7, #24]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f56:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d002      	beq.n	8002f6c <HAL_RCC_GetSysClockFreq+0x40>
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d003      	beq.n	8002f72 <HAL_RCC_GetSysClockFreq+0x46>
 8002f6a:	e02b      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f6c:	4b1c      	ldr	r3, [pc, #112]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f6e:	623b      	str	r3, [r7, #32]
      break;
 8002f70:	e02b      	b.n	8002fca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	0c9b      	lsrs	r3, r3, #18
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	3328      	adds	r3, #40	; 0x28
 8002f7c:	443b      	add	r3, r7
 8002f7e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f82:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d012      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f8e:	4b13      	ldr	r3, [pc, #76]	; (8002fdc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	0c5b      	lsrs	r3, r3, #17
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	3328      	adds	r3, #40	; 0x28
 8002f9a:	443b      	add	r3, r7
 8002f9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002fa0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	4a0e      	ldr	r2, [pc, #56]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fa6:	fb03 f202 	mul.w	r2, r3, r2
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb2:	e004      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	4a0b      	ldr	r2, [pc, #44]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fb8:	fb02 f303 	mul.w	r3, r2, r3
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	623b      	str	r3, [r7, #32]
      break;
 8002fc2:	e002      	b.n	8002fca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fc4:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fc6:	623b      	str	r3, [r7, #32]
      break;
 8002fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fca:	6a3b      	ldr	r3, [r7, #32]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3728      	adds	r7, #40	; 0x28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc90      	pop	{r4, r7}
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	080053ac 	.word	0x080053ac
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	007a1200 	.word	0x007a1200
 8002fe4:	003d0900 	.word	0x003d0900

08002fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fec:	4b02      	ldr	r3, [pc, #8]	; (8002ff8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fee:	681b      	ldr	r3, [r3, #0]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr
 8002ff8:	20000000 	.word	0x20000000

08002ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003000:	f7ff fff2 	bl	8002fe8 <HAL_RCC_GetHCLKFreq>
 8003004:	4602      	mov	r2, r0
 8003006:	4b05      	ldr	r3, [pc, #20]	; (800301c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	0a1b      	lsrs	r3, r3, #8
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	4903      	ldr	r1, [pc, #12]	; (8003020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003012:	5ccb      	ldrb	r3, [r1, r3]
 8003014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003018:	4618      	mov	r0, r3
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40021000 	.word	0x40021000
 8003020:	080053dc 	.word	0x080053dc

08003024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003028:	f7ff ffde 	bl	8002fe8 <HAL_RCC_GetHCLKFreq>
 800302c:	4602      	mov	r2, r0
 800302e:	4b05      	ldr	r3, [pc, #20]	; (8003044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	0adb      	lsrs	r3, r3, #11
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	4903      	ldr	r1, [pc, #12]	; (8003048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800303a:	5ccb      	ldrb	r3, [r1, r3]
 800303c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003040:	4618      	mov	r0, r3
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40021000 	.word	0x40021000
 8003048:	080053dc 	.word	0x080053dc

0800304c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003054:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <RCC_Delay+0x34>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <RCC_Delay+0x38>)
 800305a:	fba2 2303 	umull	r2, r3, r2, r3
 800305e:	0a5b      	lsrs	r3, r3, #9
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	fb02 f303 	mul.w	r3, r2, r3
 8003066:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003068:	bf00      	nop
  }
  while (Delay --);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1e5a      	subs	r2, r3, #1
 800306e:	60fa      	str	r2, [r7, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1f9      	bne.n	8003068 <RCC_Delay+0x1c>
}
 8003074:	bf00      	nop
 8003076:	bf00      	nop
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr
 8003080:	20000000 	.word	0x20000000
 8003084:	10624dd3 	.word	0x10624dd3

08003088 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d07d      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80030a4:	2300      	movs	r3, #0
 80030a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030a8:	4b4f      	ldr	r3, [pc, #316]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10d      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b4:	4b4c      	ldr	r3, [pc, #304]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	4a4b      	ldr	r2, [pc, #300]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030be:	61d3      	str	r3, [r2, #28]
 80030c0:	4b49      	ldr	r3, [pc, #292]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030cc:	2301      	movs	r3, #1
 80030ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d0:	4b46      	ldr	r3, [pc, #280]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d118      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030dc:	4b43      	ldr	r3, [pc, #268]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a42      	ldr	r2, [pc, #264]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030e8:	f7fe f876 	bl	80011d8 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ee:	e008      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f0:	f7fe f872 	bl	80011d8 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	; 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e06d      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003102:	4b3a      	ldr	r3, [pc, #232]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800310e:	4b36      	ldr	r3, [pc, #216]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003116:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d02e      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	429a      	cmp	r2, r3
 800312a:	d027      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800312c:	4b2e      	ldr	r3, [pc, #184]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003134:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003136:	4b2e      	ldr	r3, [pc, #184]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003138:	2201      	movs	r2, #1
 800313a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800313c:	4b2c      	ldr	r3, [pc, #176]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003142:	4a29      	ldr	r2, [pc, #164]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d014      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003152:	f7fe f841 	bl	80011d8 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003158:	e00a      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315a:	f7fe f83d 	bl	80011d8 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	f241 3288 	movw	r2, #5000	; 0x1388
 8003168:	4293      	cmp	r3, r2
 800316a:	d901      	bls.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e036      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003170:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0ee      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800317c:	4b1a      	ldr	r3, [pc, #104]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4917      	ldr	r1, [pc, #92]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318a:	4313      	orrs	r3, r2
 800318c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800318e:	7dfb      	ldrb	r3, [r7, #23]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d105      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003194:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	4a13      	ldr	r2, [pc, #76]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800319e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031ac:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	490b      	ldr	r1, [pc, #44]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d008      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031ca:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	4904      	ldr	r1, [pc, #16]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40007000 	.word	0x40007000
 80031f0:	42420440 	.word	0x42420440

080031f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e041      	b.n	800328a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fd fda6 	bl	8000d6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3304      	adds	r3, #4
 8003230:	4619      	mov	r1, r3
 8003232:	4610      	mov	r0, r2
 8003234:	f000 fb84 	bl	8003940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d001      	beq.n	80032ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e03c      	b.n	8003326 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <HAL_TIM_Base_Start+0x9c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d018      	beq.n	80032f0 <HAL_TIM_Base_Start+0x5c>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a1c      	ldr	r2, [pc, #112]	; (8003334 <HAL_TIM_Base_Start+0xa0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d013      	beq.n	80032f0 <HAL_TIM_Base_Start+0x5c>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d0:	d00e      	beq.n	80032f0 <HAL_TIM_Base_Start+0x5c>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a18      	ldr	r2, [pc, #96]	; (8003338 <HAL_TIM_Base_Start+0xa4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d009      	beq.n	80032f0 <HAL_TIM_Base_Start+0x5c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a16      	ldr	r2, [pc, #88]	; (800333c <HAL_TIM_Base_Start+0xa8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d004      	beq.n	80032f0 <HAL_TIM_Base_Start+0x5c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a15      	ldr	r2, [pc, #84]	; (8003340 <HAL_TIM_Base_Start+0xac>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d111      	bne.n	8003314 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b06      	cmp	r3, #6
 8003300:	d010      	beq.n	8003324 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0201 	orr.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003312:	e007      	b.n	8003324 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40013400 	.word	0x40013400
 8003338:	40000400 	.word	0x40000400
 800333c:	40000800 	.word	0x40000800
 8003340:	40000c00 	.word	0x40000c00

08003344 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e041      	b.n	80033da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fd fcd8 	bl	8000d20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3304      	adds	r3, #4
 8003380:	4619      	mov	r1, r3
 8003382:	4610      	mov	r0, r2
 8003384:	f000 fadc 	bl	8003940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d109      	bne.n	8003408 <HAL_TIM_PWM_Start+0x24>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	bf14      	ite	ne
 8003400:	2301      	movne	r3, #1
 8003402:	2300      	moveq	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	e022      	b.n	800344e <HAL_TIM_PWM_Start+0x6a>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2b04      	cmp	r3, #4
 800340c:	d109      	bne.n	8003422 <HAL_TIM_PWM_Start+0x3e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b01      	cmp	r3, #1
 8003418:	bf14      	ite	ne
 800341a:	2301      	movne	r3, #1
 800341c:	2300      	moveq	r3, #0
 800341e:	b2db      	uxtb	r3, r3
 8003420:	e015      	b.n	800344e <HAL_TIM_PWM_Start+0x6a>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b08      	cmp	r3, #8
 8003426:	d109      	bne.n	800343c <HAL_TIM_PWM_Start+0x58>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b01      	cmp	r3, #1
 8003432:	bf14      	ite	ne
 8003434:	2301      	movne	r3, #1
 8003436:	2300      	moveq	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	e008      	b.n	800344e <HAL_TIM_PWM_Start+0x6a>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b01      	cmp	r3, #1
 8003446:	bf14      	ite	ne
 8003448:	2301      	movne	r3, #1
 800344a:	2300      	moveq	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e072      	b.n	800353c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d104      	bne.n	8003466 <HAL_TIM_PWM_Start+0x82>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003464:	e013      	b.n	800348e <HAL_TIM_PWM_Start+0xaa>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b04      	cmp	r3, #4
 800346a:	d104      	bne.n	8003476 <HAL_TIM_PWM_Start+0x92>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003474:	e00b      	b.n	800348e <HAL_TIM_PWM_Start+0xaa>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b08      	cmp	r3, #8
 800347a:	d104      	bne.n	8003486 <HAL_TIM_PWM_Start+0xa2>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003484:	e003      	b.n	800348e <HAL_TIM_PWM_Start+0xaa>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2202      	movs	r2, #2
 800348a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2201      	movs	r2, #1
 8003494:	6839      	ldr	r1, [r7, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fc78 	bl	8003d8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a28      	ldr	r2, [pc, #160]	; (8003544 <HAL_TIM_PWM_Start+0x160>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d004      	beq.n	80034b0 <HAL_TIM_PWM_Start+0xcc>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a27      	ldr	r2, [pc, #156]	; (8003548 <HAL_TIM_PWM_Start+0x164>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d101      	bne.n	80034b4 <HAL_TIM_PWM_Start+0xd0>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <HAL_TIM_PWM_Start+0xd2>
 80034b4:	2300      	movs	r3, #0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d007      	beq.n	80034ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <HAL_TIM_PWM_Start+0x160>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d018      	beq.n	8003506 <HAL_TIM_PWM_Start+0x122>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a1b      	ldr	r2, [pc, #108]	; (8003548 <HAL_TIM_PWM_Start+0x164>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d013      	beq.n	8003506 <HAL_TIM_PWM_Start+0x122>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e6:	d00e      	beq.n	8003506 <HAL_TIM_PWM_Start+0x122>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a17      	ldr	r2, [pc, #92]	; (800354c <HAL_TIM_PWM_Start+0x168>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d009      	beq.n	8003506 <HAL_TIM_PWM_Start+0x122>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a16      	ldr	r2, [pc, #88]	; (8003550 <HAL_TIM_PWM_Start+0x16c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d004      	beq.n	8003506 <HAL_TIM_PWM_Start+0x122>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a14      	ldr	r2, [pc, #80]	; (8003554 <HAL_TIM_PWM_Start+0x170>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d111      	bne.n	800352a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b06      	cmp	r3, #6
 8003516:	d010      	beq.n	800353a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003528:	e007      	b.n	800353a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0201 	orr.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40012c00 	.word	0x40012c00
 8003548:	40013400 	.word	0x40013400
 800354c:	40000400 	.word	0x40000400
 8003550:	40000800 	.word	0x40000800
 8003554:	40000c00 	.word	0x40000c00

08003558 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b02      	cmp	r3, #2
 800356c:	d122      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b02      	cmp	r3, #2
 800357a:	d11b      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0202 	mvn.w	r2, #2
 8003584:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f9b4 	bl	8003908 <HAL_TIM_IC_CaptureCallback>
 80035a0:	e005      	b.n	80035ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f9a7 	bl	80038f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f9b6 	bl	800391a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d122      	bne.n	8003608 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d11b      	bne.n	8003608 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0204 	mvn.w	r2, #4
 80035d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2202      	movs	r2, #2
 80035de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f98a 	bl	8003908 <HAL_TIM_IC_CaptureCallback>
 80035f4:	e005      	b.n	8003602 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f97d 	bl	80038f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f98c 	bl	800391a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b08      	cmp	r3, #8
 8003614:	d122      	bne.n	800365c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b08      	cmp	r3, #8
 8003622:	d11b      	bne.n	800365c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0208 	mvn.w	r2, #8
 800362c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2204      	movs	r2, #4
 8003632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f960 	bl	8003908 <HAL_TIM_IC_CaptureCallback>
 8003648:	e005      	b.n	8003656 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f953 	bl	80038f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f962 	bl	800391a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	2b10      	cmp	r3, #16
 8003668:	d122      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b10      	cmp	r3, #16
 8003676:	d11b      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0210 	mvn.w	r2, #16
 8003680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2208      	movs	r2, #8
 8003686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f936 	bl	8003908 <HAL_TIM_IC_CaptureCallback>
 800369c:	e005      	b.n	80036aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f929 	bl	80038f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f938 	bl	800391a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d10e      	bne.n	80036dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d107      	bne.n	80036dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0201 	mvn.w	r2, #1
 80036d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f904 	bl	80038e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e6:	2b80      	cmp	r3, #128	; 0x80
 80036e8:	d10e      	bne.n	8003708 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f4:	2b80      	cmp	r3, #128	; 0x80
 80036f6:	d107      	bne.n	8003708 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fbdb 	bl	8003ebe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003712:	2b40      	cmp	r3, #64	; 0x40
 8003714:	d10e      	bne.n	8003734 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003720:	2b40      	cmp	r3, #64	; 0x40
 8003722:	d107      	bne.n	8003734 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800372c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f8fc 	bl	800392c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b20      	cmp	r3, #32
 8003740:	d10e      	bne.n	8003760 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b20      	cmp	r3, #32
 800374e:	d107      	bne.n	8003760 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0220 	mvn.w	r2, #32
 8003758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fba6 	bl	8003eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800377e:	2302      	movs	r3, #2
 8003780:	e0ac      	b.n	80038dc <HAL_TIM_PWM_ConfigChannel+0x174>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b0c      	cmp	r3, #12
 800378e:	f200 809f 	bhi.w	80038d0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003792:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003798:	080037cd 	.word	0x080037cd
 800379c:	080038d1 	.word	0x080038d1
 80037a0:	080038d1 	.word	0x080038d1
 80037a4:	080038d1 	.word	0x080038d1
 80037a8:	0800380d 	.word	0x0800380d
 80037ac:	080038d1 	.word	0x080038d1
 80037b0:	080038d1 	.word	0x080038d1
 80037b4:	080038d1 	.word	0x080038d1
 80037b8:	0800384f 	.word	0x0800384f
 80037bc:	080038d1 	.word	0x080038d1
 80037c0:	080038d1 	.word	0x080038d1
 80037c4:	080038d1 	.word	0x080038d1
 80037c8:	0800388f 	.word	0x0800388f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68b9      	ldr	r1, [r7, #8]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 f92e 	bl	8003a34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0208 	orr.w	r2, r2, #8
 80037e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0204 	bic.w	r2, r2, #4
 80037f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6999      	ldr	r1, [r3, #24]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	619a      	str	r2, [r3, #24]
      break;
 800380a:	e062      	b.n	80038d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68b9      	ldr	r1, [r7, #8]
 8003812:	4618      	mov	r0, r3
 8003814:	f000 f97e 	bl	8003b14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699a      	ldr	r2, [r3, #24]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6999      	ldr	r1, [r3, #24]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	021a      	lsls	r2, r3, #8
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	619a      	str	r2, [r3, #24]
      break;
 800384c:	e041      	b.n	80038d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68b9      	ldr	r1, [r7, #8]
 8003854:	4618      	mov	r0, r3
 8003856:	f000 f9d1 	bl	8003bfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69da      	ldr	r2, [r3, #28]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0208 	orr.w	r2, r2, #8
 8003868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	69da      	ldr	r2, [r3, #28]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0204 	bic.w	r2, r2, #4
 8003878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69d9      	ldr	r1, [r3, #28]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	61da      	str	r2, [r3, #28]
      break;
 800388c:	e021      	b.n	80038d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68b9      	ldr	r1, [r7, #8]
 8003894:	4618      	mov	r0, r3
 8003896:	f000 fa25 	bl	8003ce4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69da      	ldr	r2, [r3, #28]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69da      	ldr	r2, [r3, #28]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69d9      	ldr	r1, [r3, #28]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	021a      	lsls	r2, r3, #8
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	61da      	str	r2, [r3, #28]
      break;
 80038ce:	e000      	b.n	80038d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80038d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr

080038f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr

08003908 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr

0800391a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr

0800392c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr
	...

08003940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a33      	ldr	r2, [pc, #204]	; (8003a20 <TIM_Base_SetConfig+0xe0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d013      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a32      	ldr	r2, [pc, #200]	; (8003a24 <TIM_Base_SetConfig+0xe4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00f      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003966:	d00b      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a2f      	ldr	r2, [pc, #188]	; (8003a28 <TIM_Base_SetConfig+0xe8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d007      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a2e      	ldr	r2, [pc, #184]	; (8003a2c <TIM_Base_SetConfig+0xec>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d003      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a2d      	ldr	r2, [pc, #180]	; (8003a30 <TIM_Base_SetConfig+0xf0>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d108      	bne.n	8003992 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a22      	ldr	r2, [pc, #136]	; (8003a20 <TIM_Base_SetConfig+0xe0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <TIM_Base_SetConfig+0x82>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a21      	ldr	r2, [pc, #132]	; (8003a24 <TIM_Base_SetConfig+0xe4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00f      	beq.n	80039c2 <TIM_Base_SetConfig+0x82>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a8:	d00b      	beq.n	80039c2 <TIM_Base_SetConfig+0x82>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a1e      	ldr	r2, [pc, #120]	; (8003a28 <TIM_Base_SetConfig+0xe8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d007      	beq.n	80039c2 <TIM_Base_SetConfig+0x82>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a1d      	ldr	r2, [pc, #116]	; (8003a2c <TIM_Base_SetConfig+0xec>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d003      	beq.n	80039c2 <TIM_Base_SetConfig+0x82>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a1c      	ldr	r2, [pc, #112]	; (8003a30 <TIM_Base_SetConfig+0xf0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d108      	bne.n	80039d4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a09      	ldr	r2, [pc, #36]	; (8003a20 <TIM_Base_SetConfig+0xe0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d003      	beq.n	8003a08 <TIM_Base_SetConfig+0xc8>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a08      	ldr	r2, [pc, #32]	; (8003a24 <TIM_Base_SetConfig+0xe4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d103      	bne.n	8003a10 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	615a      	str	r2, [r3, #20]
}
 8003a16:	bf00      	nop
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr
 8003a20:	40012c00 	.word	0x40012c00
 8003a24:	40013400 	.word	0x40013400
 8003a28:	40000400 	.word	0x40000400
 8003a2c:	40000800 	.word	0x40000800
 8003a30:	40000c00 	.word	0x40000c00

08003a34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f023 0201 	bic.w	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0303 	bic.w	r3, r3, #3
 8003a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f023 0302 	bic.w	r3, r3, #2
 8003a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a20      	ldr	r2, [pc, #128]	; (8003b0c <TIM_OC1_SetConfig+0xd8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d003      	beq.n	8003a98 <TIM_OC1_SetConfig+0x64>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a1f      	ldr	r2, [pc, #124]	; (8003b10 <TIM_OC1_SetConfig+0xdc>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d10c      	bne.n	8003ab2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f023 0308 	bic.w	r3, r3, #8
 8003a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f023 0304 	bic.w	r3, r3, #4
 8003ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <TIM_OC1_SetConfig+0xd8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d003      	beq.n	8003ac2 <TIM_OC1_SetConfig+0x8e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a14      	ldr	r2, [pc, #80]	; (8003b10 <TIM_OC1_SetConfig+0xdc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d111      	bne.n	8003ae6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	621a      	str	r2, [r3, #32]
}
 8003b00:	bf00      	nop
 8003b02:	371c      	adds	r7, #28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40012c00 	.word	0x40012c00
 8003b10:	40013400 	.word	0x40013400

08003b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f023 0210 	bic.w	r2, r3, #16
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f023 0320 	bic.w	r3, r3, #32
 8003b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a21      	ldr	r2, [pc, #132]	; (8003bf4 <TIM_OC2_SetConfig+0xe0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d003      	beq.n	8003b7c <TIM_OC2_SetConfig+0x68>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a20      	ldr	r2, [pc, #128]	; (8003bf8 <TIM_OC2_SetConfig+0xe4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d10d      	bne.n	8003b98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a16      	ldr	r2, [pc, #88]	; (8003bf4 <TIM_OC2_SetConfig+0xe0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d003      	beq.n	8003ba8 <TIM_OC2_SetConfig+0x94>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a15      	ldr	r2, [pc, #84]	; (8003bf8 <TIM_OC2_SetConfig+0xe4>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d113      	bne.n	8003bd0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	621a      	str	r2, [r3, #32]
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr
 8003bf4:	40012c00 	.word	0x40012c00
 8003bf8:	40013400 	.word	0x40013400

08003bfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0303 	bic.w	r3, r3, #3
 8003c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	021b      	lsls	r3, r3, #8
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a21      	ldr	r2, [pc, #132]	; (8003cdc <TIM_OC3_SetConfig+0xe0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d003      	beq.n	8003c62 <TIM_OC3_SetConfig+0x66>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a20      	ldr	r2, [pc, #128]	; (8003ce0 <TIM_OC3_SetConfig+0xe4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d10d      	bne.n	8003c7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a16      	ldr	r2, [pc, #88]	; (8003cdc <TIM_OC3_SetConfig+0xe0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d003      	beq.n	8003c8e <TIM_OC3_SetConfig+0x92>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a15      	ldr	r2, [pc, #84]	; (8003ce0 <TIM_OC3_SetConfig+0xe4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d113      	bne.n	8003cb6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	621a      	str	r2, [r3, #32]
}
 8003cd0:	bf00      	nop
 8003cd2:	371c      	adds	r7, #28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40012c00 	.word	0x40012c00
 8003ce0:	40013400 	.word	0x40013400

08003ce4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	021b      	lsls	r3, r3, #8
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	031b      	lsls	r3, r3, #12
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a11      	ldr	r2, [pc, #68]	; (8003d84 <TIM_OC4_SetConfig+0xa0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d003      	beq.n	8003d4c <TIM_OC4_SetConfig+0x68>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a10      	ldr	r2, [pc, #64]	; (8003d88 <TIM_OC4_SetConfig+0xa4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d109      	bne.n	8003d60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	019b      	lsls	r3, r3, #6
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	621a      	str	r2, [r3, #32]
}
 8003d7a:	bf00      	nop
 8003d7c:	371c      	adds	r7, #28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr
 8003d84:	40012c00 	.word	0x40012c00
 8003d88:	40013400 	.word	0x40013400

08003d8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f003 031f 	and.w	r3, r3, #31
 8003d9e:	2201      	movs	r2, #1
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a1a      	ldr	r2, [r3, #32]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	43db      	mvns	r3, r3
 8003dae:	401a      	ands	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a1a      	ldr	r2, [r3, #32]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	621a      	str	r2, [r3, #32]
}
 8003dca:	bf00      	nop
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e050      	b.n	8003e8e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a1b      	ldr	r2, [pc, #108]	; (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d018      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a19      	ldr	r2, [pc, #100]	; (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d013      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e42:	d00e      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a15      	ldr	r2, [pc, #84]	; (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d009      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a14      	ldr	r2, [pc, #80]	; (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d004      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a12      	ldr	r2, [pc, #72]	; (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d10c      	bne.n	8003e7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40013400 	.word	0x40013400
 8003ea0:	40000400 	.word	0x40000400
 8003ea4:	40000800 	.word	0x40000800
 8003ea8:	40000c00 	.word	0x40000c00

08003eac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr

08003ebe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr

08003ed0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e03f      	b.n	8003f62 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fc ff88 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2224      	movs	r2, #36	; 0x24
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 fc4b 	bl	80047b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	4613      	mov	r3, r2
 8003f78:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	d153      	bne.n	800402e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_UART_Transmit_DMA+0x26>
 8003f8c:	88fb      	ldrh	r3, [r7, #6]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e04c      	b.n	8004030 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_UART_Transmit_DMA+0x38>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e045      	b.n	8004030 <HAL_UART_Transmit_DMA+0xc4>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	88fa      	ldrh	r2, [r7, #6]
 8003fb6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	88fa      	ldrh	r2, [r7, #6]
 8003fbc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2221      	movs	r2, #33	; 0x21
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd0:	4a19      	ldr	r2, [pc, #100]	; (8004038 <HAL_UART_Transmit_DMA+0xcc>)
 8003fd2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd8:	4a18      	ldr	r2, [pc, #96]	; (800403c <HAL_UART_Transmit_DMA+0xd0>)
 8003fda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe0:	4a17      	ldr	r2, [pc, #92]	; (8004040 <HAL_UART_Transmit_DMA+0xd4>)
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe8:	2200      	movs	r2, #0
 8003fea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8003fec:	f107 0308 	add.w	r3, r7, #8
 8003ff0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	6819      	ldr	r1, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3304      	adds	r3, #4
 8004000:	461a      	mov	r2, r3
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	f7fd fe6e 	bl	8001ce4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004010:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695a      	ldr	r2, [r3, #20]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004028:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	e000      	b.n	8004030 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800402e:	2302      	movs	r3, #2
  }
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	080043e5 	.word	0x080043e5
 800403c:	08004437 	.word	0x08004437
 8004040:	08004453 	.word	0x08004453

08004044 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08a      	sub	sp, #40	; 0x28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004064:	2300      	movs	r3, #0
 8004066:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10d      	bne.n	8004096 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_UART_IRQHandler+0x52>
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fae5 	bl	800465e <UART_Receive_IT>
      return;
 8004094:	e17b      	b.n	800438e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80b1 	beq.w	8004200 <HAL_UART_IRQHandler+0x1bc>
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d105      	bne.n	80040b4 <HAL_UART_IRQHandler+0x70>
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 80a6 	beq.w	8004200 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <HAL_UART_IRQHandler+0x90>
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040cc:	f043 0201 	orr.w	r2, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <HAL_UART_IRQHandler+0xb0>
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	f043 0202 	orr.w	r2, r3, #2
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <HAL_UART_IRQHandler+0xd0>
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	f043 0204 	orr.w	r2, r3, #4
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00f      	beq.n	800413e <HAL_UART_IRQHandler+0xfa>
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b00      	cmp	r3, #0
 8004126:	d104      	bne.n	8004132 <HAL_UART_IRQHandler+0xee>
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d005      	beq.n	800413e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f043 0208 	orr.w	r2, r3, #8
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 811e 	beq.w	8004384 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	d007      	beq.n	8004162 <HAL_UART_IRQHandler+0x11e>
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fa7e 	bl	800465e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	bf14      	ite	ne
 8004170:	2301      	movne	r3, #1
 8004172:	2300      	moveq	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d102      	bne.n	800418a <HAL_UART_IRQHandler+0x146>
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d031      	beq.n	80041ee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f9c0 	bl	8004510 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d023      	beq.n	80041e6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695a      	ldr	r2, [r3, #20]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d013      	beq.n	80041de <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	4a76      	ldr	r2, [pc, #472]	; (8004394 <HAL_UART_IRQHandler+0x350>)
 80041bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fd fe28 	bl	8001e18 <HAL_DMA_Abort_IT>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d016      	beq.n	80041fc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041d8:	4610      	mov	r0, r2
 80041da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041dc:	e00e      	b.n	80041fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f8ec 	bl	80043bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e4:	e00a      	b.n	80041fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f8e8 	bl	80043bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ec:	e006      	b.n	80041fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f8e4 	bl	80043bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80041fa:	e0c3      	b.n	8004384 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041fc:	bf00      	nop
    return;
 80041fe:	e0c1      	b.n	8004384 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	2b01      	cmp	r3, #1
 8004206:	f040 80a1 	bne.w	800434c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 809b 	beq.w	800434c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 8095 	beq.w	800434c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004242:	2b00      	cmp	r3, #0
 8004244:	d04e      	beq.n	80042e4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004250:	8a3b      	ldrh	r3, [r7, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 8098 	beq.w	8004388 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800425c:	8a3a      	ldrh	r2, [r7, #16]
 800425e:	429a      	cmp	r2, r3
 8004260:	f080 8092 	bcs.w	8004388 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8a3a      	ldrh	r2, [r7, #16]
 8004268:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	2b20      	cmp	r3, #32
 8004272:	d02b      	beq.n	80042cc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004282:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695a      	ldr	r2, [r3, #20]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695a      	ldr	r2, [r3, #20]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042a2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0210 	bic.w	r2, r2, #16
 80042c0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fd fd6b 	bl	8001da2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	b29b      	uxth	r3, r3
 80042da:	4619      	mov	r1, r3
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f876 	bl	80043ce <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80042e2:	e051      	b.n	8004388 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d047      	beq.n	800438c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80042fc:	8a7b      	ldrh	r3, [r7, #18]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d044      	beq.n	800438c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004310:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695a      	ldr	r2, [r3, #20]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0201 	bic.w	r2, r2, #1
 8004320:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0210 	bic.w	r2, r2, #16
 800433e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004340:	8a7b      	ldrh	r3, [r7, #18]
 8004342:	4619      	mov	r1, r3
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f842 	bl	80043ce <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800434a:	e01f      	b.n	800438c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004352:	2b00      	cmp	r3, #0
 8004354:	d008      	beq.n	8004368 <HAL_UART_IRQHandler+0x324>
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f915 	bl	8004590 <UART_Transmit_IT>
    return;
 8004366:	e012      	b.n	800438e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00d      	beq.n	800438e <HAL_UART_IRQHandler+0x34a>
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f956 	bl	800462e <UART_EndTransmit_IT>
    return;
 8004382:	e004      	b.n	800438e <HAL_UART_IRQHandler+0x34a>
    return;
 8004384:	bf00      	nop
 8004386:	e002      	b.n	800438e <HAL_UART_IRQHandler+0x34a>
      return;
 8004388:	bf00      	nop
 800438a:	e000      	b.n	800438e <HAL_UART_IRQHandler+0x34a>
      return;
 800438c:	bf00      	nop
  }
}
 800438e:	3728      	adds	r7, #40	; 0x28
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	08004569 	.word	0x08004569

08004398 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr

080043aa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr

080043bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr

080043ce <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	460b      	mov	r3, r1
 80043d8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr

080043e4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d113      	bne.n	8004428 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695a      	ldr	r2, [r3, #20]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004414:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004424:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004426:	e002      	b.n	800442e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f7fb fff3 	bl	8000414 <HAL_UART_TxCpltCallback>
}
 800442e:	bf00      	nop
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f7ff ffa7 	bl	8004398 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800444a:	bf00      	nop
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b084      	sub	sp, #16
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446e:	2b00      	cmp	r3, #0
 8004470:	bf14      	ite	ne
 8004472:	2301      	movne	r3, #1
 8004474:	2300      	moveq	r3, #0
 8004476:	b2db      	uxtb	r3, r3
 8004478:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b21      	cmp	r3, #33	; 0x21
 8004484:	d108      	bne.n	8004498 <UART_DMAError+0x46>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2200      	movs	r2, #0
 8004490:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004492:	68b8      	ldr	r0, [r7, #8]
 8004494:	f000 f827 	bl	80044e6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	bf14      	ite	ne
 80044a6:	2301      	movne	r3, #1
 80044a8:	2300      	moveq	r3, #0
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b22      	cmp	r3, #34	; 0x22
 80044b8:	d108      	bne.n	80044cc <UART_DMAError+0x7a>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2200      	movs	r2, #0
 80044c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80044c6:	68b8      	ldr	r0, [r7, #8]
 80044c8:	f000 f822 	bl	8004510 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	f043 0210 	orr.w	r2, r3, #16
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044d8:	68b8      	ldr	r0, [r7, #8]
 80044da:	f7ff ff6f 	bl	80043bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80044fc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr

08004510 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004526:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695a      	ldr	r2, [r3, #20]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0201 	bic.w	r2, r2, #1
 8004536:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453c:	2b01      	cmp	r3, #1
 800453e:	d107      	bne.n	8004550 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0210 	bic.w	r2, r2, #16
 800454e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr

08004568 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f7ff ff1a 	bl	80043bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004588:	bf00      	nop
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b21      	cmp	r3, #33	; 0x21
 80045a2:	d13e      	bne.n	8004622 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ac:	d114      	bne.n	80045d8 <UART_Transmit_IT+0x48>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d110      	bne.n	80045d8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	461a      	mov	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	1c9a      	adds	r2, r3, #2
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	621a      	str	r2, [r3, #32]
 80045d6:	e008      	b.n	80045ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	1c59      	adds	r1, r3, #1
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6211      	str	r1, [r2, #32]
 80045e2:	781a      	ldrb	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	4619      	mov	r1, r3
 80045f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10f      	bne.n	800461e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800460c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800461c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	e000      	b.n	8004624 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004622:	2302      	movs	r3, #2
  }
}
 8004624:	4618      	mov	r0, r3
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr

0800462e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004644:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fb fee0 	bl	8000414 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b086      	sub	sp, #24
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b22      	cmp	r3, #34	; 0x22
 8004670:	f040 8099 	bne.w	80047a6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467c:	d117      	bne.n	80046ae <UART_Receive_IT+0x50>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d113      	bne.n	80046ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	b29b      	uxth	r3, r3
 8004698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469c:	b29a      	uxth	r2, r3
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a6:	1c9a      	adds	r2, r3, #2
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	629a      	str	r2, [r3, #40]	; 0x28
 80046ac:	e026      	b.n	80046fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80046b4:	2300      	movs	r3, #0
 80046b6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c0:	d007      	beq.n	80046d2 <UART_Receive_IT+0x74>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10a      	bne.n	80046e0 <UART_Receive_IT+0x82>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	e008      	b.n	80046f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29b      	uxth	r3, r3
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	4619      	mov	r1, r3
 800470a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800470c:	2b00      	cmp	r3, #0
 800470e:	d148      	bne.n	80047a2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0220 	bic.w	r2, r2, #32
 800471e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800472e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695a      	ldr	r2, [r3, #20]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0201 	bic.w	r2, r2, #1
 800473e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474c:	2b01      	cmp	r3, #1
 800474e:	d123      	bne.n	8004798 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0210 	bic.w	r2, r2, #16
 8004764:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0310 	and.w	r3, r3, #16
 8004770:	2b10      	cmp	r3, #16
 8004772:	d10a      	bne.n	800478a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800478e:	4619      	mov	r1, r3
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff fe1c 	bl	80043ce <HAL_UARTEx_RxEventCallback>
 8004796:	e002      	b.n	800479e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff fe06 	bl	80043aa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	e002      	b.n	80047a8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e000      	b.n	80047a8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80047a6:	2302      	movs	r3, #2
  }
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047ea:	f023 030c 	bic.w	r3, r3, #12
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6812      	ldr	r2, [r2, #0]
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	430b      	orrs	r3, r1
 80047f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a2c      	ldr	r2, [pc, #176]	; (80048c4 <UART_SetConfig+0x114>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d103      	bne.n	8004820 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004818:	f7fe fc04 	bl	8003024 <HAL_RCC_GetPCLK2Freq>
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	e002      	b.n	8004826 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004820:	f7fe fbec 	bl	8002ffc <HAL_RCC_GetPCLK1Freq>
 8004824:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	009a      	lsls	r2, r3, #2
 8004830:	441a      	add	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	fbb2 f3f3 	udiv	r3, r2, r3
 800483c:	4a22      	ldr	r2, [pc, #136]	; (80048c8 <UART_SetConfig+0x118>)
 800483e:	fba2 2303 	umull	r2, r3, r2, r3
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	0119      	lsls	r1, r3, #4
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	009a      	lsls	r2, r3, #2
 8004850:	441a      	add	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	fbb2 f2f3 	udiv	r2, r2, r3
 800485c:	4b1a      	ldr	r3, [pc, #104]	; (80048c8 <UART_SetConfig+0x118>)
 800485e:	fba3 0302 	umull	r0, r3, r3, r2
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	2064      	movs	r0, #100	; 0x64
 8004866:	fb00 f303 	mul.w	r3, r0, r3
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	3332      	adds	r3, #50	; 0x32
 8004870:	4a15      	ldr	r2, [pc, #84]	; (80048c8 <UART_SetConfig+0x118>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800487c:	4419      	add	r1, r3
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4613      	mov	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	009a      	lsls	r2, r3, #2
 8004888:	441a      	add	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	fbb2 f2f3 	udiv	r2, r2, r3
 8004894:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <UART_SetConfig+0x118>)
 8004896:	fba3 0302 	umull	r0, r3, r3, r2
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	2064      	movs	r0, #100	; 0x64
 800489e:	fb00 f303 	mul.w	r3, r0, r3
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	3332      	adds	r3, #50	; 0x32
 80048a8:	4a07      	ldr	r2, [pc, #28]	; (80048c8 <UART_SetConfig+0x118>)
 80048aa:	fba2 2303 	umull	r2, r3, r2, r3
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	f003 020f 	and.w	r2, r3, #15
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	440a      	add	r2, r1
 80048ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048bc:	bf00      	nop
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40013800 	.word	0x40013800
 80048c8:	51eb851f 	.word	0x51eb851f

080048cc <_ZdlPvj>:
 80048cc:	f000 b813 	b.w	80048f6 <_ZdlPv>

080048d0 <_Znwj>:
 80048d0:	2801      	cmp	r0, #1
 80048d2:	bf38      	it	cc
 80048d4:	2001      	movcc	r0, #1
 80048d6:	b510      	push	{r4, lr}
 80048d8:	4604      	mov	r4, r0
 80048da:	4620      	mov	r0, r4
 80048dc:	f000 f848 	bl	8004970 <malloc>
 80048e0:	b930      	cbnz	r0, 80048f0 <_Znwj+0x20>
 80048e2:	f000 f80b 	bl	80048fc <_ZSt15get_new_handlerv>
 80048e6:	b908      	cbnz	r0, 80048ec <_Znwj+0x1c>
 80048e8:	f000 f810 	bl	800490c <abort>
 80048ec:	4780      	blx	r0
 80048ee:	e7f4      	b.n	80048da <_Znwj+0xa>
 80048f0:	bd10      	pop	{r4, pc}

080048f2 <_Znaj>:
 80048f2:	f7ff bfed 	b.w	80048d0 <_Znwj>

080048f6 <_ZdlPv>:
 80048f6:	f000 b843 	b.w	8004980 <free>
	...

080048fc <_ZSt15get_new_handlerv>:
 80048fc:	4b02      	ldr	r3, [pc, #8]	; (8004908 <_ZSt15get_new_handlerv+0xc>)
 80048fe:	6818      	ldr	r0, [r3, #0]
 8004900:	f3bf 8f5b 	dmb	ish
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	20000310 	.word	0x20000310

0800490c <abort>:
 800490c:	2006      	movs	r0, #6
 800490e:	b508      	push	{r3, lr}
 8004910:	f000 f968 	bl	8004be4 <raise>
 8004914:	2001      	movs	r0, #1
 8004916:	f7fc fb9a 	bl	800104e <_exit>
	...

0800491c <__errno>:
 800491c:	4b01      	ldr	r3, [pc, #4]	; (8004924 <__errno+0x8>)
 800491e:	6818      	ldr	r0, [r3, #0]
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	2000000c 	.word	0x2000000c

08004928 <__libc_init_array>:
 8004928:	b570      	push	{r4, r5, r6, lr}
 800492a:	2600      	movs	r6, #0
 800492c:	4d0c      	ldr	r5, [pc, #48]	; (8004960 <__libc_init_array+0x38>)
 800492e:	4c0d      	ldr	r4, [pc, #52]	; (8004964 <__libc_init_array+0x3c>)
 8004930:	1b64      	subs	r4, r4, r5
 8004932:	10a4      	asrs	r4, r4, #2
 8004934:	42a6      	cmp	r6, r4
 8004936:	d109      	bne.n	800494c <__libc_init_array+0x24>
 8004938:	f000 fcf0 	bl	800531c <_init>
 800493c:	2600      	movs	r6, #0
 800493e:	4d0a      	ldr	r5, [pc, #40]	; (8004968 <__libc_init_array+0x40>)
 8004940:	4c0a      	ldr	r4, [pc, #40]	; (800496c <__libc_init_array+0x44>)
 8004942:	1b64      	subs	r4, r4, r5
 8004944:	10a4      	asrs	r4, r4, #2
 8004946:	42a6      	cmp	r6, r4
 8004948:	d105      	bne.n	8004956 <__libc_init_array+0x2e>
 800494a:	bd70      	pop	{r4, r5, r6, pc}
 800494c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004950:	4798      	blx	r3
 8004952:	3601      	adds	r6, #1
 8004954:	e7ee      	b.n	8004934 <__libc_init_array+0xc>
 8004956:	f855 3b04 	ldr.w	r3, [r5], #4
 800495a:	4798      	blx	r3
 800495c:	3601      	adds	r6, #1
 800495e:	e7f2      	b.n	8004946 <__libc_init_array+0x1e>
 8004960:	08005418 	.word	0x08005418
 8004964:	08005418 	.word	0x08005418
 8004968:	08005418 	.word	0x08005418
 800496c:	08005420 	.word	0x08005420

08004970 <malloc>:
 8004970:	4b02      	ldr	r3, [pc, #8]	; (800497c <malloc+0xc>)
 8004972:	4601      	mov	r1, r0
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	f000 b889 	b.w	8004a8c <_malloc_r>
 800497a:	bf00      	nop
 800497c:	2000000c 	.word	0x2000000c

08004980 <free>:
 8004980:	4b02      	ldr	r3, [pc, #8]	; (800498c <free+0xc>)
 8004982:	4601      	mov	r1, r0
 8004984:	6818      	ldr	r0, [r3, #0]
 8004986:	f000 b819 	b.w	80049bc <_free_r>
 800498a:	bf00      	nop
 800498c:	2000000c 	.word	0x2000000c

08004990 <memcpy>:
 8004990:	440a      	add	r2, r1
 8004992:	4291      	cmp	r1, r2
 8004994:	f100 33ff 	add.w	r3, r0, #4294967295
 8004998:	d100      	bne.n	800499c <memcpy+0xc>
 800499a:	4770      	bx	lr
 800499c:	b510      	push	{r4, lr}
 800499e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049a2:	4291      	cmp	r1, r2
 80049a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049a8:	d1f9      	bne.n	800499e <memcpy+0xe>
 80049aa:	bd10      	pop	{r4, pc}

080049ac <memset>:
 80049ac:	4603      	mov	r3, r0
 80049ae:	4402      	add	r2, r0
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d100      	bne.n	80049b6 <memset+0xa>
 80049b4:	4770      	bx	lr
 80049b6:	f803 1b01 	strb.w	r1, [r3], #1
 80049ba:	e7f9      	b.n	80049b0 <memset+0x4>

080049bc <_free_r>:
 80049bc:	b538      	push	{r3, r4, r5, lr}
 80049be:	4605      	mov	r5, r0
 80049c0:	2900      	cmp	r1, #0
 80049c2:	d040      	beq.n	8004a46 <_free_r+0x8a>
 80049c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049c8:	1f0c      	subs	r4, r1, #4
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	bfb8      	it	lt
 80049ce:	18e4      	addlt	r4, r4, r3
 80049d0:	f000 f944 	bl	8004c5c <__malloc_lock>
 80049d4:	4a1c      	ldr	r2, [pc, #112]	; (8004a48 <_free_r+0x8c>)
 80049d6:	6813      	ldr	r3, [r2, #0]
 80049d8:	b933      	cbnz	r3, 80049e8 <_free_r+0x2c>
 80049da:	6063      	str	r3, [r4, #4]
 80049dc:	6014      	str	r4, [r2, #0]
 80049de:	4628      	mov	r0, r5
 80049e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049e4:	f000 b940 	b.w	8004c68 <__malloc_unlock>
 80049e8:	42a3      	cmp	r3, r4
 80049ea:	d908      	bls.n	80049fe <_free_r+0x42>
 80049ec:	6820      	ldr	r0, [r4, #0]
 80049ee:	1821      	adds	r1, r4, r0
 80049f0:	428b      	cmp	r3, r1
 80049f2:	bf01      	itttt	eq
 80049f4:	6819      	ldreq	r1, [r3, #0]
 80049f6:	685b      	ldreq	r3, [r3, #4]
 80049f8:	1809      	addeq	r1, r1, r0
 80049fa:	6021      	streq	r1, [r4, #0]
 80049fc:	e7ed      	b.n	80049da <_free_r+0x1e>
 80049fe:	461a      	mov	r2, r3
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	b10b      	cbz	r3, 8004a08 <_free_r+0x4c>
 8004a04:	42a3      	cmp	r3, r4
 8004a06:	d9fa      	bls.n	80049fe <_free_r+0x42>
 8004a08:	6811      	ldr	r1, [r2, #0]
 8004a0a:	1850      	adds	r0, r2, r1
 8004a0c:	42a0      	cmp	r0, r4
 8004a0e:	d10b      	bne.n	8004a28 <_free_r+0x6c>
 8004a10:	6820      	ldr	r0, [r4, #0]
 8004a12:	4401      	add	r1, r0
 8004a14:	1850      	adds	r0, r2, r1
 8004a16:	4283      	cmp	r3, r0
 8004a18:	6011      	str	r1, [r2, #0]
 8004a1a:	d1e0      	bne.n	80049de <_free_r+0x22>
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	4401      	add	r1, r0
 8004a22:	6011      	str	r1, [r2, #0]
 8004a24:	6053      	str	r3, [r2, #4]
 8004a26:	e7da      	b.n	80049de <_free_r+0x22>
 8004a28:	d902      	bls.n	8004a30 <_free_r+0x74>
 8004a2a:	230c      	movs	r3, #12
 8004a2c:	602b      	str	r3, [r5, #0]
 8004a2e:	e7d6      	b.n	80049de <_free_r+0x22>
 8004a30:	6820      	ldr	r0, [r4, #0]
 8004a32:	1821      	adds	r1, r4, r0
 8004a34:	428b      	cmp	r3, r1
 8004a36:	bf01      	itttt	eq
 8004a38:	6819      	ldreq	r1, [r3, #0]
 8004a3a:	685b      	ldreq	r3, [r3, #4]
 8004a3c:	1809      	addeq	r1, r1, r0
 8004a3e:	6021      	streq	r1, [r4, #0]
 8004a40:	6063      	str	r3, [r4, #4]
 8004a42:	6054      	str	r4, [r2, #4]
 8004a44:	e7cb      	b.n	80049de <_free_r+0x22>
 8004a46:	bd38      	pop	{r3, r4, r5, pc}
 8004a48:	20000314 	.word	0x20000314

08004a4c <sbrk_aligned>:
 8004a4c:	b570      	push	{r4, r5, r6, lr}
 8004a4e:	4e0e      	ldr	r6, [pc, #56]	; (8004a88 <sbrk_aligned+0x3c>)
 8004a50:	460c      	mov	r4, r1
 8004a52:	6831      	ldr	r1, [r6, #0]
 8004a54:	4605      	mov	r5, r0
 8004a56:	b911      	cbnz	r1, 8004a5e <sbrk_aligned+0x12>
 8004a58:	f000 f88c 	bl	8004b74 <_sbrk_r>
 8004a5c:	6030      	str	r0, [r6, #0]
 8004a5e:	4621      	mov	r1, r4
 8004a60:	4628      	mov	r0, r5
 8004a62:	f000 f887 	bl	8004b74 <_sbrk_r>
 8004a66:	1c43      	adds	r3, r0, #1
 8004a68:	d00a      	beq.n	8004a80 <sbrk_aligned+0x34>
 8004a6a:	1cc4      	adds	r4, r0, #3
 8004a6c:	f024 0403 	bic.w	r4, r4, #3
 8004a70:	42a0      	cmp	r0, r4
 8004a72:	d007      	beq.n	8004a84 <sbrk_aligned+0x38>
 8004a74:	1a21      	subs	r1, r4, r0
 8004a76:	4628      	mov	r0, r5
 8004a78:	f000 f87c 	bl	8004b74 <_sbrk_r>
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	d101      	bne.n	8004a84 <sbrk_aligned+0x38>
 8004a80:	f04f 34ff 	mov.w	r4, #4294967295
 8004a84:	4620      	mov	r0, r4
 8004a86:	bd70      	pop	{r4, r5, r6, pc}
 8004a88:	20000318 	.word	0x20000318

08004a8c <_malloc_r>:
 8004a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a90:	1ccd      	adds	r5, r1, #3
 8004a92:	f025 0503 	bic.w	r5, r5, #3
 8004a96:	3508      	adds	r5, #8
 8004a98:	2d0c      	cmp	r5, #12
 8004a9a:	bf38      	it	cc
 8004a9c:	250c      	movcc	r5, #12
 8004a9e:	2d00      	cmp	r5, #0
 8004aa0:	4607      	mov	r7, r0
 8004aa2:	db01      	blt.n	8004aa8 <_malloc_r+0x1c>
 8004aa4:	42a9      	cmp	r1, r5
 8004aa6:	d905      	bls.n	8004ab4 <_malloc_r+0x28>
 8004aa8:	230c      	movs	r3, #12
 8004aaa:	2600      	movs	r6, #0
 8004aac:	603b      	str	r3, [r7, #0]
 8004aae:	4630      	mov	r0, r6
 8004ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ab4:	4e2e      	ldr	r6, [pc, #184]	; (8004b70 <_malloc_r+0xe4>)
 8004ab6:	f000 f8d1 	bl	8004c5c <__malloc_lock>
 8004aba:	6833      	ldr	r3, [r6, #0]
 8004abc:	461c      	mov	r4, r3
 8004abe:	bb34      	cbnz	r4, 8004b0e <_malloc_r+0x82>
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	4638      	mov	r0, r7
 8004ac4:	f7ff ffc2 	bl	8004a4c <sbrk_aligned>
 8004ac8:	1c43      	adds	r3, r0, #1
 8004aca:	4604      	mov	r4, r0
 8004acc:	d14d      	bne.n	8004b6a <_malloc_r+0xde>
 8004ace:	6834      	ldr	r4, [r6, #0]
 8004ad0:	4626      	mov	r6, r4
 8004ad2:	2e00      	cmp	r6, #0
 8004ad4:	d140      	bne.n	8004b58 <_malloc_r+0xcc>
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	4631      	mov	r1, r6
 8004ada:	4638      	mov	r0, r7
 8004adc:	eb04 0803 	add.w	r8, r4, r3
 8004ae0:	f000 f848 	bl	8004b74 <_sbrk_r>
 8004ae4:	4580      	cmp	r8, r0
 8004ae6:	d13a      	bne.n	8004b5e <_malloc_r+0xd2>
 8004ae8:	6821      	ldr	r1, [r4, #0]
 8004aea:	3503      	adds	r5, #3
 8004aec:	1a6d      	subs	r5, r5, r1
 8004aee:	f025 0503 	bic.w	r5, r5, #3
 8004af2:	3508      	adds	r5, #8
 8004af4:	2d0c      	cmp	r5, #12
 8004af6:	bf38      	it	cc
 8004af8:	250c      	movcc	r5, #12
 8004afa:	4638      	mov	r0, r7
 8004afc:	4629      	mov	r1, r5
 8004afe:	f7ff ffa5 	bl	8004a4c <sbrk_aligned>
 8004b02:	3001      	adds	r0, #1
 8004b04:	d02b      	beq.n	8004b5e <_malloc_r+0xd2>
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	442b      	add	r3, r5
 8004b0a:	6023      	str	r3, [r4, #0]
 8004b0c:	e00e      	b.n	8004b2c <_malloc_r+0xa0>
 8004b0e:	6822      	ldr	r2, [r4, #0]
 8004b10:	1b52      	subs	r2, r2, r5
 8004b12:	d41e      	bmi.n	8004b52 <_malloc_r+0xc6>
 8004b14:	2a0b      	cmp	r2, #11
 8004b16:	d916      	bls.n	8004b46 <_malloc_r+0xba>
 8004b18:	1961      	adds	r1, r4, r5
 8004b1a:	42a3      	cmp	r3, r4
 8004b1c:	6025      	str	r5, [r4, #0]
 8004b1e:	bf18      	it	ne
 8004b20:	6059      	strne	r1, [r3, #4]
 8004b22:	6863      	ldr	r3, [r4, #4]
 8004b24:	bf08      	it	eq
 8004b26:	6031      	streq	r1, [r6, #0]
 8004b28:	5162      	str	r2, [r4, r5]
 8004b2a:	604b      	str	r3, [r1, #4]
 8004b2c:	4638      	mov	r0, r7
 8004b2e:	f104 060b 	add.w	r6, r4, #11
 8004b32:	f000 f899 	bl	8004c68 <__malloc_unlock>
 8004b36:	f026 0607 	bic.w	r6, r6, #7
 8004b3a:	1d23      	adds	r3, r4, #4
 8004b3c:	1af2      	subs	r2, r6, r3
 8004b3e:	d0b6      	beq.n	8004aae <_malloc_r+0x22>
 8004b40:	1b9b      	subs	r3, r3, r6
 8004b42:	50a3      	str	r3, [r4, r2]
 8004b44:	e7b3      	b.n	8004aae <_malloc_r+0x22>
 8004b46:	6862      	ldr	r2, [r4, #4]
 8004b48:	42a3      	cmp	r3, r4
 8004b4a:	bf0c      	ite	eq
 8004b4c:	6032      	streq	r2, [r6, #0]
 8004b4e:	605a      	strne	r2, [r3, #4]
 8004b50:	e7ec      	b.n	8004b2c <_malloc_r+0xa0>
 8004b52:	4623      	mov	r3, r4
 8004b54:	6864      	ldr	r4, [r4, #4]
 8004b56:	e7b2      	b.n	8004abe <_malloc_r+0x32>
 8004b58:	4634      	mov	r4, r6
 8004b5a:	6876      	ldr	r6, [r6, #4]
 8004b5c:	e7b9      	b.n	8004ad2 <_malloc_r+0x46>
 8004b5e:	230c      	movs	r3, #12
 8004b60:	4638      	mov	r0, r7
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	f000 f880 	bl	8004c68 <__malloc_unlock>
 8004b68:	e7a1      	b.n	8004aae <_malloc_r+0x22>
 8004b6a:	6025      	str	r5, [r4, #0]
 8004b6c:	e7de      	b.n	8004b2c <_malloc_r+0xa0>
 8004b6e:	bf00      	nop
 8004b70:	20000314 	.word	0x20000314

08004b74 <_sbrk_r>:
 8004b74:	b538      	push	{r3, r4, r5, lr}
 8004b76:	2300      	movs	r3, #0
 8004b78:	4d05      	ldr	r5, [pc, #20]	; (8004b90 <_sbrk_r+0x1c>)
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	4608      	mov	r0, r1
 8004b7e:	602b      	str	r3, [r5, #0]
 8004b80:	f7fc fa70 	bl	8001064 <_sbrk>
 8004b84:	1c43      	adds	r3, r0, #1
 8004b86:	d102      	bne.n	8004b8e <_sbrk_r+0x1a>
 8004b88:	682b      	ldr	r3, [r5, #0]
 8004b8a:	b103      	cbz	r3, 8004b8e <_sbrk_r+0x1a>
 8004b8c:	6023      	str	r3, [r4, #0]
 8004b8e:	bd38      	pop	{r3, r4, r5, pc}
 8004b90:	2000031c 	.word	0x2000031c

08004b94 <_raise_r>:
 8004b94:	291f      	cmp	r1, #31
 8004b96:	b538      	push	{r3, r4, r5, lr}
 8004b98:	4604      	mov	r4, r0
 8004b9a:	460d      	mov	r5, r1
 8004b9c:	d904      	bls.n	8004ba8 <_raise_r+0x14>
 8004b9e:	2316      	movs	r3, #22
 8004ba0:	6003      	str	r3, [r0, #0]
 8004ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba6:	bd38      	pop	{r3, r4, r5, pc}
 8004ba8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004baa:	b112      	cbz	r2, 8004bb2 <_raise_r+0x1e>
 8004bac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004bb0:	b94b      	cbnz	r3, 8004bc6 <_raise_r+0x32>
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	f000 f830 	bl	8004c18 <_getpid_r>
 8004bb8:	462a      	mov	r2, r5
 8004bba:	4601      	mov	r1, r0
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bc2:	f000 b817 	b.w	8004bf4 <_kill_r>
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d00a      	beq.n	8004be0 <_raise_r+0x4c>
 8004bca:	1c59      	adds	r1, r3, #1
 8004bcc:	d103      	bne.n	8004bd6 <_raise_r+0x42>
 8004bce:	2316      	movs	r3, #22
 8004bd0:	6003      	str	r3, [r0, #0]
 8004bd2:	2001      	movs	r0, #1
 8004bd4:	e7e7      	b.n	8004ba6 <_raise_r+0x12>
 8004bd6:	2400      	movs	r4, #0
 8004bd8:	4628      	mov	r0, r5
 8004bda:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004bde:	4798      	blx	r3
 8004be0:	2000      	movs	r0, #0
 8004be2:	e7e0      	b.n	8004ba6 <_raise_r+0x12>

08004be4 <raise>:
 8004be4:	4b02      	ldr	r3, [pc, #8]	; (8004bf0 <raise+0xc>)
 8004be6:	4601      	mov	r1, r0
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	f7ff bfd3 	b.w	8004b94 <_raise_r>
 8004bee:	bf00      	nop
 8004bf0:	2000000c 	.word	0x2000000c

08004bf4 <_kill_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	4d06      	ldr	r5, [pc, #24]	; (8004c14 <_kill_r+0x20>)
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	4608      	mov	r0, r1
 8004bfe:	4611      	mov	r1, r2
 8004c00:	602b      	str	r3, [r5, #0]
 8004c02:	f7fc fa14 	bl	800102e <_kill>
 8004c06:	1c43      	adds	r3, r0, #1
 8004c08:	d102      	bne.n	8004c10 <_kill_r+0x1c>
 8004c0a:	682b      	ldr	r3, [r5, #0]
 8004c0c:	b103      	cbz	r3, 8004c10 <_kill_r+0x1c>
 8004c0e:	6023      	str	r3, [r4, #0]
 8004c10:	bd38      	pop	{r3, r4, r5, pc}
 8004c12:	bf00      	nop
 8004c14:	2000031c 	.word	0x2000031c

08004c18 <_getpid_r>:
 8004c18:	f7fc ba02 	b.w	8001020 <_getpid>

08004c1c <siprintf>:
 8004c1c:	b40e      	push	{r1, r2, r3}
 8004c1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c22:	b500      	push	{lr}
 8004c24:	b09c      	sub	sp, #112	; 0x70
 8004c26:	ab1d      	add	r3, sp, #116	; 0x74
 8004c28:	9002      	str	r0, [sp, #8]
 8004c2a:	9006      	str	r0, [sp, #24]
 8004c2c:	9107      	str	r1, [sp, #28]
 8004c2e:	9104      	str	r1, [sp, #16]
 8004c30:	4808      	ldr	r0, [pc, #32]	; (8004c54 <siprintf+0x38>)
 8004c32:	4909      	ldr	r1, [pc, #36]	; (8004c58 <siprintf+0x3c>)
 8004c34:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c38:	9105      	str	r1, [sp, #20]
 8004c3a:	6800      	ldr	r0, [r0, #0]
 8004c3c:	a902      	add	r1, sp, #8
 8004c3e:	9301      	str	r3, [sp, #4]
 8004c40:	f000 f874 	bl	8004d2c <_svfiprintf_r>
 8004c44:	2200      	movs	r2, #0
 8004c46:	9b02      	ldr	r3, [sp, #8]
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	b01c      	add	sp, #112	; 0x70
 8004c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c50:	b003      	add	sp, #12
 8004c52:	4770      	bx	lr
 8004c54:	2000000c 	.word	0x2000000c
 8004c58:	ffff0208 	.word	0xffff0208

08004c5c <__malloc_lock>:
 8004c5c:	4801      	ldr	r0, [pc, #4]	; (8004c64 <__malloc_lock+0x8>)
 8004c5e:	f000 bafb 	b.w	8005258 <__retarget_lock_acquire_recursive>
 8004c62:	bf00      	nop
 8004c64:	20000320 	.word	0x20000320

08004c68 <__malloc_unlock>:
 8004c68:	4801      	ldr	r0, [pc, #4]	; (8004c70 <__malloc_unlock+0x8>)
 8004c6a:	f000 baf6 	b.w	800525a <__retarget_lock_release_recursive>
 8004c6e:	bf00      	nop
 8004c70:	20000320 	.word	0x20000320

08004c74 <__ssputs_r>:
 8004c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c78:	688e      	ldr	r6, [r1, #8]
 8004c7a:	4682      	mov	sl, r0
 8004c7c:	429e      	cmp	r6, r3
 8004c7e:	460c      	mov	r4, r1
 8004c80:	4690      	mov	r8, r2
 8004c82:	461f      	mov	r7, r3
 8004c84:	d838      	bhi.n	8004cf8 <__ssputs_r+0x84>
 8004c86:	898a      	ldrh	r2, [r1, #12]
 8004c88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c8c:	d032      	beq.n	8004cf4 <__ssputs_r+0x80>
 8004c8e:	6825      	ldr	r5, [r4, #0]
 8004c90:	6909      	ldr	r1, [r1, #16]
 8004c92:	3301      	adds	r3, #1
 8004c94:	eba5 0901 	sub.w	r9, r5, r1
 8004c98:	6965      	ldr	r5, [r4, #20]
 8004c9a:	444b      	add	r3, r9
 8004c9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ca0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ca4:	106d      	asrs	r5, r5, #1
 8004ca6:	429d      	cmp	r5, r3
 8004ca8:	bf38      	it	cc
 8004caa:	461d      	movcc	r5, r3
 8004cac:	0553      	lsls	r3, r2, #21
 8004cae:	d531      	bpl.n	8004d14 <__ssputs_r+0xa0>
 8004cb0:	4629      	mov	r1, r5
 8004cb2:	f7ff feeb 	bl	8004a8c <_malloc_r>
 8004cb6:	4606      	mov	r6, r0
 8004cb8:	b950      	cbnz	r0, 8004cd0 <__ssputs_r+0x5c>
 8004cba:	230c      	movs	r3, #12
 8004cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc0:	f8ca 3000 	str.w	r3, [sl]
 8004cc4:	89a3      	ldrh	r3, [r4, #12]
 8004cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cca:	81a3      	strh	r3, [r4, #12]
 8004ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd0:	464a      	mov	r2, r9
 8004cd2:	6921      	ldr	r1, [r4, #16]
 8004cd4:	f7ff fe5c 	bl	8004990 <memcpy>
 8004cd8:	89a3      	ldrh	r3, [r4, #12]
 8004cda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce2:	81a3      	strh	r3, [r4, #12]
 8004ce4:	6126      	str	r6, [r4, #16]
 8004ce6:	444e      	add	r6, r9
 8004ce8:	6026      	str	r6, [r4, #0]
 8004cea:	463e      	mov	r6, r7
 8004cec:	6165      	str	r5, [r4, #20]
 8004cee:	eba5 0509 	sub.w	r5, r5, r9
 8004cf2:	60a5      	str	r5, [r4, #8]
 8004cf4:	42be      	cmp	r6, r7
 8004cf6:	d900      	bls.n	8004cfa <__ssputs_r+0x86>
 8004cf8:	463e      	mov	r6, r7
 8004cfa:	4632      	mov	r2, r6
 8004cfc:	4641      	mov	r1, r8
 8004cfe:	6820      	ldr	r0, [r4, #0]
 8004d00:	f000 faba 	bl	8005278 <memmove>
 8004d04:	68a3      	ldr	r3, [r4, #8]
 8004d06:	2000      	movs	r0, #0
 8004d08:	1b9b      	subs	r3, r3, r6
 8004d0a:	60a3      	str	r3, [r4, #8]
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	4433      	add	r3, r6
 8004d10:	6023      	str	r3, [r4, #0]
 8004d12:	e7db      	b.n	8004ccc <__ssputs_r+0x58>
 8004d14:	462a      	mov	r2, r5
 8004d16:	f000 fac9 	bl	80052ac <_realloc_r>
 8004d1a:	4606      	mov	r6, r0
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	d1e1      	bne.n	8004ce4 <__ssputs_r+0x70>
 8004d20:	4650      	mov	r0, sl
 8004d22:	6921      	ldr	r1, [r4, #16]
 8004d24:	f7ff fe4a 	bl	80049bc <_free_r>
 8004d28:	e7c7      	b.n	8004cba <__ssputs_r+0x46>
	...

08004d2c <_svfiprintf_r>:
 8004d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d30:	4698      	mov	r8, r3
 8004d32:	898b      	ldrh	r3, [r1, #12]
 8004d34:	4607      	mov	r7, r0
 8004d36:	061b      	lsls	r3, r3, #24
 8004d38:	460d      	mov	r5, r1
 8004d3a:	4614      	mov	r4, r2
 8004d3c:	b09d      	sub	sp, #116	; 0x74
 8004d3e:	d50e      	bpl.n	8004d5e <_svfiprintf_r+0x32>
 8004d40:	690b      	ldr	r3, [r1, #16]
 8004d42:	b963      	cbnz	r3, 8004d5e <_svfiprintf_r+0x32>
 8004d44:	2140      	movs	r1, #64	; 0x40
 8004d46:	f7ff fea1 	bl	8004a8c <_malloc_r>
 8004d4a:	6028      	str	r0, [r5, #0]
 8004d4c:	6128      	str	r0, [r5, #16]
 8004d4e:	b920      	cbnz	r0, 8004d5a <_svfiprintf_r+0x2e>
 8004d50:	230c      	movs	r3, #12
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	f04f 30ff 	mov.w	r0, #4294967295
 8004d58:	e0d1      	b.n	8004efe <_svfiprintf_r+0x1d2>
 8004d5a:	2340      	movs	r3, #64	; 0x40
 8004d5c:	616b      	str	r3, [r5, #20]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	9309      	str	r3, [sp, #36]	; 0x24
 8004d62:	2320      	movs	r3, #32
 8004d64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d68:	2330      	movs	r3, #48	; 0x30
 8004d6a:	f04f 0901 	mov.w	r9, #1
 8004d6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004f18 <_svfiprintf_r+0x1ec>
 8004d76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d7a:	4623      	mov	r3, r4
 8004d7c:	469a      	mov	sl, r3
 8004d7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d82:	b10a      	cbz	r2, 8004d88 <_svfiprintf_r+0x5c>
 8004d84:	2a25      	cmp	r2, #37	; 0x25
 8004d86:	d1f9      	bne.n	8004d7c <_svfiprintf_r+0x50>
 8004d88:	ebba 0b04 	subs.w	fp, sl, r4
 8004d8c:	d00b      	beq.n	8004da6 <_svfiprintf_r+0x7a>
 8004d8e:	465b      	mov	r3, fp
 8004d90:	4622      	mov	r2, r4
 8004d92:	4629      	mov	r1, r5
 8004d94:	4638      	mov	r0, r7
 8004d96:	f7ff ff6d 	bl	8004c74 <__ssputs_r>
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	f000 80aa 	beq.w	8004ef4 <_svfiprintf_r+0x1c8>
 8004da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004da2:	445a      	add	r2, fp
 8004da4:	9209      	str	r2, [sp, #36]	; 0x24
 8004da6:	f89a 3000 	ldrb.w	r3, [sl]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 80a2 	beq.w	8004ef4 <_svfiprintf_r+0x1c8>
 8004db0:	2300      	movs	r3, #0
 8004db2:	f04f 32ff 	mov.w	r2, #4294967295
 8004db6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dba:	f10a 0a01 	add.w	sl, sl, #1
 8004dbe:	9304      	str	r3, [sp, #16]
 8004dc0:	9307      	str	r3, [sp, #28]
 8004dc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004dc6:	931a      	str	r3, [sp, #104]	; 0x68
 8004dc8:	4654      	mov	r4, sl
 8004dca:	2205      	movs	r2, #5
 8004dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dd0:	4851      	ldr	r0, [pc, #324]	; (8004f18 <_svfiprintf_r+0x1ec>)
 8004dd2:	f000 fa43 	bl	800525c <memchr>
 8004dd6:	9a04      	ldr	r2, [sp, #16]
 8004dd8:	b9d8      	cbnz	r0, 8004e12 <_svfiprintf_r+0xe6>
 8004dda:	06d0      	lsls	r0, r2, #27
 8004ddc:	bf44      	itt	mi
 8004dde:	2320      	movmi	r3, #32
 8004de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004de4:	0711      	lsls	r1, r2, #28
 8004de6:	bf44      	itt	mi
 8004de8:	232b      	movmi	r3, #43	; 0x2b
 8004dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dee:	f89a 3000 	ldrb.w	r3, [sl]
 8004df2:	2b2a      	cmp	r3, #42	; 0x2a
 8004df4:	d015      	beq.n	8004e22 <_svfiprintf_r+0xf6>
 8004df6:	4654      	mov	r4, sl
 8004df8:	2000      	movs	r0, #0
 8004dfa:	f04f 0c0a 	mov.w	ip, #10
 8004dfe:	9a07      	ldr	r2, [sp, #28]
 8004e00:	4621      	mov	r1, r4
 8004e02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e06:	3b30      	subs	r3, #48	; 0x30
 8004e08:	2b09      	cmp	r3, #9
 8004e0a:	d94e      	bls.n	8004eaa <_svfiprintf_r+0x17e>
 8004e0c:	b1b0      	cbz	r0, 8004e3c <_svfiprintf_r+0x110>
 8004e0e:	9207      	str	r2, [sp, #28]
 8004e10:	e014      	b.n	8004e3c <_svfiprintf_r+0x110>
 8004e12:	eba0 0308 	sub.w	r3, r0, r8
 8004e16:	fa09 f303 	lsl.w	r3, r9, r3
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	46a2      	mov	sl, r4
 8004e1e:	9304      	str	r3, [sp, #16]
 8004e20:	e7d2      	b.n	8004dc8 <_svfiprintf_r+0x9c>
 8004e22:	9b03      	ldr	r3, [sp, #12]
 8004e24:	1d19      	adds	r1, r3, #4
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	9103      	str	r1, [sp, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	bfbb      	ittet	lt
 8004e2e:	425b      	neglt	r3, r3
 8004e30:	f042 0202 	orrlt.w	r2, r2, #2
 8004e34:	9307      	strge	r3, [sp, #28]
 8004e36:	9307      	strlt	r3, [sp, #28]
 8004e38:	bfb8      	it	lt
 8004e3a:	9204      	strlt	r2, [sp, #16]
 8004e3c:	7823      	ldrb	r3, [r4, #0]
 8004e3e:	2b2e      	cmp	r3, #46	; 0x2e
 8004e40:	d10c      	bne.n	8004e5c <_svfiprintf_r+0x130>
 8004e42:	7863      	ldrb	r3, [r4, #1]
 8004e44:	2b2a      	cmp	r3, #42	; 0x2a
 8004e46:	d135      	bne.n	8004eb4 <_svfiprintf_r+0x188>
 8004e48:	9b03      	ldr	r3, [sp, #12]
 8004e4a:	3402      	adds	r4, #2
 8004e4c:	1d1a      	adds	r2, r3, #4
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	9203      	str	r2, [sp, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	bfb8      	it	lt
 8004e56:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e5a:	9305      	str	r3, [sp, #20]
 8004e5c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004f1c <_svfiprintf_r+0x1f0>
 8004e60:	2203      	movs	r2, #3
 8004e62:	4650      	mov	r0, sl
 8004e64:	7821      	ldrb	r1, [r4, #0]
 8004e66:	f000 f9f9 	bl	800525c <memchr>
 8004e6a:	b140      	cbz	r0, 8004e7e <_svfiprintf_r+0x152>
 8004e6c:	2340      	movs	r3, #64	; 0x40
 8004e6e:	eba0 000a 	sub.w	r0, r0, sl
 8004e72:	fa03 f000 	lsl.w	r0, r3, r0
 8004e76:	9b04      	ldr	r3, [sp, #16]
 8004e78:	3401      	adds	r4, #1
 8004e7a:	4303      	orrs	r3, r0
 8004e7c:	9304      	str	r3, [sp, #16]
 8004e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e82:	2206      	movs	r2, #6
 8004e84:	4826      	ldr	r0, [pc, #152]	; (8004f20 <_svfiprintf_r+0x1f4>)
 8004e86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e8a:	f000 f9e7 	bl	800525c <memchr>
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	d038      	beq.n	8004f04 <_svfiprintf_r+0x1d8>
 8004e92:	4b24      	ldr	r3, [pc, #144]	; (8004f24 <_svfiprintf_r+0x1f8>)
 8004e94:	bb1b      	cbnz	r3, 8004ede <_svfiprintf_r+0x1b2>
 8004e96:	9b03      	ldr	r3, [sp, #12]
 8004e98:	3307      	adds	r3, #7
 8004e9a:	f023 0307 	bic.w	r3, r3, #7
 8004e9e:	3308      	adds	r3, #8
 8004ea0:	9303      	str	r3, [sp, #12]
 8004ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea4:	4433      	add	r3, r6
 8004ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ea8:	e767      	b.n	8004d7a <_svfiprintf_r+0x4e>
 8004eaa:	460c      	mov	r4, r1
 8004eac:	2001      	movs	r0, #1
 8004eae:	fb0c 3202 	mla	r2, ip, r2, r3
 8004eb2:	e7a5      	b.n	8004e00 <_svfiprintf_r+0xd4>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f04f 0c0a 	mov.w	ip, #10
 8004eba:	4619      	mov	r1, r3
 8004ebc:	3401      	adds	r4, #1
 8004ebe:	9305      	str	r3, [sp, #20]
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ec6:	3a30      	subs	r2, #48	; 0x30
 8004ec8:	2a09      	cmp	r2, #9
 8004eca:	d903      	bls.n	8004ed4 <_svfiprintf_r+0x1a8>
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0c5      	beq.n	8004e5c <_svfiprintf_r+0x130>
 8004ed0:	9105      	str	r1, [sp, #20]
 8004ed2:	e7c3      	b.n	8004e5c <_svfiprintf_r+0x130>
 8004ed4:	4604      	mov	r4, r0
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004edc:	e7f0      	b.n	8004ec0 <_svfiprintf_r+0x194>
 8004ede:	ab03      	add	r3, sp, #12
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	462a      	mov	r2, r5
 8004ee4:	4638      	mov	r0, r7
 8004ee6:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <_svfiprintf_r+0x1fc>)
 8004ee8:	a904      	add	r1, sp, #16
 8004eea:	f3af 8000 	nop.w
 8004eee:	1c42      	adds	r2, r0, #1
 8004ef0:	4606      	mov	r6, r0
 8004ef2:	d1d6      	bne.n	8004ea2 <_svfiprintf_r+0x176>
 8004ef4:	89ab      	ldrh	r3, [r5, #12]
 8004ef6:	065b      	lsls	r3, r3, #25
 8004ef8:	f53f af2c 	bmi.w	8004d54 <_svfiprintf_r+0x28>
 8004efc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004efe:	b01d      	add	sp, #116	; 0x74
 8004f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f04:	ab03      	add	r3, sp, #12
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	462a      	mov	r2, r5
 8004f0a:	4638      	mov	r0, r7
 8004f0c:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <_svfiprintf_r+0x1fc>)
 8004f0e:	a904      	add	r1, sp, #16
 8004f10:	f000 f87c 	bl	800500c <_printf_i>
 8004f14:	e7eb      	b.n	8004eee <_svfiprintf_r+0x1c2>
 8004f16:	bf00      	nop
 8004f18:	080053e4 	.word	0x080053e4
 8004f1c:	080053ea 	.word	0x080053ea
 8004f20:	080053ee 	.word	0x080053ee
 8004f24:	00000000 	.word	0x00000000
 8004f28:	08004c75 	.word	0x08004c75

08004f2c <_printf_common>:
 8004f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f30:	4616      	mov	r6, r2
 8004f32:	4699      	mov	r9, r3
 8004f34:	688a      	ldr	r2, [r1, #8]
 8004f36:	690b      	ldr	r3, [r1, #16]
 8004f38:	4607      	mov	r7, r0
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	bfb8      	it	lt
 8004f3e:	4613      	movlt	r3, r2
 8004f40:	6033      	str	r3, [r6, #0]
 8004f42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f46:	460c      	mov	r4, r1
 8004f48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f4c:	b10a      	cbz	r2, 8004f52 <_printf_common+0x26>
 8004f4e:	3301      	adds	r3, #1
 8004f50:	6033      	str	r3, [r6, #0]
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	0699      	lsls	r1, r3, #26
 8004f56:	bf42      	ittt	mi
 8004f58:	6833      	ldrmi	r3, [r6, #0]
 8004f5a:	3302      	addmi	r3, #2
 8004f5c:	6033      	strmi	r3, [r6, #0]
 8004f5e:	6825      	ldr	r5, [r4, #0]
 8004f60:	f015 0506 	ands.w	r5, r5, #6
 8004f64:	d106      	bne.n	8004f74 <_printf_common+0x48>
 8004f66:	f104 0a19 	add.w	sl, r4, #25
 8004f6a:	68e3      	ldr	r3, [r4, #12]
 8004f6c:	6832      	ldr	r2, [r6, #0]
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	42ab      	cmp	r3, r5
 8004f72:	dc28      	bgt.n	8004fc6 <_printf_common+0x9a>
 8004f74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f78:	1e13      	subs	r3, r2, #0
 8004f7a:	6822      	ldr	r2, [r4, #0]
 8004f7c:	bf18      	it	ne
 8004f7e:	2301      	movne	r3, #1
 8004f80:	0692      	lsls	r2, r2, #26
 8004f82:	d42d      	bmi.n	8004fe0 <_printf_common+0xb4>
 8004f84:	4649      	mov	r1, r9
 8004f86:	4638      	mov	r0, r7
 8004f88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f8c:	47c0      	blx	r8
 8004f8e:	3001      	adds	r0, #1
 8004f90:	d020      	beq.n	8004fd4 <_printf_common+0xa8>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	68e5      	ldr	r5, [r4, #12]
 8004f96:	f003 0306 	and.w	r3, r3, #6
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	bf18      	it	ne
 8004f9e:	2500      	movne	r5, #0
 8004fa0:	6832      	ldr	r2, [r6, #0]
 8004fa2:	f04f 0600 	mov.w	r6, #0
 8004fa6:	68a3      	ldr	r3, [r4, #8]
 8004fa8:	bf08      	it	eq
 8004faa:	1aad      	subeq	r5, r5, r2
 8004fac:	6922      	ldr	r2, [r4, #16]
 8004fae:	bf08      	it	eq
 8004fb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	bfc4      	itt	gt
 8004fb8:	1a9b      	subgt	r3, r3, r2
 8004fba:	18ed      	addgt	r5, r5, r3
 8004fbc:	341a      	adds	r4, #26
 8004fbe:	42b5      	cmp	r5, r6
 8004fc0:	d11a      	bne.n	8004ff8 <_printf_common+0xcc>
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	e008      	b.n	8004fd8 <_printf_common+0xac>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	4652      	mov	r2, sl
 8004fca:	4649      	mov	r1, r9
 8004fcc:	4638      	mov	r0, r7
 8004fce:	47c0      	blx	r8
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	d103      	bne.n	8004fdc <_printf_common+0xb0>
 8004fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fdc:	3501      	adds	r5, #1
 8004fde:	e7c4      	b.n	8004f6a <_printf_common+0x3e>
 8004fe0:	2030      	movs	r0, #48	; 0x30
 8004fe2:	18e1      	adds	r1, r4, r3
 8004fe4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fee:	4422      	add	r2, r4
 8004ff0:	3302      	adds	r3, #2
 8004ff2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ff6:	e7c5      	b.n	8004f84 <_printf_common+0x58>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	4649      	mov	r1, r9
 8004ffe:	4638      	mov	r0, r7
 8005000:	47c0      	blx	r8
 8005002:	3001      	adds	r0, #1
 8005004:	d0e6      	beq.n	8004fd4 <_printf_common+0xa8>
 8005006:	3601      	adds	r6, #1
 8005008:	e7d9      	b.n	8004fbe <_printf_common+0x92>
	...

0800500c <_printf_i>:
 800500c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005010:	7e0f      	ldrb	r7, [r1, #24]
 8005012:	4691      	mov	r9, r2
 8005014:	2f78      	cmp	r7, #120	; 0x78
 8005016:	4680      	mov	r8, r0
 8005018:	460c      	mov	r4, r1
 800501a:	469a      	mov	sl, r3
 800501c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800501e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005022:	d807      	bhi.n	8005034 <_printf_i+0x28>
 8005024:	2f62      	cmp	r7, #98	; 0x62
 8005026:	d80a      	bhi.n	800503e <_printf_i+0x32>
 8005028:	2f00      	cmp	r7, #0
 800502a:	f000 80d9 	beq.w	80051e0 <_printf_i+0x1d4>
 800502e:	2f58      	cmp	r7, #88	; 0x58
 8005030:	f000 80a4 	beq.w	800517c <_printf_i+0x170>
 8005034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005038:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800503c:	e03a      	b.n	80050b4 <_printf_i+0xa8>
 800503e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005042:	2b15      	cmp	r3, #21
 8005044:	d8f6      	bhi.n	8005034 <_printf_i+0x28>
 8005046:	a101      	add	r1, pc, #4	; (adr r1, 800504c <_printf_i+0x40>)
 8005048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800504c:	080050a5 	.word	0x080050a5
 8005050:	080050b9 	.word	0x080050b9
 8005054:	08005035 	.word	0x08005035
 8005058:	08005035 	.word	0x08005035
 800505c:	08005035 	.word	0x08005035
 8005060:	08005035 	.word	0x08005035
 8005064:	080050b9 	.word	0x080050b9
 8005068:	08005035 	.word	0x08005035
 800506c:	08005035 	.word	0x08005035
 8005070:	08005035 	.word	0x08005035
 8005074:	08005035 	.word	0x08005035
 8005078:	080051c7 	.word	0x080051c7
 800507c:	080050e9 	.word	0x080050e9
 8005080:	080051a9 	.word	0x080051a9
 8005084:	08005035 	.word	0x08005035
 8005088:	08005035 	.word	0x08005035
 800508c:	080051e9 	.word	0x080051e9
 8005090:	08005035 	.word	0x08005035
 8005094:	080050e9 	.word	0x080050e9
 8005098:	08005035 	.word	0x08005035
 800509c:	08005035 	.word	0x08005035
 80050a0:	080051b1 	.word	0x080051b1
 80050a4:	682b      	ldr	r3, [r5, #0]
 80050a6:	1d1a      	adds	r2, r3, #4
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	602a      	str	r2, [r5, #0]
 80050ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050b4:	2301      	movs	r3, #1
 80050b6:	e0a4      	b.n	8005202 <_printf_i+0x1f6>
 80050b8:	6820      	ldr	r0, [r4, #0]
 80050ba:	6829      	ldr	r1, [r5, #0]
 80050bc:	0606      	lsls	r6, r0, #24
 80050be:	f101 0304 	add.w	r3, r1, #4
 80050c2:	d50a      	bpl.n	80050da <_printf_i+0xce>
 80050c4:	680e      	ldr	r6, [r1, #0]
 80050c6:	602b      	str	r3, [r5, #0]
 80050c8:	2e00      	cmp	r6, #0
 80050ca:	da03      	bge.n	80050d4 <_printf_i+0xc8>
 80050cc:	232d      	movs	r3, #45	; 0x2d
 80050ce:	4276      	negs	r6, r6
 80050d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050d4:	230a      	movs	r3, #10
 80050d6:	485e      	ldr	r0, [pc, #376]	; (8005250 <_printf_i+0x244>)
 80050d8:	e019      	b.n	800510e <_printf_i+0x102>
 80050da:	680e      	ldr	r6, [r1, #0]
 80050dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050e0:	602b      	str	r3, [r5, #0]
 80050e2:	bf18      	it	ne
 80050e4:	b236      	sxthne	r6, r6
 80050e6:	e7ef      	b.n	80050c8 <_printf_i+0xbc>
 80050e8:	682b      	ldr	r3, [r5, #0]
 80050ea:	6820      	ldr	r0, [r4, #0]
 80050ec:	1d19      	adds	r1, r3, #4
 80050ee:	6029      	str	r1, [r5, #0]
 80050f0:	0601      	lsls	r1, r0, #24
 80050f2:	d501      	bpl.n	80050f8 <_printf_i+0xec>
 80050f4:	681e      	ldr	r6, [r3, #0]
 80050f6:	e002      	b.n	80050fe <_printf_i+0xf2>
 80050f8:	0646      	lsls	r6, r0, #25
 80050fa:	d5fb      	bpl.n	80050f4 <_printf_i+0xe8>
 80050fc:	881e      	ldrh	r6, [r3, #0]
 80050fe:	2f6f      	cmp	r7, #111	; 0x6f
 8005100:	bf0c      	ite	eq
 8005102:	2308      	moveq	r3, #8
 8005104:	230a      	movne	r3, #10
 8005106:	4852      	ldr	r0, [pc, #328]	; (8005250 <_printf_i+0x244>)
 8005108:	2100      	movs	r1, #0
 800510a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800510e:	6865      	ldr	r5, [r4, #4]
 8005110:	2d00      	cmp	r5, #0
 8005112:	bfa8      	it	ge
 8005114:	6821      	ldrge	r1, [r4, #0]
 8005116:	60a5      	str	r5, [r4, #8]
 8005118:	bfa4      	itt	ge
 800511a:	f021 0104 	bicge.w	r1, r1, #4
 800511e:	6021      	strge	r1, [r4, #0]
 8005120:	b90e      	cbnz	r6, 8005126 <_printf_i+0x11a>
 8005122:	2d00      	cmp	r5, #0
 8005124:	d04d      	beq.n	80051c2 <_printf_i+0x1b6>
 8005126:	4615      	mov	r5, r2
 8005128:	fbb6 f1f3 	udiv	r1, r6, r3
 800512c:	fb03 6711 	mls	r7, r3, r1, r6
 8005130:	5dc7      	ldrb	r7, [r0, r7]
 8005132:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005136:	4637      	mov	r7, r6
 8005138:	42bb      	cmp	r3, r7
 800513a:	460e      	mov	r6, r1
 800513c:	d9f4      	bls.n	8005128 <_printf_i+0x11c>
 800513e:	2b08      	cmp	r3, #8
 8005140:	d10b      	bne.n	800515a <_printf_i+0x14e>
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	07de      	lsls	r6, r3, #31
 8005146:	d508      	bpl.n	800515a <_printf_i+0x14e>
 8005148:	6923      	ldr	r3, [r4, #16]
 800514a:	6861      	ldr	r1, [r4, #4]
 800514c:	4299      	cmp	r1, r3
 800514e:	bfde      	ittt	le
 8005150:	2330      	movle	r3, #48	; 0x30
 8005152:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005156:	f105 35ff 	addle.w	r5, r5, #4294967295
 800515a:	1b52      	subs	r2, r2, r5
 800515c:	6122      	str	r2, [r4, #16]
 800515e:	464b      	mov	r3, r9
 8005160:	4621      	mov	r1, r4
 8005162:	4640      	mov	r0, r8
 8005164:	f8cd a000 	str.w	sl, [sp]
 8005168:	aa03      	add	r2, sp, #12
 800516a:	f7ff fedf 	bl	8004f2c <_printf_common>
 800516e:	3001      	adds	r0, #1
 8005170:	d14c      	bne.n	800520c <_printf_i+0x200>
 8005172:	f04f 30ff 	mov.w	r0, #4294967295
 8005176:	b004      	add	sp, #16
 8005178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800517c:	4834      	ldr	r0, [pc, #208]	; (8005250 <_printf_i+0x244>)
 800517e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005182:	6829      	ldr	r1, [r5, #0]
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	f851 6b04 	ldr.w	r6, [r1], #4
 800518a:	6029      	str	r1, [r5, #0]
 800518c:	061d      	lsls	r5, r3, #24
 800518e:	d514      	bpl.n	80051ba <_printf_i+0x1ae>
 8005190:	07df      	lsls	r7, r3, #31
 8005192:	bf44      	itt	mi
 8005194:	f043 0320 	orrmi.w	r3, r3, #32
 8005198:	6023      	strmi	r3, [r4, #0]
 800519a:	b91e      	cbnz	r6, 80051a4 <_printf_i+0x198>
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	f023 0320 	bic.w	r3, r3, #32
 80051a2:	6023      	str	r3, [r4, #0]
 80051a4:	2310      	movs	r3, #16
 80051a6:	e7af      	b.n	8005108 <_printf_i+0xfc>
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	f043 0320 	orr.w	r3, r3, #32
 80051ae:	6023      	str	r3, [r4, #0]
 80051b0:	2378      	movs	r3, #120	; 0x78
 80051b2:	4828      	ldr	r0, [pc, #160]	; (8005254 <_printf_i+0x248>)
 80051b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051b8:	e7e3      	b.n	8005182 <_printf_i+0x176>
 80051ba:	0659      	lsls	r1, r3, #25
 80051bc:	bf48      	it	mi
 80051be:	b2b6      	uxthmi	r6, r6
 80051c0:	e7e6      	b.n	8005190 <_printf_i+0x184>
 80051c2:	4615      	mov	r5, r2
 80051c4:	e7bb      	b.n	800513e <_printf_i+0x132>
 80051c6:	682b      	ldr	r3, [r5, #0]
 80051c8:	6826      	ldr	r6, [r4, #0]
 80051ca:	1d18      	adds	r0, r3, #4
 80051cc:	6961      	ldr	r1, [r4, #20]
 80051ce:	6028      	str	r0, [r5, #0]
 80051d0:	0635      	lsls	r5, r6, #24
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	d501      	bpl.n	80051da <_printf_i+0x1ce>
 80051d6:	6019      	str	r1, [r3, #0]
 80051d8:	e002      	b.n	80051e0 <_printf_i+0x1d4>
 80051da:	0670      	lsls	r0, r6, #25
 80051dc:	d5fb      	bpl.n	80051d6 <_printf_i+0x1ca>
 80051de:	8019      	strh	r1, [r3, #0]
 80051e0:	2300      	movs	r3, #0
 80051e2:	4615      	mov	r5, r2
 80051e4:	6123      	str	r3, [r4, #16]
 80051e6:	e7ba      	b.n	800515e <_printf_i+0x152>
 80051e8:	682b      	ldr	r3, [r5, #0]
 80051ea:	2100      	movs	r1, #0
 80051ec:	1d1a      	adds	r2, r3, #4
 80051ee:	602a      	str	r2, [r5, #0]
 80051f0:	681d      	ldr	r5, [r3, #0]
 80051f2:	6862      	ldr	r2, [r4, #4]
 80051f4:	4628      	mov	r0, r5
 80051f6:	f000 f831 	bl	800525c <memchr>
 80051fa:	b108      	cbz	r0, 8005200 <_printf_i+0x1f4>
 80051fc:	1b40      	subs	r0, r0, r5
 80051fe:	6060      	str	r0, [r4, #4]
 8005200:	6863      	ldr	r3, [r4, #4]
 8005202:	6123      	str	r3, [r4, #16]
 8005204:	2300      	movs	r3, #0
 8005206:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800520a:	e7a8      	b.n	800515e <_printf_i+0x152>
 800520c:	462a      	mov	r2, r5
 800520e:	4649      	mov	r1, r9
 8005210:	4640      	mov	r0, r8
 8005212:	6923      	ldr	r3, [r4, #16]
 8005214:	47d0      	blx	sl
 8005216:	3001      	adds	r0, #1
 8005218:	d0ab      	beq.n	8005172 <_printf_i+0x166>
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	079b      	lsls	r3, r3, #30
 800521e:	d413      	bmi.n	8005248 <_printf_i+0x23c>
 8005220:	68e0      	ldr	r0, [r4, #12]
 8005222:	9b03      	ldr	r3, [sp, #12]
 8005224:	4298      	cmp	r0, r3
 8005226:	bfb8      	it	lt
 8005228:	4618      	movlt	r0, r3
 800522a:	e7a4      	b.n	8005176 <_printf_i+0x16a>
 800522c:	2301      	movs	r3, #1
 800522e:	4632      	mov	r2, r6
 8005230:	4649      	mov	r1, r9
 8005232:	4640      	mov	r0, r8
 8005234:	47d0      	blx	sl
 8005236:	3001      	adds	r0, #1
 8005238:	d09b      	beq.n	8005172 <_printf_i+0x166>
 800523a:	3501      	adds	r5, #1
 800523c:	68e3      	ldr	r3, [r4, #12]
 800523e:	9903      	ldr	r1, [sp, #12]
 8005240:	1a5b      	subs	r3, r3, r1
 8005242:	42ab      	cmp	r3, r5
 8005244:	dcf2      	bgt.n	800522c <_printf_i+0x220>
 8005246:	e7eb      	b.n	8005220 <_printf_i+0x214>
 8005248:	2500      	movs	r5, #0
 800524a:	f104 0619 	add.w	r6, r4, #25
 800524e:	e7f5      	b.n	800523c <_printf_i+0x230>
 8005250:	080053f5 	.word	0x080053f5
 8005254:	08005406 	.word	0x08005406

08005258 <__retarget_lock_acquire_recursive>:
 8005258:	4770      	bx	lr

0800525a <__retarget_lock_release_recursive>:
 800525a:	4770      	bx	lr

0800525c <memchr>:
 800525c:	4603      	mov	r3, r0
 800525e:	b510      	push	{r4, lr}
 8005260:	b2c9      	uxtb	r1, r1
 8005262:	4402      	add	r2, r0
 8005264:	4293      	cmp	r3, r2
 8005266:	4618      	mov	r0, r3
 8005268:	d101      	bne.n	800526e <memchr+0x12>
 800526a:	2000      	movs	r0, #0
 800526c:	e003      	b.n	8005276 <memchr+0x1a>
 800526e:	7804      	ldrb	r4, [r0, #0]
 8005270:	3301      	adds	r3, #1
 8005272:	428c      	cmp	r4, r1
 8005274:	d1f6      	bne.n	8005264 <memchr+0x8>
 8005276:	bd10      	pop	{r4, pc}

08005278 <memmove>:
 8005278:	4288      	cmp	r0, r1
 800527a:	b510      	push	{r4, lr}
 800527c:	eb01 0402 	add.w	r4, r1, r2
 8005280:	d902      	bls.n	8005288 <memmove+0x10>
 8005282:	4284      	cmp	r4, r0
 8005284:	4623      	mov	r3, r4
 8005286:	d807      	bhi.n	8005298 <memmove+0x20>
 8005288:	1e43      	subs	r3, r0, #1
 800528a:	42a1      	cmp	r1, r4
 800528c:	d008      	beq.n	80052a0 <memmove+0x28>
 800528e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005292:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005296:	e7f8      	b.n	800528a <memmove+0x12>
 8005298:	4601      	mov	r1, r0
 800529a:	4402      	add	r2, r0
 800529c:	428a      	cmp	r2, r1
 800529e:	d100      	bne.n	80052a2 <memmove+0x2a>
 80052a0:	bd10      	pop	{r4, pc}
 80052a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052aa:	e7f7      	b.n	800529c <memmove+0x24>

080052ac <_realloc_r>:
 80052ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052b0:	4680      	mov	r8, r0
 80052b2:	4614      	mov	r4, r2
 80052b4:	460e      	mov	r6, r1
 80052b6:	b921      	cbnz	r1, 80052c2 <_realloc_r+0x16>
 80052b8:	4611      	mov	r1, r2
 80052ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052be:	f7ff bbe5 	b.w	8004a8c <_malloc_r>
 80052c2:	b92a      	cbnz	r2, 80052d0 <_realloc_r+0x24>
 80052c4:	f7ff fb7a 	bl	80049bc <_free_r>
 80052c8:	4625      	mov	r5, r4
 80052ca:	4628      	mov	r0, r5
 80052cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052d0:	f000 f81b 	bl	800530a <_malloc_usable_size_r>
 80052d4:	4284      	cmp	r4, r0
 80052d6:	4607      	mov	r7, r0
 80052d8:	d802      	bhi.n	80052e0 <_realloc_r+0x34>
 80052da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80052de:	d812      	bhi.n	8005306 <_realloc_r+0x5a>
 80052e0:	4621      	mov	r1, r4
 80052e2:	4640      	mov	r0, r8
 80052e4:	f7ff fbd2 	bl	8004a8c <_malloc_r>
 80052e8:	4605      	mov	r5, r0
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d0ed      	beq.n	80052ca <_realloc_r+0x1e>
 80052ee:	42bc      	cmp	r4, r7
 80052f0:	4622      	mov	r2, r4
 80052f2:	4631      	mov	r1, r6
 80052f4:	bf28      	it	cs
 80052f6:	463a      	movcs	r2, r7
 80052f8:	f7ff fb4a 	bl	8004990 <memcpy>
 80052fc:	4631      	mov	r1, r6
 80052fe:	4640      	mov	r0, r8
 8005300:	f7ff fb5c 	bl	80049bc <_free_r>
 8005304:	e7e1      	b.n	80052ca <_realloc_r+0x1e>
 8005306:	4635      	mov	r5, r6
 8005308:	e7df      	b.n	80052ca <_realloc_r+0x1e>

0800530a <_malloc_usable_size_r>:
 800530a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800530e:	1f18      	subs	r0, r3, #4
 8005310:	2b00      	cmp	r3, #0
 8005312:	bfbc      	itt	lt
 8005314:	580b      	ldrlt	r3, [r1, r0]
 8005316:	18c0      	addlt	r0, r0, r3
 8005318:	4770      	bx	lr
	...

0800531c <_init>:
 800531c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531e:	bf00      	nop
 8005320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005322:	bc08      	pop	{r3}
 8005324:	469e      	mov	lr, r3
 8005326:	4770      	bx	lr

08005328 <_fini>:
 8005328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532a:	bf00      	nop
 800532c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532e:	bc08      	pop	{r3}
 8005330:	469e      	mov	lr, r3
 8005332:	4770      	bx	lr
